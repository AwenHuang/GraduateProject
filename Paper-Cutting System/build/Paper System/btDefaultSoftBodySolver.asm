; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\專題\自建專案\自建專案\src\BulletSoftBody\btDefaultSoftBodySolver.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_btNanMask DD	07f800001H
_btInfinityMask DD 07f800000H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody *>::btAlignedObjectArray<btSoftBody *>
PUBLIC	??_7btDefaultSoftBodySolver@@6B@		; btDefaultSoftBodySolver::`vftable'
PUBLIC	??0btSoftBodySolver@@QAE@XZ			; btSoftBodySolver::btSoftBodySolver
PUBLIC	??0btDefaultSoftBodySolver@@QAE@XZ		; btDefaultSoftBodySolver::btDefaultSoftBodySolver
PUBLIC	?getSolverType@btDefaultSoftBodySolver@@UBE?AW4SolverTypes@btSoftBodySolver@@XZ ; btDefaultSoftBodySolver::getSolverType
PUBLIC	?checkInitialized@btDefaultSoftBodySolver@@UAE_NXZ ; btDefaultSoftBodySolver::checkInitialized
PUBLIC	?optimize@btDefaultSoftBodySolver@@UAEXAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@_N@Z ; btDefaultSoftBodySolver::optimize
PUBLIC	?copyBackToSoftBodies@btDefaultSoftBodySolver@@UAEX_N@Z ; btDefaultSoftBodySolver::copyBackToSoftBodies
PUBLIC	?predictMotion@btDefaultSoftBodySolver@@UAEXM@Z	; btDefaultSoftBodySolver::predictMotion
PUBLIC	?solveConstraints@btDefaultSoftBodySolver@@UAEXM@Z ; btDefaultSoftBodySolver::solveConstraints
PUBLIC	?updateSoftBodies@btDefaultSoftBodySolver@@UAEXXZ ; btDefaultSoftBodySolver::updateSoftBodies
PUBLIC	?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@0@Z ; btDefaultSoftBodySolver::processCollision
PUBLIC	?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z ; btDefaultSoftBodySolver::processCollision
PUBLIC	?setNumberOfPositionIterations@btSoftBodySolver@@UAEXH@Z ; btSoftBodySolver::setNumberOfPositionIterations
PUBLIC	?getNumberOfPositionIterations@btSoftBodySolver@@UAEHXZ ; btSoftBodySolver::getNumberOfPositionIterations
PUBLIC	?setNumberOfVelocityIterations@btSoftBodySolver@@UAEXH@Z ; btSoftBodySolver::setNumberOfVelocityIterations
PUBLIC	?getNumberOfVelocityIterations@btSoftBodySolver@@UAEHXZ ; btSoftBodySolver::getNumberOfVelocityIterations
PUBLIC	?copySoftBodyToVertexBuffer@btDefaultSoftBodySolver@@UAEXQBVbtSoftBody@@PAVbtVertexBufferDescriptor@@@Z ; btDefaultSoftBodySolver::copySoftBodyToVertexBuffer
EXTRN	??_EbtDefaultSoftBodySolver@@UAEPAXI@Z:PROC	; btDefaultSoftBodySolver::`vector deleting destructor'
;	COMDAT ??_7btDefaultSoftBodySolver@@6B@
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btdefaultsoftbodysolver.cpp
CONST	SEGMENT
??_7btDefaultSoftBodySolver@@6B@ DD FLAT:??_EbtDefaultSoftBodySolver@@UAEPAXI@Z ; btDefaultSoftBodySolver::`vftable'
	DD	FLAT:?getSolverType@btDefaultSoftBodySolver@@UBE?AW4SolverTypes@btSoftBodySolver@@XZ
	DD	FLAT:?checkInitialized@btDefaultSoftBodySolver@@UAE_NXZ
	DD	FLAT:?optimize@btDefaultSoftBodySolver@@UAEXAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@_N@Z
	DD	FLAT:?copyBackToSoftBodies@btDefaultSoftBodySolver@@UAEX_N@Z
	DD	FLAT:?predictMotion@btDefaultSoftBodySolver@@UAEXM@Z
	DD	FLAT:?solveConstraints@btDefaultSoftBodySolver@@UAEXM@Z
	DD	FLAT:?updateSoftBodies@btDefaultSoftBodySolver@@UAEXXZ
	DD	FLAT:?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@0@Z
	DD	FLAT:?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z
	DD	FLAT:?setNumberOfPositionIterations@btSoftBodySolver@@UAEXH@Z
	DD	FLAT:?getNumberOfPositionIterations@btSoftBodySolver@@UAEHXZ
	DD	FLAT:?setNumberOfVelocityIterations@btSoftBodySolver@@UAEXH@Z
	DD	FLAT:?getNumberOfVelocityIterations@btSoftBodySolver@@UAEHXZ
	DD	FLAT:?copySoftBodyToVertexBuffer@btDefaultSoftBodySolver@@UAEXQBVbtSoftBody@@PAVbtVertexBufferDescriptor@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btDefaultSoftBodySolver@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btDefaultSoftBodySolver@@QAE@XZ PROC			; btDefaultSoftBodySolver::btDefaultSoftBodySolver, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btSoftBodySolver@@QAE@XZ		; btSoftBodySolver::btSoftBodySolver
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btDefaultSoftBodySolver@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody *>::btAlignedObjectArray<btSoftBody *>
; Line 30
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+16], 1
; Line 31
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btDefaultSoftBodySolver@@QAE@XZ ENDP			; btDefaultSoftBodySolver::btDefaultSoftBodySolver
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	??_7btSoftBodySolver@@6B@			; btSoftBodySolver::`vftable'
EXTRN	__fltused:DWORD
EXTRN	??_EbtSoftBodySolver@@UAEPAXI@Z:PROC		; btSoftBodySolver::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT __real@3f800000
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodysolvers.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_7btSoftBodySolver@@6B@
CONST	SEGMENT
??_7btSoftBodySolver@@6B@ DD FLAT:??_EbtSoftBodySolver@@UAEPAXI@Z ; btSoftBodySolver::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?setNumberOfPositionIterations@btSoftBodySolver@@UAEXH@Z
	DD	FLAT:?getNumberOfPositionIterations@btSoftBodySolver@@UAEHXZ
	DD	FLAT:?setNumberOfVelocityIterations@btSoftBodySolver@@UAEXH@Z
	DD	FLAT:?getNumberOfVelocityIterations@btSoftBodySolver@@UAEHXZ
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSoftBodySolver@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btSoftBodySolver@@QAE@XZ PROC			; btSoftBodySolver::btSoftBodySolver, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBodySolver@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 10			; 0000000aH
	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [edx+12]
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 56
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 5
; Line 57
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0btSoftBodySolver@@QAE@XZ ENDP			; btSoftBodySolver::btSoftBodySolver
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setNumberOfPositionIterations@btSoftBodySolver@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iterations$ = 8					; size = 4
?setNumberOfPositionIterations@btSoftBodySolver@@UAEXH@Z PROC ; btSoftBodySolver::setNumberOfPositionIterations, COMDAT
; _this$ = ecx
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iterations$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	4
?setNumberOfPositionIterations@btSoftBodySolver@@UAEXH@Z ENDP ; btSoftBodySolver::setNumberOfPositionIterations
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getNumberOfPositionIterations@btSoftBodySolver@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumberOfPositionIterations@btSoftBodySolver@@UAEHXZ PROC ; btSoftBodySolver::getNumberOfPositionIterations, COMDAT
; _this$ = ecx
; Line 101
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 102
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 103
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumberOfPositionIterations@btSoftBodySolver@@UAEHXZ ENDP ; btSoftBodySolver::getNumberOfPositionIterations
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setNumberOfVelocityIterations@btSoftBodySolver@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iterations$ = 8					; size = 4
?setNumberOfVelocityIterations@btSoftBodySolver@@UAEXH@Z PROC ; btSoftBodySolver::setNumberOfVelocityIterations, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iterations$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 109
	mov	esp, ebp
	pop	ebp
	ret	4
?setNumberOfVelocityIterations@btSoftBodySolver@@UAEXH@Z ENDP ; btSoftBodySolver::setNumberOfVelocityIterations
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getNumberOfVelocityIterations@btSoftBodySolver@@UAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumberOfVelocityIterations@btSoftBodySolver@@UAEHXZ PROC ; btSoftBodySolver::getNumberOfVelocityIterations, COMDAT
; _this$ = ecx
; Line 113
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 115
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumberOfVelocityIterations@btSoftBodySolver@@UAEHXZ ENDP ; btSoftBodySolver::getNumberOfVelocityIterations
_TEXT	ENDS
PUBLIC	??1btSoftBodySolver@@UAE@XZ			; btSoftBodySolver::~btSoftBodySolver
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtSoftBodySolver@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtSoftBodySolver@@UAEPAXI@Z PROC			; btSoftBodySolver::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSoftBodySolver@@UAE@XZ		; btSoftBodySolver::~btSoftBodySolver
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtSoftBodySolver@@UAEPAXI@Z ENDP			; btSoftBodySolver::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1btSoftBodySolver@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSoftBodySolver@@UAE@XZ PROC			; btSoftBodySolver::~btSoftBodySolver, COMDAT
; _this$ = ecx
; Line 60
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBodySolver@@6B@
; Line 61
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSoftBodySolver@@UAE@XZ ENDP			; btSoftBodySolver::~btSoftBodySolver
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getSolverType@btDefaultSoftBodySolver@@UBE?AW4SolverTypes@btSoftBodySolver@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSolverType@btDefaultSoftBodySolver@@UBE?AW4SolverTypes@btSoftBodySolver@@XZ PROC ; btDefaultSoftBodySolver::getSolverType, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btdefaultsoftbodysolver.h
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 40
	xor	eax, eax
; Line 41
	mov	esp, ebp
	pop	ebp
	ret	0
?getSolverType@btDefaultSoftBodySolver@@UBE?AW4SolverTypes@btSoftBodySolver@@XZ ENDP ; btDefaultSoftBodySolver::getSolverType
_TEXT	ENDS
PUBLIC	??1btDefaultSoftBodySolver@@UAE@XZ		; btDefaultSoftBodySolver::~btDefaultSoftBodySolver
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtDefaultSoftBodySolver@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtDefaultSoftBodySolver@@UAEPAXI@Z PROC		; btDefaultSoftBodySolver::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btDefaultSoftBodySolver@@UAE@XZ	; btDefaultSoftBodySolver::~btDefaultSoftBodySolver
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtDefaultSoftBodySolver@@UAEPAXI@Z ENDP		; btDefaultSoftBodySolver::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody *>::~btAlignedObjectArray<btSoftBody *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btDefaultSoftBodySolver@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btDefaultSoftBodySolver@@UAE@XZ PROC			; btDefaultSoftBodySolver::~btDefaultSoftBodySolver, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btdefaultsoftbodysolver.cpp
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btDefaultSoftBodySolver@@6B@
; Line 35
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody *>::~btAlignedObjectArray<btSoftBody *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSoftBodySolver@@UAE@XZ		; btSoftBodySolver::~btSoftBodySolver
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btDefaultSoftBodySolver@@UAE@XZ ENDP			; btDefaultSoftBodySolver::~btDefaultSoftBodySolver
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copyBackToSoftBodies@btDefaultSoftBodySolver@@UAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bMove$ = 8						; size = 1
?copyBackToSoftBodies@btDefaultSoftBodySolver@@UAEX_N@Z PROC ; btDefaultSoftBodySolver::copyBackToSoftBodies, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 41
	mov	esp, ebp
	pop	ebp
	ret	4
?copyBackToSoftBodies@btDefaultSoftBodySolver@@UAEX_N@Z ENDP ; btDefaultSoftBodySolver::copyBackToSoftBodies
_TEXT	ENDS
PUBLIC	?copyFromArray@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABV1@@Z ; btAlignedObjectArray<btSoftBody *>::copyFromArray
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?optimize@btDefaultSoftBodySolver@@UAEXAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_softBodies$ = 8					; size = 4
_forceUpdate$ = 12					; size = 1
?optimize@btDefaultSoftBodySolver@@UAEXAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@_N@Z PROC ; btDefaultSoftBodySolver::optimize, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _softBodies$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?copyFromArray@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABV1@@Z ; btAlignedObjectArray<btSoftBody *>::copyFromArray
; Line 46
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?optimize@btDefaultSoftBodySolver@@UAEXAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@_N@Z ENDP ; btDefaultSoftBodySolver::optimize
_TEXT	ENDS
PUBLIC	?isActive@btCollisionObject@@QBE_NXZ		; btCollisionObject::isActive
PUBLIC	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
EXTRN	?integrateMotion@btSoftBody@@QAEXXZ:PROC	; btSoftBody::integrateMotion
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?updateSoftBodies@btDefaultSoftBodySolver@@UAEXXZ
_TEXT	SEGMENT
_psb$18847 = -12					; size = 4
_i$18843 = -8						; size = 4
_this$ = -4						; size = 4
?updateSoftBodies@btDefaultSoftBodySolver@@UAEXXZ PROC	; btDefaultSoftBodySolver::updateSoftBodies, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 50
	mov	DWORD PTR _i$18843[ebp], 0
	jmp	SHORT $LN4@updateSoft
$LN3@updateSoft:
	mov	eax, DWORD PTR _i$18843[ebp]
	add	eax, 1
	mov	DWORD PTR _i$18843[ebp], eax
$LN4@updateSoft:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	cmp	DWORD PTR _i$18843[ebp], eax
	jge	SHORT $LN5@updateSoft
; Line 52
	mov	ecx, DWORD PTR _i$18843[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _psb$18847[ebp], edx
; Line 53
	mov	ecx, DWORD PTR _psb$18847[ebp]
	call	?isActive@btCollisionObject@@QBE_NXZ	; btCollisionObject::isActive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@updateSoft
; Line 55
	mov	ecx, DWORD PTR _psb$18847[ebp]
	call	?integrateMotion@btSoftBody@@QAEXXZ	; btSoftBody::integrateMotion
$LN1@updateSoft:
; Line 57
	jmp	SHORT $LN3@updateSoft
$LN5@updateSoft:
; Line 58
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?updateSoftBodies@btDefaultSoftBodySolver@@UAEXXZ ENDP	; btDefaultSoftBodySolver::updateSoftBodies
_TEXT	ENDS
PUBLIC	?getActivationState@btCollisionObject@@QBEHXZ	; btCollisionObject::getActivationState
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?isActive@btCollisionObject@@QBE_NXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
?isActive@btCollisionObject@@QBE_NXZ PROC		; btCollisionObject::isActive, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 263
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 264
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getActivationState@btCollisionObject@@QBEHXZ ; btCollisionObject::getActivationState
	cmp	eax, 2
	je	SHORT $LN3@isActive
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getActivationState@btCollisionObject@@QBEHXZ ; btCollisionObject::getActivationState
	cmp	eax, 5
	je	SHORT $LN3@isActive
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@isActive
$LN3@isActive:
	mov	DWORD PTR tv70[ebp], 0
$LN4@isActive:
	mov	al, BYTE PTR tv70[ebp]
; Line 265
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isActive@btCollisionObject@@QBE_NXZ ENDP		; btCollisionObject::isActive
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getActivationState@btCollisionObject@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getActivationState@btCollisionObject@@QBEHXZ PROC	; btCollisionObject::getActivationState, COMDAT
; _this$ = ecx
; Line 245
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+228]
	mov	esp, ebp
	pop	ebp
	ret	0
?getActivationState@btCollisionObject@@QBEHXZ ENDP	; btCollisionObject::getActivationState
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?checkInitialized@btDefaultSoftBodySolver@@UAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?checkInitialized@btDefaultSoftBodySolver@@UAE_NXZ PROC	; btDefaultSoftBodySolver::checkInitialized, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btdefaultsoftbodysolver.cpp
; Line 61
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	al, 1
; Line 63
	mov	esp, ebp
	pop	ebp
	ret	0
?checkInitialized@btDefaultSoftBodySolver@@UAE_NXZ ENDP	; btDefaultSoftBodySolver::checkInitialized
_TEXT	ENDS
EXTRN	?solveConstraints@btSoftBody@@QAEXXZ:PROC	; btSoftBody::solveConstraints
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?solveConstraints@btDefaultSoftBodySolver@@UAEXM@Z
_TEXT	SEGMENT
_psb$18861 = -12					; size = 4
_i$18857 = -8						; size = 4
_this$ = -4						; size = 4
_solverdt$ = 8						; size = 4
?solveConstraints@btDefaultSoftBodySolver@@UAEXM@Z PROC	; btDefaultSoftBodySolver::solveConstraints, COMDAT
; _this$ = ecx
; Line 66
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	DWORD PTR _i$18857[ebp], 0
	jmp	SHORT $LN4@solveConst
$LN3@solveConst:
	mov	eax, DWORD PTR _i$18857[ebp]
	add	eax, 1
	mov	DWORD PTR _i$18857[ebp], eax
$LN4@solveConst:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	cmp	DWORD PTR _i$18857[ebp], eax
	jge	SHORT $LN5@solveConst
; Line 70
	mov	ecx, DWORD PTR _i$18857[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _psb$18861[ebp], edx
; Line 71
	mov	ecx, DWORD PTR _psb$18861[ebp]
	call	?isActive@btCollisionObject@@QBE_NXZ	; btCollisionObject::isActive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@solveConst
; Line 73
	mov	ecx, DWORD PTR _psb$18861[ebp]
	call	?solveConstraints@btSoftBody@@QAEXXZ	; btSoftBody::solveConstraints
$LN1@solveConst:
; Line 75
	jmp	SHORT $LN3@solveConst
$LN5@solveConst:
; Line 76
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?solveConstraints@btDefaultSoftBodySolver@@UAEXM@Z ENDP	; btDefaultSoftBodySolver::solveConstraints
_TEXT	ENDS
PUBLIC	?getZ@btVector3@@QBEABMXZ			; btVector3::getZ
PUBLIC	?getY@btVector3@@QBEABMXZ			; btVector3::getY
PUBLIC	?getX@btVector3@@QBEABMXZ			; btVector3::getX
PUBLIC	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?copySoftBodyToVertexBuffer@btDefaultSoftBodySolver@@UAEXQBVbtSoftBody@@PAVbtVertexBufferDescriptor@@@Z
_TEXT	SEGMENT
_normal$18893 = -112					; size = 16
_vertexIndex$18889 = -84				; size = 4
_normalPointer$18888 = -80				; size = 4
_normalStride$18887 = -76				; size = 4
_normalOffset$18886 = -72				; size = 4
_position$18884 = -64					; size = 16
_vertexIndex$18880 = -36				; size = 4
_vertexPointer$18879 = -32				; size = 4
_vertexStride$18878 = -28				; size = 4
_vertexOffset$18877 = -24				; size = 4
_basePointer$18875 = -20				; size = 4
_cpuVertexBuffer$18873 = -16				; size = 4
_numVertices$18872 = -12				; size = 4
_clothVertices$18871 = -8				; size = 4
_this$ = -4						; size = 4
_softBody$ = 8						; size = 4
_vertexBuffer$ = 12					; size = 4
?copySoftBodyToVertexBuffer@btDefaultSoftBodySolver@@UAEXQBVbtSoftBody@@PAVbtVertexBufferDescriptor@@@Z PROC ; btDefaultSoftBodySolver::copySoftBodyToVertexBuffer, COMDAT
; _this$ = ecx
; Line 80
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	mov	eax, DWORD PTR _vertexBuffer$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _vertexBuffer$[ebx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN1@copySoftBo
; Line 88
	mov	ecx, DWORD PTR _softBody$[ebx]
	add	ecx, 732				; 000002dcH
	mov	DWORD PTR _clothVertices$18871[ebp], ecx
; Line 89
	mov	ecx, DWORD PTR _clothVertices$18871[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _numVertices$18872[ebp], eax
; Line 91
	mov	edx, DWORD PTR _vertexBuffer$[ebx]
	mov	DWORD PTR _cpuVertexBuffer$18873[ebp], edx
; Line 92
	mov	eax, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _basePointer$18875[ebp], eax
; Line 94
	mov	ecx, DWORD PTR _vertexBuffer$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _vertexBuffer$[ebx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@copySoftBo
; Line 96
	mov	edx, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _vertexOffset$18877[ebp], eax
; Line 97
	mov	eax, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _vertexStride$18878[ebp], eax
; Line 98
	mov	ecx, DWORD PTR _vertexOffset$18877[ebp]
	mov	edx, DWORD PTR _basePointer$18875[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _vertexPointer$18879[ebp], eax
; Line 100
	mov	DWORD PTR _vertexIndex$18880[ebp], 0
	jmp	SHORT $LN7@copySoftBo
$LN6@copySoftBo:
	mov	ecx, DWORD PTR _vertexIndex$18880[ebp]
	add	ecx, 1
	mov	DWORD PTR _vertexIndex$18880[ebp], ecx
$LN7@copySoftBo:
	mov	edx, DWORD PTR _vertexIndex$18880[ebp]
	cmp	edx, DWORD PTR _numVertices$18872[ebp]
	jge	SHORT $LN5@copySoftBo
; Line 102
	mov	eax, DWORD PTR _vertexIndex$18880[ebp]
	push	eax
	mov	ecx, DWORD PTR _clothVertices$18871[ebp]
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _position$18884[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _position$18884[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _position$18884[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _position$18884[ebp+12], edx
; Line 103
	lea	ecx, DWORD PTR _position$18884[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	ecx, DWORD PTR _vertexPointer$18879[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
; Line 104
	lea	ecx, DWORD PTR _position$18884[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	edx, DWORD PTR _vertexPointer$18879[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 105
	lea	ecx, DWORD PTR _position$18884[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	mov	ecx, DWORD PTR _vertexPointer$18879[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx+8]
; Line 106
	mov	edx, DWORD PTR _vertexStride$18878[ebp]
	mov	eax, DWORD PTR _vertexPointer$18879[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _vertexPointer$18879[ebp], ecx
; Line 107
	jmp	SHORT $LN6@copySoftBo
$LN5@copySoftBo:
; Line 109
	mov	edx, DWORD PTR _vertexBuffer$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _vertexBuffer$[ebx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	eax, al
	test	eax, eax
	je	$LN1@copySoftBo
; Line 111
	mov	ecx, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _normalOffset$18886[ebp], eax
; Line 112
	mov	ecx, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _cpuVertexBuffer$18873[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _normalStride$18887[ebp], eax
; Line 113
	mov	ecx, DWORD PTR _normalOffset$18886[ebp]
	mov	edx, DWORD PTR _basePointer$18875[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _normalPointer$18888[ebp], eax
; Line 115
	mov	DWORD PTR _vertexIndex$18889[ebp], 0
	jmp	SHORT $LN3@copySoftBo
$LN2@copySoftBo:
	mov	ecx, DWORD PTR _vertexIndex$18889[ebp]
	add	ecx, 1
	mov	DWORD PTR _vertexIndex$18889[ebp], ecx
$LN3@copySoftBo:
	mov	edx, DWORD PTR _vertexIndex$18889[ebp]
	cmp	edx, DWORD PTR _numVertices$18872[ebp]
	jge	SHORT $LN1@copySoftBo
; Line 117
	mov	eax, DWORD PTR _vertexIndex$18889[ebp]
	push	eax
	mov	ecx, DWORD PTR _clothVertices$18871[ebp]
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 80					; 00000050H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _normal$18893[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _normal$18893[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _normal$18893[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _normal$18893[ebp+12], edx
; Line 118
	lea	ecx, DWORD PTR _normal$18893[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	ecx, DWORD PTR _normalPointer$18888[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
; Line 119
	lea	ecx, DWORD PTR _normal$18893[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	edx, DWORD PTR _normalPointer$18888[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 120
	lea	ecx, DWORD PTR _normal$18893[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	mov	ecx, DWORD PTR _normalPointer$18888[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx+8]
; Line 121
	mov	edx, DWORD PTR _normalStride$18887[ebp]
	mov	eax, DWORD PTR _normalPointer$18888[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _normalPointer$18888[ebp], ecx
; Line 122
	jmp	SHORT $LN2@copySoftBo
$LN1@copySoftBo:
; Line 125
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@copySoftBo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	1
$LN15@copySoftBo:
	DD	2
	DD	$LN14@copySoftBo
$LN14@copySoftBo:
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN12@copySoftBo
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN13@copySoftBo
$LN13@copySoftBo:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN12@copySoftBo:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?copySoftBodyToVertexBuffer@btDefaultSoftBodySolver@@UAEXQBVbtSoftBody@@PAVbtVertexBufferDescriptor@@@Z ENDP ; btDefaultSoftBodySolver::copySoftBodyToVertexBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getX@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getX@btVector3@@QBEABMXZ PROC				; btVector3::getX, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 561
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getX@btVector3@@QBEABMXZ ENDP				; btVector3::getX
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getY@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getY@btVector3@@QBEABMXZ PROC				; btVector3::getY, COMDAT
; _this$ = ecx
; Line 563
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getY@btVector3@@QBEABMXZ ENDP				; btVector3::getY
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getZ@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getZ@btVector3@@QBEABMXZ PROC				; btVector3::getZ, COMDAT
; _this$ = ecx
; Line 565
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?getZ@btVector3@@QBEABMXZ ENDP				; btVector3::getZ
_TEXT	ENDS
EXTRN	?defaultCollisionHandler@btSoftBody@@QAEXPAV1@@Z:PROC ; btSoftBody::defaultCollisionHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_softBody$ = 8						; size = 4
_otherSoftBody$ = 12					; size = 4
?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@0@Z PROC ; btDefaultSoftBodySolver::processCollision, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btdefaultsoftbodysolver.cpp
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 129
	mov	eax, DWORD PTR _otherSoftBody$[ebp]
	push	eax
	mov	ecx, DWORD PTR _softBody$[ebp]
	call	?defaultCollisionHandler@btSoftBody@@QAEXPAV1@@Z ; btSoftBody::defaultCollisionHandler
; Line 130
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@0@Z ENDP ; btDefaultSoftBodySolver::processCollision
_TEXT	ENDS
EXTRN	?defaultCollisionHandler@btSoftBody@@QAEXPBUbtCollisionObjectWrapper@@@Z:PROC ; btSoftBody::defaultCollisionHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_softBody$ = 8						; size = 4
_collisionObjectWrap$ = 12				; size = 4
?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z PROC ; btDefaultSoftBodySolver::processCollision, COMDAT
; _this$ = ecx
; Line 134
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 135
	mov	eax, DWORD PTR _collisionObjectWrap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _softBody$[ebp]
	call	?defaultCollisionHandler@btSoftBody@@QAEXPBUbtCollisionObjectWrapper@@@Z ; btSoftBody::defaultCollisionHandler
; Line 136
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?processCollision@btDefaultSoftBodySolver@@UAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z ENDP ; btDefaultSoftBodySolver::processCollision
_TEXT	ENDS
EXTRN	?predictMotion@btSoftBody@@QAEXM@Z:PROC		; btSoftBody::predictMotion
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?predictMotion@btDefaultSoftBodySolver@@UAEXM@Z
_TEXT	SEGMENT
_psb$18912 = -12					; size = 4
_i$18908 = -8						; size = 4
_this$ = -4						; size = 4
_timeStep$ = 8						; size = 4
?predictMotion@btDefaultSoftBodySolver@@UAEXM@Z PROC	; btDefaultSoftBodySolver::predictMotion, COMDAT
; _this$ = ecx
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 141
	mov	DWORD PTR _i$18908[ebp], 0
	jmp	SHORT $LN4@predictMot
$LN3@predictMot:
	mov	eax, DWORD PTR _i$18908[ebp]
	add	eax, 1
	mov	DWORD PTR _i$18908[ebp], eax
$LN4@predictMot:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	cmp	DWORD PTR _i$18908[ebp], eax
	jge	SHORT $LN2@predictMot
; Line 143
	mov	ecx, DWORD PTR _i$18908[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _psb$18912[ebp], edx
; Line 145
	mov	ecx, DWORD PTR _psb$18912[ebp]
	call	?isActive@btCollisionObject@@QBE_NXZ	; btCollisionObject::isActive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@predictMot
; Line 147
	push	ecx
	fld	DWORD PTR _timeStep$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _psb$18912[ebp]
	call	?predictMotion@btSoftBody@@QAEXM@Z	; btSoftBody::predictMotion
$LN1@predictMot:
; Line 149
	jmp	SHORT $LN3@predictMot
$LN2@predictMot:
; Line 150
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?predictMotion@btDefaultSoftBodySolver@@UAEXM@Z ENDP	; btDefaultSoftBodySolver::predictMotion
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::init
PUBLIC	??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody *,16>::btAlignedAllocator<btSoftBody *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ PROC	; btAlignedObjectArray<btSoftBody *>::btAlignedObjectArray<btSoftBody *>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody *,16>::btAlignedAllocator<btSoftBody *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ENDP	; btAlignedObjectArray<btSoftBody *>::btAlignedObjectArray<btSoftBody *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ PROC	; btAlignedObjectArray<btSoftBody *>::~btAlignedObjectArray<btSoftBody *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ENDP	; btAlignedObjectArray<btSoftBody *>::~btAlignedObjectArray<btSoftBody *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody *>::size
_TEXT	ENDS
PUBLIC	??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
EXTRN	_printf:PROC
;	COMDAT ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (n>=0)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody *>::operator[]
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::copy
PUBLIC	?resize@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHABQAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::resize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?copyFromArray@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABV1@@Z
_TEXT	SEGMENT
$T19997 = -12						; size = 4
_otherSize$ = -8					; size = 4
_this$ = -4						; size = 4
_otherArray$ = 8					; size = 4
?copyFromArray@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABV1@@Z PROC ; btAlignedObjectArray<btSoftBody *>::copyFromArray, COMDAT
; _this$ = ecx
; Line 503
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 504
	mov	ecx, DWORD PTR _otherArray$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	mov	DWORD PTR _otherSize$[ebp], eax
; Line 505
	mov	DWORD PTR $T19997[ebp], 0
	lea	eax, DWORD PTR $T19997[ebp]
	push	eax
	mov	ecx, DWORD PTR _otherSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHABQAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::resize
; Line 506
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _otherSize$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _otherArray$[ebp]
	call	?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::copy
; Line 507
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?copyFromArray@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABV1@@Z ENDP ; btAlignedObjectArray<btSoftBody *>::copyFromArray
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Node>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::size
_TEXT	ENDS
PUBLIC	??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (n<size())', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@2
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@2:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@2
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@2:
; Line 172
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::operator[]
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T20004 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody *>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy
$LN2@copy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T20004[ebp], eax
	cmp	DWORD PTR $T20004[ebp], 0
	je	SHORT $LN6@copy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T20004[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T20004[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy
$LN6@copy:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy:
	jmp	SHORT $LN2@copy
$LN4@copy:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody *>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
; Line 56
	push	ebp
	mov	ebp, esp
; Line 57
	mov	eax, DWORD PTR __Where$[ebp]
; Line 58
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody *>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody *>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody *>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody *>::clear
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody *>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHABQAVbtSoftBody@@@Z
_TEXT	SEGMENT
tv83 = -24						; size = 4
$T20015 = -20						; size = 4
_i$19045 = -16						; size = 4
_i$19039 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHABQAVbtSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody *>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$19039[ebp], ecx
	jmp	SHORT $LN8@resize
$LN7@resize:
	mov	edx, DWORD PTR _i$19039[ebp]
	add	edx, 1
	mov	DWORD PTR _i$19039[ebp], edx
$LN8@resize:
	mov	eax, DWORD PTR _i$19039[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize
; Line 229
	jmp	SHORT $LN7@resize
$LN6@resize:
; Line 230
	jmp	SHORT $LN5@resize
$LN9@resize:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody *>::reserve
$LN4@resize:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$19045[ebp], edx
	jmp	SHORT $LN3@resize
$LN2@resize:
	mov	eax, DWORD PTR _i$19045[ebp]
	add	eax, 1
	mov	DWORD PTR _i$19045[ebp], eax
$LN3@resize:
	mov	ecx, DWORD PTR _i$19045[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$19045[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T20015[ebp], eax
	cmp	DWORD PTR $T20015[ebp], 0
	je	SHORT $LN12@resize
	mov	eax, DWORD PTR $T20015[ebp]
	mov	ecx, DWORD PTR _fillData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T20015[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN13@resize
$LN12@resize:
	mov	DWORD PTR tv83[ebp], 0
$LN13@resize:
; Line 240
	jmp	SHORT $LN2@resize
$LN5@resize:
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHABQAVbtSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody *>::resize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody *,16>::btAlignedAllocator<btSoftBody *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody *,16>::btAlignedAllocator<btSoftBody *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody *>::destroy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy
$LN2@destroy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy
; Line 99
	jmp	SHORT $LN2@destroy
$LN4@destroy:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody *>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z ; btAlignedAllocator<btSoftBody *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z ; btAlignedAllocator<btSoftBody *,16>::deallocate
$LN1@deallocate:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody *>::deallocate
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody *>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$19138 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody *>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody *>::allocate
	mov	DWORD PTR _s$19138[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$19138[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody *>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$19138[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody *>::reserve
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z ; btAlignedAllocator<btSoftBody *,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody *>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z ; btAlignedAllocator<btSoftBody *,16>::allocate
	jmp	SHORT $LN2@allocate
$LN1@allocate:
; Line 106
	xor	eax, eax
$LN2@allocate:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody *>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody *>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody *>::capacity
_TEXT	ENDS
EXTRN	?btAlignedFreeInternal@@YAXPAX@Z:PROC		; btAlignedFreeInternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody *,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody *,16>::deallocate
_TEXT	ENDS
EXTRN	?btAlignedAllocInternal@@YAPAXIH@Z:PROC		; btAlignedAllocInternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z PROC ; btAlignedAllocator<btSoftBody *,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z ENDP ; btAlignedAllocator<btSoftBody *,16>::allocate
_TEXT	ENDS
END
