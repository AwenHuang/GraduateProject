; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\專題\自建專案\自建專案\src\BulletSoftBody\btSoftRigidDynamicsWorld.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG23776 DB	'predictUnconstraintMotionSoftBody', 00H
	ORG $+2
$SG23783 DB	'Solver initialization failed', 0aH, 00H
	ORG $+6
$SG23784 DB	'Assert ..\..\src\BulletSoftBody\btSoftRigidDynamicsWorld'
	DB	'.cpp:%u ("Solver initialization failed\n")', 0aH, 00H
$SG23796 DB	'solveSoftConstraints', 00H
	ORG $+3
$SG23882 DB	'rayTest', 00H
CONST	ENDS
_DATA	SEGMENT
_btNanMask DD	07f800001H
_btInfinityMask DD 07f800000H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	?setValue@btVector3@@QAEXABM00@Z		; btVector3::setValue
PUBLIC	__real@c1200000
PUBLIC	??0btVector3@@QAE@ABM00@Z			; btVector3::btVector3
PUBLIC	__real@00000000
PUBLIC	__real@3f99999a
PUBLIC	?Reset@?$btSparseSdf@$02@@QAEXXZ		; btSparseSdf<3>::Reset
PUBLIC	?Initialize@?$btSparseSdf@$02@@QAEXHH@Z		; btSparseSdf<3>::Initialize
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	??0btSoftBodyWorldInfo@@QAE@XZ			; btSoftBodyWorldInfo::btSoftBodyWorldInfo
PUBLIC	??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody *>::btAlignedObjectArray<btSoftBody *>
PUBLIC	??_7btSoftRigidDynamicsWorld@@6B@		; btSoftRigidDynamicsWorld::`vftable'
PUBLIC	??0btSoftRigidDynamicsWorld@@QAE@PAVbtDispatcher@@PAVbtBroadphaseInterface@@PAVbtConstraintSolver@@PAVbtCollisionConfiguration@@PAVbtSoftBodySolver@@@Z ; btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld
PUBLIC	?setDebugDrawer@btCollisionWorld@@UAEXPAVbtIDebugDraw@@@Z ; btCollisionWorld::setDebugDrawer
PUBLIC	?getDebugDrawer@btCollisionWorld@@UAEPAVbtIDebugDraw@@XZ ; btCollisionWorld::getDebugDrawer
PUBLIC	?debugDrawWorld@btSoftRigidDynamicsWorld@@UAEXXZ ; btSoftRigidDynamicsWorld::debugDrawWorld
PUBLIC	?rayTest@btSoftRigidDynamicsWorld@@UBEXABVbtVector3@@0AAURayResultCallback@btCollisionWorld@@@Z ; btSoftRigidDynamicsWorld::rayTest
PUBLIC	?removeCollisionObject@btSoftRigidDynamicsWorld@@UAEXPAVbtCollisionObject@@@Z ; btSoftRigidDynamicsWorld::removeCollisionObject
PUBLIC	?serialize@btSoftRigidDynamicsWorld@@UAEXPAVbtSerializer@@@Z ; btSoftRigidDynamicsWorld::serialize
PUBLIC	?getWorldType@btSoftRigidDynamicsWorld@@UBE?AW4btDynamicsWorldType@@XZ ; btSoftRigidDynamicsWorld::getWorldType
PUBLIC	?predictUnconstraintMotion@btSoftRigidDynamicsWorld@@MAEXM@Z ; btSoftRigidDynamicsWorld::predictUnconstraintMotion
PUBLIC	?internalSingleStepSimulation@btSoftRigidDynamicsWorld@@MAEXM@Z ; btSoftRigidDynamicsWorld::internalSingleStepSimulation
PUBLIC	?setNumTasks@btDiscreteDynamicsWorld@@UAEXH@Z	; btDiscreteDynamicsWorld::setNumTasks
PUBLIC	?updateVehicles@btDiscreteDynamicsWorld@@UAEXM@Z ; btDiscreteDynamicsWorld::updateVehicles
EXTRN	??0btDefaultSoftBodySolver@@QAE@XZ:PROC		; btDefaultSoftBodySolver::btDefaultSoftBodySolver
EXTRN	?btAlignedAllocInternal@@YAPAXIH@Z:PROC		; btAlignedAllocInternal
EXTRN	??0btDiscreteDynamicsWorld@@QAE@PAVbtDispatcher@@PAVbtBroadphaseInterface@@PAVbtConstraintSolver@@PAVbtCollisionConfiguration@@@Z:PROC ; btDiscreteDynamicsWorld::btDiscreteDynamicsWorld
EXTRN	__fltused:DWORD
EXTRN	??_EbtSoftRigidDynamicsWorld@@UAEPAXI@Z:PROC	; btSoftRigidDynamicsWorld::`vector deleting destructor'
EXTRN	?updateAabbs@btCollisionWorld@@UAEXXZ:PROC	; btCollisionWorld::updateAabbs
EXTRN	?computeOverlappingPairs@btCollisionWorld@@UAEXXZ:PROC ; btCollisionWorld::computeOverlappingPairs
EXTRN	?debugDrawObject@btCollisionWorld@@UAEXABVbtTransform@@PBVbtCollisionShape@@ABVbtVector3@@@Z:PROC ; btCollisionWorld::debugDrawObject
EXTRN	?addCollisionObject@btDiscreteDynamicsWorld@@UAEXPAVbtCollisionObject@@FF@Z:PROC ; btDiscreteDynamicsWorld::addCollisionObject
EXTRN	?performDiscreteCollisionDetection@btCollisionWorld@@UAEXXZ:PROC ; btCollisionWorld::performDiscreteCollisionDetection
EXTRN	?stepSimulation@btDiscreteDynamicsWorld@@UAEHMHM@Z:PROC ; btDiscreteDynamicsWorld::stepSimulation
EXTRN	?addConstraint@btDiscreteDynamicsWorld@@UAEXPAVbtTypedConstraint@@_N@Z:PROC ; btDiscreteDynamicsWorld::addConstraint
EXTRN	?removeConstraint@btDiscreteDynamicsWorld@@UAEXPAVbtTypedConstraint@@@Z:PROC ; btDiscreteDynamicsWorld::removeConstraint
EXTRN	?addAction@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z:PROC ; btDiscreteDynamicsWorld::addAction
EXTRN	?removeAction@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z:PROC ; btDiscreteDynamicsWorld::removeAction
EXTRN	?setGravity@btDiscreteDynamicsWorld@@UAEXABVbtVector3@@@Z:PROC ; btDiscreteDynamicsWorld::setGravity
EXTRN	?getGravity@btDiscreteDynamicsWorld@@UBE?AVbtVector3@@XZ:PROC ; btDiscreteDynamicsWorld::getGravity
EXTRN	?synchronizeMotionStates@btDiscreteDynamicsWorld@@UAEXXZ:PROC ; btDiscreteDynamicsWorld::synchronizeMotionStates
EXTRN	?addRigidBody@btDiscreteDynamicsWorld@@UAEXPAVbtRigidBody@@FF@Z:PROC ; btDiscreteDynamicsWorld::addRigidBody
EXTRN	?addRigidBody@btDiscreteDynamicsWorld@@UAEXPAVbtRigidBody@@@Z:PROC ; btDiscreteDynamicsWorld::addRigidBody
EXTRN	?removeRigidBody@btDiscreteDynamicsWorld@@UAEXPAVbtRigidBody@@@Z:PROC ; btDiscreteDynamicsWorld::removeRigidBody
EXTRN	?setConstraintSolver@btDiscreteDynamicsWorld@@UAEXPAVbtConstraintSolver@@@Z:PROC ; btDiscreteDynamicsWorld::setConstraintSolver
EXTRN	?getConstraintSolver@btDiscreteDynamicsWorld@@UAEPAVbtConstraintSolver@@XZ:PROC ; btDiscreteDynamicsWorld::getConstraintSolver
EXTRN	?getNumConstraints@btDiscreteDynamicsWorld@@UBEHXZ:PROC ; btDiscreteDynamicsWorld::getNumConstraints
EXTRN	?getConstraint@btDiscreteDynamicsWorld@@UBEPBVbtTypedConstraint@@H@Z:PROC ; btDiscreteDynamicsWorld::getConstraint
EXTRN	?getConstraint@btDiscreteDynamicsWorld@@UAEPAVbtTypedConstraint@@H@Z:PROC ; btDiscreteDynamicsWorld::getConstraint
EXTRN	?clearForces@btDiscreteDynamicsWorld@@UAEXXZ:PROC ; btDiscreteDynamicsWorld::clearForces
EXTRN	?addVehicle@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z:PROC ; btDiscreteDynamicsWorld::addVehicle
EXTRN	?removeVehicle@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z:PROC ; btDiscreteDynamicsWorld::removeVehicle
EXTRN	?addCharacter@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z:PROC ; btDiscreteDynamicsWorld::addCharacter
EXTRN	?removeCharacter@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z:PROC ; btDiscreteDynamicsWorld::removeCharacter
EXTRN	?integrateTransforms@btDiscreteDynamicsWorld@@MAEXM@Z:PROC ; btDiscreteDynamicsWorld::integrateTransforms
EXTRN	?calculateSimulationIslands@btDiscreteDynamicsWorld@@MAEXXZ:PROC ; btDiscreteDynamicsWorld::calculateSimulationIslands
EXTRN	?solveConstraints@btDiscreteDynamicsWorld@@MAEXAAUbtContactSolverInfo@@@Z:PROC ; btDiscreteDynamicsWorld::solveConstraints
EXTRN	?updateActivationState@btDiscreteDynamicsWorld@@MAEXM@Z:PROC ; btDiscreteDynamicsWorld::updateActivationState
EXTRN	?saveKinematicState@btDiscreteDynamicsWorld@@MAEXM@Z:PROC ; btDiscreteDynamicsWorld::saveKinematicState
EXTRN	?applyGravity@btDiscreteDynamicsWorld@@UAEXXZ:PROC ; btDiscreteDynamicsWorld::applyGravity
;	COMDAT __real@c1200000
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT ??_7btSoftRigidDynamicsWorld@@6B@
CONST	SEGMENT
??_7btSoftRigidDynamicsWorld@@6B@ DD FLAT:??_EbtSoftRigidDynamicsWorld@@UAEPAXI@Z ; btSoftRigidDynamicsWorld::`vftable'
	DD	FLAT:?updateAabbs@btCollisionWorld@@UAEXXZ
	DD	FLAT:?computeOverlappingPairs@btCollisionWorld@@UAEXXZ
	DD	FLAT:?setDebugDrawer@btCollisionWorld@@UAEXPAVbtIDebugDraw@@@Z
	DD	FLAT:?getDebugDrawer@btCollisionWorld@@UAEPAVbtIDebugDraw@@XZ
	DD	FLAT:?debugDrawWorld@btSoftRigidDynamicsWorld@@UAEXXZ
	DD	FLAT:?debugDrawObject@btCollisionWorld@@UAEXABVbtTransform@@PBVbtCollisionShape@@ABVbtVector3@@@Z
	DD	FLAT:?rayTest@btSoftRigidDynamicsWorld@@UBEXABVbtVector3@@0AAURayResultCallback@btCollisionWorld@@@Z
	DD	FLAT:?addCollisionObject@btDiscreteDynamicsWorld@@UAEXPAVbtCollisionObject@@FF@Z
	DD	FLAT:?removeCollisionObject@btSoftRigidDynamicsWorld@@UAEXPAVbtCollisionObject@@@Z
	DD	FLAT:?performDiscreteCollisionDetection@btCollisionWorld@@UAEXXZ
	DD	FLAT:?serialize@btSoftRigidDynamicsWorld@@UAEXPAVbtSerializer@@@Z
	DD	FLAT:?stepSimulation@btDiscreteDynamicsWorld@@UAEHMHM@Z
	DD	FLAT:?addConstraint@btDiscreteDynamicsWorld@@UAEXPAVbtTypedConstraint@@_N@Z
	DD	FLAT:?removeConstraint@btDiscreteDynamicsWorld@@UAEXPAVbtTypedConstraint@@@Z
	DD	FLAT:?addAction@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z
	DD	FLAT:?removeAction@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z
	DD	FLAT:?setGravity@btDiscreteDynamicsWorld@@UAEXABVbtVector3@@@Z
	DD	FLAT:?getGravity@btDiscreteDynamicsWorld@@UBE?AVbtVector3@@XZ
	DD	FLAT:?synchronizeMotionStates@btDiscreteDynamicsWorld@@UAEXXZ
	DD	FLAT:?addRigidBody@btDiscreteDynamicsWorld@@UAEXPAVbtRigidBody@@FF@Z
	DD	FLAT:?addRigidBody@btDiscreteDynamicsWorld@@UAEXPAVbtRigidBody@@@Z
	DD	FLAT:?removeRigidBody@btDiscreteDynamicsWorld@@UAEXPAVbtRigidBody@@@Z
	DD	FLAT:?setConstraintSolver@btDiscreteDynamicsWorld@@UAEXPAVbtConstraintSolver@@@Z
	DD	FLAT:?getConstraintSolver@btDiscreteDynamicsWorld@@UAEPAVbtConstraintSolver@@XZ
	DD	FLAT:?getNumConstraints@btDiscreteDynamicsWorld@@UBEHXZ
	DD	FLAT:?getConstraint@btDiscreteDynamicsWorld@@UBEPBVbtTypedConstraint@@H@Z
	DD	FLAT:?getConstraint@btDiscreteDynamicsWorld@@UAEPAVbtTypedConstraint@@H@Z
	DD	FLAT:?getWorldType@btSoftRigidDynamicsWorld@@UBE?AW4btDynamicsWorldType@@XZ
	DD	FLAT:?clearForces@btDiscreteDynamicsWorld@@UAEXXZ
	DD	FLAT:?addVehicle@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z
	DD	FLAT:?removeVehicle@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z
	DD	FLAT:?addCharacter@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z
	DD	FLAT:?removeCharacter@btDiscreteDynamicsWorld@@UAEXPAVbtActionInterface@@@Z
	DD	FLAT:?predictUnconstraintMotion@btSoftRigidDynamicsWorld@@MAEXM@Z
	DD	FLAT:?integrateTransforms@btDiscreteDynamicsWorld@@MAEXM@Z
	DD	FLAT:?calculateSimulationIslands@btDiscreteDynamicsWorld@@MAEXXZ
	DD	FLAT:?solveConstraints@btDiscreteDynamicsWorld@@MAEXAAUbtContactSolverInfo@@@Z
	DD	FLAT:?updateActivationState@btDiscreteDynamicsWorld@@MAEXM@Z
	DD	FLAT:?internalSingleStepSimulation@btSoftRigidDynamicsWorld@@MAEXM@Z
	DD	FLAT:?saveKinematicState@btDiscreteDynamicsWorld@@MAEXM@Z
	DD	FLAT:?applyGravity@btDiscreteDynamicsWorld@@UAEXXZ
	DD	FLAT:?setNumTasks@btDiscreteDynamicsWorld@@UAEXH@Z
	DD	FLAT:?updateVehicles@btDiscreteDynamicsWorld@@UAEXM@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSoftRigidDynamicsWorld@@QAE@PAVbtDispatcher@@PAVbtBroadphaseInterface@@PAVbtConstraintSolver@@PAVbtCollisionConfiguration@@PAVbtSoftBodySolver@@@Z
_TEXT	SEGMENT
tv143 = -64						; size = 4
$T26569 = -60						; size = 4
$T26568 = -56						; size = 4
$T26567 = -52						; size = 4
$T26566 = -48						; size = 4
$T26565 = -44						; size = 4
$T26564 = -40						; size = 4
$T26561 = -36						; size = 4
$T23754 = -32						; size = 16
_ptr$23747 = -8						; size = 4
_this$ = -4						; size = 4
_dispatcher$ = 8					; size = 4
_pairCache$ = 12					; size = 4
_constraintSolver$ = 16					; size = 4
_collisionConfiguration$ = 20				; size = 4
_softBodySolver$ = 24					; size = 4
??0btSoftRigidDynamicsWorld@@QAE@PAVbtDispatcher@@PAVbtBroadphaseInterface@@PAVbtConstraintSolver@@PAVbtCollisionConfiguration@@PAVbtSoftBodySolver@@@Z PROC ; btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld, COMDAT
; _this$ = ecx
; Line 37
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _collisionConfiguration$[ebx]
	push	eax
	mov	ecx, DWORD PTR _constraintSolver$[ebx]
	push	ecx
	mov	edx, DWORD PTR _pairCache$[ebx]
	push	edx
	mov	eax, DWORD PTR _dispatcher$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btDiscreteDynamicsWorld@@QAE@PAVbtDispatcher@@PAVbtBroadphaseInterface@@PAVbtConstraintSolver@@PAVbtCollisionConfiguration@@@Z ; btDiscreteDynamicsWorld::btDiscreteDynamicsWorld
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7btSoftRigidDynamicsWorld@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody *>::btAlignedObjectArray<btSoftBody *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 368				; 00000170H
	call	??0btSoftBodyWorldInfo@@QAE@XZ		; btSoftBodyWorldInfo::btSoftBodyWorldInfo
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _softBodySolver$[ebx]
	mov	DWORD PTR [edx+480], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+484], 0
; Line 38
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+480], 0
	jne	SHORT $LN1@btSoftRigi
; Line 40
	push	16					; 00000010H
	push	40					; 00000028H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	mov	DWORD PTR _ptr$23747[ebp], eax
; Line 41
	mov	eax, DWORD PTR _ptr$23747[ebp]
	push	eax
	push	40					; 00000028H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T26561[ebp], eax
	cmp	DWORD PTR $T26561[ebp], 0
	je	SHORT $LN4@btSoftRigi
	mov	ecx, DWORD PTR $T26561[ebp]
	call	??0btDefaultSoftBodySolver@@QAE@XZ	; btDefaultSoftBodySolver::btDefaultSoftBodySolver
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN5@btSoftRigi
$LN4@btSoftRigi:
	mov	DWORD PTR tv143[ebp], 0
$LN5@btSoftRigi:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR [ecx+480], edx
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+484], 1
$LN1@btSoftRigi:
; Line 45
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+356], 4302		; 000010ceH
; Line 46
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+360], 1
; Line 47
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+361], 0
; Line 48
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+362], 0
; Line 49
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pairCache$[ebx]
	mov	DWORD PTR [edx+400], eax
; Line 50
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dispatcher$[ebx]
	mov	DWORD PTR [ecx+404], edx
; Line 51
	push	262144					; 00040000H
	push	2383					; 0000094fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	call	?Initialize@?$btSparseSdf@$02@@QAEXHH@Z	; btSparseSdf<3>::Initialize
; Line 52
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	call	?Reset@?$btSparseSdf@$02@@QAEXXZ	; btSparseSdf<3>::Reset
; Line 54
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3f99999a
	fstp	DWORD PTR [eax+368]
; Line 55
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+372]
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+376]
; Line 57
	fldz
	fstp	DWORD PTR $T26564[ebp]
	fldz
	fstp	DWORD PTR $T26565[ebp]
	fldz
	fstp	DWORD PTR $T26566[ebp]
	lea	eax, DWORD PTR $T26564[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26565[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26566[ebp]
	push	edx
	lea	ecx, DWORD PTR $T23754[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 58
	fldz
	fstp	DWORD PTR $T26567[ebp]
	fld	DWORD PTR __real@c1200000
	fstp	DWORD PTR $T26568[ebp]
	fldz
	fstp	DWORD PTR $T26569[ebp]
	lea	ecx, DWORD PTR $T26567[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26568[ebp]
	push	edx
	lea	eax, DWORD PTR $T26569[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 60
	push	262144					; 00040000H
	push	2383					; 0000094fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 432				; 000001b0H
	call	?Initialize@?$btSparseSdf@$02@@QAEXHH@Z	; btSparseSdf<3>::Initialize
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	20					; 00000014H
??0btSoftRigidDynamicsWorld@@QAE@PAVbtDispatcher@@PAVbtBroadphaseInterface@@PAVbtConstraintSolver@@PAVbtCollisionConfiguration@@PAVbtSoftBodySolver@@@Z ENDP ; btSoftRigidDynamicsWorld::btSoftRigidDynamicsWorld
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btVector3@@QAE@ABM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0btVector3@@QAE@ABM00@Z PROC				; btVector3::btVector3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 134
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 135
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx+8]
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0btVector3@@QAE@ABM00@Z ENDP				; btVector3::btVector3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setValue@btVector3@@QAEXABM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
?setValue@btVector3@@QAEXABM00@Z PROC			; btVector3::setValue, COMDAT
; _this$ = ecx
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 643
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 644
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx+8]
; Line 645
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
; Line 646
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setValue@btVector3@@QAEXABM00@Z ENDP			; btVector3::setValue
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
; Line 56
	push	ebp
	mov	ebp, esp
; Line 57
	mov	eax, DWORD PTR __Where$[ebp]
; Line 58
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setDebugDrawer@btCollisionWorld@@UAEXPAVbtIDebugDraw@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_debugDrawer$ = 8					; size = 4
?setDebugDrawer@btCollisionWorld@@UAEXPAVbtIDebugDraw@@@Z PROC ; btCollisionWorld::setDebugDrawer, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionworld.h
; Line 158
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 159
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _debugDrawer$[ebp]
	mov	DWORD PTR [eax+72], ecx
; Line 160
	mov	esp, ebp
	pop	ebp
	ret	4
?setDebugDrawer@btCollisionWorld@@UAEXPAVbtIDebugDraw@@@Z ENDP ; btCollisionWorld::setDebugDrawer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getDebugDrawer@btCollisionWorld@@UAEPAVbtIDebugDraw@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getDebugDrawer@btCollisionWorld@@UAEPAVbtIDebugDraw@@XZ PROC ; btCollisionWorld::getDebugDrawer, COMDAT
; _this$ = ecx
; Line 163
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 164
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+72]
; Line 165
	mov	esp, ebp
	pop	ebp
	ret	0
?getDebugDrawer@btCollisionWorld@@UAEPAVbtIDebugDraw@@XZ ENDP ; btCollisionWorld::getDebugDrawer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setNumTasks@btDiscreteDynamicsWorld@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_numTasks$ = 8						; size = 4
?setNumTasks@btDiscreteDynamicsWorld@@UAEXH@Z PROC	; btDiscreteDynamicsWorld::setNumTasks, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletdynamics\dynamics\btdiscretedynamicsworld.h
; Line 181
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 183
	mov	esp, ebp
	pop	ebp
	ret	4
?setNumTasks@btDiscreteDynamicsWorld@@UAEXH@Z ENDP	; btDiscreteDynamicsWorld::setNumTasks
_TEXT	ENDS
EXTRN	?updateActions@btDiscreteDynamicsWorld@@IAEXM@Z:PROC ; btDiscreteDynamicsWorld::updateActions
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?updateVehicles@btDiscreteDynamicsWorld@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_timeStep$ = 8						; size = 4
?updateVehicles@btDiscreteDynamicsWorld@@UAEXM@Z PROC	; btDiscreteDynamicsWorld::updateVehicles, COMDAT
; _this$ = ecx
; Line 187
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 188
	push	ecx
	fld	DWORD PTR _timeStep$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateActions@btDiscreteDynamicsWorld@@IAEXM@Z ; btDiscreteDynamicsWorld::updateActions
; Line 189
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?updateVehicles@btDiscreteDynamicsWorld@@UAEXM@Z ENDP	; btDiscreteDynamicsWorld::updateVehicles
_TEXT	ENDS
PUBLIC	??0?$btSparseSdf@$02@@QAE@XZ			; btSparseSdf<3>::btSparseSdf<3>
PUBLIC	__real@447a0000
;	COMDAT __real@447a0000
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSoftBodyWorldInfo@@QAE@XZ
_TEXT	SEGMENT
$T26598 = -28						; size = 4
$T26597 = -24						; size = 4
$T26596 = -20						; size = 4
$T26595 = -16						; size = 4
$T26594 = -12						; size = 4
$T26593 = -8						; size = 4
_this$ = -4						; size = 4
??0btSoftBodyWorldInfo@@QAE@XZ PROC			; btSoftBodyWorldInfo::btSoftBodyWorldInfo, COMDAT
; _this$ = ecx
; Line 64
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3f99999a
	fstp	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@447a0000
	fstp	DWORD PTR [eax+12]
	fldz
	fstp	DWORD PTR $T26593[ebp]
	fldz
	fstp	DWORD PTR $T26594[ebp]
	fldz
	fstp	DWORD PTR $T26595[ebp]
	lea	ecx, DWORD PTR $T26593[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26594[ebp]
	push	edx
	lea	eax, DWORD PTR $T26595[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], 0
	fldz
	fstp	DWORD PTR $T26596[ebp]
	fld	DWORD PTR __real@c1200000
	fstp	DWORD PTR $T26597[ebp]
	fldz
	fstp	DWORD PTR $T26598[ebp]
	lea	eax, DWORD PTR $T26596[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26597[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26598[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$btSparseSdf@$02@@QAE@XZ
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btSoftBodyWorldInfo@@QAE@XZ ENDP			; btSoftBodyWorldInfo::btSoftBodyWorldInfo
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::btAlignedObjectArray<btSparseSdf<3>::Cell *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btSparseSdf@$02@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btSparseSdf@$02@@QAE@XZ PROC			; btSparseSdf<3>::btSparseSdf<3>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::btAlignedObjectArray<btSparseSdf<3>::Cell *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btSparseSdf@$02@@QAE@XZ ENDP			; btSparseSdf<3>::btSparseSdf<3>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldType@btSoftRigidDynamicsWorld@@UBE?AW4btDynamicsWorldType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldType@btSoftRigidDynamicsWorld@@UBE?AW4btDynamicsWorldType@@XZ PROC ; btSoftRigidDynamicsWorld::getWorldType, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.h
; Line 77
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 78
	mov	eax, 4
; Line 79
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldType@btSoftRigidDynamicsWorld@@UBE?AW4btDynamicsWorldType@@XZ ENDP ; btSoftRigidDynamicsWorld::getWorldType
_TEXT	ENDS
PUBLIC	??3btDiscreteDynamicsWorld@@SAXPAX@Z		; btDiscreteDynamicsWorld::operator delete
PUBLIC	??1btSoftRigidDynamicsWorld@@UAE@XZ		; btSoftRigidDynamicsWorld::~btSoftRigidDynamicsWorld
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtSoftRigidDynamicsWorld@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtSoftRigidDynamicsWorld@@UAEPAXI@Z PROC		; btSoftRigidDynamicsWorld::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSoftRigidDynamicsWorld@@UAE@XZ	; btSoftRigidDynamicsWorld::~btSoftRigidDynamicsWorld
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3btDiscreteDynamicsWorld@@SAXPAX@Z	; btDiscreteDynamicsWorld::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtSoftRigidDynamicsWorld@@UAEPAXI@Z ENDP		; btSoftRigidDynamicsWorld::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?btAlignedFreeInternal@@YAXPAX@Z:PROC		; btAlignedFreeInternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??3btDiscreteDynamicsWorld@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??3btDiscreteDynamicsWorld@@SAXPAX@Z PROC		; btDiscreteDynamicsWorld::operator delete, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletdynamics\dynamics\btdiscretedynamicsworld.h
; Line 99
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??3btDiscreteDynamicsWorld@@SAXPAX@Z ENDP		; btDiscreteDynamicsWorld::operator delete
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody *>::~btAlignedObjectArray<btSoftBody *>
PUBLIC	??1btSoftBodyWorldInfo@@QAE@XZ			; btSoftBodyWorldInfo::~btSoftBodyWorldInfo
EXTRN	??1btDiscreteDynamicsWorld@@UAE@XZ:PROC		; btDiscreteDynamicsWorld::~btDiscreteDynamicsWorld
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btSoftRigidDynamicsWorld@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSoftRigidDynamicsWorld@@UAE@XZ PROC		; btSoftRigidDynamicsWorld::~btSoftRigidDynamicsWorld, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftRigidDynamicsWorld@@6B@
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+484]
	test	edx, edx
	je	SHORT $LN2@btSoftRigi@2
; Line 69
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+480]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+480]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 70
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+480]
	push	edx
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
$LN2@btSoftRigi@2:
; Line 72
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 368				; 00000170H
	call	??1btSoftBodyWorldInfo@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody *>::~btAlignedObjectArray<btSoftBody *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btDiscreteDynamicsWorld@@UAE@XZ	; btDiscreteDynamicsWorld::~btDiscreteDynamicsWorld
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSoftRigidDynamicsWorld@@UAE@XZ ENDP		; btSoftRigidDynamicsWorld::~btSoftRigidDynamicsWorld
_TEXT	ENDS
PUBLIC	??1?$btSparseSdf@$02@@QAE@XZ			; btSparseSdf<3>::~btSparseSdf<3>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btSoftBodyWorldInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSoftBodyWorldInfo@@QAE@XZ PROC			; btSoftBodyWorldInfo::~btSoftBodyWorldInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1?$btSparseSdf@$02@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSoftBodyWorldInfo@@QAE@XZ ENDP			; btSoftBodyWorldInfo::~btSoftBodyWorldInfo
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::~btAlignedObjectArray<btSparseSdf<3>::Cell *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btSparseSdf@$02@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btSparseSdf@$02@@QAE@XZ PROC			; btSparseSdf<3>::~btSparseSdf<3>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::~btAlignedObjectArray<btSparseSdf<3>::Cell *>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btSparseSdf@$02@@QAE@XZ ENDP			; btSparseSdf<3>::~btSparseSdf<3>
_TEXT	ENDS
PUBLIC	??1CProfileSample@@QAE@XZ			; CProfileSample::~CProfileSample
PUBLIC	??0CProfileSample@@QAE@PBD@Z			; CProfileSample::CProfileSample
EXTRN	?predictUnconstraintMotion@btDiscreteDynamicsWorld@@MAEXM@Z:PROC ; btDiscreteDynamicsWorld::predictUnconstraintMotion
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?predictUnconstraintMotion@btSoftRigidDynamicsWorld@@MAEXM@Z
_TEXT	SEGMENT
___profile$23775 = -9					; size = 1
_this$ = -4						; size = 4
_timeStep$ = 8						; size = 4
?predictUnconstraintMotion@btSoftRigidDynamicsWorld@@MAEXM@Z PROC ; btSoftRigidDynamicsWorld::predictUnconstraintMotion, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 76
	push	ecx
	fld	DWORD PTR _timeStep$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?predictUnconstraintMotion@btDiscreteDynamicsWorld@@MAEXM@Z ; btDiscreteDynamicsWorld::predictUnconstraintMotion
; Line 78
	push	OFFSET $SG23776
	lea	ecx, DWORD PTR ___profile$23775[ebp]
	call	??0CProfileSample@@QAE@PBD@Z		; CProfileSample::CProfileSample
; Line 79
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _timeStep$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+480]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+480]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 80
	lea	ecx, DWORD PTR ___profile$23775[ebp]
	call	??1CProfileSample@@QAE@XZ		; CProfileSample::~CProfileSample
; Line 81
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@predictUnc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@predictUnc:
	DD	1
	DD	$LN4@predictUnc
$LN4@predictUnc:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@predictUnc
$LN3@predictUnc:
	DB	95					; 0000005fH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?predictUnconstraintMotion@btSoftRigidDynamicsWorld@@MAEXM@Z ENDP ; btSoftRigidDynamicsWorld::predictUnconstraintMotion
_TEXT	ENDS
EXTRN	?Start_Profile@CProfileManager@@SAXPBD@Z:PROC	; CProfileManager::Start_Profile
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProfileSample@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
??0CProfileSample@@QAE@PBD@Z PROC			; CProfileSample::CProfileSample, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btquickprof.h
; Line 179
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 181
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?Start_Profile@CProfileManager@@SAXPBD@Z ; CProfileManager::Start_Profile
	add	esp, 4
; Line 182
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProfileSample@@QAE@PBD@Z ENDP			; CProfileSample::CProfileSample
_TEXT	ENDS
EXTRN	?Stop_Profile@CProfileManager@@SAXXZ:PROC	; CProfileManager::Stop_Profile
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProfileSample@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProfileSample@@QAE@XZ PROC				; CProfileSample::~CProfileSample, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	call	?Stop_Profile@CProfileManager@@SAXXZ	; CProfileManager::Stop_Profile
; Line 187
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProfileSample@@QAE@XZ ENDP				; CProfileSample::~CProfileSample
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
PUBLIC	?solveSoftBodiesConstraints@btSoftRigidDynamicsWorld@@IAEXM@Z ; btSoftRigidDynamicsWorld::solveSoftBodiesConstraints
PUBLIC	?getSoftBodyArray@btSoftRigidDynamicsWorld@@QAEAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@XZ ; btSoftRigidDynamicsWorld::getSoftBodyArray
EXTRN	?defaultCollisionHandler@btSoftBody@@QAEXPAV1@@Z:PROC ; btSoftBody::defaultCollisionHandler
EXTRN	?internalSingleStepSimulation@btDiscreteDynamicsWorld@@MAEXM@Z:PROC ; btDiscreteDynamicsWorld::internalSingleStepSimulation
EXTRN	_printf:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?internalSingleStepSimulation@btSoftRigidDynamicsWorld@@MAEXM@Z
_TEXT	SEGMENT
_psb$23789 = -12					; size = 4
_i$23785 = -8						; size = 4
_this$ = -4						; size = 4
_timeStep$ = 8						; size = 4
?internalSingleStepSimulation@btSoftRigidDynamicsWorld@@MAEXM@Z PROC ; btSoftRigidDynamicsWorld::internalSingleStepSimulation, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
; Line 84
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 87
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getSoftBodyArray@btSoftRigidDynamicsWorld@@QAEAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@XZ ; btSoftRigidDynamicsWorld::getSoftBodyArray
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+480]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+480]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+480]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+480]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN4@internalSi
; Line 91
	mov	edx, OFFSET $SG23783
	test	edx, edx
	jne	SHORT $LN4@internalSi
	push	91					; 0000005bH
	push	OFFSET $SG23784
	call	_printf
	add	esp, 8
	int	3
$LN4@internalSi:
; Line 94
	push	ecx
	fld	DWORD PTR _timeStep$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?internalSingleStepSimulation@btDiscreteDynamicsWorld@@MAEXM@Z ; btDiscreteDynamicsWorld::internalSingleStepSimulation
; Line 97
	push	ecx
	fld	DWORD PTR _timeStep$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?solveSoftBodiesConstraints@btSoftRigidDynamicsWorld@@IAEXM@Z ; btSoftRigidDynamicsWorld::solveSoftBodiesConstraints
; Line 100
	mov	DWORD PTR _i$23785[ebp], 0
	jmp	SHORT $LN3@internalSi
$LN2@internalSi:
	mov	eax, DWORD PTR _i$23785[ebp]
	add	eax, 1
	mov	DWORD PTR _i$23785[ebp], eax
$LN3@internalSi:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	cmp	DWORD PTR _i$23785[ebp], eax
	jge	SHORT $LN1@internalSi
; Line 102
	mov	ecx, DWORD PTR _i$23785[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _psb$23789[ebp], edx
; Line 103
	mov	eax, DWORD PTR _psb$23789[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$23789[ebp]
	call	?defaultCollisionHandler@btSoftBody@@QAEXPAV1@@Z ; btSoftBody::defaultCollisionHandler
; Line 104
	jmp	SHORT $LN2@internalSi
$LN1@internalSi:
; Line 107
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+480]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+480]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 112
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?internalSingleStepSimulation@btSoftRigidDynamicsWorld@@MAEXM@Z ENDP ; btSoftRigidDynamicsWorld::internalSingleStepSimulation
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getSoftBodyArray@btSoftRigidDynamicsWorld@@QAEAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSoftBodyArray@btSoftRigidDynamicsWorld@@QAEAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@XZ PROC ; btSoftRigidDynamicsWorld::getSoftBodyArray, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.h
; Line 82
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 83
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 336				; 00000150H
; Line 84
	mov	esp, ebp
	pop	ebp
	ret	0
?getSoftBodyArray@btSoftRigidDynamicsWorld@@QAEAAV?$btAlignedObjectArray@PAVbtSoftBody@@@@XZ ENDP ; btSoftRigidDynamicsWorld::getSoftBodyArray
_TEXT	ENDS
PUBLIC	?getTimeScale@btSoftBodySolver@@QAEMXZ		; btSoftBodySolver::getTimeScale
EXTRN	?solveClusters@btSoftBody@@SAXABV?$btAlignedObjectArray@PAVbtSoftBody@@@@@Z:PROC ; btSoftBody::solveClusters
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?solveSoftBodiesConstraints@btSoftRigidDynamicsWorld@@IAEXM@Z
_TEXT	SEGMENT
___profile$ = -9					; size = 1
_this$ = -4						; size = 4
_timeStep$ = 8						; size = 4
?solveSoftBodiesConstraints@btSoftRigidDynamicsWorld@@IAEXM@Z PROC ; btSoftRigidDynamicsWorld::solveSoftBodiesConstraints, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 116
	push	OFFSET $SG23796
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??0CProfileSample@@QAE@PBD@Z		; CProfileSample::CProfileSample
; Line 118
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	test	eax, eax
	je	SHORT $LN1@solveSoftB
; Line 120
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 336				; 00000150H
	push	eax
	call	?solveClusters@btSoftBody@@SAXABV?$btAlignedObjectArray@PAVbtSoftBody@@@@@Z ; btSoftBody::solveClusters
	add	esp, 4
$LN1@solveSoftB:
; Line 124
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+480]
	call	?getTimeScale@btSoftBodySolver@@QAEMXZ	; btSoftBodySolver::getTimeScale
	fmul	DWORD PTR _timeStep$[ebp]
	mov	esi, esp
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+480]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+480]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 126
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??1CProfileSample@@QAE@XZ		; CProfileSample::~CProfileSample
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@solveSoftB
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@solveSoftB:
	DD	1
	DD	$LN5@solveSoftB
$LN5@solveSoftB:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN4@solveSoftB
$LN4@solveSoftB:
	DB	95					; 0000005fH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?solveSoftBodiesConstraints@btSoftRigidDynamicsWorld@@IAEXM@Z ENDP ; btSoftRigidDynamicsWorld::solveSoftBodiesConstraints
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getTimeScale@btSoftBodySolver@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTimeScale@btSoftBodySolver@@QAEMXZ PROC		; btSoftBodySolver::getTimeScale, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodysolvers.h
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 120
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
; Line 121
	mov	esp, ebp
	pop	ebp
	ret	0
?getTimeScale@btSoftBodySolver@@QAEMXZ ENDP		; btSoftBodySolver::getTimeScale
_TEXT	ENDS
PUBLIC	?setSoftBodySolver@btSoftBody@@QAEXPAVbtSoftBodySolver@@@Z ; btSoftBody::setSoftBodySolver
PUBLIC	?push_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::push_back
PUBLIC	?addSoftBody@btSoftRigidDynamicsWorld@@QAEXPAVbtSoftBody@@FF@Z ; btSoftRigidDynamicsWorld::addSoftBody
EXTRN	?addCollisionObject@btCollisionWorld@@UAEXPAVbtCollisionObject@@FF@Z:PROC ; btCollisionWorld::addCollisionObject
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?addSoftBody@btSoftRigidDynamicsWorld@@QAEXPAVbtSoftBody@@FF@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_body$ = 8						; size = 4
_collisionFilterGroup$ = 12				; size = 2
_collisionFilterMask$ = 16				; size = 2
?addSoftBody@btSoftRigidDynamicsWorld@@QAEXPAVbtSoftBody@@FF@Z PROC ; btSoftRigidDynamicsWorld::addSoftBody, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 130
	lea	eax, DWORD PTR _body$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	?push_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::push_back
; Line 134
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+480]
	push	edx
	mov	ecx, DWORD PTR _body$[ebp]
	call	?setSoftBodySolver@btSoftBody@@QAEXPAVbtSoftBodySolver@@@Z ; btSoftBody::setSoftBodySolver
; Line 138
	movzx	eax, WORD PTR _collisionFilterMask$[ebp]
	push	eax
	movzx	ecx, WORD PTR _collisionFilterGroup$[ebp]
	push	ecx
	mov	edx, DWORD PTR _body$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addCollisionObject@btCollisionWorld@@UAEXPAVbtCollisionObject@@FF@Z ; btCollisionWorld::addCollisionObject
; Line 140
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?addSoftBody@btSoftRigidDynamicsWorld@@QAEXPAVbtSoftBody@@FF@Z ENDP ; btSoftRigidDynamicsWorld::addSoftBody
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setSoftBodySolver@btSoftBody@@QAEXPAVbtSoftBodySolver@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_softBodySolver$ = 8					; size = 4
?setSoftBodySolver@btSoftBody@@QAEXPAVbtSoftBodySolver@@@Z PROC ; btSoftBody::setSoftBodySolver, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 912
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 913
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _softBodySolver$[ebp]
	mov	DWORD PTR [eax+308], ecx
; Line 914
	mov	esp, ebp
	pop	ebp
	ret	4
?setSoftBodySolver@btSoftBody@@QAEXPAVbtSoftBodySolver@@@Z ENDP ; btSoftBody::setSoftBodySolver
_TEXT	ENDS
PUBLIC	?remove@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::remove
PUBLIC	?removeSoftBody@btSoftRigidDynamicsWorld@@QAEXPAVbtSoftBody@@@Z ; btSoftRigidDynamicsWorld::removeSoftBody
EXTRN	?removeCollisionObject@btCollisionWorld@@UAEXPAVbtCollisionObject@@@Z:PROC ; btCollisionWorld::removeCollisionObject
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?removeSoftBody@btSoftRigidDynamicsWorld@@QAEXPAVbtSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_body$ = 8						; size = 4
?removeSoftBody@btSoftRigidDynamicsWorld@@QAEXPAVbtSoftBody@@@Z PROC ; btSoftRigidDynamicsWorld::removeSoftBody, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 144
	lea	eax, DWORD PTR _body$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	?remove@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::remove
; Line 146
	mov	ecx, DWORD PTR _body$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?removeCollisionObject@btCollisionWorld@@UAEXPAVbtCollisionObject@@@Z ; btCollisionWorld::removeCollisionObject
; Line 147
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?removeSoftBody@btSoftRigidDynamicsWorld@@QAEXPAVbtSoftBody@@@Z ENDP ; btSoftRigidDynamicsWorld::removeSoftBody
_TEXT	ENDS
PUBLIC	?upcast@btSoftBody@@SAPAV1@PAVbtCollisionObject@@@Z ; btSoftBody::upcast
EXTRN	?removeCollisionObject@btDiscreteDynamicsWorld@@UAEXPAVbtCollisionObject@@@Z:PROC ; btDiscreteDynamicsWorld::removeCollisionObject
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?removeCollisionObject@btSoftRigidDynamicsWorld@@UAEXPAVbtCollisionObject@@@Z
_TEXT	SEGMENT
_body$ = -8						; size = 4
_this$ = -4						; size = 4
_collisionObject$ = 8					; size = 4
?removeCollisionObject@btSoftRigidDynamicsWorld@@UAEXPAVbtCollisionObject@@@Z PROC ; btSoftRigidDynamicsWorld::removeCollisionObject, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _collisionObject$[ebp]
	push	eax
	call	?upcast@btSoftBody@@SAPAV1@PAVbtCollisionObject@@@Z ; btSoftBody::upcast
	add	esp, 4
	mov	DWORD PTR _body$[ebp], eax
; Line 152
	cmp	DWORD PTR _body$[ebp], 0
	je	SHORT $LN2@removeColl
; Line 153
	mov	ecx, DWORD PTR _body$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?removeSoftBody@btSoftRigidDynamicsWorld@@QAEXPAVbtSoftBody@@@Z ; btSoftRigidDynamicsWorld::removeSoftBody
; Line 154
	jmp	SHORT $LN3@removeColl
$LN2@removeColl:
; Line 155
	mov	edx, DWORD PTR _collisionObject$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?removeCollisionObject@btDiscreteDynamicsWorld@@UAEXPAVbtCollisionObject@@@Z ; btDiscreteDynamicsWorld::removeCollisionObject
$LN3@removeColl:
; Line 156
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?removeCollisionObject@btSoftRigidDynamicsWorld@@UAEXPAVbtCollisionObject@@@Z ENDP ; btSoftRigidDynamicsWorld::removeCollisionObject
_TEXT	ENDS
PUBLIC	?getInternalType@btCollisionObject@@QBEHXZ	; btCollisionObject::getInternalType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?upcast@btSoftBody@@SAPAV1@PAVbtCollisionObject@@@Z
_TEXT	SEGMENT
_colObj$ = 8						; size = 4
?upcast@btSoftBody@@SAPAV1@PAVbtCollisionObject@@@Z PROC ; btSoftBody::upcast, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 944
	push	ebp
	mov	ebp, esp
; Line 945
	mov	ecx, DWORD PTR _colObj$[ebp]
	call	?getInternalType@btCollisionObject@@QBEHXZ ; btCollisionObject::getInternalType
	cmp	eax, 8
	jne	SHORT $LN1@upcast
; Line 946
	mov	eax, DWORD PTR _colObj$[ebp]
	jmp	SHORT $LN2@upcast
$LN1@upcast:
; Line 947
	xor	eax, eax
$LN2@upcast:
; Line 948
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?upcast@btSoftBody@@SAPAV1@PAVbtCollisionObject@@@Z ENDP ; btSoftBody::upcast
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getInternalType@btCollisionObject@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInternalType@btCollisionObject@@QBEHXZ PROC		; btCollisionObject::getInternalType, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 299
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 300
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+248]
; Line 301
	mov	esp, ebp
	pop	ebp
	ret	0
?getInternalType@btCollisionObject@@QBEHXZ ENDP		; btCollisionObject::getInternalType
_TEXT	ENDS
EXTRN	?DrawClusterTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z:PROC ; btSoftBodyHelpers::DrawClusterTree
EXTRN	?DrawFaceTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z:PROC ; btSoftBodyHelpers::DrawFaceTree
EXTRN	?DrawNodeTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z:PROC ; btSoftBodyHelpers::DrawNodeTree
EXTRN	?Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z:PROC ; btSoftBodyHelpers::Draw
EXTRN	?DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z:PROC ; btSoftBodyHelpers::DrawFrame
EXTRN	?debugDrawWorld@btDiscreteDynamicsWorld@@UAEXXZ:PROC ; btDiscreteDynamicsWorld::debugDrawWorld
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?debugDrawWorld@btSoftRigidDynamicsWorld@@UAEXXZ
_TEXT	SEGMENT
tv137 = -16						; size = 4
_psb$23823 = -12					; size = 4
_i$23819 = -8						; size = 4
_this$ = -4						; size = 4
?debugDrawWorld@btSoftRigidDynamicsWorld@@UAEXXZ PROC	; btSoftRigidDynamicsWorld::debugDrawWorld, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
; Line 159
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 160
	mov	ecx, DWORD PTR _this$[ebp]
	call	?debugDrawWorld@btDiscreteDynamicsWorld@@UAEXXZ ; btDiscreteDynamicsWorld::debugDrawWorld
; Line 162
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN10@debugDrawW
; Line 165
	mov	DWORD PTR _i$23819[ebp], 0
	jmp	SHORT $LN8@debugDrawW
$LN7@debugDrawW:
	mov	ecx, DWORD PTR _i$23819[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$23819[ebp], ecx
$LN8@debugDrawW:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	cmp	DWORD PTR _i$23819[ebp], eax
	jge	$LN10@debugDrawW
; Line 167
	mov	edx, DWORD PTR _i$23819[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _psb$23823[ebp], eax
; Line 168
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN5@debugDrawW
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	mov	ecx, DWORD PTR tv137[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv137[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, 1
	je	SHORT $LN5@debugDrawW
; Line 170
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _psb$23823[ebp]
	push	eax
	call	?DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z ; btSoftBodyHelpers::DrawFrame
	add	esp, 8
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+356]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _psb$23823[ebp]
	push	edx
	call	?Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z ; btSoftBodyHelpers::Draw
	add	esp, 12					; 0000000cH
$LN5@debugDrawW:
; Line 174
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN4@debugDrawW
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, 2
	je	SHORT $LN4@debugDrawW
; Line 176
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+360]
	test	edx, edx
	je	SHORT $LN3@debugDrawW
	push	-1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _psb$23823[ebp]
	push	edx
	call	?DrawNodeTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ; btSoftBodyHelpers::DrawNodeTree
	add	esp, 16					; 00000010H
$LN3@debugDrawW:
; Line 177
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+361]
	test	ecx, ecx
	je	SHORT $LN2@debugDrawW
	push	-1
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _psb$23823[ebp]
	push	ecx
	call	?DrawFaceTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ; btSoftBodyHelpers::DrawFaceTree
	add	esp, 16					; 00000010H
$LN2@debugDrawW:
; Line 178
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+362]
	test	eax, eax
	je	SHORT $LN4@debugDrawW
	push	-1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _psb$23823[ebp]
	push	eax
	call	?DrawClusterTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ; btSoftBodyHelpers::DrawClusterTree
	add	esp, 16					; 00000010H
$LN4@debugDrawW:
; Line 180
	jmp	$LN7@debugDrawW
$LN10@debugDrawW:
; Line 182
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?debugDrawWorld@btSoftRigidDynamicsWorld@@UAEXXZ ENDP	; btSoftRigidDynamicsWorld::debugDrawWorld
_TEXT	ENDS
PUBLIC	??1btSoftSingleRayCallback@@UAE@XZ		; btSoftSingleRayCallback::~btSoftSingleRayCallback
PUBLIC	??0btSoftSingleRayCallback@@QAE@ABVbtVector3@@0PBVbtSoftRigidDynamicsWorld@@AAURayResultCallback@btCollisionWorld@@@Z ; btSoftSingleRayCallback::btSoftSingleRayCallback
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?rayTest@btSoftRigidDynamicsWorld@@UBEXABVbtVector3@@0AAURayResultCallback@btCollisionWorld@@@Z
_TEXT	SEGMENT
$T26660 = -396						; size = 4
$T26659 = -392						; size = 4
$T26658 = -388						; size = 4
$T26657 = -384						; size = 16
$T26656 = -364						; size = 4
$T26655 = -360						; size = 4
$T26654 = -356						; size = 4
$T26653 = -352						; size = 16
_rayCB$ = -320						; size = 240
___profile$ = -57					; size = 1
_this$ = -52						; size = 4
__$ArrayPad$ = -4					; size = 4
_rayFromWorld$ = 8					; size = 4
_rayToWorld$ = 12					; size = 4
_resultCallback$ = 16					; size = 4
?rayTest@btSoftRigidDynamicsWorld@@UBEXABVbtVector3@@0AAURayResultCallback@btCollisionWorld@@@Z PROC ; btSoftRigidDynamicsWorld::rayTest, COMDAT
; _this$ = ecx
; Line 265
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 266
	push	OFFSET $SG23882
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??0CProfileSample@@QAE@PBD@Z		; CProfileSample::CProfileSample
; Line 269
	mov	eax, DWORD PTR _resultCallback$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rayToWorld$[ebx]
	push	edx
	mov	eax, DWORD PTR _rayFromWorld$[ebx]
	push	eax
	lea	ecx, DWORD PTR _rayCB$[ebp]
	call	??0btSoftSingleRayCallback@@QAE@ABVbtVector3@@0PBVbtSoftRigidDynamicsWorld@@AAURayResultCallback@btCollisionWorld@@@Z ; btSoftSingleRayCallback::btSoftSingleRayCallback
; Line 272
	fldz
	fstp	DWORD PTR $T26654[ebp]
	fldz
	fstp	DWORD PTR $T26655[ebp]
	fldz
	fstp	DWORD PTR $T26656[ebp]
	fldz
	fstp	DWORD PTR $T26658[ebp]
	fldz
	fstp	DWORD PTR $T26659[ebp]
	fldz
	fstp	DWORD PTR $T26660[ebp]
	lea	ecx, DWORD PTR $T26654[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26655[ebp]
	push	edx
	lea	eax, DWORD PTR $T26656[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26653[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR $T26658[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26659[ebp]
	push	edx
	lea	eax, DWORD PTR $T26660[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26657[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	ecx, DWORD PTR _rayCB$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rayToWorld$[ebx]
	push	edx
	mov	eax, DWORD PTR _rayFromWorld$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 280
	lea	ecx, DWORD PTR _rayCB$[ebp]
	call	??1btSoftSingleRayCallback@@UAE@XZ
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??1CProfileSample@@QAE@XZ		; CProfileSample::~CProfileSample
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@rayTest
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
	npad	3
$LN6@rayTest:
	DD	2
	DD	$LN5@rayTest
$LN5@rayTest:
	DD	-57					; ffffffc7H
	DD	1
	DD	$LN3@rayTest
	DD	-320					; fffffec0H
	DD	240					; 000000f0H
	DD	$LN4@rayTest
$LN4@rayTest:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	67					; 00000043H
	DB	66					; 00000042H
	DB	0
$LN3@rayTest:
	DB	95					; 0000005fH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?rayTest@btSoftRigidDynamicsWorld@@UBEXABVbtVector3@@0AAURayResultCallback@btCollisionWorld@@@Z ENDP ; btSoftRigidDynamicsWorld::rayTest
_TEXT	ENDS
PUBLIC	?dot@btVector3@@QBEMABV1@@Z			; btVector3::dot
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f800000
PUBLIC	__real@7149f2ca
PUBLIC	??BbtVector3@@QAEPAMXZ				; btVector3::operator float *
PUBLIC	?normalize@btVector3@@QAEAAV1@XZ		; btVector3::normalize
PUBLIC	??G@YA?AVbtVector3@@ABV0@0@Z			; operator-
PUBLIC	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z	; btTransform::setOrigin
PUBLIC	?setIdentity@btTransform@@QAEXXZ		; btTransform::setIdentity
PUBLIC	??0btVector3@@QAE@XZ				; btVector3::btVector3
PUBLIC	??0btTransform@@QAE@XZ				; btTransform::btTransform
PUBLIC	??_7btSoftSingleRayCallback@@6B@		; btSoftSingleRayCallback::`vftable'
PUBLIC	??0btBroadphaseRayCallback@@QAE@XZ		; btBroadphaseRayCallback::btBroadphaseRayCallback
PUBLIC	?process@btSoftSingleRayCallback@@UAE_NPBUbtBroadphaseProxy@@@Z ; btSoftSingleRayCallback::process
EXTRN	??_EbtSoftSingleRayCallback@@UAEPAXI@Z:PROC	; btSoftSingleRayCallback::`vector deleting destructor'
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@7149f2ca
CONST	SEGMENT
__real@7149f2ca DD 07149f2car			; 1e+030
CONST	ENDS
;	COMDAT ??_7btSoftSingleRayCallback@@6B@
CONST	SEGMENT
??_7btSoftSingleRayCallback@@6B@ DD FLAT:??_EbtSoftSingleRayCallback@@UAEPAXI@Z ; btSoftSingleRayCallback::`vftable'
	DD	FLAT:?process@btSoftSingleRayCallback@@UAE_NPBUbtBroadphaseProxy@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSoftSingleRayCallback@@QAE@ABVbtVector3@@0PBVbtSoftRigidDynamicsWorld@@AAURayResultCallback@btCollisionWorld@@@Z
_TEXT	SEGMENT
tv237 = -88						; size = 4
tv220 = -84						; size = 4
tv203 = -80						; size = 4
tv187 = -76						; size = 4
tv170 = -72						; size = 4
tv153 = -68						; size = 4
$T23858 = -64						; size = 16
_rayDir$ = -32						; size = 16
_this$ = -4						; size = 4
_rayFromWorld$ = 8					; size = 4
_rayToWorld$ = 12					; size = 4
_world$ = 16						; size = 4
_resultCallback$ = 20					; size = 4
??0btSoftSingleRayCallback@@QAE@ABVbtVector3@@0PBVbtSoftRigidDynamicsWorld@@AAURayResultCallback@btCollisionWorld@@@Z PROC ; btSoftSingleRayCallback::btSoftSingleRayCallback, COMDAT
; _this$ = ecx
; Line 203
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btBroadphaseRayCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftSingleRayCallback@@6B@
	mov	ecx, DWORD PTR _rayFromWorld$[ebx]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _rayToWorld$[ebx]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 64					; 00000040H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _world$[ebx]
	mov	DWORD PTR [eax+224], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _resultCallback$[ebx]
	mov	DWORD PTR [edx+228], eax
; Line 204
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 205
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ; btTransform::setOrigin
; Line 206
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 207
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ; btTransform::setOrigin
; Line 209
	mov	eax, DWORD PTR _rayFromWorld$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rayToWorld$[ebx]
	push	ecx
	lea	edx, DWORD PTR _rayDir$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 211
	lea	ecx, DWORD PTR _rayDir$[ebp]
	call	?normalize@btVector3@@QAEAAV1@XZ	; btVector3::normalize
; Line 213
	lea	ecx, DWORD PTR _rayDir$[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN3@btSoftSing
	fld	DWORD PTR __real@7149f2ca
	fstp	DWORD PTR tv153[ebp]
	jmp	SHORT $LN4@btSoftSing
$LN3@btSoftSing:
	lea	ecx, DWORD PTR _rayDir$[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld1
	fdiv	DWORD PTR [eax]
	fstp	DWORD PTR tv153[ebp]
$LN4@btSoftSing:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR tv153[ebp]
	fstp	DWORD PTR [eax]
; Line 214
	lea	ecx, DWORD PTR _rayDir$[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax+4]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@btSoftSing
	fld	DWORD PTR __real@7149f2ca
	fstp	DWORD PTR tv170[ebp]
	jmp	SHORT $LN6@btSoftSing
$LN5@btSoftSing:
	lea	ecx, DWORD PTR _rayDir$[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld1
	fdiv	DWORD PTR [eax+4]
	fstp	DWORD PTR tv170[ebp]
$LN6@btSoftSing:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR tv170[ebp]
	fstp	DWORD PTR [eax+4]
; Line 215
	lea	ecx, DWORD PTR _rayDir$[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax+8]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@btSoftSing
	fld	DWORD PTR __real@7149f2ca
	fstp	DWORD PTR tv187[ebp]
	jmp	SHORT $LN8@btSoftSing
$LN7@btSoftSing:
	lea	ecx, DWORD PTR _rayDir$[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld1
	fdiv	DWORD PTR [eax+8]
	fstp	DWORD PTR tv187[ebp]
$LN8@btSoftSing:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR tv187[ebp]
	fstp	DWORD PTR [eax+8]
; Line 216
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN9@btSoftSing
	mov	DWORD PTR tv203[ebp], 1
	jmp	SHORT $LN10@btSoftSing
$LN9@btSoftSing:
	mov	DWORD PTR tv203[ebp], 0
$LN10@btSoftSing:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv203[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 217
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@btSoftSing
	mov	DWORD PTR tv220[ebp], 1
	jmp	SHORT $LN12@btSoftSing
$LN11@btSoftSing:
	mov	DWORD PTR tv220[ebp], 0
$LN12@btSoftSing:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv220[ebp]
	mov	DWORD PTR [edx+36], eax
; Line 218
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax+8]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN13@btSoftSing
	mov	DWORD PTR tv237[ebp], 1
	jmp	SHORT $LN14@btSoftSing
$LN13@btSoftSing:
	mov	DWORD PTR tv237[ebp], 0
$LN14@btSoftSing:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv237[ebp]
	mov	DWORD PTR [ecx+40], edx
; Line 220
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	lea	edx, DWORD PTR $T23858[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _rayDir$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+44]
; Line 222
	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@btSoftSing
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	3
$LN17@btSoftSing:
	DD	1
	DD	$LN16@btSoftSing
$LN16@btSoftSing:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN15@btSoftSing
$LN15@btSoftSing:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
??0btSoftSingleRayCallback@@QAE@ABVbtVector3@@0PBVbtSoftRigidDynamicsWorld@@AAURayResultCallback@btCollisionWorld@@@Z ENDP ; btSoftSingleRayCallback::btSoftSingleRayCallback
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btVector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btVector3@@QAE@XZ PROC				; btVector3::btVector3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0btVector3@@QAE@XZ ENDP				; btVector3::btVector3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?dot@btVector3@@QBEMABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?dot@btVector3@@QBEMABV1@@Z PROC			; btVector3::dot, COMDAT
; _this$ = ecx
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 252
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
; Line 254
	mov	esp, ebp
	pop	ebp
	ret	4
?dot@btVector3@@QBEMABV1@@Z ENDP			; btVector3::dot
_TEXT	ENDS
PUBLIC	??_0btVector3@@QAEAAV0@ABM@Z			; btVector3::operator/=
PUBLIC	?length@btVector3@@QBEMXZ			; btVector3::length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?normalize@btVector3@@QAEAAV1@XZ
_TEXT	SEGMENT
$T26696 = -8						; size = 4
_this$ = -4						; size = 4
?normalize@btVector3@@QAEAAV1@XZ PROC			; btVector3::normalize, COMDAT
; _this$ = ecx
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 338
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR $T26696[ebp]
	lea	eax, DWORD PTR $T26696[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 340
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?normalize@btVector3@@QAEAAV1@XZ ENDP			; btVector3::normalize
_TEXT	ENDS
PUBLIC	??XbtVector3@@QAEAAV0@ABM@Z			; btVector3::operator*=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_0btVector3@@QAEAAV0@ABM@Z
_TEXT	SEGMENT
$T26699 = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0btVector3@@QAEAAV0@ABM@Z PROC			; btVector3::operator/=, COMDAT
; _this$ = ecx
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 229
	mov	eax, DWORD PTR _s$[ebp]
	fld1
	fdiv	DWORD PTR [eax]
	fstp	DWORD PTR $T26699[ebp]
	lea	ecx, DWORD PTR $T26699[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 231
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_0btVector3@@QAEAAV0@ABM@Z ENDP			; btVector3::operator/=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??XbtVector3@@QAEAAV0@ABM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XbtVector3@@QAEAAV0@ABM@Z PROC			; btVector3::operator*=, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 207
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 208
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 210
	mov	eax, DWORD PTR _this$[ebp]
; Line 211
	mov	esp, ebp
	pop	ebp
	ret	4
??XbtVector3@@QAEAAV0@ABM@Z ENDP			; btVector3::operator*=
_TEXT	ENDS
PUBLIC	?btSqrt@@YAMM@Z					; btSqrt
PUBLIC	?length2@btVector3@@QBEMXZ			; btVector3::length2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?length@btVector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length@btVector3@@QBEMXZ PROC				; btVector3::length, COMDAT
; _this$ = ecx
; Line 264
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 265
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	push	ecx
	fstp	DWORD PTR [esp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
; Line 266
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@btVector3@@QBEMXZ ENDP				; btVector3::length
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btSqrt@@YAMM@Z
_TEXT	SEGMENT
_y$ = 8							; size = 4
?btSqrt@@YAMM@Z PROC					; btSqrt, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 388
	push	ebp
	mov	ebp, esp
; Line 404
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
; Line 406
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btSqrt@@YAMM@Z ENDP					; btSqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 434
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?length2@btVector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length2@btVector3@@QBEMXZ PROC				; btVector3::length2, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 258
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 259
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
; Line 260
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length2@btVector3@@QBEMXZ ENDP				; btVector3::length2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BbtVector3@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BbtVector3@@QAEPAMXZ PROC				; btVector3::operator float *, COMDAT
; _this$ = ecx
; Line 586
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BbtVector3@@QAEPAMXZ ENDP				; btVector3::operator float *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??G@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T26716 = -12						; size = 4
$T26715 = -8						; size = 4
$T26714 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??G@YA?AVbtVector3@@ABV0@0@Z PROC			; operator-, COMDAT
; Line 785
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 798
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T26714[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR $T26715[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR $T26716[ebp]
	lea	eax, DWORD PTR $T26714[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26715[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26716[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 800
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator-
_TEXT	ENDS
PUBLIC	??0btMatrix3x3@@QAE@XZ				; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btTransform@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btTransform@@QAE@XZ PROC				; btTransform::btTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btTransform@@QAE@XZ ENDP				; btTransform::btTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btMatrix3x3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btMatrix3x3@@QAE@XZ PROC				; btMatrix3x3::btMatrix3x3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btMatrix3x3@@QAE@XZ ENDP				; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setOrigin@btTransform@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_origin$ = 8						; size = 4
?setOrigin@btTransform@@QAEXABVbtVector3@@@Z PROC	; btTransform::setOrigin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	4
?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ENDP	; btTransform::setOrigin
_TEXT	ENDS
PUBLIC	?setIdentity@btMatrix3x3@@QAEXXZ		; btMatrix3x3::setIdentity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setIdentity@btTransform@@QAEXXZ
_TEXT	SEGMENT
$T26727 = -16						; size = 4
$T26726 = -12						; size = 4
$T26725 = -8						; size = 4
_this$ = -4						; size = 4
?setIdentity@btTransform@@QAEXXZ PROC			; btTransform::setIdentity, COMDAT
; _this$ = ecx
; Line 173
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 174
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setIdentity@btMatrix3x3@@QAEXXZ	; btMatrix3x3::setIdentity
; Line 175
	fldz
	fstp	DWORD PTR $T26725[ebp]
	fldz
	fstp	DWORD PTR $T26726[ebp]
	fldz
	fstp	DWORD PTR $T26727[ebp]
	lea	eax, DWORD PTR $T26725[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26726[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26727[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 176
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setIdentity@btTransform@@QAEXXZ ENDP			; btTransform::setIdentity
_TEXT	ENDS
PUBLIC	?setValue@btMatrix3x3@@QAEXABM00000000@Z	; btMatrix3x3::setValue
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setIdentity@btMatrix3x3@@QAEXXZ
_TEXT	SEGMENT
$T26738 = -40						; size = 4
$T26737 = -36						; size = 4
$T26736 = -32						; size = 4
$T26735 = -28						; size = 4
$T26734 = -24						; size = 4
$T26733 = -20						; size = 4
$T26732 = -16						; size = 4
$T26731 = -12						; size = 4
$T26730 = -8						; size = 4
_this$ = -4						; size = 4
?setIdentity@btMatrix3x3@@QAEXXZ PROC			; btMatrix3x3::setIdentity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 318
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 326
	fld1
	fstp	DWORD PTR $T26730[ebp]
	fldz
	fstp	DWORD PTR $T26731[ebp]
	fldz
	fstp	DWORD PTR $T26732[ebp]
	fldz
	fstp	DWORD PTR $T26733[ebp]
	fld1
	fstp	DWORD PTR $T26734[ebp]
	fldz
	fstp	DWORD PTR $T26735[ebp]
	fldz
	fstp	DWORD PTR $T26736[ebp]
	fldz
	fstp	DWORD PTR $T26737[ebp]
	fld1
	fstp	DWORD PTR $T26738[ebp]
	lea	eax, DWORD PTR $T26730[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26731[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26732[ebp]
	push	edx
	lea	eax, DWORD PTR $T26733[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26734[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26735[ebp]
	push	edx
	lea	eax, DWORD PTR $T26736[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26737[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26738[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btMatrix3x3@@QAEXABM00000000@Z ; btMatrix3x3::setValue
; Line 328
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setIdentity@btMatrix3x3@@QAEXXZ ENDP			; btMatrix3x3::setIdentity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setValue@btMatrix3x3@@QAEXABM00000000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xx$ = 8						; size = 4
_xy$ = 12						; size = 4
_xz$ = 16						; size = 4
_yx$ = 20						; size = 4
_yy$ = 24						; size = 4
_yz$ = 28						; size = 4
_zx$ = 32						; size = 4
_zy$ = 36						; size = 4
_zz$ = 40						; size = 4
?setValue@btMatrix3x3@@QAEXABM00000000@Z PROC		; btMatrix3x3::setValue, COMDAT
; _this$ = ecx
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 202
	mov	eax, DWORD PTR _xz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 203
	mov	eax, DWORD PTR _yz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 204
	mov	eax, DWORD PTR _zz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _zx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 205
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?setValue@btMatrix3x3@@QAEXABM00000000@Z ENDP		; btMatrix3x3::setValue
_TEXT	ENDS
PUBLIC	?rayTestSingle@btSoftRigidDynamicsWorld@@SAXABVbtTransform@@0PAVbtCollisionObject@@PBVbtCollisionShape@@0AAURayResultCallback@btCollisionWorld@@@Z ; btSoftRigidDynamicsWorld::rayTestSingle
PUBLIC	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
PUBLIC	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
PUBLIC	?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ ; btCollisionObject::getBroadphaseHandle
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?process@btSoftSingleRayCallback@@UAE_NPBUbtBroadphaseProxy@@@Z
_TEXT	SEGMENT
_collisionObject$ = -8					; size = 4
_this$ = -4						; size = 4
_proxy$ = 8						; size = 4
?process@btSoftSingleRayCallback@@UAE_NPBUbtBroadphaseProxy@@@Z PROC ; btSoftSingleRayCallback::process, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
; Line 227
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 229
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	fld	DWORD PTR [ecx+4]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@process
; Line 230
	xor	al, al
	jmp	SHORT $LN3@process
$LN2@process:
; Line 232
	mov	edx, DWORD PTR _proxy$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _collisionObject$[ebp], eax
; Line 235
	mov	ecx, DWORD PTR _collisionObject$[ebp]
	call	?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ ; btCollisionObject::getBroadphaseHandle
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+228]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+228]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@process
; Line 257
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+228]
	push	eax
	mov	ecx, DWORD PTR _collisionObject$[ebp]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	push	eax
	mov	ecx, DWORD PTR _collisionObject$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	push	eax
	mov	ecx, DWORD PTR _collisionObject$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 144				; 00000090H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	call	?rayTestSingle@btSoftRigidDynamicsWorld@@SAXABVbtTransform@@0PAVbtCollisionObject@@PBVbtCollisionShape@@0AAURayResultCallback@btCollisionWorld@@@Z ; btSoftRigidDynamicsWorld::rayTestSingle
	add	esp, 24					; 00000018H
$LN1@process:
; Line 260
	mov	al, 1
$LN3@process:
; Line 261
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?process@btSoftSingleRayCallback@@UAE_NPBUbtBroadphaseProxy@@@Z ENDP ; btSoftSingleRayCallback::process
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ PROC ; btCollisionObject::getCollisionShape, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 224
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+204]
; Line 226
	mov	esp, ebp
	pop	ebp
	ret	0
?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ENDP ; btCollisionObject::getCollisionShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ PROC ; btCollisionObject::getWorldTransform, COMDAT
; _this$ = ecx
; Line 304
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 305
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 306
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ENDP ; btCollisionObject::getWorldTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ PROC ; btCollisionObject::getBroadphaseHandle, COMDAT
; _this$ = ecx
; Line 321
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 322
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+200]
; Line 323
	mov	esp, ebp
	pop	ebp
	ret	0
?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ ENDP ; btCollisionObject::getBroadphaseHandle
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtSoftSingleRayCallback@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtSoftSingleRayCallback@@UAEPAXI@Z PROC		; btSoftSingleRayCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSoftSingleRayCallback@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtSoftSingleRayCallback@@UAEPAXI@Z ENDP		; btSoftSingleRayCallback::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7btBroadphaseRayCallback@@6B@		; btBroadphaseRayCallback::`vftable'
PUBLIC	??0btBroadphaseAabbCallback@@QAE@XZ		; btBroadphaseAabbCallback::btBroadphaseAabbCallback
EXTRN	??_EbtBroadphaseRayCallback@@UAEPAXI@Z:PROC	; btBroadphaseRayCallback::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_7btBroadphaseRayCallback@@6B@
CONST	SEGMENT
??_7btBroadphaseRayCallback@@6B@ DD FLAT:??_EbtBroadphaseRayCallback@@UAEPAXI@Z ; btBroadphaseRayCallback::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btBroadphaseRayCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btBroadphaseRayCallback@@QAE@XZ PROC			; btBroadphaseRayCallback::btBroadphaseRayCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btBroadphaseAabbCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btBroadphaseRayCallback@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btBroadphaseRayCallback@@QAE@XZ ENDP			; btBroadphaseRayCallback::btBroadphaseRayCallback
_TEXT	ENDS
PUBLIC	??1btBroadphaseRayCallback@@UAE@XZ		; btBroadphaseRayCallback::~btBroadphaseRayCallback
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtBroadphaseRayCallback@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtBroadphaseRayCallback@@UAEPAXI@Z PROC		; btBroadphaseRayCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btBroadphaseRayCallback@@UAE@XZ	; btBroadphaseRayCallback::~btBroadphaseRayCallback
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtBroadphaseRayCallback@@UAEPAXI@Z ENDP		; btBroadphaseRayCallback::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1btBroadphaseAabbCallback@@UAE@XZ		; btBroadphaseAabbCallback::~btBroadphaseAabbCallback
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btBroadphaseRayCallback@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btBroadphaseRayCallback@@UAE@XZ PROC			; btBroadphaseRayCallback::~btBroadphaseRayCallback, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btbroadphaseinterface.h
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btBroadphaseRayCallback@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btBroadphaseAabbCallback@@UAE@XZ	; btBroadphaseAabbCallback::~btBroadphaseAabbCallback
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btBroadphaseRayCallback@@UAE@XZ ENDP			; btBroadphaseRayCallback::~btBroadphaseRayCallback
_TEXT	ENDS
PUBLIC	??_7btBroadphaseAabbCallback@@6B@		; btBroadphaseAabbCallback::`vftable'
EXTRN	??_EbtBroadphaseAabbCallback@@UAEPAXI@Z:PROC	; btBroadphaseAabbCallback::`vector deleting destructor'
;	COMDAT ??_7btBroadphaseAabbCallback@@6B@
CONST	SEGMENT
??_7btBroadphaseAabbCallback@@6B@ DD FLAT:??_EbtBroadphaseAabbCallback@@UAEPAXI@Z ; btBroadphaseAabbCallback::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??1btBroadphaseAabbCallback@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btBroadphaseAabbCallback@@UAE@XZ PROC		; btBroadphaseAabbCallback::~btBroadphaseAabbCallback, COMDAT
; _this$ = ecx
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btBroadphaseAabbCallback@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1btBroadphaseAabbCallback@@UAE@XZ ENDP		; btBroadphaseAabbCallback::~btBroadphaseAabbCallback
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GbtBroadphaseAabbCallback@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtBroadphaseAabbCallback@@UAEPAXI@Z PROC		; btBroadphaseAabbCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btBroadphaseAabbCallback@@UAE@XZ	; btBroadphaseAabbCallback::~btBroadphaseAabbCallback
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtBroadphaseAabbCallback@@UAEPAXI@Z ENDP		; btBroadphaseAabbCallback::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1btSoftSingleRayCallback@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSoftSingleRayCallback@@UAE@XZ PROC			; btSoftSingleRayCallback::~btSoftSingleRayCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btBroadphaseRayCallback@@UAE@XZ	; btBroadphaseRayCallback::~btBroadphaseRayCallback
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSoftSingleRayCallback@@UAE@XZ ENDP			; btSoftSingleRayCallback::~btSoftSingleRayCallback
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btBroadphaseAabbCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btBroadphaseAabbCallback@@QAE@XZ PROC		; btBroadphaseAabbCallback::btBroadphaseAabbCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btBroadphaseAabbCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0btBroadphaseAabbCallback@@QAE@XZ ENDP		; btBroadphaseAabbCallback::btBroadphaseAabbCallback
_TEXT	ENDS
PUBLIC	??0LocalRayResult@btCollisionWorld@@QAE@PBVbtCollisionObject@@PAULocalShapeInfo@1@ABVbtVector3@@M@Z ; btCollisionWorld::LocalRayResult::LocalRayResult
PUBLIC	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
PUBLIC	??G@YA?AVbtVector3@@ABV0@@Z			; operator-
PUBLIC	?getOrigin@btTransform@@QBEABVbtVector3@@XZ	; btTransform::getOrigin
PUBLIC	?isSoftBody@btCollisionShape@@QBE_NXZ		; btCollisionShape::isSoftBody
EXTRN	?rayTestSingle@btCollisionWorld@@SAXABVbtTransform@@0PAVbtCollisionObject@@PBVbtCollisionShape@@0AAURayResultCallback@1@@Z:PROC ; btCollisionWorld::rayTestSingle
EXTRN	?rayTest@btSoftBody@@QAE_NABVbtVector3@@0AAUsRayCast@1@@Z:PROC ; btSoftBody::rayTest
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?rayTestSingle@btSoftRigidDynamicsWorld@@SAXABVbtTransform@@0PAVbtCollisionObject@@PBVbtCollisionShape@@0AAURayResultCallback@btCollisionWorld@@@Z
_TEXT	SEGMENT
_normalInWorldSpace$23915 = -197			; size = 1
_rayResult$23914 = -192					; size = 48
$T23913 = -128						; size = 16
_normal$23909 = -96					; size = 16
_rayDir$23907 = -64					; size = 16
_shapeInfo$23906 = -40					; size = 8
_softResult$23903 = -24					; size = 16
_softBody$23901 = -4					; size = 4
_rayFromTrans$ = 8					; size = 4
_rayToTrans$ = 12					; size = 4
_collisionObject$ = 16					; size = 4
_collisionShape$ = 20					; size = 4
_colObjWorldTransform$ = 24				; size = 4
_resultCallback$ = 28					; size = 4
?rayTestSingle@btSoftRigidDynamicsWorld@@SAXABVbtTransform@@0PAVbtCollisionObject@@PBVbtCollisionShape@@0AAURayResultCallback@btCollisionWorld@@@Z PROC ; btSoftRigidDynamicsWorld::rayTestSingle, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
; Line 288
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 289
	mov	ecx, DWORD PTR _collisionShape$[ebx]
	call	?isSoftBody@btCollisionShape@@QBE_NXZ	; btCollisionShape::isSoftBody
	movzx	eax, al
	test	eax, eax
	je	$LN7@rayTestSin
; Line 290
	mov	ecx, DWORD PTR _collisionObject$[ebx]
	push	ecx
	call	?upcast@btSoftBody@@SAPAV1@PAVbtCollisionObject@@@Z ; btSoftBody::upcast
	add	esp, 4
	mov	DWORD PTR _softBody$23901[ebp], eax
; Line 291
	cmp	DWORD PTR _softBody$23901[ebp], 0
	je	$LN4@rayTestSin
; Line 293
	lea	edx, DWORD PTR _softResult$23903[ebp]
	push	edx
	mov	ecx, DWORD PTR _rayToTrans$[ebx]
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	ecx, DWORD PTR _rayFromTrans$[ebx]
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	ecx, DWORD PTR _softBody$23901[ebp]
	call	?rayTest@btSoftBody@@QAE_NABVbtVector3@@0AAUsRayCast@1@@Z ; btSoftBody::rayTest
	movzx	eax, al
	test	eax, eax
	je	$LN4@rayTestSin
; Line 296
	mov	ecx, DWORD PTR _resultCallback$[ebx]
	fld	DWORD PTR [ecx+4]
	fcomp	DWORD PTR _softResult$23903[ebp+12]
	fnstsw	ax
	test	ah, 1
	jne	$LN4@rayTestSin
; Line 300
	mov	DWORD PTR _shapeInfo$23906[ebp], 0
; Line 301
	mov	edx, DWORD PTR _softResult$23903[ebp+8]
	mov	DWORD PTR _shapeInfo$23906[ebp+4], edx
; Line 303
	mov	ecx, DWORD PTR _rayFromTrans$[ebx]
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	ecx, DWORD PTR _rayToTrans$[ebx]
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	lea	eax, DWORD PTR _rayDir$23907[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 304
	lea	ecx, DWORD PTR _rayDir$23907[ebp]
	push	ecx
	lea	edx, DWORD PTR _normal$23909[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
; Line 305
	lea	ecx, DWORD PTR _normal$23909[ebp]
	call	?normalize@btVector3@@QAEAAV1@XZ	; btVector3::normalize
; Line 307
	cmp	DWORD PTR _softResult$23903[ebp+4], 3
	jne	SHORT $LN2@rayTestSin
; Line 309
	mov	eax, DWORD PTR _softResult$23903[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _softBody$23901[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _normal$23909[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _normal$23909[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _normal$23909[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _normal$23909[ebp+12], edx
; Line 310
	lea	eax, DWORD PTR _rayDir$23907[ebp]
	push	eax
	lea	ecx, DWORD PTR _normal$23909[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@rayTestSin
; Line 312
	lea	ecx, DWORD PTR _normal$23909[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23913[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _normal$23909[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _normal$23909[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _normal$23909[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _normal$23909[ebp+12], edx
$LN2@rayTestSin:
; Line 320
	push	ecx
	fld	DWORD PTR _softResult$23903[ebp+12]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _normal$23909[ebp]
	push	eax
	lea	ecx, DWORD PTR _shapeInfo$23906[ebp]
	push	ecx
	mov	edx, DWORD PTR _collisionObject$[ebx]
	push	edx
	lea	ecx, DWORD PTR _rayResult$23914[ebp]
	call	??0LocalRayResult@btCollisionWorld@@QAE@PBVbtCollisionObject@@PAULocalShapeInfo@1@ABVbtVector3@@M@Z ; btCollisionWorld::LocalRayResult::LocalRayResult
; Line 321
	mov	BYTE PTR _normalInWorldSpace$23915[ebp], 1
; Line 322
	mov	esi, esp
	movzx	eax, BYTE PTR _normalInWorldSpace$23915[ebp]
	push	eax
	lea	ecx, DWORD PTR _rayResult$23914[ebp]
	push	ecx
	mov	edx, DWORD PTR _resultCallback$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _resultCallback$[ebx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	fstp	ST(0)
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@rayTestSin:
; Line 327
	jmp	SHORT $LN1@rayTestSin
$LN7@rayTestSin:
; Line 328
	mov	eax, DWORD PTR _resultCallback$[ebx]
	push	eax
	mov	ecx, DWORD PTR _colObjWorldTransform$[ebx]
	push	ecx
	mov	edx, DWORD PTR _collisionShape$[ebx]
	push	edx
	mov	eax, DWORD PTR _collisionObject$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rayToTrans$[ebx]
	push	ecx
	mov	edx, DWORD PTR _rayFromTrans$[ebx]
	push	edx
	call	?rayTestSingle@btCollisionWorld@@SAXABVbtTransform@@0PAVbtCollisionObject@@PBVbtCollisionShape@@0AAURayResultCallback@1@@Z ; btCollisionWorld::rayTestSingle
	add	esp, 24					; 00000018H
$LN1@rayTestSin:
; Line 330
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@rayTestSin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN16@rayTestSin:
	DD	5
	DD	$LN15@rayTestSin
$LN15@rayTestSin:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN10@rayTestSin
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN11@rayTestSin
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN12@rayTestSin
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN13@rayTestSin
	DD	-192					; ffffff40H
	DD	48					; 00000030H
	DD	$LN14@rayTestSin
$LN14@rayTestSin:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN13@rayTestSin:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN12@rayTestSin:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN11@rayTestSin:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN10@rayTestSin:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
?rayTestSingle@btSoftRigidDynamicsWorld@@SAXABVbtTransform@@0PAVbtCollisionObject@@PBVbtCollisionShape@@0AAURayResultCallback@btCollisionWorld@@@Z ENDP ; btSoftRigidDynamicsWorld::rayTestSingle
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??G@YA?AVbtVector3@@ABV0@@Z
_TEXT	SEGMENT
$T26778 = -12						; size = 4
$T26777 = -8						; size = 4
$T26776 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??G@YA?AVbtVector3@@ABV0@@Z PROC			; operator-, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 805
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 812
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	fstp	DWORD PTR $T26776[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	fstp	DWORD PTR $T26777[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx]
	fchs
	fstp	DWORD PTR $T26778[ebp]
	lea	eax, DWORD PTR $T26776[ebp]
	push	eax
	lea	ecx, DWORD PTR $T26777[ebp]
	push	ecx
	lea	edx, DWORD PTR $T26778[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 814
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVbtVector3@@ABV0@@Z ENDP			; operator-
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getOrigin@btTransform@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOrigin@btTransform@@QBEABVbtVector3@@XZ PROC	; btTransform::getOrigin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esp, ebp
	pop	ebp
	ret	0
?getOrigin@btTransform@@QBEABVbtVector3@@XZ ENDP	; btTransform::getOrigin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0LocalRayResult@btCollisionWorld@@QAE@PBVbtCollisionObject@@PAULocalShapeInfo@1@ABVbtVector3@@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_collisionObject$ = 8					; size = 4
_localShapeInfo$ = 12					; size = 4
_hitNormalLocal$ = 16					; size = 4
_hitFraction$ = 20					; size = 4
??0LocalRayResult@btCollisionWorld@@QAE@PBVbtCollisionObject@@PAULocalShapeInfo@1@ABVbtVector3@@M@Z PROC ; btCollisionWorld::LocalRayResult::LocalRayResult, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionworld.h
; Line 193
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _collisionObject$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _localShapeInfo$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _hitNormalLocal$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _hitFraction$[ebp]
	fstp	DWORD PTR [edx+32]
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0LocalRayResult@btCollisionWorld@@QAE@PBVbtCollisionObject@@PAULocalShapeInfo@1@ABVbtVector3@@M@Z ENDP ; btCollisionWorld::LocalRayResult::LocalRayResult
_TEXT	ENDS
PUBLIC	?isSoftBody@btBroadphaseProxy@@SA_NH@Z		; btBroadphaseProxy::isSoftBody
PUBLIC	?getShapeType@btCollisionShape@@QBEHXZ		; btCollisionShape::getShapeType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?isSoftBody@btCollisionShape@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isSoftBody@btCollisionShape@@QBE_NXZ PROC		; btCollisionShape::isSoftBody, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btcollisionshape.h
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getShapeType@btCollisionShape@@QBEHXZ	; btCollisionShape::getShapeType
	push	eax
	call	?isSoftBody@btBroadphaseProxy@@SA_NH@Z	; btBroadphaseProxy::isSoftBody
	add	esp, 4
; Line 92
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isSoftBody@btCollisionShape@@QBE_NXZ ENDP		; btCollisionShape::isSoftBody
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?isSoftBody@btBroadphaseProxy@@SA_NH@Z
_TEXT	SEGMENT
_proxyType$ = 8						; size = 4
?isSoftBody@btBroadphaseProxy@@SA_NH@Z PROC		; btBroadphaseProxy::isSoftBody, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btbroadphaseproxy.h
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	xor	eax, eax
	cmp	DWORD PTR _proxyType$[ebp], 32		; 00000020H
	sete	al
; Line 162
	pop	ebp
	ret	0
?isSoftBody@btBroadphaseProxy@@SA_NH@Z ENDP		; btBroadphaseProxy::isSoftBody
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getShapeType@btCollisionShape@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getShapeType@btCollisionShape@@QBEHXZ PROC		; btCollisionShape::getShapeType, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btcollisionshape.h
; Line 111
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?getShapeType@btCollisionShape@@QBEHXZ ENDP		; btCollisionShape::getShapeType
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@PAVbtCollisionObject@@@@QAEAAPAVbtCollisionObject@@H@Z ; btAlignedObjectArray<btCollisionObject *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject *>::size
PUBLIC	?serializeSoftBodies@btSoftRigidDynamicsWorld@@IAEXPAVbtSerializer@@@Z ; btSoftRigidDynamicsWorld::serializeSoftBodies
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?serializeSoftBodies@btSoftRigidDynamicsWorld@@IAEXPAVbtSerializer@@@Z
_TEXT	SEGMENT
_structType$23929 = -24					; size = 4
_chunk$23928 = -20					; size = 4
_len$23927 = -16					; size = 4
_colObj$23925 = -12					; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_serializer$ = 8					; size = 4
?serializeSoftBodies@btSoftRigidDynamicsWorld@@IAEXPAVbtSerializer@@@Z PROC ; btSoftRigidDynamicsWorld::serializeSoftBodies, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftrigiddynamicsworld.cpp
; Line 334
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 337
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@serializeS
$LN3@serializeS:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@serializeS:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?size@?$btAlignedObjectArray@PAVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN5@serializeS
; Line 339
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$btAlignedObjectArray@PAVbtCollisionObject@@@@QAEAAPAVbtCollisionObject@@H@Z ; btAlignedObjectArray<btCollisionObject *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _colObj$23925[ebp], edx
; Line 340
	mov	ecx, DWORD PTR _colObj$23925[ebp]
	call	?getInternalType@btCollisionObject@@QBEHXZ ; btCollisionObject::getInternalType
	and	eax, 8
	je	$LN1@serializeS
; Line 342
	mov	eax, DWORD PTR _colObj$23925[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _colObj$23925[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len$23927[ebp], eax
; Line 343
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR _len$23927[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$23928[ebp], eax
; Line 344
	mov	esi, esp
	mov	eax, DWORD PTR _serializer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _chunk$23928[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _colObj$23925[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _colObj$23925[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _structType$23929[ebp], eax
; Line 345
	mov	esi, esp
	mov	ecx, DWORD PTR _colObj$23925[ebp]
	push	ecx
	push	1497645651				; 59444253H
	mov	edx, DWORD PTR _structType$23929[ebp]
	push	edx
	mov	eax, DWORD PTR _chunk$23928[ebp]
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@serializeS:
; Line 347
	jmp	$LN3@serializeS
$LN5@serializeS:
; Line 349
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?serializeSoftBodies@btSoftRigidDynamicsWorld@@IAEXPAVbtSerializer@@@Z ENDP ; btSoftRigidDynamicsWorld::serializeSoftBodies
_TEXT	ENDS
EXTRN	?serializeCollisionObjects@btCollisionWorld@@IAEXPAVbtSerializer@@@Z:PROC ; btCollisionWorld::serializeCollisionObjects
EXTRN	?serializeRigidBodies@btDiscreteDynamicsWorld@@IAEXPAVbtSerializer@@@Z:PROC ; btDiscreteDynamicsWorld::serializeRigidBodies
EXTRN	?serializeDynamicsWorldInfo@btDiscreteDynamicsWorld@@IAEXPAVbtSerializer@@@Z:PROC ; btDiscreteDynamicsWorld::serializeDynamicsWorldInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?serialize@btSoftRigidDynamicsWorld@@UAEXPAVbtSerializer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_serializer$ = 8					; size = 4
?serialize@btSoftRigidDynamicsWorld@@UAEXPAVbtSerializer@@@Z PROC ; btSoftRigidDynamicsWorld::serialize, COMDAT
; _this$ = ecx
; Line 352
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 354
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 356
	mov	ecx, DWORD PTR _serializer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serializeDynamicsWorldInfo@btDiscreteDynamicsWorld@@IAEXPAVbtSerializer@@@Z ; btDiscreteDynamicsWorld::serializeDynamicsWorldInfo
; Line 358
	mov	edx, DWORD PTR _serializer$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serializeSoftBodies@btSoftRigidDynamicsWorld@@IAEXPAVbtSerializer@@@Z ; btSoftRigidDynamicsWorld::serializeSoftBodies
; Line 360
	mov	eax, DWORD PTR _serializer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serializeRigidBodies@btDiscreteDynamicsWorld@@IAEXPAVbtSerializer@@@Z ; btDiscreteDynamicsWorld::serializeRigidBodies
; Line 362
	mov	ecx, DWORD PTR _serializer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serializeCollisionObjects@btCollisionWorld@@IAEXPAVbtSerializer@@@Z ; btCollisionWorld::serializeCollisionObjects
; Line 364
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 365
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?serialize@btSoftRigidDynamicsWorld@@UAEXPAVbtSerializer@@@Z ENDP ; btSoftRigidDynamicsWorld::serialize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAVbtCollisionObject@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAVbtCollisionObject@@@@QBEHXZ PROC ; btAlignedObjectArray<btCollisionObject *>::size, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAVbtCollisionObject@@@@QBEHXZ ENDP ; btAlignedObjectArray<btCollisionObject *>::size
_TEXT	ENDS
PUBLIC	??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (n>=0)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAVbtCollisionObject@@@@QAEAAPAVbtCollisionObject@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAVbtCollisionObject@@@@QAEAAPAVbtCollisionObject@@H@Z PROC ; btAlignedObjectArray<btCollisionObject *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAVbtCollisionObject@@@@QAEAAPAVbtCollisionObject@@H@Z ENDP ; btAlignedObjectArray<btCollisionObject *>::operator[]
_TEXT	ENDS
PUBLIC	?resize@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXHABQAUCell@?$btSparseSdf@$02@@@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::resize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Initialize@?$btSparseSdf@$02@@QAEXHH@Z
_TEXT	SEGMENT
$T26799 = -8						; size = 4
_this$ = -4						; size = 4
_hashsize$ = 8						; size = 4
_clampCells$ = 12					; size = 4
?Initialize@?$btSparseSdf@$02@@QAEXHH@Z PROC		; btSparseSdf<3>::Initialize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsparsesdf.h
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 85
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _clampCells$[ebp]
	mov	DWORD PTR [eax+32], ecx
; Line 86
	mov	DWORD PTR $T26799[ebp], 0
	lea	edx, DWORD PTR $T26799[ebp]
	push	edx
	mov	eax, DWORD PTR _hashsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXHABQAUCell@?$btSparseSdf@$02@@@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::resize
; Line 87
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@?$btSparseSdf@$02@@QAEXXZ	; btSparseSdf<3>::Reset
; Line 88
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Initialize@?$btSparseSdf@$02@@QAEXHH@Z ENDP		; btSparseSdf<3>::Initialize
_TEXT	ENDS
PUBLIC	__real@3e800000
PUBLIC	??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Reset@?$btSparseSdf@$02@@QAEXXZ
_TEXT	SEGMENT
$T26802 = -24						; size = 4
_pn$24052 = -20						; size = 4
_pc$24048 = -16						; size = 4
_ni$24044 = -12						; size = 4
_i$24043 = -8						; size = 4
_this$ = -4						; size = 4
?Reset@?$btSparseSdf@$02@@QAEXXZ PROC			; btSparseSdf<3>::Reset, COMDAT
; _this$ = ecx
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 92
	mov	DWORD PTR _i$24043[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
	mov	DWORD PTR _ni$24044[ebp], eax
	jmp	SHORT $LN5@Reset
$LN4@Reset:
	mov	eax, DWORD PTR _i$24043[ebp]
	add	eax, 1
	mov	DWORD PTR _i$24043[ebp], eax
$LN5@Reset:
	mov	ecx, DWORD PTR _i$24043[ebp]
	cmp	ecx, DWORD PTR _ni$24044[ebp]
	jge	SHORT $LN3@Reset
; Line 94
	mov	edx, DWORD PTR _i$24043[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pc$24048[ebp], eax
; Line 95
	mov	ecx, DWORD PTR _i$24043[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
	mov	DWORD PTR [eax], 0
$LN2@Reset:
; Line 96
	cmp	DWORD PTR _pc$24048[ebp], 0
	je	SHORT $LN1@Reset
; Line 98
	mov	edx, DWORD PTR _pc$24048[ebp]
	mov	eax, DWORD PTR [edx+280]
	mov	DWORD PTR _pn$24052[ebp], eax
; Line 99
	mov	ecx, DWORD PTR _pc$24048[ebp]
	mov	DWORD PTR $T26802[ebp], ecx
	mov	edx, DWORD PTR $T26802[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 100
	mov	eax, DWORD PTR _pn$24052[ebp]
	mov	DWORD PTR _pc$24048[ebp], eax
; Line 101
	jmp	SHORT $LN2@Reset
$LN1@Reset:
; Line 102
	jmp	SHORT $LN4@Reset
$LN3@Reset:
; Line 103
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR [ecx+20]
; Line 104
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 105
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 106
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 1
; Line 107
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 1
; Line 108
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@?$btSparseSdf@$02@@QAEXXZ ENDP			; btSparseSdf<3>::Reset
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::init
PUBLIC	??0?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::btAlignedAllocator<btSparseSdf<3>::Cell *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::btAlignedObjectArray<btSparseSdf<3>::Cell *>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::btAlignedAllocator<btSparseSdf<3>::Cell *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::btAlignedObjectArray<btSparseSdf<3>::Cell *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::~btAlignedObjectArray<btSparseSdf<3>::Cell *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::~btAlignedObjectArray<btSparseSdf<3>::Cell *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@2
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@2:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::operator[]
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::init
PUBLIC	??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody *,16>::btAlignedAllocator<btSoftBody *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ PROC	; btAlignedObjectArray<btSoftBody *>::btAlignedObjectArray<btSoftBody *>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody *,16>::btAlignedAllocator<btSoftBody *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ENDP	; btAlignedObjectArray<btSoftBody *>::btAlignedObjectArray<btSoftBody *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ PROC	; btAlignedObjectArray<btSoftBody *>::~btAlignedObjectArray<btSoftBody *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PAVbtSoftBody@@@@QAE@XZ ENDP	; btAlignedObjectArray<btSoftBody *>::~btAlignedObjectArray<btSoftBody *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@3
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@3:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEAAPAVbtSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody *>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody *>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody *>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T26821 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody *>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody *>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody *>::reserve
$LN1@push_back:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T26821[ebp], eax
	cmp	DWORD PTR $T26821[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR $T26821[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T26821[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody *>::push_back
_TEXT	ENDS
PUBLIC	?pop_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody *>::pop_back
PUBLIC	?swap@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHH@Z ; btAlignedObjectArray<btSoftBody *>::swap
PUBLIC	?findLinearSearch@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHABQAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::findLinearSearch
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?remove@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z
_TEXT	SEGMENT
_findIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?remove@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody *>::remove, COMDAT
; _this$ = ecx
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 484
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findLinearSearch@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHABQAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::findLinearSearch
	mov	DWORD PTR _findIndex$[ebp], eax
; Line 485
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	cmp	DWORD PTR _findIndex$[ebp], eax
	jge	SHORT $LN2@remove
; Line 487
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _findIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?swap@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHH@Z ; btAlignedObjectArray<btSoftBody *>::swap
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody *>::pop_back
$LN2@remove:
; Line 490
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?remove@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXABQAVbtSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody *>::remove
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@4
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@4:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXHH@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXXZ PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXHH@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::clear
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXH@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXHABQAUCell@?$btSparseSdf@$02@@@Z
_TEXT	SEGMENT
tv83 = -24						; size = 4
$T26836 = -20						; size = 4
_i$24395 = -16						; size = 4
_i$24389 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXHABQAUCell@?$btSparseSdf@$02@@@Z PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$24389[ebp], ecx
	jmp	SHORT $LN8@resize
$LN7@resize:
	mov	edx, DWORD PTR _i$24389[ebp]
	add	edx, 1
	mov	DWORD PTR _i$24389[ebp], edx
$LN8@resize:
	mov	eax, DWORD PTR _i$24389[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize
; Line 229
	jmp	SHORT $LN7@resize
$LN6@resize:
; Line 230
	jmp	SHORT $LN5@resize
$LN9@resize:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXH@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::reserve
$LN4@resize:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$24395[ebp], edx
	jmp	SHORT $LN3@resize
$LN2@resize:
	mov	eax, DWORD PTR _i$24395[ebp]
	add	eax, 1
	mov	DWORD PTR _i$24395[ebp], eax
$LN3@resize:
	mov	ecx, DWORD PTR _i$24395[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$24395[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T26836[ebp], eax
	cmp	DWORD PTR $T26836[ebp], 0
	je	SHORT $LN12@resize
	mov	eax, DWORD PTR $T26836[ebp]
	mov	ecx, DWORD PTR _fillData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T26836[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN13@resize
$LN12@resize:
	mov	DWORD PTR tv83[ebp], 0
$LN13@resize:
; Line 240
	jmp	SHORT $LN2@resize
$LN5@resize:
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXHABQAUCell@?$btSparseSdf@$02@@@Z ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::resize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::btAlignedAllocator<btSparseSdf<3>::Cell *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::btAlignedAllocator<btSparseSdf<3>::Cell *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody *>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize
$LN3@allocSize:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody *>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody *>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody *>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody *>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody *>::clear
_TEXT	ENDS
PUBLIC	??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (m_size>0)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?pop_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pop_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody *>::pop_back, COMDAT
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN1@pop_back
	push	195					; 000000c3H
	push	OFFSET ??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@pop_back:
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 198
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody *>::pop_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody *>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody *>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody *>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$24425 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody *>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody *>::allocate
	mov	DWORD PTR _s$24425[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$24425[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z ; btAlignedObjectArray<btSoftBody *>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody *>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody *>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$24425[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody *>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?swap@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHH@Z
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_index0$ = 8						; size = 4
_index1$ = 12						; size = 4
?swap@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody *>::swap, COMDAT
; _this$ = ecx
; Line 408
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 415
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _index0$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _temp$[ebp], eax
; Line 416
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _index0$[ebp]
	mov	esi, DWORD PTR _index1$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 417
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _index1$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 420
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?swap@?$btAlignedObjectArray@PAVbtSoftBody@@@@QAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody *>::swap
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?findLinearSearch@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHABQAVbtSoftBody@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?findLinearSearch@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHABQAVbtSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody *>::findLinearSearch, COMDAT
; _this$ = ecx
; Line 466
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 467
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	mov	DWORD PTR _index$[ebp], eax
; Line 470
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@findLinear
$LN3@findLinear:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@findLinear:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@findLinear
; Line 472
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@findLinear
; Line 474
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 475
	jmp	SHORT $LN2@findLinear
$LN1@findLinear:
; Line 477
	jmp	SHORT $LN3@findLinear
$LN2@findLinear:
; Line 478
	mov	eax, DWORD PTR _index$[ebp]
; Line 479
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?findLinearSearch@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHABQAVbtSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody *>::findLinearSearch
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody *,16>::btAlignedAllocator<btSoftBody *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody *,16>::btAlignedAllocator<btSoftBody *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::destroy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy
$LN2@destroy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy
; Line 99
	jmp	SHORT $LN2@destroy
$LN4@destroy:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEXPAPAUCell@?$btSparseSdf@$02@@@Z ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEXPAPAUCell@?$btSparseSdf@$02@@@Z ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::deallocate
$LN1@deallocate:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::deallocate
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IBEXHHPAPAUCell@?$btSparseSdf@$02@@@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEPAXH@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXH@Z
_TEXT	SEGMENT
_s$24970 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@2
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEPAXH@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::allocate
	mov	DWORD PTR _s$24970[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$24970[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IBEXHHPAPAUCell@?$btSparseSdf@$02@@@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXHH@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEXXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$24970[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@2:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T26869 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody *>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy
$LN2@copy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T26869[ebp], eax
	cmp	DWORD PTR $T26869[ebp], 0
	je	SHORT $LN6@copy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T26869[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T26869[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy
$LN6@copy:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy:
	jmp	SHORT $LN2@copy
$LN4@copy:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IBEXHHPAPAVbtSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody *>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody *>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@2
$LN2@destroy@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@2
; Line 99
	jmp	SHORT $LN2@destroy@2
$LN4@destroy@2:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody *>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z ; btAlignedAllocator<btSoftBody *,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody *>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z ; btAlignedAllocator<btSoftBody *,16>::allocate
	jmp	SHORT $LN2@allocate
$LN1@allocate:
; Line 106
	xor	eax, eax
$LN2@allocate:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody *>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z ; btAlignedAllocator<btSoftBody *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@2
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@2
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z ; btAlignedAllocator<btSoftBody *,16>::deallocate
$LN1@deallocate@2:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@2:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PAVbtSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody *>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IBEXHHPAPAUCell@?$btSparseSdf@$02@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T26880 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IBEXHHPAPAUCell@?$btSparseSdf@$02@@@Z PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@2
$LN2@copy@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@2
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T26880[ebp], eax
	cmp	DWORD PTR $T26880[ebp], 0
	je	SHORT $LN6@copy@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T26880[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T26880[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@2
$LN6@copy@2:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@2:
	jmp	SHORT $LN2@copy@2
$LN4@copy@2:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IBEXHHPAPAUCell@?$btSparseSdf@$02@@@Z ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::copy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEPAPAUCell@?$btSparseSdf@$02@@HPAPBQAU23@@Z ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@2
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEPAPAUCell@?$btSparseSdf@$02@@HPAPBQAU23@@Z ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::allocate
	jmp	SHORT $LN2@allocate@2
$LN1@allocate@2:
; Line 106
	xor	eax, eax
$LN2@allocate@2:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEXPAPAUCell@?$btSparseSdf@$02@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEXPAPAUCell@?$btSparseSdf@$02@@@Z PROC ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEXPAPAUCell@?$btSparseSdf@$02@@@Z ENDP ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z PROC ; btAlignedAllocator<btSoftBody *,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEPAPAVbtSoftBody@@HPAPBQAV2@@Z ENDP ; btAlignedAllocator<btSoftBody *,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody *,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PAVbtSoftBody@@$0BA@@@QAEXPAPAVbtSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEPAPAUCell@?$btSparseSdf@$02@@HPAPBQAU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEPAPAUCell@?$btSparseSdf@$02@@HPAPBQAU23@@Z PROC ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@PAUCell@?$btSparseSdf@$02@@$0BA@@@QAEPAPAUCell@?$btSparseSdf@$02@@HPAPBQAU23@@Z ENDP ; btAlignedAllocator<btSparseSdf<3>::Cell *,16>::allocate
_TEXT	ENDS
END
