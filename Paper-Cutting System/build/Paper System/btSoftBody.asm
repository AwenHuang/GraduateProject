; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\專題\自建專案\自建專案\src\BulletSoftBody\btSoftBody.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?start_dir@@3HA					; start_dir
PUBLIC	?current_mode@@3HA				; current_mode
PUBLIC	?oldmass@@3MA					; oldmass
PUBLIC	?another@@3HA					; another
PUBLIC	?state@@3HA					; state
PUBLIC	?one@@3HA					; one
PUBLIC	?info@@3PAUcut_info@@A				; info
PUBLIC	?cur_step@@3HA					; cur_step
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@D@std@@2HB	; std::numeric_limits<char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_W@std@@2HB	; std::numeric_limits<wchar_t>::max_digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_N@std@@2HB	; std::numeric_limits<bool>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@C@std@@2HB	; std::numeric_limits<signed char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@E@std@@2HB	; std::numeric_limits<unsigned char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@F@std@@2HB	; std::numeric_limits<short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@G@std@@2HB	; std::numeric_limits<unsigned short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@H@std@@2HB	; std::numeric_limits<int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@I@std@@2HB	; std::numeric_limits<unsigned int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@J@std@@2HB	; std::numeric_limits<long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@K@std@@2HB	; std::numeric_limits<unsigned long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_J@std@@2HB	; std::numeric_limits<__int64>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_K@std@@2HB	; std::numeric_limits<unsigned __int64>::max_digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
PUBLIC	?start_node@@3HA				; start_node
PUBLIC	?last_face@@3PAHA				; last_face
_BSS	SEGMENT
?start_dir@@3HA DD 01H DUP (?)				; start_dir
?current_mode@@3HA DD 01H DUP (?)			; current_mode
?oldmass@@3MA DD 01H DUP (?)				; oldmass
?another@@3HA DD 01H DUP (?)				; another
?state@@3HA DD	01H DUP (?)				; state
?one@@3HA DD	01H DUP (?)				; one
?info@@3PAUcut_info@@A DB 0960H DUP (?)			; info
?cur_step@@3HA DD 01H DUP (?)				; cur_step
_BSS	ENDS
CONST	SEGMENT
_PI	DD	040490fdbr			; 3.14159
_EPSILON DD	034000000r			; 1.19209e-007
$SG52761 DB	'Assert ..\..\src\BulletSoftBody\btSoftBody.cpp:%u (node0'
	DB	' != node1)', 0aH, 00H
$SG53984 DB	'%f %f %f', 0aH, 00H
	ORG $+2
$SG52763 DB	'Assert ..\..\src\BulletSoftBody\btSoftBody.cpp:%u (node1'
	DB	' != node2)', 0aH, 00H
$SG54007 DB	'w', 00H
	ORG $+2
$SG52765 DB	'Assert ..\..\src\BulletSoftBody\btSoftBody.cpp:%u (node2'
	DB	' != node0)', 0aH, 00H
$SG54009 DB	'w', 00H
	ORG $+2
$SG52914 DB	'Assert ..\..\src\BulletSoftBody\btSoftBody.cpp:%u (nodeI'
	DB	'ndex >= 0 && nodeIndex < m_nodes.size())', 0aH, 00H
	ORG $+2
$SG53602 DB	'Assert ..\..\src\BulletSoftBody\btSoftBody.cpp:%u (sum ='
	DB	'= 2)', 0aH, 00H
	ORG $+2
$SG53902 DB	'hey hey hey', 0aH, 00H
	ORG $+3
$SG53987 DB	0e8H, 0a8H, 0adH, 0e7H, 0bdH, 0aeH, '?', 090H, 0e5H, '?, '
	DB	0e8H, 0abH, 08bH, 0e7H, 094H, 0b1H, 0e4H, 0bdH, 0a0H, 0e7H, '?'
	DB	0e4H, 0b8H, 08bH, 0e6H, 096H, 0b9H, 0e5H, 0beH, 080H, 0e4H, 0b8H
	DB	08aH, 0e5H, 089H, 0aaH, 0aH, 00H
$SG53990 DB	0e8H, 0a8H, 0adH, 0e7H, 0bdH, 0aeH, '?', 090H, 0e5H, '?, '
	DB	0e8H, 0abH, 08bH, 0e7H, 094H, 0b1H, 0e4H, 0bdH, 0a0H, 0e7H, '?'
	DB	0e5H, 0b7H, 0a6H, 0e6H, 096H, 0b9H, 0e5H, 0beH, 080H, '?', 0b3H
	DB	0e5H, 089H, 0aaH, 0aH, 00H
	ORG $+1
$SG53993 DB	0e8H, 0a8H, 0adH, 0e7H, 0bdH, 0aeH, '?', 090H, 0e5H, '?, '
	DB	0e8H, 0abH, 08bH, 0e7H, 094H, 0b1H, 0e4H, 0bdH, 0a0H, 0e7H, '?'
	DB	'?', 0b3H, 0e6H, 096H, 0b9H, 0e5H, 0beH, 080H, 0e5H, 0b7H, 0a6H
	DB	0e5H, 089H, 0aaH, 0aH, 00H
	ORG $+1
$SG53996 DB	0e8H, 0a8H, 0adH, 0e7H, 0bdH, 0aeH, '?', 090H, 0e5H, '?, '
	DB	0e8H, 0abH, 08bH, 0e7H, 094H, 0b1H, 0e4H, 0bdH, 0a0H, 0e7H, '?'
	DB	0e4H, 0b8H, 08aH, 0e6H, 096H, 0b9H, 0e5H, 0beH, 080H, 0e4H, 0b8H
	DB	08bH, 0e5H, 089H, 0aaH, 0aH, 00H
$SG54008 DB	'EvalData.txt', 00H
	ORG $+3
$SG54010 DB	'FaceAndLinkData.txt', 00H
$SG54011 DB	'w', 00H
	ORG $+2
$SG54012 DB	'FaceNodeData.txt', 00H
	ORG $+3
$SG54013 DB	'=============================== Cutting ================'
	DB	'=======================', 0aH, 00H
	ORG $+3
$SG54020 DB	'm_bbending = 1, link %d %d', 0aH, 00H
$SG54033 DB	0e7H, 0acH, '?d?', 08bH, 'link:l.m_n[0]-nbase = %d', 09H, 'l'
	DB	'.m_n[1]-nbase = %d', 0aH, 00H
$SG54038 DB	0e7H, 0acH, '?d?', 08bH, 'face:', 0aH, 00H
	ORG $+3
$SG54039 DB	'f.m_n[0]-nbase = %d', 09H, 'f.m_n[1]-nbase = %d', 0aH, 00H
	ORG $+3
$SG54040 DB	'f.m_n[1]-nbase = %d', 09H, 'f.m_n[2]-nbase = %d', 0aH, 00H
	ORG $+3
$SG54041 DB	'f.m_n[2]-nbase = %d', 09H, 'f.m_n[0]-nbase = %d', 0aH, 00H
	ORG $+3
$SG54045 DB	'%d Node Features:', 0aH, 'm_x:%f %f %f', 0aH, 'm_q:%f %f'
	DB	' %f', 0aH, 'm_v:%f %f %f', 0aH, 'm_f:%f %f %f', 0aH, 'm_n:%f '
	DB	'%f %f', 0aH, 'm_im:%f', 0aH, 'm_area:%f', 0aH, 'm_leaf:%d', 0aH
	DB	'm_battach:%d', 0aH, 0aH, 00H
	ORG $+2
$SG54046 DB	'impact: %f %f %f', 0aH, 00H
	ORG $+2
$SG54067 DB	'last_face:%d', 0aH, 00H
	ORG $+2
$SG54069 DB	'Face:%d %d %d', 0aH, 00H
	ORG $+1
$SG54070 DB	'%d*cutface = %d %d %d', 0aH, 00H
	ORG $+1
$SG54082 DB	'last_impact = %d', 0aH, 00H
	ORG $+2
$SG54083 DB	'last_rcut = %d', 0aH, 00H
$SG54084 DB	'last_lcut = %d', 0aH, 00H
$SG54114 DB	'*link %d %d ?', 089H, 0e4H, 0baH, 0a4H, 0e9H, 0bbH, 09eH
	DB	'\n', 00H
	ORG $+1
$SG54135 DB	'*link %d %d ?', 089H, 0e4H, 0baH, 0a4H, 0e9H, 0bbH, 09eH
	DB	'\n', 00H
	ORG $+1
$SG54137 DB	'crossface = %d', 0aH, ' outcross = %d', 0aH, 00H
	ORG $+1
$SG54139 DB	'Sorry~', 0e8H, 0abH, 08bH, 0e9H, '??', 0b0H, 0e5H, '??', 0aaH
	DB	0e4H, '?', 0e6H, 0acH, '???', 0aH, 00H
	ORG $+2
$SG54140 DB	'Sorry~ Please try again. >O<', 0aH, 00H
	ORG $+2
$SG54143 DB	'//// crossface ////', 0aH, 00H
	ORG $+3
$SG54149 DB	'*%d %d', 0aH, 00H
$SG54152 DB	'//// not crossface ////', 0aH, 00H
	ORG $+3
$SG54158 DB	'judgelink m = %f', 0aH, ' impact = %f', 0aH, 00H
	ORG $+1
$SG54174 DB	'impact on the left face', 0aH, 00H
	ORG $+3
$SG54182 DB	'impact on the right face', 0aH, 00H
	ORG $+2
$SG54212 DB	'right_node:%d', 0aH, 'left_node:%d', 0aH, 00H
$SG54218 DB	'right_node:%d', 0aH, 'left_node:%d', 0aH, 00H
$SG54224 DB	'right_node:%d', 0aH, 'left_node:%d', 0aH, 00H
$SG54230 DB	'right_node:%d', 0aH, 'left_node:%d', 0aH, 00H
$SG54232 DB	'I J %d %d', 0aH, 00H
	ORG $+1
$SG54237 DB	'judgelink m = %f', 0aH, 00H
	ORG $+2
$SG54238 DB	'a = %f', 0aH, 00H
$SG54239 DB	'b = %f', 0aH, 00H
$SG54257 DB	'right_node:%d', 0aH, 'left_node:%d', 0aH, 00H
$SG54273 DB	'right_node:%d', 0aH, 'left_node:%d', 0aH, 00H
$SG54275 DB	'?', 080H, '?', 080H, '~?', 099H, 0e5H, 080H, 08bH, 0e4H, '?'
	DB	0e8H, 0a1H, 08cH, 0e5H, 089H, 0aaH, 0aH, 00H
$SG54276 DB	'Oops~ Please try again. ^_^', 0aH, 00H
	ORG $+3
$SG54279 DB	'*impact node %d : %f %f %f', 0aH, 00H
$SG54290 DB	'impact node %d : %f %f %f', 0aH, 00H
	ORG $+1
$SG54298 DB	'store intersect : %f %f %f', 0aH, 00H
$SG54307 DB	'up_node = %d', 0aH, 00H
	ORG $+2
$SG54309 DB	'****end fold line', 0aH, 00H
	ORG $+1
$SG54314 DB	'rcut node %d : %f %f %f', 0aH, 00H
	ORG $+3
$SG54317 DB	'lcut node %d : %f %f %f', 0aH, 00H
	ORG $+3
$SG54329 DB	'up_face = %d', 0aH, 00H
	ORG $+2
$SG54331 DB	'crossface t = %f', 0aH, 00H
	ORG $+2
$SG54334 DB	'edge_rcut %d : %f %f %f', 0aH, 00H
	ORG $+3
$SG54337 DB	'edge_lcut %d : %f %f %f', 0aH, 00H
	ORG $+3
$SG54338 DB	'^^^TEST:%d', 0aH, 00H
$SG54340 DB	'cut_state = 0', 0aH, 00H
	ORG $+1
$SG54363 DB	'm_face.size():%d', 0aH, 00H
	ORG $+2
$SG54372 DB	'cut_state = 1', 0aH, 00H
	ORG $+1
$SG54385 DB	'cross on %d face %d %d %d', 0aH, 00H
	ORG $+1
$SG54386 DB	'cutdege = %d %d', 0aH, 00H
	ORG $+3
$SG54389 DB	'poplr = %d (0:last_lcut,1:last_rcut)', 0aH, 00H
	ORG $+2
$SG54392 DB	'new face pftttt[0] : %d %d %d', 0aH, 00H
	ORG $+1
$SG54393 DB	'new face pftttt[1] : %d %d %d', 0aH, 00H
	ORG $+1
$SG54398 DB	'new face pftttt[0] : %d %d %d', 0aH, 00H
	ORG $+1
$SG54399 DB	'new face pftttt[1] : %d %d %d', 0aH, 00H
	ORG $+1
$SG54406 DB	'poplr = %d (0:last_lcut,1:last_rcut)', 0aH, 00H
	ORG $+2
$SG54408 DB	'%d', 0aH, 00H
$SG54410 DB	'new face pftttt[0] : %d %d %d', 0aH, 00H
	ORG $+1
$SG54411 DB	'new face pftttt[1] : %d %d %d', 0aH, 00H
	ORG $+1
$SG54416 DB	'new face pftttt[0] : %d %d %d', 0aH, 00H
	ORG $+1
$SG54417 DB	'new face pftttt[1] : %d %d %d', 0aH, 00H
	ORG $+1
$SG54429 DB	'new face pft[0] : %d %d %d', 0aH, 00H
$SG54430 DB	'new face pft[1] : %d %d %d', 0aH, 00H
$SG54444 DB	'new face pftt[0] : %d %d %d', 0aH, 00H
	ORG $+3
$SG54446 DB	'new face pfttt[0] : %d %d %d', 0aH, 00H
	ORG $+2
$SG54447 DB	'new face pfttt[1] : %d %d %d', 0aH, 00H
	ORG $+2
$SG54462 DB	'new link pft[0] : %d %d', 0aH, 00H
	ORG $+3
$SG54463 DB	'new link pft[1] : %d %d', 0aH, 00H
	ORG $+3
$SG54468 DB	'new link pft[0] : %d %d', 0aH, 00H
	ORG $+3
$SG54469 DB	'new link pft[1] : %d %d', 0aH, 00H
	ORG $+3
$SG54470 DB	'm_face.size():%d', 0aH, 00H
	ORG $+2
$SG54474 DB	'crossface cut', 0aH, 00H
	ORG $+1
$SG54477 DB	'new face pft[0] : %d %d %d', 0aH, 00H
$SG54478 DB	'new face pft[1] : %d %d %d', 0aH, 00H
$SG54482 DB	'new face pft[0] : %d %d %d', 0aH, 00H
$SG54483 DB	'new face pft[1] : %d %d %d', 0aH, 00H
$SG54485 DB	'new face pftt[0] : %d %d %d', 0aH, 00H
	ORG $+3
$SG54486 DB	'new face pftt[1] : %d %d %d', 0aH, 00H
	ORG $+3
$SG54580 DB	'%d face : %d %d %d', 0aH, 00H
$SG54584 DB	'%d link : %d %d', 0aH, 00H
	ORG $+3
$SG54761 DB	'You cut the paper!', 0aH, 00H
$SG55584 DB	'UpdateClusters', 00H
	ORG $+1
$SG55701 DB	'ApplyClusters', 00H
	ORG $+2
$SG55977 DB	'SoftBody applyForces', 00H
	ORG $+3
$SG56337 DB	'SoftBodyMaterialData', 00H
	ORG $+3
$SG56341 DB	'SoftBodyMaterialData', 00H
	ORG $+3
$SG56361 DB	'SoftBodyNodeData', 00H
	ORG $+3
$SG56378 DB	'Assert ..\..\src\BulletSoftBody\btSoftBody.cpp:%u (memPt'
	DB	'r->m_nodeIndices[0] < m_nodes.size())', 0aH, 00H
	ORG $+1
$SG56380 DB	'Assert ..\..\src\BulletSoftBody\btSoftBody.cpp:%u (memPt'
	DB	'r->m_nodeIndices[1] < m_nodes.size())', 0aH, 00H
	ORG $+1
$SG56384 DB	'SoftBodyLinkData', 00H
	ORG $+3
$SG56407 DB	'SoftBodyFaceData', 00H
	ORG $+3
$SG56430 DB	'SoftBodyTetraData', 00H
	ORG $+2
$SG56451 DB	'SoftRigidAnchorData', 00H
$SG56447 DB	'Assert ..\..\src\BulletSoftBody\btSoftBody.cpp:%u (memPt'
	DB	'r->m_nodeIndex < m_nodes.size())', 0aH, 00H
	ORG $+2
$SG56475 DB	'btVector3FloatData', 00H
	ORG $+1
$SG56492 DB	'float', 00H
	ORG $+2
$SG56496 DB	'SoftBodyPoseData', 00H
	ORG $+3
$SG56526 DB	'btVector3FloatData', 00H
	ORG $+1
$SG56543 DB	'float', 00H
	ORG $+2
$SG56560 DB	'Assert ..\..\src\BulletSoftBody\btSoftBody.cpp:%u (index'
	DB	'Ptr)', 0aH, 00H
	ORG $+2
$SG56564 DB	'int', 00H
$SG56568 DB	'SoftBodyClusterData', 00H
$SG56602 DB	'btSoftBodyJointData', 00H
$SG56604 DB	'btSoftBodyFloatData', 00H
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 08H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_K@std@@2HB DD 015H	; std::numeric_limits<unsigned __int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_J@std@@2HB DD 014H	; std::numeric_limits<__int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@K@std@@2HB DD 0bH	; std::numeric_limits<unsigned long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@J@std@@2HB DD 0bH	; std::numeric_limits<long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@I@std@@2HB DD 0bH	; std::numeric_limits<unsigned int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@H@std@@2HB DD 0bH	; std::numeric_limits<int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@G@std@@2HB DD 06H	; std::numeric_limits<unsigned short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@F@std@@2HB DD 06H	; std::numeric_limits<short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@E@std@@2HB DD 04H	; std::numeric_limits<unsigned char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@C@std@@2HB DD 04H	; std::numeric_limits<signed char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_N@std@@2HB DD 00H	; std::numeric_limits<bool>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_W@std@@2HB DD 06H	; std::numeric_limits<wchar_t>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@D@std@@2HB DD 04H	; std::numeric_limits<char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 01H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
_DATA	SEGMENT
_btNanMask DD	07f800001H
_btInfinityMask DD 07f800000H
?start_node@@3HA DD 0ffffffffH				; start_node
?last_face@@3PAHA DD 0ffffffffH				; last_face
	DD	0ffffffffH
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@3f800000
PUBLIC	?btDot@@YAMABVbtVector3@@0@Z			; btDot
PUBLIC	??G@YA?AVbtVector3@@ABV0@0@Z			; operator-
PUBLIC	?PointinTriangle@@YA_NAAVbtVector3@@000@Z	; PointinTriangle
EXTRN	__fltused:DWORD
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT __real@00000000
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?PointinTriangle@@YA_NAAVbtVector3@@000@Z
_TEXT	SEGMENT
tv141 = -136						; size = 4
_v$ = -132						; size = 4
_u$ = -128						; size = 4
_inverDeno$ = -124					; size = 4
_dot12$ = -120						; size = 4
_dot11$ = -116						; size = 4
_dot02$ = -112						; size = 4
_dot01$ = -108						; size = 4
_dot00$ = -104						; size = 4
_v2$ = -96						; size = 16
_v1$ = -64						; size = 16
_v0$ = -32						; size = 16
_A$ = 8							; size = 4
_B$ = 12						; size = 4
_C$ = 16						; size = 4
_P$ = 20						; size = 4
?PointinTriangle@@YA_NAAVbtVector3@@000@Z PROC		; PointinTriangle, COMDAT
; Line 37
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	edi
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 38
	mov	eax, DWORD PTR _A$[ebx]
	push	eax
	mov	ecx, DWORD PTR _C$[ebx]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 39
	mov	eax, DWORD PTR _A$[ebx]
	push	eax
	mov	ecx, DWORD PTR _B$[ebx]
	push	ecx
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 40
	mov	eax, DWORD PTR _A$[ebx]
	push	eax
	mov	ecx, DWORD PTR _P$[ebx]
	push	ecx
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 42
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v0$[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dot00$[ebp]
; Line 43
	lea	edx, DWORD PTR _v1$[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$[ebp]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dot01$[ebp]
; Line 44
	lea	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _v0$[ebp]
	push	edx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dot02$[ebp]
; Line 45
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dot11$[ebp]
; Line 46
	lea	edx, DWORD PTR _v2$[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$[ebp]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dot12$[ebp]
; Line 48
	fld	DWORD PTR _dot00$[ebp]
	fmul	DWORD PTR _dot11$[ebp]
	fld	DWORD PTR _dot01$[ebp]
	fmul	DWORD PTR _dot01$[ebp]
	fsubp	ST(1), ST(0)
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _inverDeno$[ebp]
; Line 50
	fld	DWORD PTR _dot11$[ebp]
	fmul	DWORD PTR _dot02$[ebp]
	fld	DWORD PTR _dot01$[ebp]
	fmul	DWORD PTR _dot12$[ebp]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _inverDeno$[ebp]
	fstp	DWORD PTR _u$[ebp]
; Line 51
	fldz
	fcomp	DWORD PTR _u$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN3@PointinTri
	fld1
	fcomp	DWORD PTR _u$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@PointinTri
$LN3@PointinTri:
; Line 53
	xor	al, al
	jmp	SHORT $LN5@PointinTri
$LN4@PointinTri:
; Line 56
	fld	DWORD PTR _dot00$[ebp]
	fmul	DWORD PTR _dot12$[ebp]
	fld	DWORD PTR _dot01$[ebp]
	fmul	DWORD PTR _dot02$[ebp]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR _inverDeno$[ebp]
	fstp	DWORD PTR _v$[ebp]
; Line 57
	fldz
	fcomp	DWORD PTR _v$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN1@PointinTri
	fld1
	fcomp	DWORD PTR _v$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@PointinTri
$LN1@PointinTri:
; Line 59
	xor	al, al
	jmp	SHORT $LN5@PointinTri
$LN2@PointinTri:
; Line 62
	fld	DWORD PTR _u$[ebp]
	fadd	DWORD PTR _v$[ebp]
	fcomp	DWORD PTR __real@3f800000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN7@PointinTri
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN8@PointinTri
$LN7@PointinTri:
	mov	DWORD PTR tv141[ebp], 0
$LN8@PointinTri:
	mov	al, BYTE PTR tv141[ebp]
$LN5@PointinTri:
; Line 63
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@PointinTri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN13@PointinTri:
	DD	3
	DD	$LN12@PointinTri
$LN12@PointinTri:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN9@PointinTri
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN10@PointinTri
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN11@PointinTri
$LN11@PointinTri:
	DB	118					; 00000076H
	DB	50					; 00000032H
	DB	0
$LN10@PointinTri:
	DB	118					; 00000076H
	DB	49					; 00000031H
	DB	0
$LN9@PointinTri:
	DB	118					; 00000076H
	DB	48					; 00000030H
	DB	0
?PointinTriangle@@YA_NAAVbtVector3@@000@Z ENDP		; PointinTriangle
_TEXT	ENDS
PUBLIC	??0btVector3@@QAE@ABM00@Z			; btVector3::btVector3
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??G@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T65666 = -12						; size = 4
$T65665 = -8						; size = 4
$T65664 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??G@YA?AVbtVector3@@ABV0@0@Z PROC			; operator-, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 785
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 798
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T65664[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR $T65665[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR $T65666[ebp]
	lea	eax, DWORD PTR $T65664[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65665[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65666[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 800
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator-
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btVector3@@QAE@ABM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0btVector3@@QAE@ABM00@Z PROC				; btVector3::btVector3, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 134
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 135
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx+8]
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0btVector3@@QAE@ABM00@Z ENDP				; btVector3::btVector3
_TEXT	ENDS
PUBLIC	?dot@btVector3@@QBEMABV1@@Z			; btVector3::dot
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btDot@@YAMABVbtVector3@@0@Z
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?btDot@@YAMABVbtVector3@@0@Z PROC			; btDot, COMDAT
; Line 889
	push	ebp
	mov	ebp, esp
; Line 890
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v1$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
; Line 891
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btDot@@YAMABVbtVector3@@0@Z ENDP			; btDot
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?dot@btVector3@@QBEMABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?dot@btVector3@@QBEMABV1@@Z PROC			; btVector3::dot, COMDAT
; _this$ = ecx
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 252
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
; Line 254
	mov	esp, ebp
	pop	ebp
	ret	4
?dot@btVector3@@QBEMABV1@@Z ENDP			; btVector3::dot
_TEXT	ENDS
PUBLIC	?btFabs@@YAMM@Z					; btFabs
PUBLIC	?getY@btVector3@@QBEABMXZ			; btVector3::getY
PUBLIC	?getX@btVector3@@QBEABMXZ			; btVector3::getX
PUBLIC	?cross_2@@YAMAAVbtVector3@@0@Z			; cross_2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cross_2@@YAMAAVbtVector3@@0@Z
_TEXT	SEGMENT
tv90 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?cross_2@@YAMAAVbtVector3@@0@Z PROC			; cross_2, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 67
	mov	ecx, DWORD PTR _a$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _b$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR tv90[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _b$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR tv90[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
; Line 68
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cross_2@@YAMAAVbtVector3@@0@Z ENDP			; cross_2
_TEXT	ENDS
PUBLIC	_fabsf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btFabs@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?btFabs@@YAMM@Z PROC					; btFabs, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 407
	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btFabs@@YAMM@Z ENDP					; btFabs
_TEXT	ENDS
EXTRN	_fabs:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _fabsf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 395
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getX@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getX@btVector3@@QBEABMXZ PROC				; btVector3::getX, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 561
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getX@btVector3@@QBEABMXZ ENDP				; btVector3::getX
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getY@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getY@btVector3@@QBEABMXZ PROC				; btVector3::getY, COMDAT
; _this$ = ecx
; Line 563
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getY@btVector3@@QBEABMXZ ENDP				; btVector3::getY
_TEXT	ENDS
PUBLIC	?cross@@YAMAAVbtVector3@@0@Z			; cross
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cross@@YAMAAVbtVector3@@0@Z
_TEXT	SEGMENT
tv86 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?cross@@YAMAAVbtVector3@@0@Z PROC			; cross, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 71
	mov	ecx, DWORD PTR _a$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _b$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _a$[ebp]
	fstp	DWORD PTR tv86[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _b$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR tv86[ebp]
; Line 72
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cross@@YAMAAVbtVector3@@0@Z ENDP			; cross
_TEXT	ENDS
PUBLIC	?getZ@btVector3@@QBEABMXZ			; btVector3::getZ
PUBLIC	??H@YA?AVbtVector3@@ABV0@0@Z			; operator+
PUBLIC	??K@YA?AVbtVector3@@ABV0@ABM@Z			; operator/
PUBLIC	??D@YA?AVbtVector3@@ABV0@ABM@Z			; operator*
PUBLIC	?getCross@@YA?AVbtVector3@@AAV1@000@Z		; getCross
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getCross@@YA?AVbtVector3@@AAV1@000@Z
_TEXT	SEGMENT
$T65691 = -212						; size = 4
$T65690 = -208						; size = 4
$T65689 = -204						; size = 4
$T65688 = -200						; size = 4
$T65687 = -196						; size = 4
$T52405 = -192						; size = 16
$T52404 = -176						; size = 16
$T52402 = -160						; size = 16
_Cross$ = -128						; size = 16
_s$ = -96						; size = 16
_b$ = -64						; size = 16
_a$ = -32						; size = 16
___$ReturnUdt$ = 8					; size = 4
_a1$ = 12						; size = 4
_a2$ = 16						; size = 4
_b1$ = 20						; size = 4
_b2$ = 24						; size = 4
?getCross@@YA?AVbtVector3@@AAV1@000@Z PROC		; getCross, COMDAT
; Line 74
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 75
	mov	eax, DWORD PTR _a1$[ebx]
	push	eax
	mov	ecx, DWORD PTR _a2$[ebx]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _b1$[ebx]
	push	eax
	mov	ecx, DWORD PTR _b2$[ebx]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _a1$[ebx]
	push	eax
	mov	ecx, DWORD PTR _b1$[ebx]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 76
	fldz
	fstp	DWORD PTR $T65687[ebp]
	fldz
	fstp	DWORD PTR $T65688[ebp]
	fldz
	fstp	DWORD PTR $T65689[ebp]
	lea	eax, DWORD PTR $T65687[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65688[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65689[ebp]
	push	edx
	lea	ecx, DWORD PTR _Cross$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 77
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	call	?cross@@YAMAAVbtVector3@@0@Z		; cross
	add	esp, 8
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@getCross
; Line 78
	jmp	$LN1@getCross
$LN2@getCross:
; Line 79
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	lea	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?cross@@YAMAAVbtVector3@@0@Z		; cross
	add	esp, 8
	fstp	DWORD PTR $T65690[ebp]
	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?cross@@YAMAAVbtVector3@@0@Z		; cross
	add	esp, 8
	fstp	DWORD PTR $T65691[ebp]
	lea	eax, DWORD PTR $T65690[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65691[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	lea	eax, DWORD PTR $T52402[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T52404[ebp]
	push	ecx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _a1$[ebx]
	push	edx
	lea	eax, DWORD PTR $T52405[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _Cross$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _Cross$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _Cross$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _Cross$[ebp+12], edx
	mov	ecx, DWORD PTR _a1$[ebx]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
$LN1@getCross:
; Line 81
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	mov	ecx, DWORD PTR _Cross$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _Cross$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _Cross$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _Cross$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 82
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@getCross
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN10@getCross:
	DD	4
	DD	$LN9@getCross
$LN9@getCross:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN5@getCross
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN6@getCross
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN7@getCross
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN8@getCross
$LN8@getCross:
	DB	67					; 00000043H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN7@getCross:
	DB	115					; 00000073H
	DB	0
$LN6@getCross:
	DB	98					; 00000062H
	DB	0
$LN5@getCross:
	DB	97					; 00000061H
	DB	0
?getCross@@YA?AVbtVector3@@AAV1@000@Z ENDP		; getCross
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getZ@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getZ@btVector3@@QBEABMXZ PROC				; btVector3::getZ, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 565
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?getZ@btVector3@@QBEABMXZ ENDP				; btVector3::getZ
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??H@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T65704 = -12						; size = 4
$T65703 = -8						; size = 4
$T65702 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??H@YA?AVbtVector3@@ABV0@0@Z PROC			; operator+, COMDAT
; Line 753
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 762
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T65702[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR $T65703[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR $T65704[ebp]
	lea	eax, DWORD PTR $T65702[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65703[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65704[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 764
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??D@YA?AVbtVector3@@ABV0@ABM@Z
_TEXT	SEGMENT
$T65709 = -12						; size = 4
$T65708 = -8						; size = 4
$T65707 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_s$ = 16						; size = 4
??D@YA?AVbtVector3@@ABV0@ABM@Z PROC			; operator*, COMDAT
; Line 819
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 828
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T65707[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR $T65708[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx]
	fstp	DWORD PTR $T65709[ebp]
	lea	eax, DWORD PTR $T65707[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65708[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65709[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 830
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABV0@ABM@Z ENDP			; operator*
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??K@YA?AVbtVector3@@ABV0@ABM@Z
_TEXT	SEGMENT
$T65712 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_s$ = 16						; size = 4
??K@YA?AVbtVector3@@ABV0@ABM@Z PROC			; operator/, COMDAT
; Line 842
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 852
	mov	eax, DWORD PTR _s$[ebp]
	fld1
	fdiv	DWORD PTR [eax]
	fstp	DWORD PTR $T65712[ebp]
	lea	ecx, DWORD PTR $T65712[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 854
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??K@YA?AVbtVector3@@ABV0@ABM@Z ENDP			; operator/
_TEXT	ENDS
PUBLIC	?getab@@YA?AVbtVector3@@AAV1@0@Z		; getab
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getab@@YA?AVbtVector3@@AAV1@0@Z
_TEXT	SEGMENT
tv148 = -60						; size = 4
$T65715 = -56						; size = 4
_ab$ = -48						; size = 16
_b$ = -20						; size = 4
_a$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_line1_a$ = 12						; size = 4
_line1_b$ = 16						; size = 4
?getab@@YA?AVbtVector3@@AAV1@0@Z PROC			; getab, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 85
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 88
	mov	ecx, DWORD PTR _line1_a$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _line1_b$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _line1_a$[ebx]
	fstp	DWORD PTR tv148[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _line1_b$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fdivr	DWORD PTR tv148[ebp]
	fstp	DWORD PTR _a$[ebp]
; Line 89
	mov	ecx, DWORD PTR _line1_a$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _line1_a$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _a$[ebp]
	fsubr	DWORD PTR [esi]
	fstp	DWORD PTR _b$[ebp]
; Line 90
	fldz
	fstp	DWORD PTR $T65715[ebp]
	lea	eax, DWORD PTR $T65715[ebp]
	push	eax
	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	lea	ecx, DWORD PTR _ab$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 91
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	mov	ecx, DWORD PTR _ab$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ab$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _ab$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _ab$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 92
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@getab
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN7@getab:
	DD	3
	DD	$LN6@getab
$LN6@getab:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@getab
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@getab
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN5@getab
$LN5@getab:
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	0
$LN4@getab:
	DB	98					; 00000062H
	DB	0
$LN3@getab:
	DB	97					; 00000061H
	DB	0
?getab@@YA?AVbtVector3@@AAV1@0@Z ENDP			; getab
_TEXT	ENDS
PUBLIC	?range@@YAMMMMMMM@Z				; range
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?range@@YAMMMMMMM@Z
_TEXT	SEGMENT
_t$ = -4						; size = 4
_u$ = 8							; size = 4
_v$ = 12						; size = 4
_a$ = 16						; size = 4
_b$ = 20						; size = 4
_c$ = 24						; size = 4
_d$ = 28						; size = 4
?range@@YAMMMMMMM@Z PROC				; range, COMDAT
; Line 94
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 96
	fld	DWORD PTR _c$[ebp]
	fmul	DWORD PTR _u$[ebp]
	fadd	DWORD PTR _v$[ebp]
	fsub	DWORD PTR _d$[ebp]
	fld	DWORD PTR _b$[ebp]
	fsub	DWORD PTR _d$[ebp]
	fld	DWORD PTR _a$[ebp]
	fsub	DWORD PTR _c$[ebp]
	fmul	DWORD PTR _u$[ebp]
	fsubp	ST(1), ST(0)
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$[ebp]
; Line 97
	fld	DWORD PTR _t$[ebp]
; Line 98
	mov	esp, ebp
	pop	ebp
	ret	0
?range@@YAMMMMMMM@Z ENDP				; range
_TEXT	ENDS
PUBLIC	?getabc@@YA?AVbtVector3@@AAV1@0@Z		; getabc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getabc@@YA?AVbtVector3@@AAV1@0@Z
_TEXT	SEGMENT
tv159 = -72						; size = 4
_abc$ = -64						; size = 16
_b$ = -32						; size = 4
_c$ = -20						; size = 4
_a$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_line1_a$ = 12						; size = 4
_line1_b$ = 16						; size = 4
?getabc@@YA?AVbtVector3@@AAV1@0@Z PROC			; getabc, COMDAT
; Line 101
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 103
	mov	ecx, DWORD PTR _line1_a$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _line1_b$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR _a$[ebp]
; Line 104
	mov	ecx, DWORD PTR _line1_a$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _line1_a$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _a$[ebp]
	fsubr	DWORD PTR [esi]
	mov	ecx, DWORD PTR _line1_a$[ebx]
	fstp	DWORD PTR tv159[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _line1_b$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv159[ebp]
	fstp	DWORD PTR _c$[ebp]
; Line 105
	mov	ecx, DWORD PTR _line1_a$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _line1_b$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR _b$[ebp]
; Line 107
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	lea	ecx, DWORD PTR _abc$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 108
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	mov	ecx, DWORD PTR _abc$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _abc$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _abc$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _abc$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 109
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@getabc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN8@getabc:
	DD	4
	DD	$LN7@getabc
$LN7@getabc:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@getabc
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@getabc
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@getabc
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN6@getabc
$LN6@getabc:
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	99					; 00000063H
	DB	0
$LN5@getabc:
	DB	98					; 00000062H
	DB	0
$LN4@getabc:
	DB	99					; 00000063H
	DB	0
$LN3@getabc:
	DB	97					; 00000061H
	DB	0
?getabc@@YA?AVbtVector3@@AAV1@0@Z ENDP			; getabc
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?dis@@YAMAAVbtVector3@@00@Z			; dis
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?dis@@YAMAAVbtVector3@@00@Z
_TEXT	SEGMENT
tv147 = -60						; size = 4
tv145 = -56						; size = 4
_abc$ = -48						; size = 16
_d$ = -16						; size = 4
_c$ = -12						; size = 4
_b$ = -8						; size = 4
_a$ = -4						; size = 4
_point$ = 8						; size = 4
_line1_a$ = 12						; size = 4
_line1_b$ = 16						; size = 4
?dis@@YAMAAVbtVector3@@00@Z PROC			; dis, COMDAT
; Line 112
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 114
	mov	eax, DWORD PTR _line1_b$[ebx]
	push	eax
	mov	ecx, DWORD PTR _line1_a$[ebx]
	push	ecx
	lea	edx, DWORD PTR _abc$[ebp]
	push	edx
	call	?getabc@@YA?AVbtVector3@@AAV1@0@Z	; getabc
	add	esp, 12					; 0000000cH
; Line 115
	lea	ecx, DWORD PTR _abc$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _a$[ebp]
; Line 116
	lea	ecx, DWORD PTR _abc$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _b$[ebp]
; Line 117
	lea	ecx, DWORD PTR _abc$[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _c$[ebp]
; Line 119
	mov	ecx, DWORD PTR _point$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR _b$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _point$[ebx]
	fstp	DWORD PTR tv145[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR _a$[ebp]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR tv145[ebp]
	fsub	DWORD PTR _c$[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fld	DWORD PTR _a$[ebp]
	fmul	DWORD PTR _a$[ebp]
	fld	DWORD PTR _b$[ebp]
	fmul	DWORD PTR _b$[ebp]
	faddp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	fstp	DWORD PTR tv147[ebp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
	fdivr	DWORD PTR tv147[ebp]
	fstp	DWORD PTR _d$[ebp]
; Line 121
	fld	DWORD PTR _d$[ebp]
; Line 122
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@dis
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@dis:
	DD	1
	DD	$LN4@dis
$LN4@dis:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN3@dis
$LN3@dis:
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	99					; 00000063H
	DB	0
?dis@@YAMAAVbtVector3@@00@Z ENDP			; dis
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 518
	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT
; Line 542
	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; Line 434
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?xmult@@YANAAVbtVector3@@00@Z			; xmult
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?xmult@@YANAAVbtVector3@@00@Z
_TEXT	SEGMENT
tv146 = -12						; size = 4
tv144 = -8						; size = 4
tv142 = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_p0$ = 16						; size = 4
?xmult@@YANAAVbtVector3@@00@Z PROC			; xmult, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 125
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 126
	mov	ecx, DWORD PTR _p1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _p0$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _p2$[ebp]
	fstp	DWORD PTR tv142[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _p0$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv142[ebp]
	mov	ecx, DWORD PTR _p2$[ebp]
	fstp	DWORD PTR tv144[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _p0$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _p1$[ebp]
	fstp	DWORD PTR tv146[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _p0$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv146[ebp]
	fsubr	DWORD PTR tv144[ebp]
; Line 127
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?xmult@@YANAAVbtVector3@@00@Z ENDP			; xmult
_TEXT	ENDS
PUBLIC	__real@3e45798ee2308c3a
PUBLIC	__real@0000000000000000
PUBLIC	?dot_online_in@@YAHAAVbtVector3@@00@Z		; dot_online_in
;	COMDAT __real@3e45798ee2308c3a
CONST	SEGMENT
__real@3e45798ee2308c3a DQ 03e45798ee2308c3ar	; 1e-008
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?dot_online_in@@YAHAAVbtVector3@@00@Z
_TEXT	SEGMENT
tv145 = -20						; size = 4
tv198 = -16						; size = 4
tv196 = -12						; size = 4
tv81 = -8						; size = 8
_p$ = 8							; size = 4
_l1$ = 12						; size = 4
_l2$ = 16						; size = 4
?dot_online_in@@YAHAAVbtVector3@@00@Z PROC		; dot_online_in, COMDAT
; Line 131
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 132
	mov	eax, DWORD PTR _l2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?xmult@@YANAAVbtVector3@@00@Z		; xmult
	add	esp, 12					; 0000000cH
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@dot_online
	mov	eax, DWORD PTR _l2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?xmult@@YANAAVbtVector3@@00@Z		; xmult
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR tv81[ebp]
	jmp	SHORT $LN4@dot_online
$LN3@dot_online:
	mov	eax, DWORD PTR _l2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _l1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?xmult@@YANAAVbtVector3@@00@Z		; xmult
	add	esp, 12					; 0000000cH
	fchs
	fstp	QWORD PTR tv81[ebp]
$LN4@dot_online:
	fld	QWORD PTR __real@3e45798ee2308c3a
	fcomp	QWORD PTR tv81[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN5@dot_online
	mov	ecx, DWORD PTR _l1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _l2$[ebp]
	fstp	DWORD PTR tv196[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv196[ebp]
	fcomp	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@dot_online
	mov	ecx, DWORD PTR _l1$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _l2$[ebp]
	fstp	DWORD PTR tv198[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _p$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv198[ebp]
	fcomp	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@dot_online
	mov	DWORD PTR tv145[ebp], 1
	jmp	SHORT $LN6@dot_online
$LN5@dot_online:
	mov	DWORD PTR tv145[ebp], 0
$LN6@dot_online:
	mov	eax, DWORD PTR tv145[ebp]
; Line 133
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dot_online_in@@YAHAAVbtVector3@@00@Z ENDP		; dot_online_in
_TEXT	ENDS
PUBLIC	?same_side@@YAHAAVbtVector3@@000@Z		; same_side
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?same_side@@YAHAAVbtVector3@@000@Z
_TEXT	SEGMENT
tv74 = -12						; size = 4
tv89 = -8						; size = 8
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_l1$ = 16						; size = 4
_l2$ = 20						; size = 4
?same_side@@YAHAAVbtVector3@@000@Z PROC			; same_side, COMDAT
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 138
	mov	eax, DWORD PTR _l2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l1$[ebp]
	push	edx
	call	?xmult@@YANAAVbtVector3@@00@Z		; xmult
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _l2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _l1$[ebp]
	push	edx
	fstp	QWORD PTR tv89[ebp]
	call	?xmult@@YANAAVbtVector3@@00@Z		; xmult
	add	esp, 12					; 0000000cH
	fmul	QWORD PTR tv89[ebp]
	fcomp	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@same_side
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@same_side
$LN3@same_side:
	mov	DWORD PTR tv74[ebp], 0
$LN4@same_side:
	mov	eax, DWORD PTR tv74[ebp]
; Line 139
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?same_side@@YAHAAVbtVector3@@000@Z ENDP			; same_side
_TEXT	ENDS
PUBLIC	?parallel@@YAHAAVbtVector3@@000@Z		; parallel
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?parallel@@YAHAAVbtVector3@@000@Z
_TEXT	SEGMENT
tv185 = -44						; size = 4
tv260 = -40						; size = 4
tv258 = -36						; size = 4
tv256 = -32						; size = 4
tv182 = -28						; size = 4
tv254 = -24						; size = 4
tv252 = -20						; size = 4
tv250 = -16						; size = 4
tv248 = -12						; size = 4
tv246 = -8						; size = 4
tv244 = -4						; size = 4
_u1$ = 8						; size = 4
_u2$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
?parallel@@YAHAAVbtVector3@@000@Z PROC			; parallel, COMDAT
; Line 143
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 144
	mov	ecx, DWORD PTR _u1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebp]
	fstp	DWORD PTR tv244[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv244[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fstp	DWORD PTR tv246[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _u1$[ebp]
	fstp	DWORD PTR tv248[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv248[ebp]
	fsubr	DWORD PTR tv246[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@parallel
	mov	ecx, DWORD PTR _u1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebp]
	fstp	DWORD PTR tv250[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv250[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fstp	DWORD PTR tv252[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _u1$[ebp]
	fstp	DWORD PTR tv254[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv254[ebp]
	fsubr	DWORD PTR tv252[ebp]
	fstp	DWORD PTR tv182[ebp]
	jmp	SHORT $LN4@parallel
$LN3@parallel:
	mov	ecx, DWORD PTR _u1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebp]
	fstp	DWORD PTR tv256[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv256[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	fstp	DWORD PTR tv258[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _u1$[ebp]
	fstp	DWORD PTR tv260[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv260[ebp]
	fsubr	DWORD PTR tv258[ebp]
	fchs
	fstp	DWORD PTR tv182[ebp]
$LN4@parallel:
	fld	DWORD PTR tv182[ebp]
	fcomp	QWORD PTR __real@3e45798ee2308c3a
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@parallel
	mov	DWORD PTR tv185[ebp], 1
	jmp	SHORT $LN6@parallel
$LN5@parallel:
	mov	DWORD PTR tv185[ebp], 0
$LN6@parallel:
	mov	eax, DWORD PTR tv185[ebp]
; Line 145
	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?parallel@@YAHAAVbtVector3@@000@Z ENDP			; parallel
_TEXT	ENDS
PUBLIC	?dots_inline@@YAHAAVbtVector3@@00@Z		; dots_inline
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?dots_inline@@YAHAAVbtVector3@@00@Z
_TEXT	SEGMENT
tv83 = -12						; size = 4
tv81 = -8						; size = 8
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_p3$ = 16						; size = 4
?dots_inline@@YAHAAVbtVector3@@00@Z PROC		; dots_inline, COMDAT
; Line 149
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 150
	mov	eax, DWORD PTR _p3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p1$[ebp]
	push	edx
	call	?xmult@@YANAAVbtVector3@@00@Z		; xmult
	add	esp, 12					; 0000000cH
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@dots_inlin
	mov	eax, DWORD PTR _p3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p1$[ebp]
	push	edx
	call	?xmult@@YANAAVbtVector3@@00@Z		; xmult
	add	esp, 12					; 0000000cH
	fstp	QWORD PTR tv81[ebp]
	jmp	SHORT $LN4@dots_inlin
$LN3@dots_inlin:
	mov	eax, DWORD PTR _p3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p1$[ebp]
	push	edx
	call	?xmult@@YANAAVbtVector3@@00@Z		; xmult
	add	esp, 12					; 0000000cH
	fchs
	fstp	QWORD PTR tv81[ebp]
$LN4@dots_inlin:
	fld	QWORD PTR __real@3e45798ee2308c3a
	fcomp	QWORD PTR tv81[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@dots_inlin
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN6@dots_inlin
$LN5@dots_inlin:
	mov	DWORD PTR tv83[ebp], 0
$LN6@dots_inlin:
	mov	eax, DWORD PTR tv83[ebp]
; Line 151
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?dots_inline@@YAHAAVbtVector3@@00@Z ENDP		; dots_inline
_TEXT	ENDS
PUBLIC	?intersect_in@@YAHAAVbtVector3@@000@Z		; intersect_in
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?intersect_in@@YAHAAVbtVector3@@000@Z
_TEXT	SEGMENT
tv139 = -8						; size = 4
tv86 = -4						; size = 4
_u1$ = 8						; size = 4
_u2$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
?intersect_in@@YAHAAVbtVector3@@000@Z PROC		; intersect_in, COMDAT
; Line 155
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 158
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u1$[ebp]
	push	edx
	call	?dots_inline@@YAHAAVbtVector3@@00@Z	; dots_inline
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN1@intersect_
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u1$[ebp]
	push	edx
	call	?dots_inline@@YAHAAVbtVector3@@00@Z	; dots_inline
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@intersect_
$LN1@intersect_:
; Line 159
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u2$[ebp]
	push	edx
	mov	eax, DWORD PTR _u1$[ebp]
	push	eax
	call	?same_side@@YAHAAVbtVector3@@000@Z	; same_side
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN5@intersect_
	mov	ecx, DWORD PTR _u2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _u1$[ebp]
	push	edx
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	call	?same_side@@YAHAAVbtVector3@@000@Z	; same_side
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN5@intersect_
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN6@intersect_
$LN5@intersect_:
	mov	DWORD PTR tv86[ebp], 0
$LN6@intersect_:
	mov	eax, DWORD PTR tv86[ebp]
	jmp	SHORT $LN3@intersect_
$LN2@intersect_:
; Line 160
	mov	edx, DWORD PTR _v2$[ebp]
	push	edx
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u1$[ebp]
	push	ecx
	call	?dot_online_in@@YAHAAVbtVector3@@00@Z	; dot_online_in
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@intersect_
	mov	edx, DWORD PTR _v2$[ebp]
	push	edx
	mov	eax, DWORD PTR _v1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _u2$[ebp]
	push	ecx
	call	?dot_online_in@@YAHAAVbtVector3@@00@Z	; dot_online_in
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@intersect_
	mov	edx, DWORD PTR _u2$[ebp]
	push	edx
	mov	eax, DWORD PTR _u1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	call	?dot_online_in@@YAHAAVbtVector3@@00@Z	; dot_online_in
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@intersect_
	mov	edx, DWORD PTR _u2$[ebp]
	push	edx
	mov	eax, DWORD PTR _u1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	call	?dot_online_in@@YAHAAVbtVector3@@00@Z	; dot_online_in
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN7@intersect_
	mov	DWORD PTR tv139[ebp], 0
	jmp	SHORT $LN8@intersect_
$LN7@intersect_:
	mov	DWORD PTR tv139[ebp], 1
$LN8@intersect_:
	mov	eax, DWORD PTR tv139[ebp]
$LN3@intersect_:
; Line 161
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?intersect_in@@YAHAAVbtVector3@@000@Z ENDP		; intersect_in
_TEXT	ENDS
PUBLIC	?setY@btVector3@@QAEXM@Z			; btVector3::setY
PUBLIC	?setX@btVector3@@QAEXM@Z			; btVector3::setX
PUBLIC	??0btVector3@@QAE@XZ				; btVector3::btVector3
PUBLIC	?intersection@@YA?AVbtVector3@@AAV1@000@Z	; intersection
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?intersection@@YA?AVbtVector3@@AAV1@000@Z
_TEXT	SEGMENT
tv263 = -68						; size = 4
tv261 = -64						; size = 4
tv259 = -60						; size = 4
tv257 = -56						; size = 4
tv255 = -52						; size = 4
tv253 = -48						; size = 4
tv251 = -44						; size = 4
_t$ = -40						; size = 4
_ret$ = -32						; size = 16
___$ReturnUdt$ = 8					; size = 4
_u1$ = 12						; size = 4
_u2$ = 16						; size = 4
_v1$ = 20						; size = 4
_v2$ = 24						; size = 4
?intersection@@YA?AVbtVector3@@AAV1@000@Z PROC		; intersection, COMDAT
; Line 165
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 166
	lea	ecx, DWORD PTR _ret$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 167
	mov	eax, DWORD PTR _u1$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ret$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _ret$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _ret$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _ret$[ebp+12], edx
; Line 170
	mov	ecx, DWORD PTR _u1$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _v1$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebx]
	fstp	DWORD PTR tv251[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv251[ebp]
	mov	ecx, DWORD PTR _u1$[ebx]
	fstp	DWORD PTR tv253[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _v1$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebx]
	fstp	DWORD PTR tv255[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv255[ebp]
	fsubr	DWORD PTR tv253[ebp]
	mov	ecx, DWORD PTR _u1$[ebx]
	fstp	DWORD PTR tv257[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebx]
	fstp	DWORD PTR tv259[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv259[ebp]
	mov	ecx, DWORD PTR _u1$[ebx]
	fstp	DWORD PTR tv261[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebx]
	fstp	DWORD PTR tv263[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _v2$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR tv263[ebp]
	fsubr	DWORD PTR tv261[ebp]
	fdivr	DWORD PTR tv257[ebp]
	fstp	DWORD PTR _t$[ebp]
; Line 172
	lea	ecx, DWORD PTR _ret$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _u1$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR _t$[ebp]
	fadd	DWORD PTR [esi]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _ret$[ebp]
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
; Line 173
	lea	ecx, DWORD PTR _ret$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _u2$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	edi, eax
	mov	ecx, DWORD PTR _u1$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [edi]
	fsub	DWORD PTR [eax]
	fmul	DWORD PTR _t$[ebp]
	fadd	DWORD PTR [esi]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _ret$[ebp]
	call	?setY@btVector3@@QAEXM@Z		; btVector3::setY
; Line 174
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _ret$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _ret$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _ret$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 175
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@intersecti
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@intersecti:
	DD	1
	DD	$LN4@intersecti
$LN4@intersecti:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@intersecti
$LN3@intersecti:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
?intersection@@YA?AVbtVector3@@AAV1@000@Z ENDP		; intersection
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btVector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btVector3@@QAE@XZ PROC				; btVector3::btVector3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0btVector3@@QAE@XZ ENDP				; btVector3::btVector3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setX@btVector3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
?setX@btVector3@@QAEXM@Z PROC				; btVector3::setX, COMDAT
; _this$ = ecx
; Line 567
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	4
?setX@btVector3@@QAEXM@Z ENDP				; btVector3::setX
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setY@btVector3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__y$ = 8						; size = 4
?setY@btVector3@@QAEXM@Z PROC				; btVector3::setY, COMDAT
; _this$ = ecx
; Line 569
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	4
?setY@btVector3@@QAEXM@Z ENDP				; btVector3::setY
_TEXT	ENDS
PUBLIC	?updateBounds@btSoftBody@@QAEXXZ		; btSoftBody::updateBounds
PUBLIC	?FromCR@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@M@Z	; btDbvtAabbMm::FromCR
PUBLIC	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
PUBLIC	?resize@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXHABUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node>::resize
PUBLIC	??0Node@btSoftBody@@QAE@XZ			; btSoftBody::Node::Node
PUBLIC	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
PUBLIC	?appendMaterial@btSoftBody@@QAEPAUMaterial@1@XZ	; btSoftBody::appendMaterial
PUBLIC	?initDefaults@btSoftBody@@QAEXXZ		; btSoftBody::initDefaults
PUBLIC	??0?$btAlignedObjectArray@H@@QAE@XZ		; btAlignedObjectArray<int>::btAlignedObjectArray<int>
PUBLIC	??0btTransform@@QAE@XZ				; btTransform::btTransform
PUBLIC	??0?$btAlignedObjectArray@_N@@QAE@XZ		; btAlignedObjectArray<bool>::btAlignedObjectArray<bool>
PUBLIC	??0?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Cluster *>::btAlignedObjectArray<btSoftBody::Cluster *>
PUBLIC	??0?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Material *>::btAlignedObjectArray<btSoftBody::Material *>
PUBLIC	??0?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Joint *>::btAlignedObjectArray<btSoftBody::Joint *>
PUBLIC	??0?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::SContact>::btAlignedObjectArray<btSoftBody::SContact>
PUBLIC	??0?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::RContact>::btAlignedObjectArray<btSoftBody::RContact>
PUBLIC	??0?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Anchor>::btAlignedObjectArray<btSoftBody::Anchor>
PUBLIC	??0?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Tetra>::btAlignedObjectArray<btSoftBody::Tetra>
PUBLIC	??0?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Face>::btAlignedObjectArray<btSoftBody::Face>
PUBLIC	??0?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Link>::btAlignedObjectArray<btSoftBody::Link>
PUBLIC	??0?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Node>::btAlignedObjectArray<btSoftBody::Node>
PUBLIC	??0?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Note>::btAlignedObjectArray<btSoftBody::Note>
PUBLIC	??0Pose@btSoftBody@@QAE@XZ			; btSoftBody::Pose::Pose
PUBLIC	??0Config@btSoftBody@@QAE@XZ			; btSoftBody::Config::Config
PUBLIC	??0?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ ; btAlignedObjectArray<btCollisionObject const *>::btAlignedObjectArray<btCollisionObject const *>
PUBLIC	??_7btSoftBody@@6B@				; btSoftBody::`vftable'
PUBLIC	??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z ; btSoftBody::btSoftBody
PUBLIC	?checkCollideWithOverride@btCollisionObject@@MBE_NPBV1@@Z ; btCollisionObject::checkCollideWithOverride
PUBLIC	?setCollisionShape@btSoftBody@@UAEXPAVbtCollisionShape@@@Z ; btSoftBody::setCollisionShape
PUBLIC	?calculateSerializeBufferSize@btSoftBody@@UBEHXZ ; btSoftBody::calculateSerializeBufferSize
PUBLIC	?serialize@btSoftBody@@UBEPBDPAXPAVbtSerializer@@@Z ; btSoftBody::serialize
PUBLIC	?getAabb@btSoftBody@@UBEXAAVbtVector3@@0@Z	; btSoftBody::getAabb
EXTRN	?insert@btDbvt@@QAEPAUbtDbvtNode@@ABUbtDbvtAabbMm@@PAX@Z:PROC ; btDbvt::insert
EXTRN	??0btDbvt@@QAE@XZ:PROC				; btDbvt::btDbvt
EXTRN	??0btCollisionObject@@QAE@XZ:PROC		; btCollisionObject::btCollisionObject
EXTRN	??_EbtSoftBody@@UAEPAXI@Z:PROC			; btSoftBody::`vector deleting destructor'
EXTRN	?serializeSingleObject@btCollisionObject@@UBEXPAVbtSerializer@@@Z:PROC ; btCollisionObject::serializeSingleObject
;	COMDAT ??_7btSoftBody@@6B@
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
CONST	SEGMENT
??_7btSoftBody@@6B@ DD FLAT:?checkCollideWithOverride@btCollisionObject@@MBE_NPBV1@@Z ; btSoftBody::`vftable'
	DD	FLAT:??_EbtSoftBody@@UAEPAXI@Z
	DD	FLAT:?setCollisionShape@btSoftBody@@UAEXPAVbtCollisionShape@@@Z
	DD	FLAT:?calculateSerializeBufferSize@btSoftBody@@UBEHXZ
	DD	FLAT:?serialize@btSoftBody@@UBEPBDPAXPAVbtSerializer@@@Z
	DD	FLAT:?serializeSingleObject@btCollisionObject@@UBEXPAVbtSerializer@@@Z
	DD	FLAT:?getAabb@btSoftBody@@UBEXAAVbtVector3@@0@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z
_TEXT	SEGMENT
tv271 = -368						; size = 4
tv265 = -364						; size = 4
tv257 = -360						; size = 4
tv232 = -356						; size = 4
$T65793 = -352						; size = 4
$T65792 = -348						; size = 4
$T65791 = -344						; size = 4
$T65790 = -340						; size = 4
$T65789 = -336						; size = 128
$T52515 = -208						; size = 32
$T52510 = -176						; size = 16
_n$52505 = -156						; size = 4
_ni$52501 = -152					; size = 4
_i$52500 = -148						; size = 4
_margin$ = -12						; size = 4
_pm$ = -8						; size = 4
_this$ = -4						; size = 4
_worldInfo$ = 8						; size = 4
_node_count$ = 12					; size = 4
_x$ = 16						; size = 4
_m$ = 20						; size = 4
??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z PROC ; btSoftBody::btSoftBody, COMDAT
; _this$ = ecx
; Line 181
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 380				; 0000017cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-380]
	mov	ecx, 95					; 0000005fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btCollisionObject@@QAE@XZ		; btCollisionObject::btCollisionObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBody@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	??0?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ ; btAlignedObjectArray<btCollisionObject const *>::btAlignedObjectArray<btCollisionObject const *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+308], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??0Config@btSoftBody@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	call	??0Pose@btSoftBody@@QAE@XZ
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _worldInfo$[ebx]
	mov	DWORD PTR [edx+708], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??0?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Note>::btAlignedObjectArray<btSoftBody::Note>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??0?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Node>::btAlignedObjectArray<btSoftBody::Node>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??0?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Link>::btAlignedObjectArray<btSoftBody::Link>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??0?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Face>::btAlignedObjectArray<btSoftBody::Face>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??0?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Tetra>::btAlignedObjectArray<btSoftBody::Tetra>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??0?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Anchor>::btAlignedObjectArray<btSoftBody::Anchor>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 832				; 00000340H
	call	??0?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::RContact>::btAlignedObjectArray<btSoftBody::RContact>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 852				; 00000354H
	call	??0?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::SContact>::btAlignedObjectArray<btSoftBody::SContact>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??0?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Joint *>::btAlignedObjectArray<btSoftBody::Joint *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??0?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Material *>::btAlignedObjectArray<btSoftBody::Material *>
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 928				; 000003a0H
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	??0btDbvt@@QAE@XZ			; btDbvt::btDbvt
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	??0btDbvt@@QAE@XZ			; btDbvt::btDbvt
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1084				; 0000043cH
	call	??0btDbvt@@QAE@XZ			; btDbvt::btDbvt
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??0?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Cluster *>::btAlignedObjectArray<btSoftBody::Cluster *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1164				; 0000048cH
	call	??0?$btAlignedObjectArray@_N@@QAE@XZ	; btAlignedObjectArray<bool>::btAlignedObjectArray<bool>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1184				; 000004a0H
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1248				; 000004e0H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1268				; 000004f4H
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
; Line 183
	mov	ecx, DWORD PTR _this$[ebp]
	call	?initDefaults@btSoftBody@@QAEXXZ	; btSoftBody::initDefaults
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendMaterial@btSoftBody@@QAEPAUMaterial@1@XZ ; btSoftBody::appendMaterial
	mov	DWORD PTR _pm$[ebp], eax
; Line 187
	mov	edx, DWORD PTR _pm$[ebp]
	fld1
	fstp	DWORD PTR [edx+4]
; Line 188
	mov	eax, DWORD PTR _pm$[ebp]
	fld1
	fstp	DWORD PTR [eax+8]
; Line 189
	mov	ecx, DWORD PTR _pm$[ebp]
	fld1
	fstp	DWORD PTR [ecx+12]
; Line 190
	mov	edx, DWORD PTR _pm$[ebp]
	mov	DWORD PTR [edx+16], 1
; Line 193
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv232[ebp], eax
	mov	eax, DWORD PTR tv232[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv232[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _margin$[ebp]
; Line 194
	lea	ecx, DWORD PTR $T65789[ebp]
	call	??0Node@btSoftBody@@QAE@XZ
	push	eax
	mov	ecx, DWORD PTR _node_count$[ebx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?resize@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXHABUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node>::resize
; Line 195
	mov	DWORD PTR _i$52500[ebp], 0
	mov	edx, DWORD PTR _node_count$[ebx]
	mov	DWORD PTR _ni$52501[ebp], edx
	jmp	SHORT $LN3@btSoftBody
$LN2@btSoftBody:
	mov	eax, DWORD PTR _i$52500[ebp]
	add	eax, 1
	mov	DWORD PTR _i$52500[ebp], eax
$LN3@btSoftBody:
	mov	ecx, DWORD PTR _i$52500[ebp]
	cmp	ecx, DWORD PTR _ni$52501[ebp]
	jge	$LN1@btSoftBody
; Line 197
	mov	edx, DWORD PTR _i$52500[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$52505[ebp], eax
; Line 198
	mov	eax, DWORD PTR _n$52505[ebp]
	push	eax
	call	??$ZeroInitialize@UNode@btSoftBody@@@@YAXAAUNode@btSoftBody@@@Z ; ZeroInitialize<btSoftBody::Node>
	add	esp, 4
; Line 199
	cmp	DWORD PTR _x$[ebx], 0
	je	SHORT $LN6@btSoftBody
	mov	ecx, DWORD PTR _x$[ebx]
	mov	DWORD PTR tv257[ebp], ecx
	mov	edx, DWORD PTR _x$[ebx]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _x$[ebx], edx
	jmp	SHORT $LN7@btSoftBody
$LN6@btSoftBody:
	fldz
	fstp	DWORD PTR $T65791[ebp]
	fldz
	fstp	DWORD PTR $T65792[ebp]
	fldz
	fstp	DWORD PTR $T65793[ebp]
	lea	eax, DWORD PTR $T65791[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65792[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65793[ebp]
	push	edx
	lea	ecx, DWORD PTR $T52510[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	DWORD PTR tv257[ebp], eax
$LN7@btSoftBody:
	mov	eax, DWORD PTR tv257[ebp]
	mov	DWORD PTR $T65790[ebp], eax
	mov	ecx, DWORD PTR $T65790[ebp]
	mov	edx, DWORD PTR _n$52505[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 200
	mov	edx, DWORD PTR _n$52505[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _n$52505[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 201
	cmp	DWORD PTR _m$[ebx], 0
	je	SHORT $LN8@btSoftBody
	mov	eax, DWORD PTR _m$[ebx]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR tv265[ebp]
	mov	ecx, DWORD PTR _m$[ebx]
	add	ecx, 4
	mov	DWORD PTR _m$[ebx], ecx
	jmp	SHORT $LN9@btSoftBody
$LN8@btSoftBody:
	fld1
	fstp	DWORD PTR tv265[ebp]
$LN9@btSoftBody:
	mov	edx, DWORD PTR _n$52505[ebp]
	fld	DWORD PTR tv265[ebp]
	fstp	DWORD PTR [edx+96]
; Line 202
	mov	eax, DWORD PTR _n$52505[ebp]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN10@btSoftBody
	mov	ecx, DWORD PTR _n$52505[ebp]
	fld1
	fdiv	DWORD PTR [ecx+96]
	fstp	DWORD PTR tv271[ebp]
	jmp	SHORT $LN11@btSoftBody
$LN10@btSoftBody:
	fldz
	fstp	DWORD PTR tv271[ebp]
$LN11@btSoftBody:
	mov	edx, DWORD PTR _n$52505[ebp]
	fld	DWORD PTR tv271[ebp]
	fstp	DWORD PTR [edx+96]
; Line 203
	mov	eax, DWORD PTR _n$52505[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _margin$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _n$52505[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T52515[ebp]
	push	edx
	call	?FromCR@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@M@Z ; btDbvtAabbMm::FromCR
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	?insert@btDbvt@@QAEPAUbtDbvtNode@@ABUbtDbvtAabbMm@@PAX@Z ; btDbvt::insert
	mov	ecx, DWORD PTR _n$52505[ebp]
	mov	DWORD PTR [ecx+104], eax
; Line 204
	mov	edx, DWORD PTR _n$52505[ebp]
	mov	eax, DWORD PTR _pm$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 205
	jmp	$LN2@btSoftBody
$LN1@btSoftBody:
; Line 206
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateBounds@btSoftBody@@QAEXXZ	; btSoftBody::updateBounds
; Line 208
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z ENDP ; btSoftBody::btSoftBody
_TEXT	ENDS
PUBLIC	??0btMatrix3x3@@QAE@XZ				; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btTransform@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btTransform@@QAE@XZ PROC				; btTransform::btTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btTransform@@QAE@XZ ENDP				; btTransform::btTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btMatrix3x3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btMatrix3x3@@QAE@XZ PROC				; btMatrix3x3::btMatrix3x3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btMatrix3x3@@QAE@XZ ENDP				; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?checkCollideWithOverride@btCollisionObject@@MBE_NPBV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?checkCollideWithOverride@btCollisionObject@@MBE_NPBV1@@Z PROC ; btCollisionObject::checkCollideWithOverride, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 117
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 118
	mov	al, 1
; Line 119
	mov	esp, ebp
	pop	ebp
	ret	4
?checkCollideWithOverride@btCollisionObject@@MBE_NPBV1@@Z ENDP ; btCollisionObject::checkCollideWithOverride
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ PROC ; btCollisionObject::getCollisionShape, COMDAT
; _this$ = ecx
; Line 224
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+204]
; Line 226
	mov	esp, ebp
	pop	ebp
	ret	0
?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ENDP ; btCollisionObject::getCollisionShape
_TEXT	ENDS
PUBLIC	?FromCE@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z	; btDbvtAabbMm::FromCE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FromCR@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@M@Z
_TEXT	SEGMENT
$T13585 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
_r$ = 16						; size = 4
?FromCR@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@M@Z PROC	; btDbvtAabbMm::FromCR, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 406
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 407
	lea	eax, DWORD PTR _r$[ebx]
	push	eax
	lea	ecx, DWORD PTR _r$[ebx]
	push	ecx
	lea	edx, DWORD PTR _r$[ebx]
	push	edx
	lea	ecx, DWORD PTR $T13585[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	eax, DWORD PTR _c$[ebx]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	push	ecx
	call	?FromCE@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z ; btDbvtAabbMm::FromCE
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 408
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?FromCR@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@M@Z ENDP	; btDbvtAabbMm::FromCR
_TEXT	ENDS
PUBLIC	??0btDbvtAabbMm@@QAE@XZ				; btDbvtAabbMm::btDbvtAabbMm
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FromCE@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z
_TEXT	SEGMENT
$T13577 = -96						; size = 16
$T13576 = -80						; size = 16
_box$ = -48						; size = 32
___$ReturnUdt$ = 8					; size = 4
_c$ = 12						; size = 4
_e$ = 16						; size = 4
?FromCE@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z PROC	; btDbvtAabbMm::FromCE, COMDAT
; Line 398
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 399
	lea	ecx, DWORD PTR _box$[ebp]
	call	??0btDbvtAabbMm@@QAE@XZ
; Line 400
	mov	eax, DWORD PTR _e$[ebx]
	push	eax
	mov	ecx, DWORD PTR _c$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T13576[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _box$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _box$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _box$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _box$[ebp+12], edx
	mov	eax, DWORD PTR _e$[ebx]
	push	eax
	mov	ecx, DWORD PTR _c$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T13577[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _box$[ebp+16], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _box$[ebp+20], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _box$[ebp+24], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _box$[ebp+28], edx
; Line 401
	mov	ecx, 8
	lea	esi, DWORD PTR _box$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 402
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@FromCE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@FromCE:
	DD	1
	DD	$LN4@FromCE
$LN4@FromCE:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN3@FromCE
$LN3@FromCE:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
?FromCE@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z ENDP	; btDbvtAabbMm::FromCE
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btDbvtAabbMm@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btDbvtAabbMm@@QAE@XZ PROC				; btDbvtAabbMm::btDbvtAabbMm, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btDbvtAabbMm@@QAE@XZ ENDP				; btDbvtAabbMm::btDbvtAabbMm
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setCollisionShape@btSoftBody@@UAEXPAVbtCollisionShape@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_collisionShape$ = 8					; size = 4
?setCollisionShape@btSoftBody@@UAEXPAVbtCollisionShape@@@Z PROC ; btSoftBody::setCollisionShape, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 707
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 709
	mov	esp, ebp
	pop	ebp
	ret	4
?setCollisionShape@btSoftBody@@UAEXPAVbtCollisionShape@@@Z ENDP ; btSoftBody::setCollisionShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAabb@btSoftBody@@UBEXAAVbtVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_aabbMin$ = 8						; size = 4
_aabbMax$ = 12						; size = 4
?getAabb@btSoftBody@@UBEXAAVbtVector3@@0@Z PROC		; btSoftBody::getAabb, COMDAT
; _this$ = ecx
; Line 955
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 956
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 928				; 000003a0H
	mov	ecx, DWORD PTR _aabbMin$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 957
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 944				; 000003b0H
	mov	edx, DWORD PTR _aabbMax$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 958
	mov	esp, ebp
	pop	ebp
	ret	8
?getAabb@btSoftBody@@UBEXAAVbtVector3@@0@Z ENDP		; btSoftBody::getAabb
_TEXT	ENDS
PUBLIC	??3btCollisionObject@@SAXPAX@Z			; btCollisionObject::operator delete
PUBLIC	??1btSoftBody@@UAE@XZ				; btSoftBody::~btSoftBody
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtSoftBody@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtSoftBody@@UAEPAXI@Z PROC				; btSoftBody::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSoftBody@@UAE@XZ			; btSoftBody::~btSoftBody
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3btCollisionObject@@SAXPAX@Z		; btCollisionObject::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtSoftBody@@UAEPAXI@Z ENDP				; btSoftBody::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?btAlignedFreeInternal@@YAXPAX@Z:PROC		; btAlignedFreeInternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??3btCollisionObject@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??3btCollisionObject@@SAXPAX@Z PROC			; btCollisionObject::operator delete, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 123
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??3btCollisionObject@@SAXPAX@Z ENDP			; btCollisionObject::operator delete
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::btAlignedObjectArray<enum btSoftBody::ePSolver::_>
PUBLIC	??0?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::btAlignedObjectArray<enum btSoftBody::eVSolver::_>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0Config@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Config@btSoftBody@@QAE@XZ PROC			; btSoftBody::Config::Config, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??0?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::btAlignedObjectArray<enum btSoftBody::eVSolver::_>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::btAlignedObjectArray<enum btSoftBody::ePSolver::_>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::btAlignedObjectArray<enum btSoftBody::ePSolver::_>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Config@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Config::Config
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@M@@QAE@XZ		; btAlignedObjectArray<float>::btAlignedObjectArray<float>
PUBLIC	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ	; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0Pose@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Pose@btSoftBody@@QAE@XZ PROC				; btSoftBody::Pose::Pose, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$btAlignedObjectArray@M@@QAE@XZ	; btAlignedObjectArray<float>::btAlignedObjectArray<float>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Pose@btSoftBody@@QAE@XZ ENDP				; btSoftBody::Pose::Pose
_TEXT	ENDS
PUBLIC	??0Feature@btSoftBody@@QAE@XZ			; btSoftBody::Feature::Feature
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0Node@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Node@btSoftBody@@QAE@XZ PROC				; btSoftBody::Node::Node, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Feature@btSoftBody@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Node@btSoftBody@@QAE@XZ ENDP				; btSoftBody::Node::Node
_TEXT	ENDS
PUBLIC	??0Element@btSoftBody@@QAE@XZ			; btSoftBody::Element::Element
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0Feature@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Feature@btSoftBody@@QAE@XZ PROC			; btSoftBody::Feature::Feature, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Element@btSoftBody@@QAE@XZ		; btSoftBody::Element::Element
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Feature@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Feature::Feature
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Element@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Element@btSoftBody@@QAE@XZ PROC			; btSoftBody::Element::Element, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 204
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Element@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Element::Element
_TEXT	ENDS
PUBLIC	??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@@Z	; btSoftBody::btSoftBody
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_worldInfo$ = 8						; size = 4
??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@@Z PROC	; btSoftBody::btSoftBody, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 212
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btCollisionObject@@QAE@XZ		; btCollisionObject::btCollisionObject
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBody@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	??0?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ ; btAlignedObjectArray<btCollisionObject const *>::btAlignedObjectArray<btCollisionObject const *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??0Config@btSoftBody@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	call	??0Pose@btSoftBody@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _worldInfo$[ebp]
	mov	DWORD PTR [ecx+708], edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??0?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Note>::btAlignedObjectArray<btSoftBody::Note>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??0?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Node>::btAlignedObjectArray<btSoftBody::Node>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??0?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Link>::btAlignedObjectArray<btSoftBody::Link>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??0?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Face>::btAlignedObjectArray<btSoftBody::Face>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??0?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Tetra>::btAlignedObjectArray<btSoftBody::Tetra>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??0?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Anchor>::btAlignedObjectArray<btSoftBody::Anchor>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 832				; 00000340H
	call	??0?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::RContact>::btAlignedObjectArray<btSoftBody::RContact>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 852				; 00000354H
	call	??0?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::SContact>::btAlignedObjectArray<btSoftBody::SContact>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??0?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Joint *>::btAlignedObjectArray<btSoftBody::Joint *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??0?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Material *>::btAlignedObjectArray<btSoftBody::Material *>
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 928				; 000003a0H
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	??0btDbvt@@QAE@XZ			; btDbvt::btDbvt
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	??0btDbvt@@QAE@XZ			; btDbvt::btDbvt
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1084				; 0000043cH
	call	??0btDbvt@@QAE@XZ			; btDbvt::btDbvt
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??0?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Cluster *>::btAlignedObjectArray<btSoftBody::Cluster *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1164				; 0000048cH
	call	??0?$btAlignedObjectArray@_N@@QAE@XZ	; btAlignedObjectArray<bool>::btAlignedObjectArray<bool>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1184				; 000004a0H
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1248				; 000004e0H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1268				; 000004f4H
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
; Line 213
	mov	ecx, DWORD PTR _this$[ebp]
	call	?initDefaults@btSoftBody@@QAEXXZ	; btSoftBody::initDefaults
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@@Z ENDP	; btSoftBody::btSoftBody
_TEXT	ENDS
PUBLIC	__real@3e800000
PUBLIC	??0btSoftBodyCollisionShape@@QAE@PAVbtSoftBody@@@Z ; btSoftBodyCollisionShape::btSoftBodyCollisionShape
PUBLIC	??2btConcaveShape@@SAPAXI@Z			; btConcaveShape::operator new
PUBLIC	?setSolver@btSoftBody@@QAEXW4_@eSolverPresets@1@@Z ; btSoftBody::setSolver
PUBLIC	?setIdentity@btTransform@@QAEXXZ		; btTransform::setIdentity
PUBLIC	?setIdentity@btMatrix3x3@@QAEXXZ		; btMatrix3x3::setIdentity
PUBLIC	__real@3f000000
PUBLIC	__real@3f333333
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?initDefaults@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
tv214 = -136						; size = 4
$T65853 = -132						; size = 4
$T65852 = -128						; size = 4
$T65851 = -124						; size = 4
$T65848 = -120						; size = 4
$T65847 = -116						; size = 4
$T65846 = -112						; size = 4
$T65845 = -108						; size = 4
$T65844 = -104						; size = 4
$T65843 = -100						; size = 4
$T65842 = -96						; size = 4
$T65841 = -92						; size = 4
$T65840 = -88						; size = 4
$T65839 = -84						; size = 4
$T52567 = -80						; size = 16
$T52560 = -64						; size = 16
$T52556 = -48						; size = 16
$T52552 = -32						; size = 16
_this$ = -4						; size = 4
?initDefaults@btSoftBody@@QAEXXZ PROC			; btSoftBody::initDefaults, COMDAT
; _this$ = ecx
; Line 218
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 140				; 0000008cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 35					; 00000023H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 219
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+248], 8
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+312], 0
; Line 221
	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [edx+316]
; Line 222
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+324]
; Line 223
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+328]
; Line 224
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+320]
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+332]
; Line 226
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+336]
; Line 227
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3e4ccccd
	fstp	DWORD PTR [edx+340]
; Line 228
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+344]
; Line 229
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [ecx+348]
; Line 230
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3dcccccd
	fstp	DWORD PTR [edx+352]
; Line 231
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+356]
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3f333333
	fstp	DWORD PTR [ecx+360]
; Line 233
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3dcccccd
	fstp	DWORD PTR [edx+364]
; Line 234
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+368]
; Line 235
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [ecx+372]
; Line 236
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [edx+376]
; Line 237
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [eax+380]
; Line 238
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [ecx+384]
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [edx+388]
; Line 240
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+392]
; Line 241
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+396], 0
; Line 242
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+400], 1
; Line 243
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+404], 0
; Line 244
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+408], 4
; Line 245
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+412], 1
; Line 246
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+496], 0
; Line 247
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+497], 0
; Line 248
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+500]
; Line 249
	fldz
	fstp	DWORD PTR $T65839[ebp]
	fldz
	fstp	DWORD PTR $T65840[ebp]
	fldz
	fstp	DWORD PTR $T65841[ebp]
	lea	eax, DWORD PTR $T65839[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65840[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65841[ebp]
	push	edx
	lea	ecx, DWORD PTR $T52552[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 544				; 00000220H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 250
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 560				; 00000230H
	call	?setIdentity@btMatrix3x3@@QAEXXZ	; btMatrix3x3::setIdentity
; Line 251
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 608				; 00000260H
	call	?setIdentity@btMatrix3x3@@QAEXXZ	; btMatrix3x3::setIdentity
; Line 252
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+704], 0
; Line 253
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+912]
; Line 254
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+960], 1
; Line 255
	fldz
	fstp	DWORD PTR $T65842[ebp]
	fldz
	fstp	DWORD PTR $T65843[ebp]
	fldz
	fstp	DWORD PTR $T65844[ebp]
	lea	ecx, DWORD PTR $T65842[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65843[ebp]
	push	edx
	lea	eax, DWORD PTR $T65844[ebp]
	push	eax
	lea	ecx, DWORD PTR $T52556[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 928				; 000003a0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 256
	fldz
	fstp	DWORD PTR $T65845[ebp]
	fldz
	fstp	DWORD PTR $T65846[ebp]
	fldz
	fstp	DWORD PTR $T65847[ebp]
	lea	ecx, DWORD PTR $T65845[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65846[ebp]
	push	edx
	lea	eax, DWORD PTR $T65847[ebp]
	push	eax
	lea	ecx, DWORD PTR $T52560[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 944				; 000003b0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 257
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 258
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setSolver@btSoftBody@@QAEXW4_@eSolverPresets@1@@Z ; btSoftBody::setSolver
; Line 262
	push	32					; 00000020H
	call	??2btConcaveShape@@SAPAXI@Z		; btConcaveShape::operator new
	add	esp, 4
	mov	DWORD PTR $T65848[ebp], eax
	cmp	DWORD PTR $T65848[ebp], 0
	je	SHORT $LN3@initDefaul
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T65848[ebp]
	call	??0btSoftBodyCollisionShape@@QAE@PAVbtSoftBody@@@Z ; btSoftBodyCollisionShape::btSoftBodyCollisionShape
	mov	DWORD PTR tv214[ebp], eax
	jmp	SHORT $LN4@initDefaul
$LN3@initDefaul:
	mov	DWORD PTR tv214[ebp], 0
$LN4@initDefaul:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv214[ebp]
	mov	DWORD PTR [edx+204], eax
; Line 263
	mov	esi, esp
	push	ecx
	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+204]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 265
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1184				; 000004a0H
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 267
	fldz
	fstp	DWORD PTR $T65851[ebp]
	fldz
	fstp	DWORD PTR $T65852[ebp]
	fldz
	fstp	DWORD PTR $T65853[ebp]
	lea	ecx, DWORD PTR $T65851[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65852[ebp]
	push	edx
	lea	eax, DWORD PTR $T65853[ebp]
	push	eax
	lea	ecx, DWORD PTR $T52567[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1248				; 000004e0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 268
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [ecx+1264]
; Line 269
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?initDefaults@btSoftBody@@QAEXXZ ENDP			; btSoftBody::initDefaults
_TEXT	ENDS
PUBLIC	?setValue@btMatrix3x3@@QAEXABM00000000@Z	; btMatrix3x3::setValue
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setIdentity@btMatrix3x3@@QAEXXZ
_TEXT	SEGMENT
$T65874 = -40						; size = 4
$T65873 = -36						; size = 4
$T65872 = -32						; size = 4
$T65871 = -28						; size = 4
$T65870 = -24						; size = 4
$T65869 = -20						; size = 4
$T65868 = -16						; size = 4
$T65867 = -12						; size = 4
$T65866 = -8						; size = 4
_this$ = -4						; size = 4
?setIdentity@btMatrix3x3@@QAEXXZ PROC			; btMatrix3x3::setIdentity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 318
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 326
	fld1
	fstp	DWORD PTR $T65866[ebp]
	fldz
	fstp	DWORD PTR $T65867[ebp]
	fldz
	fstp	DWORD PTR $T65868[ebp]
	fldz
	fstp	DWORD PTR $T65869[ebp]
	fld1
	fstp	DWORD PTR $T65870[ebp]
	fldz
	fstp	DWORD PTR $T65871[ebp]
	fldz
	fstp	DWORD PTR $T65872[ebp]
	fldz
	fstp	DWORD PTR $T65873[ebp]
	fld1
	fstp	DWORD PTR $T65874[ebp]
	lea	eax, DWORD PTR $T65866[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65867[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65868[ebp]
	push	edx
	lea	eax, DWORD PTR $T65869[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65870[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65871[ebp]
	push	edx
	lea	eax, DWORD PTR $T65872[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65873[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65874[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btMatrix3x3@@QAEXABM00000000@Z ; btMatrix3x3::setValue
; Line 328
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setIdentity@btMatrix3x3@@QAEXXZ ENDP			; btMatrix3x3::setIdentity
_TEXT	ENDS
PUBLIC	?setValue@btVector3@@QAEXABM00@Z		; btVector3::setValue
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setValue@btMatrix3x3@@QAEXABM00000000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xx$ = 8						; size = 4
_xy$ = 12						; size = 4
_xz$ = 16						; size = 4
_yx$ = 20						; size = 4
_yy$ = 24						; size = 4
_yz$ = 28						; size = 4
_zx$ = 32						; size = 4
_zy$ = 36						; size = 4
_zz$ = 40						; size = 4
?setValue@btMatrix3x3@@QAEXABM00000000@Z PROC		; btMatrix3x3::setValue, COMDAT
; _this$ = ecx
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 202
	mov	eax, DWORD PTR _xz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 203
	mov	eax, DWORD PTR _yz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 204
	mov	eax, DWORD PTR _zz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _zx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 205
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?setValue@btMatrix3x3@@QAEXABM00000000@Z ENDP		; btMatrix3x3::setValue
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setValue@btVector3@@QAEXABM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
?setValue@btVector3@@QAEXABM00@Z PROC			; btVector3::setValue, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 643
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 644
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx+8]
; Line 645
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
; Line 646
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setValue@btVector3@@QAEXABM00@Z ENDP			; btVector3::setValue
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setIdentity@btTransform@@QAEXXZ
_TEXT	SEGMENT
$T65883 = -16						; size = 4
$T65882 = -12						; size = 4
$T65881 = -8						; size = 4
_this$ = -4						; size = 4
?setIdentity@btTransform@@QAEXXZ PROC			; btTransform::setIdentity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 173
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 174
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setIdentity@btMatrix3x3@@QAEXXZ	; btMatrix3x3::setIdentity
; Line 175
	fldz
	fstp	DWORD PTR $T65881[ebp]
	fldz
	fstp	DWORD PTR $T65882[ebp]
	fldz
	fstp	DWORD PTR $T65883[ebp]
	lea	eax, DWORD PTR $T65881[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65882[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65883[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 176
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setIdentity@btTransform@@QAEXXZ ENDP			; btTransform::setIdentity
_TEXT	ENDS
EXTRN	?btAlignedAllocInternal@@YAPAXIH@Z:PROC		; btAlignedAllocInternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??2btConcaveShape@@SAPAXI@Z
_TEXT	SEGMENT
_sizeInBytes$ = 8					; size = 4
??2btConcaveShape@@SAPAXI@Z PROC			; btConcaveShape::operator new, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconcaveshape.h
; Line 42
	push	ebp
	mov	ebp, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _sizeInBytes$[ebp]
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??2btConcaveShape@@SAPAXI@Z ENDP			; btConcaveShape::operator new
_TEXT	ENDS
PUBLIC	??_7btSoftBodyCollisionShape@@6B@		; btSoftBodyCollisionShape::`vftable'
PUBLIC	?getAabb@btSoftBodyCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ; btSoftBodyCollisionShape::getAabb
PUBLIC	?setLocalScaling@btSoftBodyCollisionShape@@UAEXABVbtVector3@@@Z ; btSoftBodyCollisionShape::setLocalScaling
PUBLIC	?getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ ; btSoftBodyCollisionShape::getLocalScaling
PUBLIC	?calculateLocalInertia@btSoftBodyCollisionShape@@UBEXMAAVbtVector3@@@Z ; btSoftBodyCollisionShape::calculateLocalInertia
PUBLIC	?getName@btSoftBodyCollisionShape@@UBEPBDXZ	; btSoftBodyCollisionShape::getName
PUBLIC	?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ ; btCollisionShape::getAnisotropicRollingFrictionDirection
PUBLIC	?setMargin@btConcaveShape@@UAEXM@Z		; btConcaveShape::setMargin
PUBLIC	?getMargin@btConcaveShape@@UBEMXZ		; btConcaveShape::getMargin
PUBLIC	?calculateSerializeBufferSize@btCollisionShape@@UBEHXZ ; btCollisionShape::calculateSerializeBufferSize
PUBLIC	?processAllTriangles@btSoftBodyCollisionShape@@UBEXPAVbtTriangleCallback@@ABVbtVector3@@1@Z ; btSoftBodyCollisionShape::processAllTriangles
EXTRN	??0btConcaveShape@@QAE@XZ:PROC			; btConcaveShape::btConcaveShape
EXTRN	??_EbtSoftBodyCollisionShape@@UAEPAXI@Z:PROC	; btSoftBodyCollisionShape::`vector deleting destructor'
EXTRN	?getBoundingSphere@btCollisionShape@@UBEXAAVbtVector3@@AAM@Z:PROC ; btCollisionShape::getBoundingSphere
EXTRN	?getAngularMotionDisc@btCollisionShape@@UBEMXZ:PROC ; btCollisionShape::getAngularMotionDisc
EXTRN	?getContactBreakingThreshold@btCollisionShape@@UBEMM@Z:PROC ; btCollisionShape::getContactBreakingThreshold
EXTRN	?serialize@btCollisionShape@@UBEPBDPAXPAVbtSerializer@@@Z:PROC ; btCollisionShape::serialize
EXTRN	?serializeSingleShape@btCollisionShape@@UBEXPAVbtSerializer@@@Z:PROC ; btCollisionShape::serializeSingleShape
;	COMDAT ??_7btSoftBodyCollisionShape@@6B@
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
CONST	SEGMENT
??_7btSoftBodyCollisionShape@@6B@ DD FLAT:??_EbtSoftBodyCollisionShape@@UAEPAXI@Z ; btSoftBodyCollisionShape::`vftable'
	DD	FLAT:?getAabb@btSoftBodyCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getBoundingSphere@btCollisionShape@@UBEXAAVbtVector3@@AAM@Z
	DD	FLAT:?getAngularMotionDisc@btCollisionShape@@UBEMXZ
	DD	FLAT:?getContactBreakingThreshold@btCollisionShape@@UBEMM@Z
	DD	FLAT:?setLocalScaling@btSoftBodyCollisionShape@@UAEXABVbtVector3@@@Z
	DD	FLAT:?getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ
	DD	FLAT:?calculateLocalInertia@btSoftBodyCollisionShape@@UBEXMAAVbtVector3@@@Z
	DD	FLAT:?getName@btSoftBodyCollisionShape@@UBEPBDXZ
	DD	FLAT:?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ
	DD	FLAT:?setMargin@btConcaveShape@@UAEXM@Z
	DD	FLAT:?getMargin@btConcaveShape@@UBEMXZ
	DD	FLAT:?calculateSerializeBufferSize@btCollisionShape@@UBEHXZ
	DD	FLAT:?serialize@btCollisionShape@@UBEPBDPAXPAVbtSerializer@@@Z
	DD	FLAT:?serializeSingleShape@btCollisionShape@@UBEXPAVbtSerializer@@@Z
	DD	FLAT:?processAllTriangles@btSoftBodyCollisionShape@@UBEXPAVbtTriangleCallback@@ABVbtVector3@@1@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSoftBodyCollisionShape@@QAE@PAVbtSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_backptr$ = 8						; size = 4
??0btSoftBodyCollisionShape@@QAE@PAVbtSoftBody@@@Z PROC	; btSoftBodyCollisionShape::btSoftBodyCollisionShape, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btConcaveShape@@QAE@XZ		; btConcaveShape::btConcaveShape
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBodyCollisionShape@@6B@
; Line 56
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 32			; 00000020H
; Line 57
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _backptr$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 58
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btSoftBodyCollisionShape@@QAE@PAVbtSoftBody@@@Z ENDP	; btSoftBodyCollisionShape::btSoftBodyCollisionShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ
_TEXT	SEGMENT
$T65892 = -16						; size = 4
$T65891 = -12						; size = 4
$T65890 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ PROC ; btCollisionShape::getAnisotropicRollingFrictionDirection, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btcollisionshape.h
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 117
	fld1
	fstp	DWORD PTR $T65890[ebp]
	fld1
	fstp	DWORD PTR $T65891[ebp]
	fld1
	fstp	DWORD PTR $T65892[ebp]
	lea	eax, DWORD PTR $T65890[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65891[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65892[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 118
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ ENDP ; btCollisionShape::getAnisotropicRollingFrictionDirection
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?calculateSerializeBufferSize@btCollisionShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?calculateSerializeBufferSize@btCollisionShape@@UBEHXZ PROC ; btCollisionShape::calculateSerializeBufferSize, COMDAT
; _this$ = ecx
; Line 152
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 153
	mov	eax, 12					; 0000000cH
; Line 154
	mov	esp, ebp
	pop	ebp
	ret	0
?calculateSerializeBufferSize@btCollisionShape@@UBEHXZ ENDP ; btCollisionShape::calculateSerializeBufferSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getMargin@btConcaveShape@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMargin@btConcaveShape@@UBEMXZ PROC			; btConcaveShape::getMargin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconcaveshape.h
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+12]
; Line 52
	mov	esp, ebp
	pop	ebp
	ret	0
?getMargin@btConcaveShape@@UBEMXZ ENDP			; btConcaveShape::getMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setMargin@btConcaveShape@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_collisionMargin$ = 8					; size = 4
?setMargin@btConcaveShape@@UAEXM@Z PROC			; btConcaveShape::setMargin, COMDAT
; _this$ = ecx
; Line 54
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _collisionMargin$[ebp]
	fstp	DWORD PTR [eax+12]
; Line 56
	mov	esp, ebp
	pop	ebp
	ret	4
?setMargin@btConcaveShape@@UAEXM@Z ENDP			; btConcaveShape::setMargin
_TEXT	ENDS
PUBLIC	??_C@_0FC@CEKAADLI@Assert?5d?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
EXTRN	_printf:PROC
;	COMDAT ??_C@_0FC@CEKAADLI@Assert?5d?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
CONST	SEGMENT
??_C@_0FC@CEKAADLI@Assert?5d?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert d:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\bulletsoftbody\btSoftBodyInternals.h:%u (0)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?processAllTriangles@btSoftBodyCollisionShape@@UBEXPAVbtTriangleCallback@@ABVbtVector3@@1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?processAllTriangles@btSoftBodyCollisionShape@@UBEXPAVbtTriangleCallback@@ABVbtVector3@@1@Z PROC ; btSoftBodyCollisionShape::processAllTriangles, COMDAT
; _this$ = ecx
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@processAll
	push	68					; 00000044H
	push	OFFSET ??_C@_0FC@CEKAADLI@Assert?5d?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@processAll:
; Line 69
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?processAllTriangles@btSoftBodyCollisionShape@@UBEXPAVbtTriangleCallback@@ABVbtVector3@@1@Z ENDP ; btSoftBodyCollisionShape::processAllTriangles
_TEXT	ENDS
PUBLIC	?setMax@btVector3@@QAEXABV1@@Z			; btVector3::setMax
PUBLIC	?setMin@btVector3@@QAEXABV1@@Z			; btVector3::setMin
PUBLIC	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z	; btTransform::operator*
PUBLIC	?x@btVector3@@QBEABMXZ				; btVector3::x
PUBLIC	?y@btVector3@@QBEABMXZ				; btVector3::y
PUBLIC	?z@btVector3@@QBEABMXZ				; btVector3::z
PUBLIC	__$ArrayPad$
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getAabb@btSoftBodyCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
_TEXT	SEGMENT
_i$19157 = -356						; size = 4
$T19155 = -352						; size = 16
$T19153 = -336						; size = 16
$T19151 = -320						; size = 16
$T19149 = -304						; size = 16
$T19147 = -288						; size = 16
$T19145 = -272						; size = 16
$T19143 = -256						; size = 16
$T19141 = -240						; size = 16
_crns$ = -208						; size = 128
_maxs$ = -64						; size = 16
_mins$ = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_t$ = 8							; size = 4
_aabbMin$ = 12						; size = 4
_aabbMax$ = 16						; size = 4
?getAabb@btSoftBodyCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z PROC ; btSoftBodyCollisionShape::getAabb, COMDAT
; _this$ = ecx
; Line 73
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 368				; 00000170H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-368]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 928				; 000003a0H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _mins$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _mins$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _mins$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _mins$[ebp+12], eax
; Line 76
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 944				; 000003b0H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _maxs$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _maxs$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _maxs$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _maxs$[ebp+12], ecx
; Line 77
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR $T19141[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	edx, DWORD PTR _crns$[ebp]
	push	edx
	mov	ecx, DWORD PTR _t$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 78
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR $T19143[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	eax, DWORD PTR _crns$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _t$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 79
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR $T19145[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	ecx, DWORD PTR _crns$[ebp+32]
	push	ecx
	mov	ecx, DWORD PTR _t$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 80
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR $T19147[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	edx, DWORD PTR _crns$[ebp+48]
	push	edx
	mov	ecx, DWORD PTR _t$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 81
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR $T19149[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	eax, DWORD PTR _crns$[ebp+64]
	push	eax
	mov	ecx, DWORD PTR _t$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 82
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR $T19151[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	ecx, DWORD PTR _crns$[ebp+80]
	push	ecx
	mov	ecx, DWORD PTR _t$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 83
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR $T19153[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	edx, DWORD PTR _crns$[ebp+96]
	push	edx
	mov	ecx, DWORD PTR _t$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 84
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	ecx, DWORD PTR _mins$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR $T19155[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	eax, DWORD PTR _crns$[ebp+112]
	push	eax
	mov	ecx, DWORD PTR _t$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 85
	mov	ecx, DWORD PTR _aabbMax$[ebx]
	mov	edx, DWORD PTR _crns$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _crns$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _crns$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _crns$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _aabbMax$[ebx]
	mov	edx, DWORD PTR _aabbMin$[ebx]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 86
	mov	DWORD PTR _i$19157[ebp], 1
	jmp	SHORT $LN3@getAabb
$LN2@getAabb:
	mov	edx, DWORD PTR _i$19157[ebp]
	add	edx, 1
	mov	DWORD PTR _i$19157[ebp], edx
$LN3@getAabb:
	cmp	DWORD PTR _i$19157[ebp], 8
	jge	SHORT $LN4@getAabb
; Line 88
	mov	eax, DWORD PTR _i$19157[ebp]
	shl	eax, 4
	lea	ecx, DWORD PTR _crns$[ebp+eax]
	push	ecx
	mov	ecx, DWORD PTR _aabbMin$[ebx]
	call	?setMin@btVector3@@QAEXABV1@@Z		; btVector3::setMin
; Line 89
	mov	edx, DWORD PTR _i$19157[ebp]
	shl	edx, 4
	lea	eax, DWORD PTR _crns$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _aabbMax$[ebx]
	call	?setMax@btVector3@@QAEXABV1@@Z		; btVector3::setMax
; Line 90
	jmp	SHORT $LN2@getAabb
$LN4@getAabb:
; Line 91
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@getAabb
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
	npad	2
$LN10@getAabb:
	DD	3
	DD	$LN9@getAabb
$LN9@getAabb:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN6@getAabb
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN7@getAabb
	DD	-208					; ffffff30H
	DD	128					; 00000080H
	DD	$LN8@getAabb
$LN8@getAabb:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN7@getAabb:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	115					; 00000073H
	DB	0
$LN6@getAabb:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
?getAabb@btSoftBodyCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ENDP ; btSoftBodyCollisionShape::getAabb
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?x@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?x@btVector3@@QBEABMXZ PROC				; btVector3::x, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 575
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?x@btVector3@@QBEABMXZ ENDP				; btVector3::x
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?y@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?y@btVector3@@QBEABMXZ PROC				; btVector3::y, COMDAT
; _this$ = ecx
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?y@btVector3@@QBEABMXZ ENDP				; btVector3::y
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?z@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?z@btVector3@@QBEABMXZ PROC				; btVector3::z, COMDAT
; _this$ = ecx
; Line 579
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?z@btVector3@@QBEABMXZ ENDP				; btVector3::z
_TEXT	ENDS
PUBLIC	?w@btVector3@@QBEABMXZ				; btVector3::w
PUBLIC	??$btSetMax@M@@YAXAAMABM@Z			; btSetMax<float>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setMax@btVector3@@QAEXABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?setMax@btVector3@@QAEXABV1@@Z PROC			; btVector3::setMax, COMDAT
; _this$ = ecx
; Line 610
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 616
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$btSetMax@M@@YAXAAMABM@Z		; btSetMax<float>
	add	esp, 8
; Line 617
	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$btSetMax@M@@YAXAAMABM@Z		; btSetMax<float>
	add	esp, 8
; Line 618
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$btSetMax@M@@YAXAAMABM@Z		; btSetMax<float>
	add	esp, 8
; Line 619
	mov	ecx, DWORD PTR _other$[ebp]
	call	?w@btVector3@@QBEABMXZ			; btVector3::w
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$btSetMax@M@@YAXAAMABM@Z		; btSetMax<float>
	add	esp, 8
; Line 621
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setMax@btVector3@@QAEXABV1@@Z ENDP			; btVector3::setMax
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?w@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?w@btVector3@@QBEABMXZ PROC				; btVector3::w, COMDAT
; _this$ = ecx
; Line 581
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?w@btVector3@@QBEABMXZ ENDP				; btVector3::w
_TEXT	ENDS
PUBLIC	??$btSetMin@M@@YAXAAMABM@Z			; btSetMin<float>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setMin@btVector3@@QAEXABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?setMin@btVector3@@QAEXABV1@@Z PROC			; btVector3::setMin, COMDAT
; _this$ = ecx
; Line 627
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 633
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$btSetMin@M@@YAXAAMABM@Z		; btSetMin<float>
	add	esp, 8
; Line 634
	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$btSetMin@M@@YAXAAMABM@Z		; btSetMin<float>
	add	esp, 8
; Line 635
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$btSetMin@M@@YAXAAMABM@Z		; btSetMin<float>
	add	esp, 8
; Line 636
	mov	ecx, DWORD PTR _other$[ebp]
	call	?w@btVector3@@QBEABMXZ			; btVector3::w
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$btSetMin@M@@YAXAAMABM@Z		; btSetMin<float>
	add	esp, 8
; Line 638
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setMin@btVector3@@QAEXABV1@@Z ENDP			; btVector3::setMin
_TEXT	ENDS
PUBLIC	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z	; btTransform::operator()
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z PROC		; btTransform::operator*, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 101
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 102
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 103
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ENDP		; btTransform::operator*
_TEXT	ENDS
PUBLIC	?dot3@btVector3@@QBE?AV1@ABV1@00@Z		; btVector3::dot3
PUBLIC	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z		; btMatrix3x3::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z
_TEXT	SEGMENT
$T9423 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z PROC		; btTransform::operator(), COMDAT
; _this$ = ecx
; Line 95
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	lea	ecx, DWORD PTR $T9423[ebp]
	push	ecx
	mov	ecx, DWORD PTR _x$[ebx]
	call	?dot3@btVector3@@QBE?AV1@ABV1@00@Z	; btVector3::dot3
	push	eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebx]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 97
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ENDP		; btTransform::operator()
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?dot3@btVector3@@QBE?AV1@ABV1@00@Z
_TEXT	SEGMENT
$T65931 = -16						; size = 4
$T65930 = -12						; size = 4
$T65929 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v0$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
?dot3@btVector3@@QBE?AV1@ABV1@00@Z PROC			; btVector3::dot3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 719
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 745
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T65929[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T65930[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T65931[ebp]
	lea	eax, DWORD PTR $T65929[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65930[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65931[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 747
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?dot3@btVector3@@QBE?AV1@ABV1@00@Z ENDP			; btVector3::dot3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??AbtMatrix3x3@@QBEABVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AbtMatrix3x3@@QBEABVbtVector3@@H@Z PROC		; btMatrix3x3::operator[], COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 161
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
; Line 162
	mov	esp, ebp
	pop	ebp
	ret	4
??AbtMatrix3x3@@QBEABVbtVector3@@H@Z ENDP		; btMatrix3x3::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setLocalScaling@btSoftBodyCollisionShape@@UAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?setLocalScaling@btSoftBodyCollisionShape@@UAEXABVbtVector3@@@Z PROC ; btSoftBodyCollisionShape::setLocalScaling, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 97
	mov	esp, ebp
	pop	ebp
	ret	4
?setLocalScaling@btSoftBodyCollisionShape@@UAEXABVbtVector3@@@Z ENDP ; btSoftBodyCollisionShape::setLocalScaling
_TEXT	ENDS
PUBLIC	?dummy@?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@4V3@B ; `btSoftBodyCollisionShape::getLocalScaling'::`2'::dummy
PUBLIC	??_B?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@51 ; `btSoftBodyCollisionShape::getLocalScaling'::`2'::`local static guard'
;	COMDAT ?dummy@?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@4V3@B
_BSS	SEGMENT
?dummy@?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@4V3@B DB 010H DUP (?) ; `btSoftBodyCollisionShape::getLocalScaling'::`2'::dummy
_BSS	ENDS
;	COMDAT ??_B?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@51
_BSS	SEGMENT
??_B?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@51 DD 01H DUP (?) ; `btSoftBodyCollisionShape::getLocalScaling'::`2'::`local static guard'
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ
_TEXT	SEGMENT
$T65940 = -16						; size = 4
$T65939 = -12						; size = 4
$T65938 = -8						; size = 4
_this$ = -4						; size = 4
?getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ PROC ; btSoftBodyCollisionShape::getLocalScaling, COMDAT
; _this$ = ecx
; Line 99
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 100
	mov	eax, DWORD PTR ??_B?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getLocalSc
	mov	ecx, DWORD PTR ??_B?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@51
	or	ecx, 1
	mov	DWORD PTR ??_B?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@51, ecx
	fld1
	fstp	DWORD PTR $T65938[ebp]
	fld1
	fstp	DWORD PTR $T65939[ebp]
	fld1
	fstp	DWORD PTR $T65940[ebp]
	lea	edx, DWORD PTR $T65938[ebp]
	push	edx
	lea	eax, DWORD PTR $T65939[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65940[ebp]
	push	ecx
	mov	ecx, OFFSET ?dummy@?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@4V3@B ; `btSoftBodyCollisionShape::getLocalScaling'::`2'::dummy
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
$LN1@getLocalSc:
; Line 101
	mov	eax, OFFSET ?dummy@?1??getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ@4V3@B ; `btSoftBodyCollisionShape::getLocalScaling'::`2'::dummy
; Line 102
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getLocalScaling@btSoftBodyCollisionShape@@UBEABVbtVector3@@XZ ENDP ; btSoftBodyCollisionShape::getLocalScaling
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?calculateLocalInertia@btSoftBodyCollisionShape@@UBEXMAAVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?calculateLocalInertia@btSoftBodyCollisionShape@@UBEXMAAVbtVector3@@@Z PROC ; btSoftBodyCollisionShape::calculateLocalInertia, COMDAT
; _this$ = ecx
; Line 104
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 106
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@calculateL
	push	106					; 0000006aH
	push	OFFSET ??_C@_0FC@CEKAADLI@Assert?5d?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@calculateL:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?calculateLocalInertia@btSoftBodyCollisionShape@@UBEXMAAVbtVector3@@@Z ENDP ; btSoftBodyCollisionShape::calculateLocalInertia
_TEXT	ENDS
PUBLIC	??_C@_08NDGCFPMC@SoftBody?$AA@			; `string'
;	COMDAT ??_C@_08NDGCFPMC@SoftBody?$AA@
CONST	SEGMENT
??_C@_08NDGCFPMC@SoftBody?$AA@ DB 'SoftBody', 00H	; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?getName@btSoftBodyCollisionShape@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@btSoftBodyCollisionShape@@UBEPBDXZ PROC	; btSoftBodyCollisionShape::getName, COMDAT
; _this$ = ecx
; Line 109
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 110
	mov	eax, OFFSET ??_C@_08NDGCFPMC@SoftBody?$AA@
; Line 111
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@btSoftBodyCollisionShape@@UBEPBDXZ ENDP	; btSoftBodyCollisionShape::getName
_TEXT	ENDS
PUBLIC	??3btConcaveShape@@SAXPAX@Z			; btConcaveShape::operator delete
PUBLIC	??1btSoftBodyCollisionShape@@UAE@XZ		; btSoftBodyCollisionShape::~btSoftBodyCollisionShape
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtSoftBodyCollisionShape@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtSoftBodyCollisionShape@@UAEPAXI@Z PROC		; btSoftBodyCollisionShape::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSoftBodyCollisionShape@@UAE@XZ	; btSoftBodyCollisionShape::~btSoftBodyCollisionShape
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3btConcaveShape@@SAXPAX@Z		; btConcaveShape::operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtSoftBodyCollisionShape@@UAEPAXI@Z ENDP		; btSoftBodyCollisionShape::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??3btConcaveShape@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??3btConcaveShape@@SAXPAX@Z PROC			; btConcaveShape::operator delete, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconcaveshape.h
; Line 42
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??3btConcaveShape@@SAXPAX@Z ENDP			; btConcaveShape::operator delete
_TEXT	ENDS
EXTRN	??1btConcaveShape@@UAE@XZ:PROC			; btConcaveShape::~btConcaveShape
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btSoftBodyCollisionShape@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSoftBodyCollisionShape@@UAE@XZ PROC		; btSoftBodyCollisionShape::~btSoftBodyCollisionShape, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 61
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBodyCollisionShape@@6B@
; Line 63
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btConcaveShape@@UAE@XZ		; btConcaveShape::~btConcaveShape
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSoftBodyCollisionShape@@UAE@XZ ENDP		; btSoftBodyCollisionShape::~btSoftBodyCollisionShape
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ ; btAlignedObjectArray<btCollisionObject const *>::~btAlignedObjectArray<btCollisionObject const *>
PUBLIC	??1Config@btSoftBody@@QAE@XZ			; btSoftBody::Config::~Config
PUBLIC	??1Pose@btSoftBody@@QAE@XZ			; btSoftBody::Pose::~Pose
PUBLIC	??1?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Note>::~btAlignedObjectArray<btSoftBody::Note>
PUBLIC	??1?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Node>::~btAlignedObjectArray<btSoftBody::Node>
PUBLIC	??1?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Link>::~btAlignedObjectArray<btSoftBody::Link>
PUBLIC	??1?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Face>::~btAlignedObjectArray<btSoftBody::Face>
PUBLIC	??1?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Tetra>::~btAlignedObjectArray<btSoftBody::Tetra>
PUBLIC	??1?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Anchor>::~btAlignedObjectArray<btSoftBody::Anchor>
PUBLIC	??1?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::RContact>::~btAlignedObjectArray<btSoftBody::RContact>
PUBLIC	??1?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::SContact>::~btAlignedObjectArray<btSoftBody::SContact>
PUBLIC	??1?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Joint *>::~btAlignedObjectArray<btSoftBody::Joint *>
PUBLIC	??1?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Material *>::~btAlignedObjectArray<btSoftBody::Material *>
PUBLIC	??1?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Cluster *>::~btAlignedObjectArray<btSoftBody::Cluster *>
PUBLIC	??1?$btAlignedObjectArray@_N@@QAE@XZ		; btAlignedObjectArray<bool>::~btAlignedObjectArray<bool>
PUBLIC	??1?$btAlignedObjectArray@H@@QAE@XZ		; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
PUBLIC	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
PUBLIC	??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
PUBLIC	?releaseClusters@btSoftBody@@QAEXXZ		; btSoftBody::releaseClusters
EXTRN	??1btCollisionObject@@UAE@XZ:PROC		; btCollisionObject::~btCollisionObject
EXTRN	??1btDbvt@@QAE@XZ:PROC				; btDbvt::~btDbvt
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btSoftBody@@UAE@XZ
_TEXT	SEGMENT
tv155 = -20						; size = 4
$T65954 = -16						; size = 4
$T65953 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
??1btSoftBody@@UAE@XZ PROC				; btSoftBody::~btSoftBody, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 273
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBody@@6B@
; Line 275
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+204]
	mov	DWORD PTR $T65954[ebp], edx
	mov	eax, DWORD PTR $T65954[ebp]
	mov	DWORD PTR $T65953[ebp], eax
	cmp	DWORD PTR $T65953[ebp], 0
	je	SHORT $LN9@btSoftBody@2
	mov	esi, esp
	push	1
	mov	ecx, DWORD PTR $T65953[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T65953[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv155[ebp], eax
	jmp	SHORT $LN10@btSoftBody@2
$LN9@btSoftBody@2:
	mov	DWORD PTR tv155[ebp], 0
$LN10@btSoftBody@2:
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?releaseClusters@btSoftBody@@QAEXXZ	; btSoftBody::releaseClusters
; Line 279
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@btSoftBody@2
$LN5@btSoftBody@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@btSoftBody@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN4@btSoftBody@2
; Line 280
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	jmp	SHORT $LN5@btSoftBody@2
$LN4@btSoftBody@2:
; Line 281
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@btSoftBody@2
$LN2@btSoftBody@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@btSoftBody@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN7@btSoftBody@2
; Line 282
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	jmp	SHORT $LN2@btSoftBody@2
$LN7@btSoftBody@2:
; Line 283
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1268				; 000004f4H
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1164				; 0000048cH
	call	??1?$btAlignedObjectArray@_N@@QAE@XZ	; btAlignedObjectArray<bool>::~btAlignedObjectArray<bool>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??1?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Cluster *>::~btAlignedObjectArray<btSoftBody::Cluster *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1084				; 0000043cH
	call	??1btDbvt@@QAE@XZ			; btDbvt::~btDbvt
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	??1btDbvt@@QAE@XZ			; btDbvt::~btDbvt
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	??1btDbvt@@QAE@XZ			; btDbvt::~btDbvt
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??1?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Material *>::~btAlignedObjectArray<btSoftBody::Material *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??1?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Joint *>::~btAlignedObjectArray<btSoftBody::Joint *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 852				; 00000354H
	call	??1?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::SContact>::~btAlignedObjectArray<btSoftBody::SContact>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 832				; 00000340H
	call	??1?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::RContact>::~btAlignedObjectArray<btSoftBody::RContact>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??1?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Anchor>::~btAlignedObjectArray<btSoftBody::Anchor>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??1?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Tetra>::~btAlignedObjectArray<btSoftBody::Tetra>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??1?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Face>::~btAlignedObjectArray<btSoftBody::Face>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??1?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Link>::~btAlignedObjectArray<btSoftBody::Link>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??1?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Node>::~btAlignedObjectArray<btSoftBody::Node>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??1?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Note>::~btAlignedObjectArray<btSoftBody::Note>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	call	??1Pose@btSoftBody@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 312				; 00000138H
	call	??1Config@btSoftBody@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	??1?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ ; btAlignedObjectArray<btCollisionObject const *>::~btAlignedObjectArray<btCollisionObject const *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btCollisionObject@@UAE@XZ		; btCollisionObject::~btCollisionObject
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSoftBody@@UAE@XZ ENDP				; btSoftBody::~btSoftBody
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::~btAlignedObjectArray<enum btSoftBody::eVSolver::_>
PUBLIC	??1?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::~btAlignedObjectArray<enum btSoftBody::ePSolver::_>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1Config@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Config@btSoftBody@@QAE@XZ PROC			; btSoftBody::Config::~Config, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??1?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::~btAlignedObjectArray<enum btSoftBody::ePSolver::_>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??1?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::~btAlignedObjectArray<enum btSoftBody::ePSolver::_>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 104				; 00000068H
	call	??1?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::~btAlignedObjectArray<enum btSoftBody::eVSolver::_>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Config@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Config::~Config
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ	; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
PUBLIC	??1?$btAlignedObjectArray@M@@QAE@XZ		; btAlignedObjectArray<float>::~btAlignedObjectArray<float>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1Pose@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Pose@btSoftBody@@QAE@XZ PROC				; btSoftBody::Pose::~Pose, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$btAlignedObjectArray@M@@QAE@XZ	; btAlignedObjectArray<float>::~btAlignedObjectArray<float>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Pose@btSoftBody@@QAE@XZ ENDP				; btSoftBody::Pose::~Pose
_TEXT	ENDS
PUBLIC	?checkLink@btSoftBody@@QBE_NPBUNode@1@0@Z	; btSoftBody::checkLink
PUBLIC	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
PUBLIC	?checkLink@btSoftBody@@QBE_NHH@Z		; btSoftBody::checkLink
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?checkLink@btSoftBody@@QBE_NHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_node0$ = 8						; size = 4
_node1$ = 12						; size = 4
?checkLink@btSoftBody@@QBE_NHH@Z PROC			; btSoftBody::checkLink, COMDAT
; _this$ = ecx
; Line 287
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 288
	mov	eax, DWORD PTR _node1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	ecx, DWORD PTR _node0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?checkLink@btSoftBody@@QBE_NPBUNode@1@0@Z ; btSoftBody::checkLink
; Line 289
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?checkLink@btSoftBody@@QBE_NHH@Z ENDP			; btSoftBody::checkLink
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?checkLink@btSoftBody@@QBE_NPBUNode@1@0@Z
_TEXT	SEGMENT
_l$52599 = -32						; size = 4
_ni$52595 = -28						; size = 4
_i$52594 = -24						; size = 4
_n$ = -16						; size = 8
_this$ = -4						; size = 4
_node0$ = 8						; size = 4
_node1$ = 12						; size = 4
?checkLink@btSoftBody@@QBE_NPBUNode@1@0@Z PROC		; btSoftBody::checkLink, COMDAT
; _this$ = ecx
; Line 293
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 294
	mov	eax, DWORD PTR _node0$[ebp]
	mov	DWORD PTR _n$[ebp], eax
	mov	ecx, DWORD PTR _node1$[ebp]
	mov	DWORD PTR _n$[ebp+4], ecx
; Line 295
	mov	DWORD PTR _i$52594[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$52595[ebp], eax
	jmp	SHORT $LN6@checkLink
$LN5@checkLink:
	mov	edx, DWORD PTR _i$52594[ebp]
	add	edx, 1
	mov	DWORD PTR _i$52594[ebp], edx
$LN6@checkLink:
	mov	eax, DWORD PTR _i$52594[ebp]
	cmp	eax, DWORD PTR _ni$52595[ebp]
	jge	SHORT $LN4@checkLink
; Line 297
	mov	ecx, DWORD PTR _i$52594[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$52599[ebp], eax
; Line 299
	mov	edx, DWORD PTR _l$52599[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _n$[ebp]
	jne	SHORT $LN1@checkLink
	mov	ecx, DWORD PTR _l$52599[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _n$[ebp+4]
	je	SHORT $LN2@checkLink
$LN1@checkLink:
	mov	eax, DWORD PTR _l$52599[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _n$[ebp+4]
	jne	SHORT $LN3@checkLink
	mov	edx, DWORD PTR _l$52599[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR _n$[ebp]
	jne	SHORT $LN3@checkLink
$LN2@checkLink:
; Line 301
	mov	al, 1
	jmp	SHORT $LN7@checkLink
$LN3@checkLink:
; Line 303
	jmp	SHORT $LN5@checkLink
$LN4@checkLink:
; Line 304
	xor	al, al
$LN7@checkLink:
; Line 305
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@checkLink
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN11@checkLink:
	DD	1
	DD	$LN10@checkLink
$LN10@checkLink:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN9@checkLink
$LN9@checkLink:
	DB	110					; 0000006eH
	DB	0
?checkLink@btSoftBody@@QBE_NPBUNode@1@0@Z ENDP		; btSoftBody::checkLink
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
PUBLIC	?checkFace@btSoftBody@@QBE_NHHH@Z		; btSoftBody::checkFace
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?checkFace@btSoftBody@@QBE_NHHH@Z
_TEXT	SEGMENT
_j$52617 = -44						; size = 4
_c$52616 = -40						; size = 4
_f$52615 = -36						; size = 4
_ni$52611 = -32						; size = 4
_i$52610 = -28						; size = 4
_n$ = -20						; size = 12
_this$ = -4						; size = 4
_node0$ = 8						; size = 4
_node1$ = 12						; size = 4
_node2$ = 16						; size = 4
?checkFace@btSoftBody@@QBE_NHHH@Z PROC			; btSoftBody::checkFace, COMDAT
; _this$ = ecx
; Line 309
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 310
	mov	eax, DWORD PTR _node0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$[ebp], eax
; Line 311
	mov	ecx, DWORD PTR _node1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$[ebp+4], eax
; Line 313
	mov	edx, DWORD PTR _node2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$[ebp+8], eax
; Line 314
	mov	DWORD PTR _i$52610[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$52611[ebp], eax
	jmp	SHORT $LN10@checkFace
$LN9@checkFace:
	mov	eax, DWORD PTR _i$52610[ebp]
	add	eax, 1
	mov	DWORD PTR _i$52610[ebp], eax
$LN10@checkFace:
	mov	ecx, DWORD PTR _i$52610[ebp]
	cmp	ecx, DWORD PTR _ni$52611[ebp]
	jge	$LN8@checkFace
; Line 316
	mov	edx, DWORD PTR _i$52610[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$52615[ebp], eax
; Line 317
	mov	DWORD PTR _c$52616[ebp], 0
; Line 318
	mov	DWORD PTR _j$52617[ebp], 0
	jmp	SHORT $LN7@checkFace
$LN6@checkFace:
	mov	eax, DWORD PTR _j$52617[ebp]
	add	eax, 1
	mov	DWORD PTR _j$52617[ebp], eax
$LN7@checkFace:
	cmp	DWORD PTR _j$52617[ebp], 3
	jge	SHORT $LN5@checkFace
; Line 322
	mov	ecx, DWORD PTR _j$52617[ebp]
	mov	edx, DWORD PTR _f$52615[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	cmp	eax, DWORD PTR _n$[ebp]
	je	SHORT $LN3@checkFace
	mov	ecx, DWORD PTR _j$52617[ebp]
	mov	edx, DWORD PTR _f$52615[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	cmp	eax, DWORD PTR _n$[ebp+4]
	je	SHORT $LN3@checkFace
	mov	ecx, DWORD PTR _j$52617[ebp]
	mov	edx, DWORD PTR _f$52615[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	cmp	eax, DWORD PTR _n$[ebp+8]
	jne	SHORT $LN4@checkFace
$LN3@checkFace:
	mov	edx, 1
	mov	ecx, DWORD PTR _j$52617[ebp]
	shl	edx, cl
	or	edx, DWORD PTR _c$52616[ebp]
	mov	DWORD PTR _c$52616[ebp], edx
	jmp	SHORT $LN2@checkFace
$LN4@checkFace:
	jmp	SHORT $LN5@checkFace
$LN2@checkFace:
; Line 323
	jmp	SHORT $LN6@checkFace
$LN5@checkFace:
; Line 324
	cmp	DWORD PTR _c$52616[ebp], 7
	jne	SHORT $LN1@checkFace
	mov	al, 1
	jmp	SHORT $LN11@checkFace
$LN1@checkFace:
; Line 325
	jmp	$LN9@checkFace
$LN8@checkFace:
; Line 326
	xor	al, al
$LN11@checkFace:
; Line 327
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@checkFace
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN15@checkFace:
	DD	1
	DD	$LN14@checkFace
$LN14@checkFace:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN13@checkFace
$LN13@checkFace:
	DB	110					; 0000006eH
	DB	0
?checkFace@btSoftBody@@QBE_NHHH@Z ENDP			; btSoftBody::checkFace
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXABQAUMaterial@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Material *>::push_back
PUBLIC	??0Material@btSoftBody@@QAE@XZ			; btSoftBody::Material::Material
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendMaterial@btSoftBody@@QAEPAUMaterial@1@XZ
_TEXT	SEGMENT
tv73 = -24						; size = 4
$T65975 = -20						; size = 4
_pm$ = -12						; size = 4
_this$ = -4						; size = 4
?appendMaterial@btSoftBody@@QAEPAUMaterial@1@XZ PROC	; btSoftBody::appendMaterial, COMDAT
; _this$ = ecx
; Line 331
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 332
	push	16					; 00000010H
	push	20					; 00000014H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	push	eax
	push	20					; 00000014H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T65975[ebp], eax
	cmp	DWORD PTR $T65975[ebp], 0
	je	SHORT $LN5@appendMate
	mov	ecx, DWORD PTR $T65975[ebp]
	call	??0Material@btSoftBody@@QAE@XZ
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN6@appendMate
$LN5@appendMate:
	mov	DWORD PTR tv73[ebp], 0
$LN6@appendMate:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _pm$[ebp], eax
; Line 333
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
	test	eax, eax
	jle	SHORT $LN2@appendMate
; Line 334
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pm$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], ecx
; Line 335
	jmp	SHORT $LN1@appendMate
$LN2@appendMate:
; Line 336
	mov	edx, DWORD PTR _pm$[ebp]
	push	edx
	call	??$ZeroInitialize@UMaterial@btSoftBody@@@@YAXAAUMaterial@btSoftBody@@@Z ; ZeroInitialize<btSoftBody::Material>
	add	esp, 4
$LN1@appendMate:
; Line 337
	lea	eax, DWORD PTR _pm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	?push_back@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXABQAUMaterial@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Material *>::push_back
; Line 338
	mov	eax, DWORD PTR _pm$[ebp]
; Line 339
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@appendMate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN9@appendMate:
	DD	1
	DD	$LN8@appendMate
$LN8@appendMate:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@appendMate
$LN7@appendMate:
	DB	112					; 00000070H
	DB	109					; 0000006dH
	DB	0
?appendMaterial@btSoftBody@@QAEPAUMaterial@1@XZ ENDP	; btSoftBody::appendMaterial
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
; Line 56
	push	ebp
	mov	ebp, esp
; Line 57
	mov	eax, DWORD PTR __Where$[ebp]
; Line 58
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Material@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Material@btSoftBody@@QAE@XZ PROC			; btSoftBody::Material::Material, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Element@btSoftBody@@QAE@XZ		; btSoftBody::Element::Element
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Material@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Material::Material
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXABUNote@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Note>::push_back
PUBLIC	??0Note@btSoftBody@@QAE@XZ			; btSoftBody::Note::Note
PUBLIC	__$ArrayPad$
PUBLIC	?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@ABVbtVector4@@PAUNode@1@333@Z ; btSoftBody::appendNote
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@ABVbtVector4@@PAUNode@1@333@Z
_TEXT	SEGMENT
_n$ = -96						; size = 80
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_text$ = 8						; size = 4
_o$ = 12						; size = 4
_c$ = 16						; size = 4
_n0$ = 20						; size = 4
_n1$ = 24						; size = 4
_n2$ = 28						; size = 4
_n3$ = 32						; size = 4
?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@ABVbtVector4@@PAUNode@1@333@Z PROC ; btSoftBody::appendNote, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 349
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 350
	lea	ecx, DWORD PTR _n$[ebp]
	call	??0Note@btSoftBody@@QAE@XZ
; Line 351
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	call	??$ZeroInitialize@UNote@btSoftBody@@@@YAXAAUNote@btSoftBody@@@Z ; ZeroInitialize<btSoftBody::Note>
	add	esp, 4
; Line 352
	mov	DWORD PTR _n$[ebp+32], 0
; Line 353
	mov	ecx, DWORD PTR _text$[ebx]
	mov	DWORD PTR _n$[ebp+4], ecx
; Line 354
	mov	edx, DWORD PTR _o$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _n$[ebp+16], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _n$[ebp+20], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _n$[ebp+24], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _n$[ebp+28], ecx
; Line 355
	mov	ecx, DWORD PTR _c$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _n$[ebp+52]
; Line 356
	mov	ecx, DWORD PTR _c$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _n$[ebp+56]
; Line 357
	mov	ecx, DWORD PTR _c$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _n$[ebp+60]
; Line 358
	mov	ecx, DWORD PTR _c$[ebx]
	call	?w@btVector3@@QBEABMXZ			; btVector3::w
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _n$[ebp+64]
; Line 359
	mov	edx, DWORD PTR _n0$[ebx]
	mov	DWORD PTR _n$[ebp+36], edx
	xor	eax, eax
	cmp	DWORD PTR _n0$[ebx], 0
	setne	al
	add	eax, DWORD PTR _n$[ebp+32]
	mov	DWORD PTR _n$[ebp+32], eax
; Line 360
	mov	ecx, DWORD PTR _n1$[ebx]
	mov	DWORD PTR _n$[ebp+40], ecx
	xor	edx, edx
	cmp	DWORD PTR _n1$[ebx], 0
	setne	dl
	add	edx, DWORD PTR _n$[ebp+32]
	mov	DWORD PTR _n$[ebp+32], edx
; Line 361
	mov	eax, DWORD PTR _n2$[ebx]
	mov	DWORD PTR _n$[ebp+44], eax
	xor	ecx, ecx
	cmp	DWORD PTR _n2$[ebx], 0
	setne	cl
	add	ecx, DWORD PTR _n$[ebp+32]
	mov	DWORD PTR _n$[ebp+32], ecx
; Line 362
	mov	edx, DWORD PTR _n3$[ebx]
	mov	DWORD PTR _n$[ebp+48], edx
	xor	eax, eax
	cmp	DWORD PTR _n3$[ebx], 0
	setne	al
	add	eax, DWORD PTR _n$[ebp+32]
	mov	DWORD PTR _n$[ebp+32], eax
; Line 363
	lea	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	?push_back@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXABUNote@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Note>::push_back
; Line 364
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@appendNote
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	28					; 0000001cH
	npad	2
$LN5@appendNote:
	DD	1
	DD	$LN4@appendNote
$LN4@appendNote:
	DD	-96					; ffffffa0H
	DD	80					; 00000050H
	DD	$LN3@appendNote
$LN3@appendNote:
	DB	110					; 0000006eH
	DB	0
?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@ABVbtVector4@@PAUNode@1@333@Z ENDP ; btSoftBody::appendNote
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Note@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Note@btSoftBody@@QAE@XZ PROC				; btSoftBody::Note::Note, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Element@btSoftBody@@QAE@XZ		; btSoftBody::Element::Element
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Note@btSoftBody@@QAE@XZ ENDP				; btSoftBody::Note::Note
_TEXT	ENDS
PUBLIC	??0btVector4@@QAE@ABM000@Z			; btVector4::btVector4
PUBLIC	?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUNode@1@@Z ; btSoftBody::appendNote
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUNode@1@@Z
_TEXT	SEGMENT
$T65998 = -48						; size = 4
$T65997 = -44						; size = 4
$T65996 = -40						; size = 4
$T65995 = -36						; size = 4
$T52665 = -32						; size = 16
_this$ = -4						; size = 4
_text$ = 8						; size = 4
_o$ = 12						; size = 4
_feature$ = 16						; size = 4
?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUNode@1@@Z PROC ; btSoftBody::appendNote, COMDAT
; _this$ = ecx
; Line 370
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 371
	fldz
	fstp	DWORD PTR $T65995[ebp]
	fldz
	fstp	DWORD PTR $T65996[ebp]
	fldz
	fstp	DWORD PTR $T65997[ebp]
	fld1
	fstp	DWORD PTR $T65998[ebp]
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _feature$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T65995[ebp]
	push	ecx
	lea	edx, DWORD PTR $T65996[ebp]
	push	edx
	lea	eax, DWORD PTR $T65997[ebp]
	push	eax
	lea	ecx, DWORD PTR $T65998[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T52665[ebp]
	call	??0btVector4@@QAE@ABM000@Z		; btVector4::btVector4
	push	eax
	mov	edx, DWORD PTR _o$[ebx]
	push	edx
	mov	eax, DWORD PTR _text$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@ABVbtVector4@@PAUNode@1@333@Z ; btSoftBody::appendNote
; Line 372
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUNode@1@@Z ENDP ; btSoftBody::appendNote
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btVector4@@QAE@ABM000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??0btVector4@@QAE@ABM000@Z PROC				; btVector4::btVector4, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 1085
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __z$[ebp]
	push	eax
	mov	ecx, DWORD PTR __y$[ebp]
	push	ecx
	mov	edx, DWORD PTR __x$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 1086
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __w$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+12]
; Line 1087
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0btVector4@@QAE@ABM000@Z ENDP				; btVector4::btVector4
_TEXT	ENDS
PUBLIC	?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAULink@1@@Z ; btSoftBody::appendNote
;	COMDAT ?w@?1??appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAULink@2@@Z@4MB
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
CONST	SEGMENT
?w@?1??appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAULink@2@@Z@4MB DD 03f000000r ; 0.5 ; `btSoftBody::appendNote'::`2'::w
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAULink@1@@Z
_TEXT	SEGMENT
$T66004 = -40						; size = 4
$T66003 = -36						; size = 4
$T52679 = -32						; size = 16
_this$ = -4						; size = 4
_text$ = 8						; size = 4
_o$ = 12						; size = 4
_feature$ = 16						; size = 4
?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAULink@1@@Z PROC ; btSoftBody::appendNote, COMDAT
; _this$ = ecx
; Line 378
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 381
	fldz
	fstp	DWORD PTR $T66003[ebp]
	fldz
	fstp	DWORD PTR $T66004[ebp]
	push	0
	push	0
	mov	eax, DWORD PTR _feature$[ebx]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _feature$[ebx]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	lea	ecx, DWORD PTR $T66003[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66004[ebp]
	push	edx
	push	OFFSET ?w@?1??appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAULink@2@@Z@4MB
	push	OFFSET ?w@?1??appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAULink@2@@Z@4MB
	lea	ecx, DWORD PTR $T52679[ebp]
	call	??0btVector4@@QAE@ABM000@Z		; btVector4::btVector4
	push	eax
	mov	eax, DWORD PTR _o$[ebx]
	push	eax
	mov	ecx, DWORD PTR _text$[ebx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@ABVbtVector4@@PAUNode@1@333@Z ; btSoftBody::appendNote
; Line 382
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAULink@1@@Z ENDP ; btSoftBody::appendNote
_TEXT	ENDS
PUBLIC	?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUFace@1@@Z ; btSoftBody::appendNote
;	COMDAT ?w@?1??appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUFace@2@@Z@4MB
CONST	SEGMENT
?w@?1??appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUFace@2@@Z@4MB DD 03eaaaaabr ; 0.333333 ; `btSoftBody::appendNote'::`2'::w
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUFace@1@@Z
_TEXT	SEGMENT
$T66007 = -36						; size = 4
$T52691 = -32						; size = 16
_this$ = -4						; size = 4
_text$ = 8						; size = 4
_o$ = 12						; size = 4
_feature$ = 16						; size = 4
?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUFace@1@@Z PROC ; btSoftBody::appendNote, COMDAT
; _this$ = ecx
; Line 388
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 392
	fldz
	fstp	DWORD PTR $T66007[ebp]
	push	0
	mov	eax, DWORD PTR _feature$[ebx]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _feature$[ebx]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _feature$[ebx]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	lea	eax, DWORD PTR $T66007[ebp]
	push	eax
	push	OFFSET ?w@?1??appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUFace@2@@Z@4MB
	push	OFFSET ?w@?1??appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUFace@2@@Z@4MB
	push	OFFSET ?w@?1??appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUFace@2@@Z@4MB
	lea	ecx, DWORD PTR $T52691[ebp]
	call	??0btVector4@@QAE@ABM000@Z		; btVector4::btVector4
	push	eax
	mov	ecx, DWORD PTR _o$[ebx]
	push	ecx
	mov	edx, DWORD PTR _text$[ebx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@ABVbtVector4@@PAUNode@1@333@Z ; btSoftBody::appendNote
; Line 393
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
?appendNote@btSoftBody@@QAEXPBDABVbtVector3@@PAUFace@1@@Z ENDP ; btSoftBody::appendNote
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXABUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node>::push_back
PUBLIC	?indicesToPointers@btSoftBody@@QAEXPBH@Z	; btSoftBody::indicesToPointers
PUBLIC	?reserve@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Node>::reserve
PUBLIC	?pointersToIndices@btSoftBody@@QAEXXZ		; btSoftBody::pointersToIndices
PUBLIC	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
PUBLIC	?capacity@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::capacity
PUBLIC	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z	; btSoftBody::appendNode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z
_TEXT	SEGMENT
tv147 = -200						; size = 4
tv89 = -196						; size = 4
$T52702 = -192						; size = 32
_n$ = -148						; size = 4
$T52700 = -144						; size = 128
_margin$ = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_m$ = 12						; size = 4
?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z PROC	; btSoftBody::appendNode, COMDAT
; _this$ = ecx
; Line 397
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 398
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?capacity@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::capacity
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	esi, eax
	jne	SHORT $LN1@appendNode
; Line 400
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pointersToIndices@btSoftBody@@QAEXXZ	; btSoftBody::pointersToIndices
; Line 401
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	lea	eax, DWORD PTR [eax+eax+1]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?reserve@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Node>::reserve
; Line 402
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?indicesToPointers@btSoftBody@@QAEXPBH@Z ; btSoftBody::indicesToPointers
$LN1@appendNode:
; Line 404
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv89[ebp], eax
	mov	ecx, DWORD PTR tv89[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv89[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _margin$[ebp]
; Line 405
	lea	ecx, DWORD PTR $T52700[ebp]
	call	??0Node@btSoftBody@@QAE@XZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?push_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXABUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node>::push_back
; Line 406
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$[ebp], eax
; Line 407
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	??$ZeroInitialize@UNode@btSoftBody@@@@YAXAAUNode@btSoftBody@@@Z ; ZeroInitialize<btSoftBody::Node>
	add	esp, 4
; Line 408
	mov	edx, DWORD PTR _x$[ebx]
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 409
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 410
	fldz
	fcomp	DWORD PTR _m$[ebx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@appendNode
	fld1
	fdiv	DWORD PTR _m$[ebx]
	fstp	DWORD PTR tv147[ebp]
	jmp	SHORT $LN5@appendNode
$LN4@appendNode:
	fldz
	fstp	DWORD PTR tv147[ebp]
$LN5@appendNode:
	mov	ecx, DWORD PTR _n$[ebp]
	fld	DWORD PTR tv147[ebp]
	fstp	DWORD PTR [ecx+96]
; Line 411
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx+4], eax
; Line 412
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _margin$[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T52702[ebp]
	push	eax
	call	?FromCR@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@M@Z ; btDbvtAabbMm::FromCR
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	?insert@btDbvt@@QAEPAUbtDbvtNode@@ABUbtDbvtAabbMm@@PAX@Z ; btDbvt::insert
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+104], eax
; Line 413
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ENDP	; btSoftBody::appendNode
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXABULink@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Link>::push_back
PUBLIC	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
PUBLIC	??0Link@btSoftBody@@QAE@XZ			; btSoftBody::Link::Link
PUBLIC	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z	; btSoftBody::appendLink
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z
_TEXT	SEGMENT
tv82 = -88						; size = 4
_l$ = -80						; size = 64
_this$ = -4						; size = 4
_model$ = 8						; size = 4
_mat$ = 12						; size = 4
?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z PROC	; btSoftBody::appendLink, COMDAT
; _this$ = ecx
; Line 417
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 418
	lea	ecx, DWORD PTR _l$[ebp]
	call	??0Link@btSoftBody@@QAE@XZ
; Line 419
	cmp	DWORD PTR _model$[ebx], 0
	jl	SHORT $LN2@appendLink
; Line 420
	mov	eax, DWORD PTR _model$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _l$[ebp]
	rep movsd
; Line 421
	jmp	SHORT $LN1@appendLink
$LN2@appendLink:
; Line 423
	lea	ecx, DWORD PTR _l$[ebp]
	push	ecx
	call	??$ZeroInitialize@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@@Z ; ZeroInitialize<btSoftBody::Link>
	add	esp, 4
; Line 424
	cmp	DWORD PTR _mat$[ebx], 0
	je	SHORT $LN5@appendLink
	mov	edx, DWORD PTR _mat$[ebx]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN6@appendLink
$LN5@appendLink:
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv82[ebp], eax
$LN6@appendLink:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _l$[ebp+4], ecx
$LN1@appendLink:
; Line 426
	lea	edx, DWORD PTR _l$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?push_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXABULink@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Link>::push_back
; Line 427
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@appendLink
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN9@appendLink:
	DD	1
	DD	$LN8@appendLink
$LN8@appendLink:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN7@appendLink
$LN7@appendLink:
	DB	108					; 0000006cH
	DB	0
?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ENDP	; btSoftBody::appendLink
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Link@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Link@btSoftBody@@QAE@XZ PROC				; btSoftBody::Link::Link, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Feature@btSoftBody@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Link@btSoftBody@@QAE@XZ ENDP				; btSoftBody::Link::Link
_TEXT	ENDS
PUBLIC	?appendLink@btSoftBody@@QAEXPAUNode@1@0PAUMaterial@1@_N@Z ; btSoftBody::appendLink
PUBLIC	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_node0$ = 8						; size = 4
_node1$ = 12						; size = 4
_mat$ = 16						; size = 4
_bcheckexist$ = 20					; size = 1
?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z PROC	; btSoftBody::appendLink, COMDAT
; _this$ = ecx
; Line 434
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 435
	movzx	eax, BYTE PTR _bcheckexist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	eax, DWORD PTR _node0$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXPAUNode@1@0PAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 436
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ENDP	; btSoftBody::appendLink
_TEXT	ENDS
PUBLIC	?length@btVector3@@QBEMXZ			; btVector3::length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendLink@btSoftBody@@QAEXPAUNode@1@0PAUMaterial@1@_N@Z
_TEXT	SEGMENT
$T52734 = -32						; size = 16
_l$52733 = -8						; size = 4
_this$ = -4						; size = 4
_node0$ = 8						; size = 4
_node1$ = 12						; size = 4
_mat$ = 16						; size = 4
_bcheckexist$ = 20					; size = 1
?appendLink@btSoftBody@@QAEXPAUNode@1@0PAUMaterial@1@_N@Z PROC ; btSoftBody::appendLink, COMDAT
; _this$ = ecx
; Line 443
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 444
	movzx	eax, BYTE PTR _bcheckexist$[ebx]
	test	eax, eax
	je	SHORT $LN1@appendLink@2
	mov	ecx, DWORD PTR _node1$[ebx]
	push	ecx
	mov	edx, DWORD PTR _node0$[ebx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?checkLink@btSoftBody@@QBE_NPBUNode@1@0@Z ; btSoftBody::checkLink
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@appendLink@2
$LN1@appendLink@2:
; Line 446
	mov	ecx, DWORD PTR _mat$[ebx]
	push	ecx
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 447
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$52733[ebp], eax
; Line 448
	mov	edx, DWORD PTR _l$52733[ebp]
	mov	eax, DWORD PTR _node0$[ebx]
	mov	DWORD PTR [edx+8], eax
; Line 449
	mov	ecx, DWORD PTR _l$52733[ebp]
	mov	edx, DWORD PTR _node1$[ebx]
	mov	DWORD PTR [ecx+12], edx
; Line 450
	mov	eax, DWORD PTR _l$52733[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _l$52733[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T52734[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	mov	edx, DWORD PTR _l$52733[ebp]
	fstp	DWORD PTR [edx+16]
; Line 451
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+960], 1
$LN2@appendLink@2:
; Line 453
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
?appendLink@btSoftBody@@QAEXPAUNode@1@0PAUMaterial@1@_N@Z ENDP ; btSoftBody::appendLink
_TEXT	ENDS
PUBLIC	?btSqrt@@YAMM@Z					; btSqrt
PUBLIC	?length2@btVector3@@QBEMXZ			; btVector3::length2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?length@btVector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length@btVector3@@QBEMXZ PROC				; btVector3::length, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 264
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 265
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	push	ecx
	fstp	DWORD PTR [esp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
; Line 266
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@btVector3@@QBEMXZ ENDP				; btVector3::length
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?btSqrt@@YAMM@Z
_TEXT	SEGMENT
_y$ = 8							; size = 4
?btSqrt@@YAMM@Z PROC					; btSqrt, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 388
	push	ebp
	mov	ebp, esp
; Line 404
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
; Line 406
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btSqrt@@YAMM@Z ENDP					; btSqrt
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?length2@btVector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length2@btVector3@@QBEMXZ PROC				; btVector3::length2, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 258
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 259
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
; Line 260
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length2@btVector3@@QBEMXZ ENDP				; btVector3::length2
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXABUFace@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Face>::push_back
PUBLIC	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
PUBLIC	??0Face@btSoftBody@@QAE@XZ			; btSoftBody::Face::Face
PUBLIC	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z	; btSoftBody::appendFace
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z
_TEXT	SEGMENT
tv82 = -88						; size = 4
_f$ = -80						; size = 64
_this$ = -4						; size = 4
_model$ = 8						; size = 4
_mat$ = 12						; size = 4
?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z PROC	; btSoftBody::appendFace, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 457
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 458
	lea	ecx, DWORD PTR _f$[ebp]
	call	??0Face@btSoftBody@@QAE@XZ
; Line 459
	cmp	DWORD PTR _model$[ebx], 0
	jl	SHORT $LN2@appendFace
; Line 461
	mov	eax, DWORD PTR _model$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _f$[ebp]
	rep movsd
; Line 463
	jmp	SHORT $LN1@appendFace
$LN2@appendFace:
; Line 465
	lea	ecx, DWORD PTR _f$[ebp]
	push	ecx
	call	??$ZeroInitialize@UFace@btSoftBody@@@@YAXAAUFace@btSoftBody@@@Z ; ZeroInitialize<btSoftBody::Face>
	add	esp, 4
; Line 466
	cmp	DWORD PTR _mat$[ebx], 0
	je	SHORT $LN5@appendFace
	mov	edx, DWORD PTR _mat$[ebx]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN6@appendFace
$LN5@appendFace:
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv82[ebp], eax
$LN6@appendFace:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _f$[ebp+4], ecx
$LN1@appendFace:
; Line 468
	lea	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?push_back@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXABUFace@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Face>::push_back
; Line 469
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@appendFace
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN9@appendFace:
	DD	1
	DD	$LN8@appendFace
$LN8@appendFace:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN7@appendFace
$LN7@appendFace:
	DB	102					; 00000066H
	DB	0
?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ENDP	; btSoftBody::appendFace
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Face@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Face@btSoftBody@@QAE@XZ PROC				; btSoftBody::Face::Face, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Feature@btSoftBody@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Face@btSoftBody@@QAE@XZ ENDP				; btSoftBody::Face::Face
_TEXT	ENDS
PUBLIC	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z	; btSoftBody::appendFace
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z
_TEXT	SEGMENT
_f$ = -8						; size = 4
_this$ = -4						; size = 4
_node0$ = 8						; size = 4
_node1$ = 12						; size = 4
_node2$ = 16						; size = 4
_mat$ = 20						; size = 4
?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z PROC	; btSoftBody::appendFace, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 474
	mov	eax, DWORD PTR _node0$[ebp]
	cmp	eax, DWORD PTR _node1$[ebp]
	jne	SHORT $LN6@appendFace@2
; Line 475
	jmp	$LN7@appendFace@2
$LN6@appendFace@2:
; Line 476
	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	ecx, DWORD PTR _node2$[ebp]
	jne	SHORT $LN5@appendFace@2
; Line 477
	jmp	$LN7@appendFace@2
$LN5@appendFace@2:
; Line 478
	mov	edx, DWORD PTR _node2$[ebp]
	cmp	edx, DWORD PTR _node0$[ebp]
	jne	SHORT $LN4@appendFace@2
; Line 479
	jmp	$LN7@appendFace@2
$LN4@appendFace@2:
; Line 481
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 482
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$[ebp], eax
; Line 483
	mov	ecx, DWORD PTR _node0$[ebp]
	cmp	ecx, DWORD PTR _node1$[ebp]
	jne	SHORT $LN3@appendFace@2
	push	483					; 000001e3H
	push	OFFSET $SG52761
	call	_printf
	add	esp, 8
	int	3
$LN3@appendFace@2:
; Line 484
	mov	edx, DWORD PTR _node1$[ebp]
	cmp	edx, DWORD PTR _node2$[ebp]
	jne	SHORT $LN2@appendFace@2
	push	484					; 000001e4H
	push	OFFSET $SG52763
	call	_printf
	add	esp, 8
	int	3
$LN2@appendFace@2:
; Line 485
	mov	eax, DWORD PTR _node2$[ebp]
	cmp	eax, DWORD PTR _node0$[ebp]
	jne	SHORT $LN1@appendFace@2
	push	485					; 000001e5H
	push	OFFSET $SG52765
	call	_printf
	add	esp, 8
	int	3
$LN1@appendFace@2:
; Line 486
	mov	ecx, DWORD PTR _node0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 487
	mov	eax, DWORD PTR _node1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 488
	mov	edx, DWORD PTR _node2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 491
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	push	ecx
	call	?AreaOf@@YAMABVbtVector3@@00@Z		; AreaOf
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _f$[ebp]
	fstp	DWORD PTR [edx+48]
; Line 492
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+960], 1
$LN7@appendFace@2:
; Line 493
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ENDP	; btSoftBody::appendFace
_TEXT	ENDS
PUBLIC	?btCross@@YA?AVbtVector3@@ABV1@0@Z		; btCross
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AreaOf@@YAMABVbtVector3@@00@Z
_TEXT	SEGMENT
_area$ = -104						; size = 4
_cr$ = -96						; size = 16
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_x0$ = 8						; size = 4
_x1$ = 12						; size = 4
_x2$ = 16						; size = 4
?AreaOf@@YAMABVbtVector3@@00@Z PROC			; AreaOf, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 527
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 528
	mov	eax, DWORD PTR _x0$[ebx]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebx]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 529
	mov	eax, DWORD PTR _x0$[ebx]
	push	eax
	mov	ecx, DWORD PTR _x2$[ebx]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 530
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cr$[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
; Line 531
	lea	ecx, DWORD PTR _cr$[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _area$[ebp]
; Line 532
	fld	DWORD PTR _area$[ebp]
; Line 533
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@AreaOf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN7@AreaOf:
	DD	3
	DD	$LN6@AreaOf
$LN6@AreaOf:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@AreaOf
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN4@AreaOf
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN5@AreaOf
$LN5@AreaOf:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	0
$LN4@AreaOf:
	DB	98					; 00000062H
	DB	0
$LN3@AreaOf:
	DB	97					; 00000061H
	DB	0
?AreaOf@@YAMABVbtVector3@@00@Z ENDP			; AreaOf
_TEXT	ENDS
PUBLIC	?cross@btVector3@@QBE?AV1@ABV1@@Z		; btVector3::cross
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btCross@@YA?AVbtVector3@@ABV1@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?btCross@@YA?AVbtVector3@@ABV1@0@Z PROC			; btCross, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 919
	push	ebp
	mov	ebp, esp
; Line 920
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v1$[ebp]
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 921
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btCross@@YA?AVbtVector3@@ABV1@0@Z ENDP			; btCross
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?cross@btVector3@@QBE?AV1@ABV1@@Z
_TEXT	SEGMENT
$T66055 = -16						; size = 4
$T66054 = -12						; size = 4
$T66053 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?cross@btVector3@@QBE?AV1@ABV1@@Z PROC			; btVector3::cross, COMDAT
; _this$ = ecx
; Line 378
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 412
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T66053[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T66054[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T66055[ebp]
	lea	eax, DWORD PTR $T66053[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66054[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66055[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 414
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?cross@btVector3@@QBE?AV1@ABV1@@Z ENDP			; btVector3::cross
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXABUTetra@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Tetra>::push_back
PUBLIC	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
PUBLIC	??0Tetra@btSoftBody@@QAE@XZ			; btSoftBody::Tetra::Tetra
PUBLIC	__$ArrayPad$
PUBLIC	?appendTetra@btSoftBody@@QAEXHPAUMaterial@1@@Z	; btSoftBody::appendTetra
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendTetra@btSoftBody@@QAEXHPAUMaterial@1@@Z
_TEXT	SEGMENT
tv82 = -136						; size = 4
_t$ = -128						; size = 112
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_model$ = 8						; size = 4
_mat$ = 12						; size = 4
?appendTetra@btSoftBody@@QAEXHPAUMaterial@1@@Z PROC	; btSoftBody::appendTetra, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 497
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-136]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 498
	lea	ecx, DWORD PTR _t$[ebp]
	call	??0Tetra@btSoftBody@@QAE@XZ
; Line 499
	cmp	DWORD PTR _model$[ebx], 0
	jl	SHORT $LN2@appendTetr
; Line 500
	mov	eax, DWORD PTR _model$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	ecx, 28					; 0000001cH
	mov	esi, eax
	lea	edi, DWORD PTR _t$[ebp]
	rep movsd
; Line 501
	jmp	SHORT $LN1@appendTetr
$LN2@appendTetr:
; Line 503
	lea	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	??$ZeroInitialize@UTetra@btSoftBody@@@@YAXAAUTetra@btSoftBody@@@Z ; ZeroInitialize<btSoftBody::Tetra>
	add	esp, 4
; Line 504
	cmp	DWORD PTR _mat$[ebx], 0
	je	SHORT $LN5@appendTetr
	mov	edx, DWORD PTR _mat$[ebx]
	mov	DWORD PTR tv82[ebp], edx
	jmp	SHORT $LN6@appendTetr
$LN5@appendTetr:
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv82[ebp], eax
$LN6@appendTetr:
	mov	ecx, DWORD PTR tv82[ebp]
	mov	DWORD PTR _t$[ebp+4], ecx
$LN1@appendTetr:
; Line 506
	lea	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	?push_back@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXABUTetra@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Tetra>::push_back
; Line 507
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@appendTetr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	1
$LN9@appendTetr:
	DD	1
	DD	$LN8@appendTetr
$LN8@appendTetr:
	DD	-128					; ffffff80H
	DD	112					; 00000070H
	DD	$LN7@appendTetr
$LN7@appendTetr:
	DB	116					; 00000074H
	DB	0
?appendTetra@btSoftBody@@QAEXHPAUMaterial@1@@Z ENDP	; btSoftBody::appendTetra
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Tetra@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Tetra@btSoftBody@@QAE@XZ PROC			; btSoftBody::Tetra::Tetra, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Feature@btSoftBody@@QAE@XZ
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	4
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Tetra@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Tetra::Tetra
_TEXT	ENDS
PUBLIC	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
PUBLIC	?appendTetra@btSoftBody@@QAEXHHHHPAUMaterial@1@@Z ; btSoftBody::appendTetra
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendTetra@btSoftBody@@QAEXHHHHPAUMaterial@1@@Z
_TEXT	SEGMENT
_t$ = -8						; size = 4
_this$ = -4						; size = 4
_node0$ = 8						; size = 4
_node1$ = 12						; size = 4
_node2$ = 16						; size = 4
_node3$ = 20						; size = 4
_mat$ = 24						; size = 4
?appendTetra@btSoftBody@@QAEXHHHHPAUMaterial@1@@Z PROC	; btSoftBody::appendTetra, COMDAT
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendTetra@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendTetra
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	DWORD PTR _t$[ebp], eax
; Line 518
	mov	ecx, DWORD PTR _node0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 519
	mov	eax, DWORD PTR _node1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 520
	mov	edx, DWORD PTR _node2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 521
	mov	edx, DWORD PTR _node3$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _t$[ebp]
	mov	DWORD PTR [ecx+20], eax
; Line 522
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [edx+20]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 16					; 00000010H
	push	eax
	call	?VolumeOf@@YAMABVbtVector3@@000@Z	; VolumeOf
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _t$[ebp]
	fstp	DWORD PTR [ecx+24]
; Line 523
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+960], 1
; Line 524
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?appendTetra@btSoftBody@@QAEXHHHHPAUMaterial@1@@Z ENDP	; btSoftBody::appendTetra
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?VolumeOf@@YAMABVbtVector3@@000@Z
_TEXT	SEGMENT
$T19682 = -128						; size = 16
_c$ = -96						; size = 16
_b$ = -64						; size = 16
_a$ = -32						; size = 16
_x0$ = 8						; size = 4
_x1$ = 12						; size = 4
_x2$ = 16						; size = 4
_x3$ = 20						; size = 4
?VolumeOf@@YAMABVbtVector3@@000@Z PROC			; VolumeOf, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 540
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 541
	mov	eax, DWORD PTR _x0$[ebx]
	push	eax
	mov	ecx, DWORD PTR _x1$[ebx]
	push	ecx
	lea	edx, DWORD PTR _a$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 542
	mov	eax, DWORD PTR _x0$[ebx]
	push	eax
	mov	ecx, DWORD PTR _x2$[ebx]
	push	ecx
	lea	edx, DWORD PTR _b$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 543
	mov	eax, DWORD PTR _x0$[ebx]
	push	eax
	mov	ecx, DWORD PTR _x3$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 544
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	lea	ecx, DWORD PTR _b$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T19682[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _a$[ebp]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
; Line 545
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@VolumeOf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN7@VolumeOf:
	DD	3
	DD	$LN6@VolumeOf
$LN6@VolumeOf:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@VolumeOf
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN4@VolumeOf
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN5@VolumeOf
$LN5@VolumeOf:
	DB	99					; 00000063H
	DB	0
$LN4@VolumeOf:
	DB	98					; 00000062H
	DB	0
$LN3@VolumeOf:
	DB	97					; 00000061H
	DB	0
?VolumeOf@@YAMABVbtVector3@@000@Z ENDP			; VolumeOf
_TEXT	ENDS
PUBLIC	?appendAnchor@btSoftBody@@QAEXHPAVbtRigidBody@@ABVbtVector3@@_NM@Z ; btSoftBody::appendAnchor
PUBLIC	?inverse@btTransform@@QBE?AV1@XZ		; btTransform::inverse
PUBLIC	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
PUBLIC	__$ArrayPad$
PUBLIC	?appendAnchor@btSoftBody@@QAEXHPAVbtRigidBody@@_NM@Z ; btSoftBody::appendAnchor
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendAnchor@btSoftBody@@QAEXHPAVbtRigidBody@@_NM@Z
_TEXT	SEGMENT
$T52798 = -112						; size = 64
_local$ = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_node$ = 8						; size = 4
_body$ = 12						; size = 4
_disableCollisionBetweenLinkedBodies$ = 16		; size = 1
_influence$ = 20					; size = 4
?appendAnchor@btSoftBody@@QAEXHPAVbtRigidBody@@_NM@Z PROC ; btSoftBody::appendAnchor, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 529
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 530
	mov	eax, DWORD PTR _node$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _local$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T52798[ebp]
	push	edx
	mov	ecx, DWORD PTR _body$[ebx]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	mov	ecx, eax
	call	?inverse@btTransform@@QBE?AV1@XZ	; btTransform::inverse
	mov	ecx, eax
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 531
	push	ecx
	fld	DWORD PTR _influence$[ebx]
	fstp	DWORD PTR [esp]
	movzx	eax, BYTE PTR _disableCollisionBetweenLinkedBodies$[ebx]
	push	eax
	lea	ecx, DWORD PTR _local$[ebp]
	push	ecx
	mov	edx, DWORD PTR _body$[ebx]
	push	edx
	mov	eax, DWORD PTR _node$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendAnchor@btSoftBody@@QAEXHPAVbtRigidBody@@ABVbtVector3@@_NM@Z ; btSoftBody::appendAnchor
; Line 532
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@appendAnch
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	3
$LN5@appendAnch:
	DD	1
	DD	$LN4@appendAnch
$LN4@appendAnch:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@appendAnch
$LN3@appendAnch:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
?appendAnchor@btSoftBody@@QAEXHPAVbtRigidBody@@_NM@Z ENDP ; btSoftBody::appendAnchor
_TEXT	ENDS
PUBLIC	??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ; btTransform::btTransform
PUBLIC	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z	; operator*
PUBLIC	??G@YA?AVbtVector3@@ABV0@@Z			; operator-
PUBLIC	?transpose@btMatrix3x3@@QBE?AV1@XZ		; btMatrix3x3::transpose
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?inverse@btTransform@@QBE?AV1@XZ
_TEXT	SEGMENT
$T9470 = -112						; size = 16
$T9469 = -96						; size = 16
_inv$ = -64						; size = 48
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?inverse@btTransform@@QBE?AV1@XZ PROC			; btTransform::inverse, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 189
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 190
	lea	eax, DWORD PTR _inv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?transpose@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::transpose
; Line 191
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR $T9469[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _inv$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T9470[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _inv$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ; btTransform::btTransform
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 192
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@inverse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	3
$LN5@inverse:
	DD	1
	DD	$LN4@inverse
$LN4@inverse:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN3@inverse
$LN3@inverse:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
?inverse@btTransform@@QBE?AV1@XZ ENDP			; btTransform::inverse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??G@YA?AVbtVector3@@ABV0@@Z
_TEXT	SEGMENT
$T66091 = -12						; size = 4
$T66090 = -8						; size = 4
$T66089 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??G@YA?AVbtVector3@@ABV0@@Z PROC			; operator-, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 805
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 812
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	fstp	DWORD PTR $T66089[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	fstp	DWORD PTR $T66090[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx]
	fchs
	fstp	DWORD PTR $T66091[ebp]
	lea	eax, DWORD PTR $T66089[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66090[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66091[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 814
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVbtVector3@@ABV0@@Z ENDP			; operator-
_TEXT	ENDS
PUBLIC	??0btMatrix3x3@@QAE@ABM00000000@Z		; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?transpose@btMatrix3x3@@QBE?AV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?transpose@btMatrix3x3@@QBE?AV1@XZ PROC			; btMatrix3x3::transpose, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 981
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1012
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1014
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?transpose@btMatrix3x3@@QBE?AV1@XZ ENDP			; btMatrix3x3::transpose
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btMatrix3x3@@QAE@ABM00000000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xx$ = 8						; size = 4
_xy$ = 12						; size = 4
_xz$ = 16						; size = 4
_yx$ = 20						; size = 4
_yy$ = 24						; size = 4
_yz$ = 28						; size = 4
_zx$ = 32						; size = 4
_zy$ = 36						; size = 4
_zz$ = 40						; size = 4
??0btMatrix3x3@@QAE@ABM00000000@Z PROC			; btMatrix3x3::btMatrix3x3, COMDAT
; _this$ = ecx
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
; Line 75
	mov	ecx, DWORD PTR _zz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _zy$[ebp]
	push	edx
	mov	eax, DWORD PTR _zx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yy$[ebp]
	push	edx
	mov	eax, DWORD PTR _yx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xy$[ebp]
	push	edx
	mov	eax, DWORD PTR _xx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btMatrix3x3@@QAEXABM00000000@Z ; btMatrix3x3::setValue
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0btMatrix3x3@@QAE@ABM00000000@Z ENDP			; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z
_TEXT	SEGMENT
$T66100 = -12						; size = 4
$T66099 = -8						; size = 4
$T66098 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z PROC	; operator*, COMDAT
; Line 1147
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1151
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T66098[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T66099[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T66100[ebp]
	lea	eax, DWORD PTR $T66098[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66099[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66100[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1153
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ENDP	; operator*
_TEXT	ENDS
PUBLIC	??0btMatrix3x3@@QAE@ABV0@@Z			; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 4
_c$ = 12						; size = 4
??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z PROC ; btTransform::btTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 61
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ENDP ; btTransform::btTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btMatrix3x3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??0btMatrix3x3@@QAE@ABV0@@Z PROC			; btMatrix3x3::btMatrix3x3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
; Line 116
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 117
	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 118
	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 119
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btMatrix3x3@@QAE@ABV0@@Z ENDP			; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ PROC ; btCollisionObject::getWorldTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 304
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 305
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 306
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ENDP ; btCollisionObject::getWorldTransform
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXABUAnchor@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Anchor>::push_back
PUBLIC	??0Anchor@btSoftBody@@QAE@XZ			; btSoftBody::Anchor::Anchor
PUBLIC	?push_back@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXABQBVbtCollisionObject@@@Z ; btAlignedObjectArray<btCollisionObject const *>::push_back
PUBLIC	?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::size
PUBLIC	?findLinearSearch@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHABQBVbtCollisionObject@@@Z ; btAlignedObjectArray<btCollisionObject const *>::findLinearSearch
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendAnchor@btSoftBody@@QAEXHPAVbtRigidBody@@ABVbtVector3@@_NM@Z
_TEXT	SEGMENT
$T66111 = -156						; size = 4
$T66110 = -152						; size = 4
_a$ = -144						; size = 128
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_node$ = 8						; size = 4
_body$ = 12						; size = 4
_localPivot$ = 16					; size = 4
_disableCollisionBetweenLinkedBodies$ = 20		; size = 1
_influence$ = 24					; size = 4
?appendAnchor@btSoftBody@@QAEXHPAVbtRigidBody@@ABVbtVector3@@_NM@Z PROC ; btSoftBody::appendAnchor, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 536
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 537
	movzx	eax, BYTE PTR _disableCollisionBetweenLinkedBodies$[ebx]
	test	eax, eax
	je	SHORT $LN1@appendAnch@2
; Line 539
	mov	ecx, DWORD PTR _body$[ebx]
	mov	DWORD PTR $T66110[ebp], ecx
	lea	edx, DWORD PTR $T66110[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	?findLinearSearch@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHABQBVbtCollisionObject@@@Z ; btAlignedObjectArray<btCollisionObject const *>::findLinearSearch
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::size
	cmp	esi, eax
	jne	SHORT $LN1@appendAnch@2
; Line 541
	mov	eax, DWORD PTR _body$[ebx]
	mov	DWORD PTR $T66111[ebp], eax
	lea	ecx, DWORD PTR $T66111[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	?push_back@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXABQBVbtCollisionObject@@@Z ; btAlignedObjectArray<btCollisionObject const *>::push_back
$LN1@appendAnch@2:
; Line 545
	lea	ecx, DWORD PTR _a$[ebp]
	call	??0Anchor@btSoftBody@@QAE@XZ
; Line 546
	mov	edx, DWORD PTR _node$[ebx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _a$[ebp], eax
; Line 547
	mov	eax, DWORD PTR _body$[ebx]
	mov	DWORD PTR _a$[ebp+32], eax
; Line 548
	mov	ecx, DWORD PTR _localPivot$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _a$[ebp+16], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _a$[ebp+20], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _a$[ebp+24], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _a$[ebp+28], eax
; Line 549
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	or	edx, 1
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax+108], edx
; Line 550
	fld	DWORD PTR _influence$[ebx]
	fstp	DWORD PTR _a$[ebp+36]
; Line 551
	lea	ecx, DWORD PTR _a$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	?push_back@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXABUAnchor@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Anchor>::push_back
; Line 552
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@appendAnch@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	20					; 00000014H
$LN7@appendAnch@2:
	DD	1
	DD	$LN6@appendAnch@2
$LN6@appendAnch@2:
	DD	-144					; ffffff70H
	DD	128					; 00000080H
	DD	$LN5@appendAnch@2
$LN5@appendAnch@2:
	DB	97					; 00000061H
	DB	0
?appendAnchor@btSoftBody@@QAEXHPAVbtRigidBody@@ABVbtVector3@@_NM@Z ENDP ; btSoftBody::appendAnchor
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Anchor@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Anchor@btSoftBody@@QAE@XZ PROC			; btSoftBody::Anchor::Anchor, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Anchor@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Anchor::Anchor
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::push_back
PUBLIC	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ	; btSoftBody::Body::xform
PUBLIC	??0Body@btSoftBody@@QAE@PAUCluster@1@@Z		; btSoftBody::Body::Body
PUBLIC	??0LJoint@btSoftBody@@QAE@XZ			; btSoftBody::LJoint::LJoint
PUBLIC	__$ArrayPad$
PUBLIC	?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAUCluster@1@UBody@1@@Z ; btSoftBody::appendLinearJoint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAUCluster@1@UBody@1@@Z
_TEXT	SEGMENT
tv73 = -200						; size = 4
$T66124 = -196						; size = 4
$T66123 = -192						; size = 12
$T66120 = -180						; size = 4
$T52831 = -176						; size = 16
$T52830 = -160						; size = 64
$T52829 = -96						; size = 16
$T52828 = -80						; size = 64
_pj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_specs$ = 8						; size = 4
_body0$ = 12						; size = 4
_body1$ = 16						; size = 12
?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAUCluster@1@UBody@1@@Z PROC ; btSoftBody::appendLinearJoint, COMDAT
; _this$ = ecx
; Line 556
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 557
	push	16					; 00000010H
	push	224					; 000000e0H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	push	eax
	push	224					; 000000e0H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66120[ebp], eax
	cmp	DWORD PTR $T66120[ebp], 0
	je	SHORT $LN3@appendLine
	mov	ecx, DWORD PTR $T66120[ebp]
	call	??0LJoint@btSoftBody@@QAE@XZ
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@appendLine
$LN3@appendLine:
	mov	DWORD PTR tv73[ebp], 0
$LN4@appendLine:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _pj$[ebp], eax
; Line 558
	mov	ecx, DWORD PTR _body0$[ebx]
	push	ecx
	lea	ecx, DWORD PTR $T66123[ebp]
	call	??0Body@btSoftBody@@QAE@PAUCluster@1@@Z	; btSoftBody::Body::Body
	mov	edx, DWORD PTR _pj$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR $T66123[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T66123[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T66123[ebp+8]
	mov	DWORD PTR [edx+8], eax
; Line 559
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _body1$[ebx]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _body1$[ebx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _body1$[ebx+8]
	mov	DWORD PTR [ecx+8], edx
; Line 560
	mov	eax, DWORD PTR _specs$[ebx]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T52829[ebp]
	push	ecx
	lea	edx, DWORD PTR $T52828[ebp]
	push	edx
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 16					; 00000010H
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?inverse@btTransform@@QBE?AV1@XZ	; btTransform::inverse
	mov	ecx, eax
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 561
	mov	ecx, DWORD PTR _specs$[ebx]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T52831[ebp]
	push	edx
	lea	eax, DWORD PTR $T52830[ebp]
	push	eax
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 28					; 0000001cH
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?inverse@btTransform@@QBE?AV1@XZ	; btTransform::inverse
	mov	ecx, eax
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 562
	mov	ecx, DWORD PTR _pj$[ebp]
	mov	edx, DWORD PTR _specs$[ebx]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR [ecx+80]
; Line 563
	mov	eax, DWORD PTR _pj$[ebp]
	mov	ecx, DWORD PTR _specs$[ebx]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+84]
; Line 564
	mov	edx, DWORD PTR _pj$[ebp]
	mov	eax, DWORD PTR _specs$[ebx]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [edx+88]
; Line 565
	mov	ecx, DWORD PTR _pj$[ebp]
	mov	DWORD PTR $T66124[ebp], ecx
	lea	edx, DWORD PTR $T66124[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?push_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::push_back
; Line 566
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	20					; 00000014H
?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAUCluster@1@UBody@1@@Z ENDP ; btSoftBody::appendLinearJoint
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Body@btSoftBody@@QAE@PAUCluster@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0Body@btSoftBody@@QAE@PAUCluster@1@@Z PROC		; btSoftBody::Body::Body, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 385
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Body@btSoftBody@@QAE@PAUCluster@1@@Z ENDP		; btSoftBody::Body::Body
_TEXT	ENDS
PUBLIC	?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ; btCollisionObject::getWorldTransform
PUBLIC	??0btTransform@@QAE@ABV0@@Z			; btTransform::btTransform
PUBLIC	?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B ; `btSoftBody::Body::xform'::`2'::identity
PUBLIC	?getIdentity@btTransform@@SAABV1@XZ		; btTransform::getIdentity
PUBLIC	??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51 ; `btSoftBody::Body::xform'::`2'::`local static guard'
;	COMDAT ?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B
_BSS	SEGMENT
?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B DB 040H DUP (?) ; `btSoftBody::Body::xform'::`2'::identity
_BSS	ENDS
;	COMDAT ??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51
_BSS	SEGMENT
??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51 DD 01H DUP (?) ; `btSoftBody::Body::xform'::`2'::`local static guard'
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ PROC	; btSoftBody::Body::xform, COMDAT
; _this$ = ecx
; Line 413
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 414
	mov	eax, DWORD PTR ??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51
	and	eax, 1
	jne	SHORT $LN3@xform
	mov	ecx, DWORD PTR ??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51
	or	ecx, 1
	mov	DWORD PTR ??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51, ecx
	call	?getIdentity@btTransform@@SAABV1@XZ	; btTransform::getIdentity
	push	eax
	mov	ecx, OFFSET ?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B ; `btSoftBody::Body::xform'::`2'::identity
	call	??0btTransform@@QAE@ABV0@@Z		; btTransform::btTransform
$LN3@xform:
; Line 415
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@xform
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	jmp	SHORT $LN4@xform
$LN2@xform:
; Line 416
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@xform
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 64					; 00000040H
	jmp	SHORT $LN4@xform
$LN1@xform:
; Line 417
	mov	eax, OFFSET ?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B ; `btSoftBody::Body::xform'::`2'::identity
$LN4@xform:
; Line 418
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ENDP	; btSoftBody::Body::xform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btTransform@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??0btTransform@@QAE@ABV0@@Z PROC			; btTransform::btTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btTransform@@QAE@ABV0@@Z ENDP			; btTransform::btTransform
_TEXT	ENDS
PUBLIC	?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B ; `btTransform::getIdentity'::`2'::identityTransform
PUBLIC	?getIdentity@btMatrix3x3@@SAABV1@XZ		; btMatrix3x3::getIdentity
PUBLIC	??_B?1??getIdentity@btTransform@@SAABV1@XZ@51	; `btTransform::getIdentity'::`2'::`local static guard'
;	COMDAT ?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B
_BSS	SEGMENT
?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B DB 040H DUP (?) ; `btTransform::getIdentity'::`2'::identityTransform
_BSS	ENDS
;	COMDAT ??_B?1??getIdentity@btTransform@@SAABV1@XZ@51
_BSS	SEGMENT
??_B?1??getIdentity@btTransform@@SAABV1@XZ@51 DD 01H DUP (?) ; `btTransform::getIdentity'::`2'::`local static guard'
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?getIdentity@btTransform@@SAABV1@XZ
_TEXT	SEGMENT
$T66136 = -44						; size = 4
$T66135 = -40						; size = 4
$T66134 = -36						; size = 4
$T66133 = -32						; size = 16
?getIdentity@btTransform@@SAABV1@XZ PROC		; btTransform::getIdentity, COMDAT
; Line 204
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 205
	mov	eax, DWORD PTR ??_B?1??getIdentity@btTransform@@SAABV1@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getIdentit
	mov	ecx, DWORD PTR ??_B?1??getIdentity@btTransform@@SAABV1@XZ@51
	or	ecx, 1
	mov	DWORD PTR ??_B?1??getIdentity@btTransform@@SAABV1@XZ@51, ecx
	fldz
	fstp	DWORD PTR $T66134[ebp]
	fldz
	fstp	DWORD PTR $T66135[ebp]
	fldz
	fstp	DWORD PTR $T66136[ebp]
	lea	edx, DWORD PTR $T66134[ebp]
	push	edx
	lea	eax, DWORD PTR $T66135[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66136[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T66133[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	call	?getIdentity@btMatrix3x3@@SAABV1@XZ	; btMatrix3x3::getIdentity
	push	eax
	mov	ecx, OFFSET ?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B ; `btTransform::getIdentity'::`2'::identityTransform
	call	??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ; btTransform::btTransform
$LN1@getIdentit:
; Line 206
	mov	eax, OFFSET ?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B ; `btTransform::getIdentity'::`2'::identityTransform
; Line 207
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?getIdentity@btTransform@@SAABV1@XZ ENDP		; btTransform::getIdentity
_TEXT	ENDS
PUBLIC	?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B ; `btMatrix3x3::getIdentity'::`2'::identityMatrix
PUBLIC	??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51	; `btMatrix3x3::getIdentity'::`2'::`local static guard'
;	COMDAT ?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
_BSS	SEGMENT
?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B DB 030H DUP (?) ; `btMatrix3x3::getIdentity'::`2'::identityMatrix
_BSS	ENDS
;	COMDAT ??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51
_BSS	SEGMENT
??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51 DD 01H DUP (?) ; `btMatrix3x3::getIdentity'::`2'::`local static guard'
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?getIdentity@btMatrix3x3@@SAABV1@XZ
_TEXT	SEGMENT
$T66147 = -36						; size = 4
$T66146 = -32						; size = 4
$T66145 = -28						; size = 4
$T66144 = -24						; size = 4
$T66143 = -20						; size = 4
$T66142 = -16						; size = 4
$T66141 = -12						; size = 4
$T66140 = -8						; size = 4
$T66139 = -4						; size = 4
?getIdentity@btMatrix3x3@@SAABV1@XZ PROC		; btMatrix3x3::getIdentity, COMDAT
; Line 331
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 340
	mov	eax, DWORD PTR ??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getIdentit@2
	mov	ecx, DWORD PTR ??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51
	or	ecx, 1
	mov	DWORD PTR ??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51, ecx
	fld1
	fstp	DWORD PTR $T66139[ebp]
	fldz
	fstp	DWORD PTR $T66140[ebp]
	fldz
	fstp	DWORD PTR $T66141[ebp]
	fldz
	fstp	DWORD PTR $T66142[ebp]
	fld1
	fstp	DWORD PTR $T66143[ebp]
	fldz
	fstp	DWORD PTR $T66144[ebp]
	fldz
	fstp	DWORD PTR $T66145[ebp]
	fldz
	fstp	DWORD PTR $T66146[ebp]
	fld1
	fstp	DWORD PTR $T66147[ebp]
	lea	edx, DWORD PTR $T66139[ebp]
	push	edx
	lea	eax, DWORD PTR $T66140[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66141[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66142[ebp]
	push	edx
	lea	eax, DWORD PTR $T66143[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66144[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66145[ebp]
	push	edx
	lea	eax, DWORD PTR $T66146[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66147[ebp]
	push	ecx
	mov	ecx, OFFSET ?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B ; `btMatrix3x3::getIdentity'::`2'::identityMatrix
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
$LN1@getIdentit@2:
; Line 342
	mov	eax, OFFSET ?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B ; `btMatrix3x3::getIdentity'::`2'::identityMatrix
; Line 343
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getIdentity@btMatrix3x3@@SAABV1@XZ ENDP		; btMatrix3x3::getIdentity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ PROC ; btCollisionObject::getWorldTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 309
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 310
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 311
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ENDP ; btCollisionObject::getWorldTransform
_TEXT	ENDS
PUBLIC	??_7LJoint@btSoftBody@@6B@			; btSoftBody::LJoint::`vftable'
PUBLIC	??0Joint@btSoftBody@@QAE@XZ			; btSoftBody::Joint::Joint
PUBLIC	?Prepare@LJoint@btSoftBody@@UAEXMH@Z		; btSoftBody::LJoint::Prepare
PUBLIC	?Solve@LJoint@btSoftBody@@UAEXMM@Z		; btSoftBody::LJoint::Solve
PUBLIC	?Terminate@LJoint@btSoftBody@@UAEXM@Z		; btSoftBody::LJoint::Terminate
PUBLIC	?Type@LJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ ; btSoftBody::LJoint::Type
EXTRN	??_ELJoint@btSoftBody@@UAEPAXI@Z:PROC		; btSoftBody::LJoint::`vector deleting destructor'
;	COMDAT ??_7LJoint@btSoftBody@@6B@
CONST	SEGMENT
??_7LJoint@btSoftBody@@6B@ DD FLAT:??_ELJoint@btSoftBody@@UAEPAXI@Z ; btSoftBody::LJoint::`vftable'
	DD	FLAT:?Prepare@LJoint@btSoftBody@@UAEXMH@Z
	DD	FLAT:?Solve@LJoint@btSoftBody@@UAEXMM@Z
	DD	FLAT:?Terminate@LJoint@btSoftBody@@UAEXM@Z
	DD	FLAT:?Type@LJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0LJoint@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0LJoint@btSoftBody@@QAE@XZ PROC			; btSoftBody::LJoint::LJoint, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Joint@btSoftBody@@QAE@XZ		; btSoftBody::Joint::Joint
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LJoint@btSoftBody@@6B@
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0LJoint@btSoftBody@@QAE@XZ ENDP			; btSoftBody::LJoint::LJoint
_TEXT	ENDS
PUBLIC	??0Body@btSoftBody@@QAE@XZ			; btSoftBody::Body::Body
PUBLIC	??_7Joint@btSoftBody@@6B@			; btSoftBody::Joint::`vftable'
PUBLIC	?Prepare@Joint@btSoftBody@@UAEXMH@Z		; btSoftBody::Joint::Prepare
EXTRN	??_EJoint@btSoftBody@@UAEPAXI@Z:PROC		; btSoftBody::Joint::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_7Joint@btSoftBody@@6B@
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
CONST	SEGMENT
??_7Joint@btSoftBody@@6B@ DD FLAT:??_EJoint@btSoftBody@@UAEPAXI@Z ; btSoftBody::Joint::`vftable'
	DD	FLAT:?Prepare@Joint@btSoftBody@@UAEXMH@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0Joint@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Joint@btSoftBody@@QAE@XZ PROC			; btSoftBody::Joint::Joint, COMDAT
; _this$ = ecx
; Line 510
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Joint@btSoftBody@@6B@
	push	OFFSET ??0Body@btSoftBody@@QAE@XZ	; btSoftBody::Body::Body
	push	2
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+176], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Joint@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Joint::Joint
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Body@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Body@btSoftBody@@QAE@XZ PROC				; btSoftBody::Body::Body, COMDAT
; _this$ = ecx
; Line 384
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Body@btSoftBody@@QAE@XZ ENDP				; btSoftBody::Body::Body
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Type@LJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@LJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ PROC	; btSoftBody::LJoint::Type, COMDAT
; _this$ = ecx
; Line 527
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@LJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ ENDP	; btSoftBody::LJoint::Type
_TEXT	ENDS
PUBLIC	??1Joint@btSoftBody@@UAE@XZ			; btSoftBody::Joint::~Joint
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GJoint@btSoftBody@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GJoint@btSoftBody@@UAEPAXI@Z PROC			; btSoftBody::Joint::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Joint@btSoftBody@@UAE@XZ		; btSoftBody::Joint::~Joint
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GJoint@btSoftBody@@UAEPAXI@Z ENDP			; btSoftBody::Joint::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1Joint@btSoftBody@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Joint@btSoftBody@@UAE@XZ PROC			; btSoftBody::Joint::~Joint, COMDAT
; _this$ = ecx
; Line 509
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Joint@btSoftBody@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1Joint@btSoftBody@@UAE@XZ ENDP			; btSoftBody::Joint::~Joint
_TEXT	ENDS
PUBLIC	??1LJoint@btSoftBody@@UAE@XZ			; btSoftBody::LJoint::~LJoint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GLJoint@btSoftBody@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GLJoint@btSoftBody@@UAEPAXI@Z PROC			; btSoftBody::LJoint::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1LJoint@btSoftBody@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GLJoint@btSoftBody@@UAEPAXI@Z ENDP			; btSoftBody::LJoint::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1LJoint@btSoftBody@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1LJoint@btSoftBody@@UAE@XZ PROC			; btSoftBody::LJoint::~LJoint, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Joint@btSoftBody@@UAE@XZ		; btSoftBody::Joint::~Joint
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1LJoint@btSoftBody@@UAE@XZ ENDP			; btSoftBody::LJoint::~LJoint
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
PUBLIC	?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@UBody@1@@Z ; btSoftBody::appendLinearJoint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@UBody@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_specs$ = 8						; size = 4
_body$ = 12						; size = 12
?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@UBody@1@@Z PROC ; btSoftBody::appendLinearJoint, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 570
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 571
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _body$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _body$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _body$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _specs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAUCluster@1@UBody@1@@Z ; btSoftBody::appendLinearJoint
; Line 572
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@UBody@1@@Z ENDP ; btSoftBody::appendLinearJoint
_TEXT	ENDS
PUBLIC	?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAV1@@Z ; btSoftBody::appendLinearJoint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_specs$ = 8						; size = 4
_body$ = 12						; size = 4
?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAV1@@Z PROC ; btSoftBody::appendLinearJoint, COMDAT
; _this$ = ecx
; Line 576
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 577
	push	0
	mov	ecx, DWORD PTR _body$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	eax, DWORD PTR [eax]
	push	eax
	call	??0Body@btSoftBody@@QAE@PAUCluster@1@@Z	; btSoftBody::Body::Body
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _specs$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAUCluster@1@UBody@1@@Z ; btSoftBody::appendLinearJoint
; Line 578
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?appendLinearJoint@btSoftBody@@QAEXABUSpecs@LJoint@1@PAV1@@Z ENDP ; btSoftBody::appendLinearJoint
_TEXT	ENDS
PUBLIC	?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ	; btTransform::getBasis
PUBLIC	??0AJoint@btSoftBody@@QAE@XZ			; btSoftBody::AJoint::AJoint
PUBLIC	__$ArrayPad$
PUBLIC	?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAUCluster@1@UBody@1@@Z ; btSoftBody::appendAngularJoint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAUCluster@1@UBody@1@@Z
_TEXT	SEGMENT
tv73 = -200						; size = 4
$T66178 = -196						; size = 4
$T66177 = -192						; size = 12
$T66174 = -180						; size = 4
$T52869 = -176						; size = 16
$T52868 = -160						; size = 64
$T52867 = -96						; size = 16
$T52866 = -80						; size = 64
_pj$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_specs$ = 8						; size = 4
_body0$ = 12						; size = 4
_body1$ = 16						; size = 12
?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAUCluster@1@UBody@1@@Z PROC ; btSoftBody::appendAngularJoint, COMDAT
; _this$ = ecx
; Line 582
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 583
	push	16					; 00000010H
	push	240					; 000000f0H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	push	eax
	push	240					; 000000f0H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66174[ebp], eax
	cmp	DWORD PTR $T66174[ebp], 0
	je	SHORT $LN3@appendAngu
	mov	ecx, DWORD PTR $T66174[ebp]
	call	??0AJoint@btSoftBody@@QAE@XZ
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@appendAngu
$LN3@appendAngu:
	mov	DWORD PTR tv73[ebp], 0
$LN4@appendAngu:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR _pj$[ebp], eax
; Line 584
	mov	ecx, DWORD PTR _body0$[ebx]
	push	ecx
	lea	ecx, DWORD PTR $T66177[ebp]
	call	??0Body@btSoftBody@@QAE@PAUCluster@1@@Z	; btSoftBody::Body::Body
	mov	edx, DWORD PTR _pj$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR $T66177[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR $T66177[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T66177[ebp+8]
	mov	DWORD PTR [edx+8], eax
; Line 585
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _body1$[ebx]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _body1$[ebx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _body1$[ebx+8]
	mov	DWORD PTR [ecx+8], edx
; Line 586
	mov	eax, DWORD PTR _specs$[ebx]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T52866[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 16					; 00000010H
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?inverse@btTransform@@QBE?AV1@XZ	; btTransform::inverse
	mov	ecx, eax
	call	?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	edx, DWORD PTR $T52867[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 587
	mov	ecx, DWORD PTR _specs$[ebx]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T52868[ebp]
	push	edx
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 28					; 0000001cH
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?inverse@btTransform@@QBE?AV1@XZ	; btTransform::inverse
	mov	ecx, eax
	call	?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	eax, DWORD PTR $T52869[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _pj$[ebp]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 588
	mov	ecx, DWORD PTR _pj$[ebp]
	mov	edx, DWORD PTR _specs$[ebx]
	fld	DWORD PTR [edx+4]
	fstp	DWORD PTR [ecx+80]
; Line 589
	mov	eax, DWORD PTR _pj$[ebp]
	mov	ecx, DWORD PTR _specs$[ebx]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax+84]
; Line 590
	mov	edx, DWORD PTR _pj$[ebp]
	mov	eax, DWORD PTR _specs$[ebx]
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [edx+88]
; Line 591
	mov	ecx, DWORD PTR _pj$[ebp]
	mov	edx, DWORD PTR _specs$[ebx]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+224], eax
; Line 592
	mov	ecx, DWORD PTR _pj$[ebp]
	mov	DWORD PTR $T66178[ebp], ecx
	lea	edx, DWORD PTR $T66178[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?push_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::push_back
; Line 593
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	20					; 00000014H
?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAUCluster@1@UBody@1@@Z ENDP ; btSoftBody::appendAngularJoint
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ PROC	; btTransform::getBasis, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 112
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ENDP	; btTransform::getBasis
_TEXT	ENDS
PUBLIC	??_7AJoint@btSoftBody@@6B@			; btSoftBody::AJoint::`vftable'
PUBLIC	?Prepare@AJoint@btSoftBody@@UAEXMH@Z		; btSoftBody::AJoint::Prepare
PUBLIC	?Solve@AJoint@btSoftBody@@UAEXMM@Z		; btSoftBody::AJoint::Solve
PUBLIC	?Terminate@AJoint@btSoftBody@@UAEXM@Z		; btSoftBody::AJoint::Terminate
PUBLIC	?Type@AJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ ; btSoftBody::AJoint::Type
EXTRN	??_EAJoint@btSoftBody@@UAEPAXI@Z:PROC		; btSoftBody::AJoint::`vector deleting destructor'
;	COMDAT ??_7AJoint@btSoftBody@@6B@
CONST	SEGMENT
??_7AJoint@btSoftBody@@6B@ DD FLAT:??_EAJoint@btSoftBody@@UAEPAXI@Z ; btSoftBody::AJoint::`vftable'
	DD	FLAT:?Prepare@AJoint@btSoftBody@@UAEXMH@Z
	DD	FLAT:?Solve@AJoint@btSoftBody@@UAEXMM@Z
	DD	FLAT:?Terminate@AJoint@btSoftBody@@UAEXM@Z
	DD	FLAT:?Type@AJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0AJoint@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0AJoint@btSoftBody@@QAE@XZ PROC			; btSoftBody::AJoint::AJoint, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Joint@btSoftBody@@QAE@XZ		; btSoftBody::Joint::Joint
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7AJoint@btSoftBody@@6B@
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0AJoint@btSoftBody@@QAE@XZ ENDP			; btSoftBody::AJoint::AJoint
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Type@AJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@AJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ PROC	; btSoftBody::AJoint::Type, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 549
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@AJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ ENDP	; btSoftBody::AJoint::Type
_TEXT	ENDS
PUBLIC	??1AJoint@btSoftBody@@UAE@XZ			; btSoftBody::AJoint::~AJoint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GAJoint@btSoftBody@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GAJoint@btSoftBody@@UAEPAXI@Z PROC			; btSoftBody::AJoint::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AJoint@btSoftBody@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GAJoint@btSoftBody@@UAEPAXI@Z ENDP			; btSoftBody::AJoint::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1AJoint@btSoftBody@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1AJoint@btSoftBody@@UAE@XZ PROC			; btSoftBody::AJoint::~AJoint, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Joint@btSoftBody@@UAE@XZ		; btSoftBody::Joint::~Joint
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AJoint@btSoftBody@@UAE@XZ ENDP			; btSoftBody::AJoint::~AJoint
_TEXT	ENDS
PUBLIC	?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@UBody@1@@Z ; btSoftBody::appendAngularJoint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@UBody@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_specs$ = 8						; size = 4
_body$ = 12						; size = 12
?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@UBody@1@@Z PROC ; btSoftBody::appendAngularJoint, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 597
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 598
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _body$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _body$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _body$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _specs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAUCluster@1@UBody@1@@Z ; btSoftBody::appendAngularJoint
; Line 599
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@UBody@1@@Z ENDP ; btSoftBody::appendAngularJoint
_TEXT	ENDS
PUBLIC	?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAV1@@Z ; btSoftBody::appendAngularJoint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_specs$ = 8						; size = 4
_body$ = 12						; size = 4
?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAV1@@Z PROC ; btSoftBody::appendAngularJoint, COMDAT
; _this$ = ecx
; Line 603
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 604
	push	0
	mov	ecx, DWORD PTR _body$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	eax, DWORD PTR [eax]
	push	eax
	call	??0Body@btSoftBody@@QAE@PAUCluster@1@@Z	; btSoftBody::Body::Body
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _specs$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAUCluster@1@UBody@1@@Z ; btSoftBody::appendAngularJoint
; Line 605
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?appendAngularJoint@btSoftBody@@QAEXABUSpecs@AJoint@1@PAV1@@Z ENDP ; btSoftBody::appendAngularJoint
_TEXT	ENDS
PUBLIC	?addForce@btSoftBody@@QAEXABVbtVector3@@H@Z	; btSoftBody::addForce
PUBLIC	?addForce@btSoftBody@@QAEXABVbtVector3@@@Z	; btSoftBody::addForce
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?addForce@btSoftBody@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_ni$52896 = -12						; size = 4
_i$52895 = -8						; size = 4
_this$ = -4						; size = 4
_force$ = 8						; size = 4
?addForce@btSoftBody@@QAEXABVbtVector3@@@Z PROC		; btSoftBody::addForce, COMDAT
; _this$ = ecx
; Line 609
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 610
	mov	DWORD PTR _i$52895[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$52896[ebp], eax
	jmp	SHORT $LN3@addForce
$LN2@addForce:
	mov	eax, DWORD PTR _i$52895[ebp]
	add	eax, 1
	mov	DWORD PTR _i$52895[ebp], eax
$LN3@addForce:
	mov	ecx, DWORD PTR _i$52895[ebp]
	cmp	ecx, DWORD PTR _ni$52896[ebp]
	jge	SHORT $LN4@addForce
	mov	edx, DWORD PTR _i$52895[ebp]
	push	edx
	mov	eax, DWORD PTR _force$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addForce@btSoftBody@@QAEXABVbtVector3@@H@Z ; btSoftBody::addForce
	jmp	SHORT $LN2@addForce
$LN4@addForce:
; Line 611
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?addForce@btSoftBody@@QAEXABVbtVector3@@@Z ENDP		; btSoftBody::addForce
_TEXT	ENDS
PUBLIC	??YbtVector3@@QAEAAV0@ABV0@@Z			; btVector3::operator+=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?addForce@btSoftBody@@QAEXABVbtVector3@@H@Z
_TEXT	SEGMENT
_n$ = -8						; size = 4
_this$ = -4						; size = 4
_force$ = 8						; size = 4
_node$ = 12						; size = 4
?addForce@btSoftBody@@QAEXABVbtVector3@@H@Z PROC	; btSoftBody::addForce, COMDAT
; _this$ = ecx
; Line 615
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 616
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$[ebp], eax
; Line 617
	mov	ecx, DWORD PTR _n$[ebp]
	fldz
	fcomp	DWORD PTR [ecx+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@addForce@2
; Line 619
	mov	edx, DWORD PTR _force$[ebp]
	push	edx
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 64					; 00000040H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN1@addForce@2:
; Line 621
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?addForce@btSoftBody@@QAEXABVbtVector3@@H@Z ENDP	; btSoftBody::addForce
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??YbtVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YbtVector3@@QAEAAV0@ABV0@@Z PROC			; btVector3::operator+=, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 165
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 171
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 173
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
; Line 176
	mov	esp, ebp
	pop	ebp
	ret	4
??YbtVector3@@QAEAAV0@ABV0@@Z ENDP			; btVector3::operator+=
_TEXT	ENDS
PUBLIC	__real@40000000
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f7c1bda
PUBLIC	??D@YA?AVbtVector3@@ABMABV0@@Z			; operator*
PUBLIC	??XbtVector3@@QAEAAV0@ABM@Z			; btVector3::operator*=
PUBLIC	?normalized@btVector3@@QBE?AV1@XZ		; btVector3::normalized
PUBLIC	__real@34000000
PUBLIC	??0sMedium@btSoftBody@@QAE@XZ			; btSoftBody::sMedium::sMedium
PUBLIC	?addAeroForceToNode@btSoftBody@@QAEXABVbtVector3@@H@Z ; btSoftBody::addAeroForceToNode
;	COMDAT __real@40000000
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f7c1bda
CONST	SEGMENT
__real@3f7c1bda DD 03f7c1bdar			; 0.9848
CONST	ENDS
;	COMDAT __real@34000000
CONST	SEGMENT
__real@34000000 DD 034000000r			; 1.19209e-007
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?addAeroForceToNode@btSoftBody@@QAEXABVbtVector3@@H@Z
_TEXT	SEGMENT
tv296 = -576						; size = 4
tv592 = -572						; size = 4
tv163 = -568						; size = 4
tv91 = -564						; size = 1
tv85 = -563						; size = 1
tv80 = -562						; size = 1
tv78 = -561						; size = 1
$T66229 = -560						; size = 4
$T66228 = -556						; size = 4
$T66227 = -552						; size = 4
$T66226 = -548						; size = 4
$T66225 = -544						; size = 4
$T66222 = -540						; size = 4
$T66221 = -536						; size = 4
$T66220 = -532						; size = 4
$T66219 = -528						; size = 4
$T66218 = -524						; size = 4
$T66217 = -520						; size = 4
$T66216 = -516						; size = 4
$T66215 = -512						; size = 4
$T66214 = -508						; size = 4
$T66213 = -504						; size = 4
$T66210 = -500						; size = 4
$T52982 = -496						; size = 16
$T52980 = -480						; size = 16
$T52979 = -464						; size = 16
_c1$52977 = -444					; size = 4
_c0$52976 = -440					; size = 4
_force$52972 = -432					; size = 16
_dvn$52970 = -404					; size = 4
_v_len$52962 = -400					; size = 4
_del_v_by_fDrag_len$52961 = -396			; size = 4
_v_len2$52959 = -392					; size = 4
_del_v_by_fDrag_len2$52958 = -388			; size = 4
$T52956 = -384						; size = 16
_del_v_by_fDrag$52955 = -352				; size = 16
$T52954 = -320						; size = 16
$T52952 = -304						; size = 16
$T52951 = -288						; size = 16
$T52949 = -272						; size = 16
$T52947 = -256						; size = 16
_tri_area$52946 = -236					; size = 4
_n_dot_v$52945 = -232					; size = 4
_fLift$52941 = -224					; size = 16
_fDrag$52937 = -192					; size = 16
_nrm$52933 = -160					; size = 16
_rel_v_nrm$52931 = -128					; size = 16
_rel_v2$52929 = -108					; size = 4
_rel_v_len$52928 = -104					; size = 4
_rel_v$52926 = -96					; size = 16
_medium$52924 = -64					; size = 32
_n$ = -24						; size = 4
_as_vaero$ = -20					; size = 1
_as_aero$ = -19						; size = 1
_as_drag$ = -18						; size = 1
_as_lift$ = -17						; size = 1
_kDG$ = -16						; size = 4
_kLF$ = -12						; size = 4
_dt$ = -8						; size = 4
_this$ = -4						; size = 4
_windVelocity$ = 8					; size = 4
_nodeIndex$ = 12					; size = 4
?addAeroForceToNode@btSoftBody@@QAEXABVbtVector3@@H@Z PROC ; btSoftBody::addAeroForceToNode, COMDAT
; _this$ = ecx
; Line 624
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 576				; 00000240H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-576]
	mov	ecx, 144				; 00000090H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 625
	cmp	DWORD PTR _nodeIndex$[ebx], 0
	jl	SHORT $LN12@addAeroFor
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _nodeIndex$[ebx], eax
	jl	SHORT $LN13@addAeroFor
$LN12@addAeroFor:
	push	625					; 00000271H
	push	OFFSET $SG52914
	call	_printf
	add	esp, 8
	int	3
$LN13@addAeroFor:
; Line 627
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+476]
	fstp	DWORD PTR _dt$[ebp]
; Line 628
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+328]
	fstp	DWORD PTR _kLF$[ebp]
; Line 629
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+324]
	fstp	DWORD PTR _kDG$[ebp]
; Line 632
	fldz
	fcomp	DWORD PTR _kLF$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN16@addAeroFor
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $LN17@addAeroFor
$LN16@addAeroFor:
	mov	BYTE PTR tv78[ebp], 0
$LN17@addAeroFor:
	mov	al, BYTE PTR tv78[ebp]
	mov	BYTE PTR _as_lift$[ebp], al
; Line 633
	fldz
	fcomp	DWORD PTR _kDG$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN18@addAeroFor
	mov	BYTE PTR tv80[ebp], 1
	jmp	SHORT $LN19@addAeroFor
$LN18@addAeroFor:
	mov	BYTE PTR tv80[ebp], 0
$LN19@addAeroFor:
	mov	cl, BYTE PTR tv80[ebp]
	mov	BYTE PTR _as_drag$[ebp], cl
; Line 634
	movzx	edx, BYTE PTR _as_lift$[ebp]
	test	edx, edx
	jne	SHORT $LN20@addAeroFor
	movzx	eax, BYTE PTR _as_drag$[ebp]
	test	eax, eax
	jne	SHORT $LN20@addAeroFor
	mov	BYTE PTR tv85[ebp], 0
	jmp	SHORT $LN21@addAeroFor
$LN20@addAeroFor:
	mov	BYTE PTR tv85[ebp], 1
$LN21@addAeroFor:
	mov	cl, BYTE PTR tv85[ebp]
	mov	BYTE PTR _as_aero$[ebp], cl
; Line 635
	movzx	edx, BYTE PTR _as_aero$[ebp]
	test	edx, edx
	je	SHORT $LN22@addAeroFor
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+312], 4
	jge	SHORT $LN22@addAeroFor
	mov	BYTE PTR tv91[ebp], 1
	jmp	SHORT $LN23@addAeroFor
$LN22@addAeroFor:
	mov	BYTE PTR tv91[ebp], 0
$LN23@addAeroFor:
	mov	cl, BYTE PTR tv91[ebp]
	mov	BYTE PTR _as_vaero$[ebp], cl
; Line 637
	mov	edx, DWORD PTR _nodeIndex$[ebx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$[ebp], eax
; Line 639
	mov	eax, DWORD PTR _n$[ebp]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@addAeroFor
; Line 641
	lea	ecx, DWORD PTR _medium$52924[ebp]
	call	??0sMedium@btSoftBody@@QAE@XZ
; Line 643
	lea	ecx, DWORD PTR _medium$52924[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	push	ecx
	call	?EvaluateMedium@@YAXPBUbtSoftBodyWorldInfo@@ABVbtVector3@@AAUsMedium@btSoftBody@@@Z ; EvaluateMedium
	add	esp, 12					; 0000000cH
; Line 644
	mov	edx, DWORD PTR _windVelocity$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _medium$52924[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _medium$52924[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _medium$52924[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _medium$52924[ebp+12], ecx
; Line 645
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+708]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _medium$52924[ebp+20]
; Line 648
	movzx	ecx, BYTE PTR _as_vaero$[ebp]
	test	ecx, ecx
	je	$LN1@addAeroFor
; Line 650
	lea	edx, DWORD PTR _medium$52924[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR _rel_v$52926[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 651
	lea	ecx, DWORD PTR _rel_v$52926[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _rel_v_len$52928[ebp]
; Line 652
	lea	ecx, DWORD PTR _rel_v$52926[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _rel_v2$52929[ebp]
; Line 654
	fld	DWORD PTR __real@34000000
	fcomp	DWORD PTR _rel_v2$52929[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@addAeroFor
; Line 656
	lea	edx, DWORD PTR _rel_v_nrm$52931[ebp]
	push	edx
	lea	ecx, DWORD PTR _rel_v$52926[ebp]
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
; Line 657
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 80					; 00000050H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nrm$52933[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _nrm$52933[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nrm$52933[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _nrm$52933[ebp+12], edx
; Line 659
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+312], 2
	jne	$LN8@addAeroFor
; Line 661
	lea	ecx, DWORD PTR _rel_v$52926[ebp]
	push	ecx
	lea	edx, DWORD PTR _nrm$52933[ebp]
	push	edx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN24@addAeroFor
	mov	DWORD PTR tv163[ebp], -1
	jmp	SHORT $LN25@addAeroFor
$LN24@addAeroFor:
	mov	DWORD PTR tv163[ebp], 1
$LN25@addAeroFor:
	fild	DWORD PTR tv163[ebp]
	fstp	DWORD PTR $T66210[ebp]
	lea	eax, DWORD PTR $T66210[ebp]
	push	eax
	lea	ecx, DWORD PTR _nrm$52933[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 662
	fldz
	fstp	DWORD PTR $T66213[ebp]
	fldz
	fstp	DWORD PTR $T66214[ebp]
	fldz
	fstp	DWORD PTR $T66215[ebp]
	lea	ecx, DWORD PTR $T66213[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66214[ebp]
	push	edx
	lea	eax, DWORD PTR $T66215[ebp]
	push	eax
	lea	ecx, DWORD PTR _fDrag$52937[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 663
	fldz
	fstp	DWORD PTR $T66216[ebp]
	fldz
	fstp	DWORD PTR $T66217[ebp]
	fldz
	fstp	DWORD PTR $T66218[ebp]
	lea	ecx, DWORD PTR $T66216[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66217[ebp]
	push	edx
	lea	eax, DWORD PTR $T66218[ebp]
	push	eax
	lea	ecx, DWORD PTR _fLift$52941[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 665
	lea	ecx, DWORD PTR _rel_v_nrm$52931[ebp]
	push	ecx
	lea	ecx, DWORD PTR _nrm$52933[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR _n_dot_v$52945[ebp]
; Line 666
	mov	edx, DWORD PTR _n$[ebp]
	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR [edx+100]
	fstp	DWORD PTR _tri_area$52946[ebp]
; Line 668
	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR _kDG$[ebp]
	fmul	DWORD PTR _medium$52924[ebp+20]
	fmul	DWORD PTR _rel_v2$52929[ebp]
	fmul	DWORD PTR _tri_area$52946[ebp]
	fmul	DWORD PTR _n_dot_v$52945[ebp]
	fstp	DWORD PTR $T66219[ebp]
	lea	eax, DWORD PTR _rel_v_nrm$52931[ebp]
	push	eax
	lea	ecx, DWORD PTR $T52947[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR $T66219[ebp]
	push	edx
	lea	eax, DWORD PTR $T52949[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fDrag$52937[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _fDrag$52937[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _fDrag$52937[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _fDrag$52937[ebp+12], edx
; Line 672
	fld	DWORD PTR _n_dot_v$52945[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN7@addAeroFor
	fld	DWORD PTR __real@3f7c1bda
	fcomp	DWORD PTR _n_dot_v$52945[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN7@addAeroFor
; Line 673
	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR _kLF$[ebp]
	fmul	DWORD PTR _medium$52924[ebp+20]
	fmul	DWORD PTR _rel_v_len$52928[ebp]
	fmul	DWORD PTR _tri_area$52946[ebp]
	fld	DWORD PTR _n_dot_v$52945[ebp]
	fmul	DWORD PTR _n_dot_v$52945[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	fstp	DWORD PTR tv592[ebp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
	fmul	DWORD PTR tv592[ebp]
	fstp	DWORD PTR $T66220[ebp]
	lea	eax, DWORD PTR _rel_v_nrm$52931[ebp]
	push	eax
	lea	ecx, DWORD PTR $T52952[ebp]
	push	ecx
	lea	edx, DWORD PTR _rel_v_nrm$52931[ebp]
	push	edx
	lea	eax, DWORD PTR $T52951[ebp]
	push	eax
	lea	ecx, DWORD PTR _nrm$52933[ebp]
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
	mov	ecx, eax
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
	push	eax
	lea	ecx, DWORD PTR $T66220[ebp]
	push	ecx
	lea	edx, DWORD PTR $T52954[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fLift$52941[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _fLift$52941[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _fLift$52941[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _fLift$52941[ebp+12], edx
$LN7@addAeroFor:
; Line 676
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 476				; 000001dcH
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	lea	edx, DWORD PTR _fDrag$52937[ebp]
	push	edx
	lea	eax, DWORD PTR $T52956[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _del_v_by_fDrag$52955[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 677
	lea	ecx, DWORD PTR _del_v_by_fDrag$52955[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _del_v_by_fDrag_len2$52958[ebp]
; Line 678
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 48					; 00000030H
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _v_len2$52959[ebp]
; Line 680
	fld	DWORD PTR _v_len2$52959[ebp]
	fcomp	DWORD PTR _del_v_by_fDrag_len2$52958[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN6@addAeroFor
	fldz
	fcomp	DWORD PTR _del_v_by_fDrag_len2$52958[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@addAeroFor
; Line 682
	lea	ecx, DWORD PTR _del_v_by_fDrag$52955[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _del_v_by_fDrag_len$52961[ebp]
; Line 683
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 48					; 00000030H
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _v_len$52962[ebp]
; Line 684
	fld	DWORD PTR _v_len$52962[ebp]
	fdiv	DWORD PTR _del_v_by_fDrag_len$52961[ebp]
	fmul	DWORD PTR __real@3f4ccccd
	fstp	DWORD PTR $T66221[ebp]
	lea	edx, DWORD PTR $T66221[ebp]
	push	edx
	lea	ecx, DWORD PTR _fDrag$52937[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
$LN6@addAeroFor:
; Line 687
	lea	eax, DWORD PTR _fDrag$52937[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 64					; 00000040H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 688
	lea	ecx, DWORD PTR _fLift$52941[ebp]
	push	ecx
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 64					; 00000040H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
	jmp	$LN1@addAeroFor
$LN8@addAeroFor:
; Line 690
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+312], 0
	je	SHORT $LN3@addAeroFor
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+312], 3
	je	SHORT $LN3@addAeroFor
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+312], 1
	jne	$LN1@addAeroFor
$LN3@addAeroFor:
; Line 692
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN2@addAeroFor
; Line 693
	lea	eax, DWORD PTR _rel_v$52926[ebp]
	push	eax
	lea	ecx, DWORD PTR _nrm$52933[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN26@addAeroFor
	mov	DWORD PTR tv296[ebp], -1
	jmp	SHORT $LN27@addAeroFor
$LN26@addAeroFor:
	mov	DWORD PTR tv296[ebp], 1
$LN27@addAeroFor:
	fild	DWORD PTR tv296[ebp]
	fstp	DWORD PTR $T66222[ebp]
	lea	edx, DWORD PTR $T66222[ebp]
	push	edx
	lea	ecx, DWORD PTR _nrm$52933[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
$LN2@addAeroFor:
; Line 695
	lea	eax, DWORD PTR _nrm$52933[ebp]
	push	eax
	lea	ecx, DWORD PTR _rel_v$52926[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dvn$52970[ebp]
; Line 697
	fldz
	fcomp	DWORD PTR _dvn$52970[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@addAeroFor
; Line 699
	fldz
	fstp	DWORD PTR $T66225[ebp]
	fldz
	fstp	DWORD PTR $T66226[ebp]
	fldz
	fstp	DWORD PTR $T66227[ebp]
	lea	edx, DWORD PTR $T66225[ebp]
	push	edx
	lea	eax, DWORD PTR $T66226[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66227[ebp]
	push	ecx
	lea	ecx, DWORD PTR _force$52972[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 700
	mov	edx, DWORD PTR _n$[ebp]
	fld	DWORD PTR [edx+100]
	fmul	DWORD PTR _dvn$52970[ebp]
	fmul	DWORD PTR _rel_v2$52929[ebp]
	fdiv	DWORD PTR __real@40000000
	fstp	DWORD PTR _c0$52976[ebp]
; Line 701
	fld	DWORD PTR _c0$52976[ebp]
	fmul	DWORD PTR _medium$52924[ebp+20]
	fstp	DWORD PTR _c1$52977[ebp]
; Line 702
	fld	DWORD PTR _c1$52977[ebp]
	fchs
	fmul	DWORD PTR _kLF$[ebp]
	fstp	DWORD PTR $T66228[ebp]
	lea	eax, DWORD PTR $T66228[ebp]
	push	eax
	lea	ecx, DWORD PTR _nrm$52933[ebp]
	push	ecx
	lea	edx, DWORD PTR $T52979[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _force$52972[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 703
	fld	DWORD PTR _c1$52977[ebp]
	fchs
	fmul	DWORD PTR _kDG$[ebp]
	fstp	DWORD PTR $T66229[ebp]
	lea	eax, DWORD PTR $T66229[ebp]
	push	eax
	lea	ecx, DWORD PTR $T52980[ebp]
	push	ecx
	lea	ecx, DWORD PTR _rel_v$52926[ebp]
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
	push	eax
	lea	edx, DWORD PTR $T52982[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _force$52972[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 704
	push	ecx
	fld	DWORD PTR _dt$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _force$52972[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	?ApplyClampedForce@@YAXAAUNode@btSoftBody@@ABVbtVector3@@M@Z ; ApplyClampedForce
	add	esp, 12					; 0000000cH
$LN1@addAeroFor:
; Line 710
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN37@addAeroFor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	1
$LN37@addAeroFor:
	DD	8
	DD	$LN36@addAeroFor
$LN36@addAeroFor:
	DD	-64					; ffffffc0H
	DD	32					; 00000020H
	DD	$LN28@addAeroFor
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN29@addAeroFor
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN30@addAeroFor
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN31@addAeroFor
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN32@addAeroFor
	DD	-224					; ffffff20H
	DD	16					; 00000010H
	DD	$LN33@addAeroFor
	DD	-352					; fffffea0H
	DD	16					; 00000010H
	DD	$LN34@addAeroFor
	DD	-432					; fffffe50H
	DD	16					; 00000010H
	DD	$LN35@addAeroFor
$LN35@addAeroFor:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN34@addAeroFor:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	68					; 00000044H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
$LN33@addAeroFor:
	DB	102					; 00000066H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN32@addAeroFor:
	DB	102					; 00000066H
	DB	68					; 00000044H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
$LN31@addAeroFor:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN30@addAeroFor:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN29@addAeroFor:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN28@addAeroFor:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
?addAeroForceToNode@btSoftBody@@QAEXABVbtVector3@@H@Z ENDP ; btSoftBody::addAeroForceToNode
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??XbtVector3@@QAEAAV0@ABM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XbtVector3@@QAEAAV0@ABM@Z PROC			; btVector3::operator*=, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 198
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 207
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 208
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 210
	mov	eax, DWORD PTR _this$[ebp]
; Line 211
	mov	esp, ebp
	pop	ebp
	ret	4
??XbtVector3@@QAEAAV0@ABM@Z ENDP			; btVector3::operator*=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??D@YA?AVbtVector3@@ABMABV0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVbtVector3@@ABMABV0@@Z PROC			; operator*, COMDAT
; Line 835
	push	ebp
	mov	ebp, esp
; Line 836
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 837
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABMABV0@@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	?normalize@btVector3@@QAEAAV1@XZ		; btVector3::normalize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?normalized@btVector3@@QBE?AV1@XZ
_TEXT	SEGMENT
_norm$ = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?normalized@btVector3@@QBE?AV1@XZ PROC			; btVector3::normalized, COMDAT
; _this$ = ecx
; Line 952
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 953
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _norm$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _norm$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _norm$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _norm$[ebp+12], edx
; Line 955
	lea	ecx, DWORD PTR _norm$[ebp]
	call	?normalize@btVector3@@QAEAAV1@XZ	; btVector3::normalize
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 956
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@normalized
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	1
$LN5@normalized:
	DD	1
	DD	$LN4@normalized
$LN4@normalized:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@normalized
$LN3@normalized:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
?normalized@btVector3@@QBE?AV1@XZ ENDP			; btVector3::normalized
_TEXT	ENDS
PUBLIC	??_0btVector3@@QAEAAV0@ABM@Z			; btVector3::operator/=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?normalize@btVector3@@QAEAAV1@XZ
_TEXT	SEGMENT
$T66259 = -8						; size = 4
_this$ = -4						; size = 4
?normalize@btVector3@@QAEAAV1@XZ PROC			; btVector3::normalize, COMDAT
; _this$ = ecx
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 338
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR $T66259[ebp]
	lea	eax, DWORD PTR $T66259[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 340
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?normalize@btVector3@@QAEAAV1@XZ ENDP			; btVector3::normalize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_0btVector3@@QAEAAV0@ABM@Z
_TEXT	SEGMENT
$T66262 = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0btVector3@@QAEAAV0@ABM@Z PROC			; btVector3::operator/=, COMDAT
; _this$ = ecx
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 229
	mov	eax, DWORD PTR _s$[ebp]
	fld1
	fdiv	DWORD PTR [eax]
	fstp	DWORD PTR $T66262[ebp]
	lea	ecx, DWORD PTR $T66262[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 231
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_0btVector3@@QAEAAV0@ABM@Z ENDP			; btVector3::operator/=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?EvaluateMedium@@YAXPBUbtSoftBodyWorldInfo@@ABVbtVector3@@AAUsMedium@btSoftBody@@@Z
_TEXT	SEGMENT
tv173 = -36						; size = 4
$T66267 = -32						; size = 4
$T66266 = -28						; size = 4
$T66265 = -24						; size = 4
_depth$19693 = -20					; size = 4
$T19688 = -16						; size = 16
_wfi$ = 8						; size = 4
_x$ = 12						; size = 4
_medium$ = 16						; size = 4
?EvaluateMedium@@YAXPBUbtSoftBodyWorldInfo@@ABVbtVector3@@AAUsMedium@btSoftBody@@@Z PROC ; EvaluateMedium, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 551
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 552
	fldz
	fstp	DWORD PTR $T66265[ebp]
	fldz
	fstp	DWORD PTR $T66266[ebp]
	fldz
	fstp	DWORD PTR $T66267[ebp]
	lea	eax, DWORD PTR $T66265[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66266[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66267[ebp]
	push	edx
	lea	ecx, DWORD PTR $T19688[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _medium$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 553
	mov	ecx, DWORD PTR _medium$[ebx]
	fldz
	fstp	DWORD PTR [ecx+16]
; Line 554
	mov	edx, DWORD PTR _medium$[ebx]
	mov	eax, DWORD PTR _wfi$[ebx]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+20]
; Line 555
	mov	ecx, DWORD PTR _wfi$[ebx]
	fldz
	fcomp	DWORD PTR [ecx+4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@EvaluateMe
; Line 557
	mov	edx, DWORD PTR _wfi$[ebx]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _x$[ebx]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	mov	ecx, DWORD PTR _wfi$[ebx]
	fadd	DWORD PTR [ecx+8]
	fchs
	fstp	DWORD PTR _depth$19693[ebp]
; Line 558
	fldz
	fcomp	DWORD PTR _depth$19693[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@EvaluateMe
; Line 560
	mov	edx, DWORD PTR _medium$[ebx]
	mov	eax, DWORD PTR _wfi$[ebx]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx+20]
; Line 561
	mov	ecx, DWORD PTR _wfi$[ebx]
	fld	DWORD PTR _depth$19693[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _wfi$[ebx]
	add	ecx, 48					; 00000030H
	fstp	DWORD PTR tv173[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fmul	DWORD PTR tv173[ebp]
	mov	edx, DWORD PTR _medium$[ebx]
	fstp	DWORD PTR [edx+16]
$LN1@EvaluateMe:
; Line 564
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?EvaluateMedium@@YAXPBUbtSoftBodyWorldInfo@@ABVbtVector3@@AAUsMedium@btSoftBody@@@Z ENDP ; EvaluateMedium
_TEXT	ENDS
PUBLIC	??ZbtVector3@@QAEAAV0@ABV0@@Z			; btVector3::operator-=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ApplyClampedForce@@YAXAAUNode@btSoftBody@@ABVbtVector3@@M@Z
_TEXT	SEGMENT
tv151 = -84						; size = 4
$T19705 = -80						; size = 16
$T19704 = -64						; size = 16
$T19703 = -48						; size = 16
$T19701 = -32						; size = 16
_dtim$ = -8						; size = 4
_n$ = 8							; size = 4
_f$ = 12						; size = 4
_dt$ = 16						; size = 4
?ApplyClampedForce@@YAXAAUNode@btSoftBody@@ABVbtVector3@@M@Z PROC ; ApplyClampedForce, COMDAT
; Line 570
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 571
	mov	eax, DWORD PTR _n$[ebx]
	fld	DWORD PTR _dt$[ebx]
	fmul	DWORD PTR [eax+96]
	fstp	DWORD PTR _dtim$[ebp]
; Line 572
	lea	ecx, DWORD PTR _dtim$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$[ebx]
	push	edx
	lea	eax, DWORD PTR $T19701[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	mov	ecx, DWORD PTR _n$[ebx]
	add	ecx, 48					; 00000030H
	fstp	DWORD PTR tv151[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fcomp	DWORD PTR tv151[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@ApplyClamp
; Line 574
	lea	ecx, DWORD PTR _dtim$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T19703[ebp]
	push	edx
	mov	ecx, DWORD PTR _f$[ebx]
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
	push	eax
	mov	eax, DWORD PTR _n$[ebx]
	add	eax, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR $T19704[ebp]
	push	ecx
	call	?ProjectOnAxis@@YA?AVbtVector3@@ABV1@0@Z ; ProjectOnAxis
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T19705[ebp]
	push	edx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$[ebx]
	add	ecx, 64					; 00000040H
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 576
	jmp	SHORT $LN1@ApplyClamp
$LN2@ApplyClamp:
; Line 578
	mov	eax, DWORD PTR _f$[ebx]
	push	eax
	mov	ecx, DWORD PTR _n$[ebx]
	add	ecx, 64					; 00000040H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN1@ApplyClamp:
; Line 580
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ApplyClamp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN7@ApplyClamp:
	DD	1
	DD	$LN6@ApplyClamp
$LN6@ApplyClamp:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@ApplyClamp
$LN5@ApplyClamp:
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	0
?ApplyClampedForce@@YAXAAUNode@btSoftBody@@ABVbtVector3@@M@Z ENDP ; ApplyClampedForce
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??ZbtVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZbtVector3@@QAEAAV0@ABV0@@Z PROC			; btVector3::operator-=, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 182
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 189
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 190
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 192
	mov	eax, DWORD PTR _this$[ebp]
; Line 193
	mov	esp, ebp
	pop	ebp
	ret	4
??ZbtVector3@@QAEAAV0@ABV0@@Z ENDP			; btVector3::operator-=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ProjectOnAxis@@YA?AVbtVector3@@ABV1@0@Z
_TEXT	SEGMENT
$T66277 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_a$ = 16						; size = 4
?ProjectOnAxis@@YA?AVbtVector3@@ABV1@0@Z PROC		; ProjectOnAxis, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 338
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 339
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR $T66277[ebp]
	lea	edx, DWORD PTR $T66277[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 340
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ProjectOnAxis@@YA?AVbtVector3@@ABV1@0@Z ENDP		; ProjectOnAxis
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0sMedium@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sMedium@btSoftBody@@QAE@XZ PROC			; btSoftBody::sMedium::sMedium, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0sMedium@btSoftBody@@QAE@XZ ENDP			; btSoftBody::sMedium::sMedium
_TEXT	ENDS
PUBLIC	__real@40400000
PUBLIC	?addAeroForceToFace@btSoftBody@@QAEXABVbtVector3@@H@Z ; btSoftBody::addAeroForceToFace
;	COMDAT __real@40400000
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?addAeroForceToFace@btSoftBody@@QAEXABVbtVector3@@H@Z
_TEXT	SEGMENT
tv348 = -760						; size = 4
tv695 = -756						; size = 4
tv192 = -752						; size = 4
tv84 = -748						; size = 1
tv78 = -747						; size = 1
tv73 = -746						; size = 1
tv71 = -745						; size = 1
$T66314 = -744						; size = 4
$T66313 = -740						; size = 4
$T66312 = -736						; size = 4
$T66311 = -732						; size = 4
$T66310 = -728						; size = 4
$T66309 = -724						; size = 4
$T66306 = -720						; size = 4
$T66305 = -716						; size = 4
$T66304 = -712						; size = 4
$T66303 = -708						; size = 4
$T66302 = -704						; size = 4
$T66301 = -700						; size = 4
$T66300 = -696						; size = 4
$T66299 = -692						; size = 4
$T66298 = -688						; size = 4
$T66297 = -684						; size = 4
$T66296 = -680						; size = 4
$T66295 = -676						; size = 4
$T66292 = -672						; size = 4
$T66291 = -668						; size = 4
$T66290 = -664						; size = 4
_j$53075 = -660						; size = 4
$T53073 = -656						; size = 16
$T53071 = -640						; size = 16
$T53070 = -624						; size = 16
_c1$53068 = -604					; size = 4
_c0$53067 = -600					; size = 4
_force$53063 = -592					; size = 16
_dvn$53061 = -564					; size = 4
_v_len$53053 = -560					; size = 4
_del_v_by_fDrag_len$53052 = -556			; size = 4
_v_len2$53050 = -552					; size = 4
_del_v_by_fDrag_len2$53049 = -548			; size = 4
$T53047 = -544						; size = 16
_del_v_by_fDrag$53046 = -512				; size = 16
_j$53041 = -484						; size = 4
$T53038 = -480						; size = 16
$T53036 = -464						; size = 16
$T53035 = -448						; size = 16
$T53033 = -432						; size = 16
$T53031 = -416						; size = 16
_tri_area$53030 = -396					; size = 4
_n_dot_v$53029 = -392					; size = 4
_fLift$53025 = -384					; size = 16
_fDrag$53021 = -352					; size = 16
_nrm$53017 = -320					; size = 16
_rel_v_nrm$53015 = -288					; size = 16
_rel_v2$53013 = -268					; size = 4
_rel_v_len$53012 = -264					; size = 4
_rel_v$53010 = -256					; size = 16
$T53007 = -224						; size = 16
$T53006 = -208						; size = 16
_x$53005 = -176						; size = 16
$T53002 = -144						; size = 16
$T53001 = -128						; size = 16
_v$53000 = -96						; size = 16
_medium$52999 = -64					; size = 32
_f$52998 = -24						; size = 4
_as_faero$ = -20					; size = 1
_as_aero$ = -19						; size = 1
_as_drag$ = -18						; size = 1
_as_lift$ = -17						; size = 1
_kDG$ = -16						; size = 4
_kLF$ = -12						; size = 4
_dt$ = -8						; size = 4
_this$ = -4						; size = 4
_windVelocity$ = 8					; size = 4
_faceIndex$ = 12					; size = 4
?addAeroForceToFace@btSoftBody@@QAEXABVbtVector3@@H@Z PROC ; btSoftBody::addAeroForceToFace, COMDAT
; _this$ = ecx
; Line 713
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 768				; 00000300H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-768]
	mov	ecx, 192				; 000000c0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 714
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+476]
	fstp	DWORD PTR _dt$[ebp]
; Line 715
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+328]
	fstp	DWORD PTR _kLF$[ebp]
; Line 716
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+324]
	fstp	DWORD PTR _kDG$[ebp]
; Line 719
	fldz
	fcomp	DWORD PTR _kLF$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN20@addAeroFor@2
	mov	BYTE PTR tv71[ebp], 1
	jmp	SHORT $LN21@addAeroFor@2
$LN20@addAeroFor@2:
	mov	BYTE PTR tv71[ebp], 0
$LN21@addAeroFor@2:
	mov	al, BYTE PTR tv71[ebp]
	mov	BYTE PTR _as_lift$[ebp], al
; Line 720
	fldz
	fcomp	DWORD PTR _kDG$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN22@addAeroFor@2
	mov	BYTE PTR tv73[ebp], 1
	jmp	SHORT $LN23@addAeroFor@2
$LN22@addAeroFor@2:
	mov	BYTE PTR tv73[ebp], 0
$LN23@addAeroFor@2:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR _as_drag$[ebp], cl
; Line 721
	movzx	edx, BYTE PTR _as_lift$[ebp]
	test	edx, edx
	jne	SHORT $LN24@addAeroFor@2
	movzx	eax, BYTE PTR _as_drag$[ebp]
	test	eax, eax
	jne	SHORT $LN24@addAeroFor@2
	mov	BYTE PTR tv78[ebp], 0
	jmp	SHORT $LN25@addAeroFor@2
$LN24@addAeroFor@2:
	mov	BYTE PTR tv78[ebp], 1
$LN25@addAeroFor@2:
	mov	cl, BYTE PTR tv78[ebp]
	mov	BYTE PTR _as_aero$[ebp], cl
; Line 722
	movzx	edx, BYTE PTR _as_aero$[ebp]
	test	edx, edx
	je	SHORT $LN26@addAeroFor@2
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+312], 4
	jl	SHORT $LN26@addAeroFor@2
	mov	BYTE PTR tv84[ebp], 1
	jmp	SHORT $LN27@addAeroFor@2
$LN26@addAeroFor@2:
	mov	BYTE PTR tv84[ebp], 0
$LN27@addAeroFor@2:
	mov	cl, BYTE PTR tv84[ebp]
	mov	BYTE PTR _as_faero$[ebp], cl
; Line 724
	movzx	edx, BYTE PTR _as_faero$[ebp]
	test	edx, edx
	je	$LN1@addAeroFor@2
; Line 726
	mov	eax, DWORD PTR _faceIndex$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$52998[ebp], eax
; Line 728
	lea	ecx, DWORD PTR _medium$52999[ebp]
	call	??0sMedium@btSoftBody@@QAE@XZ
; Line 730
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T66290[ebp]
	lea	ecx, DWORD PTR $T66290[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$52998[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _f$52998[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 48					; 00000030H
	push	edx
	mov	eax, DWORD PTR _f$52998[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR $T53001[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T53002[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _v$53000[ebp]
	push	ecx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
; Line 731
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T66291[ebp]
	lea	edx, DWORD PTR $T66291[ebp]
	push	edx
	mov	eax, DWORD PTR _f$52998[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _f$52998[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _f$52998[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T53006[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T53007[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _x$53005[ebp]
	push	edx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
; Line 732
	lea	eax, DWORD PTR _medium$52999[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$53005[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+708]
	push	eax
	call	?EvaluateMedium@@YAXPBUbtSoftBodyWorldInfo@@ABVbtVector3@@AAUsMedium@btSoftBody@@@Z ; EvaluateMedium
	add	esp, 12					; 0000000cH
; Line 733
	mov	ecx, DWORD PTR _windVelocity$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _medium$52999[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _medium$52999[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _medium$52999[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _medium$52999[ebp+12], eax
; Line 734
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+708]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR _medium$52999[ebp+20]
; Line 735
	lea	eax, DWORD PTR _medium$52999[ebp]
	push	eax
	lea	ecx, DWORD PTR _v$53000[ebp]
	push	ecx
	lea	edx, DWORD PTR _rel_v$53010[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 736
	lea	ecx, DWORD PTR _rel_v$53010[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _rel_v_len$53012[ebp]
; Line 737
	lea	ecx, DWORD PTR _rel_v$53010[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _rel_v2$53013[ebp]
; Line 739
	fld	DWORD PTR __real@34000000
	fcomp	DWORD PTR _rel_v2$53013[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@addAeroFor@2
; Line 741
	lea	eax, DWORD PTR _rel_v_nrm$53015[ebp]
	push	eax
	lea	ecx, DWORD PTR _rel_v$53010[ebp]
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
; Line 742
	mov	ecx, DWORD PTR _f$52998[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _nrm$53017[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _nrm$53017[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _nrm$53017[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _nrm$53017[ebp+12], eax
; Line 744
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+312], 5
	jne	$LN15@addAeroFor@2
; Line 746
	lea	edx, DWORD PTR _rel_v$53010[ebp]
	push	edx
	lea	eax, DWORD PTR _nrm$53017[ebp]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN28@addAeroFor@2
	mov	DWORD PTR tv192[ebp], -1
	jmp	SHORT $LN29@addAeroFor@2
$LN28@addAeroFor@2:
	mov	DWORD PTR tv192[ebp], 1
$LN29@addAeroFor@2:
	fild	DWORD PTR tv192[ebp]
	fstp	DWORD PTR $T66292[ebp]
	lea	ecx, DWORD PTR $T66292[ebp]
	push	ecx
	lea	ecx, DWORD PTR _nrm$53017[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 748
	fldz
	fstp	DWORD PTR $T66295[ebp]
	fldz
	fstp	DWORD PTR $T66296[ebp]
	fldz
	fstp	DWORD PTR $T66297[ebp]
	lea	edx, DWORD PTR $T66295[ebp]
	push	edx
	lea	eax, DWORD PTR $T66296[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66297[ebp]
	push	ecx
	lea	ecx, DWORD PTR _fDrag$53021[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 749
	fldz
	fstp	DWORD PTR $T66298[ebp]
	fldz
	fstp	DWORD PTR $T66299[ebp]
	fldz
	fstp	DWORD PTR $T66300[ebp]
	lea	edx, DWORD PTR $T66298[ebp]
	push	edx
	lea	eax, DWORD PTR $T66299[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66300[ebp]
	push	ecx
	lea	ecx, DWORD PTR _fLift$53025[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 751
	lea	edx, DWORD PTR _rel_v_nrm$53015[ebp]
	push	edx
	lea	ecx, DWORD PTR _nrm$53017[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR _n_dot_v$53029[ebp]
; Line 752
	mov	eax, DWORD PTR _f$52998[ebp]
	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR [eax+48]
	fstp	DWORD PTR _tri_area$53030[ebp]
; Line 754
	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR _kDG$[ebp]
	fmul	DWORD PTR _medium$52999[ebp+20]
	fmul	DWORD PTR _rel_v2$53013[ebp]
	fmul	DWORD PTR _tri_area$53030[ebp]
	fmul	DWORD PTR _n_dot_v$53029[ebp]
	fstp	DWORD PTR $T66301[ebp]
	lea	ecx, DWORD PTR _rel_v_nrm$53015[ebp]
	push	ecx
	lea	edx, DWORD PTR $T53031[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR $T66301[ebp]
	push	eax
	lea	ecx, DWORD PTR $T53033[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _fDrag$53021[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _fDrag$53021[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _fDrag$53021[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _fDrag$53021[ebp+12], eax
; Line 758
	fld	DWORD PTR _n_dot_v$53029[ebp]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN14@addAeroFor@2
	fld	DWORD PTR __real@3f7c1bda
	fcomp	DWORD PTR _n_dot_v$53029[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN14@addAeroFor@2
; Line 759
	fld	DWORD PTR __real@3f000000
	fmul	DWORD PTR _kLF$[ebp]
	fmul	DWORD PTR _medium$52999[ebp+20]
	fmul	DWORD PTR _rel_v_len$53012[ebp]
	fmul	DWORD PTR _tri_area$53030[ebp]
	fld	DWORD PTR _n_dot_v$53029[ebp]
	fmul	DWORD PTR _n_dot_v$53029[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	fstp	DWORD PTR tv695[ebp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
	fmul	DWORD PTR tv695[ebp]
	fstp	DWORD PTR $T66302[ebp]
	lea	ecx, DWORD PTR _rel_v_nrm$53015[ebp]
	push	ecx
	lea	edx, DWORD PTR $T53036[ebp]
	push	edx
	lea	eax, DWORD PTR _rel_v_nrm$53015[ebp]
	push	eax
	lea	ecx, DWORD PTR $T53035[ebp]
	push	ecx
	lea	ecx, DWORD PTR _nrm$53017[ebp]
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
	mov	ecx, eax
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
	push	eax
	lea	edx, DWORD PTR $T66302[ebp]
	push	edx
	lea	eax, DWORD PTR $T53038[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _fLift$53025[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _fLift$53025[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _fLift$53025[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _fLift$53025[ebp+12], edx
$LN14@addAeroFor@2:
; Line 761
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T66303[ebp]
	lea	eax, DWORD PTR $T66303[ebp]
	push	eax
	lea	ecx, DWORD PTR _fDrag$53021[ebp]
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 762
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T66304[ebp]
	lea	ecx, DWORD PTR $T66304[ebp]
	push	ecx
	lea	ecx, DWORD PTR _fLift$53025[ebp]
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 764
	mov	DWORD PTR _j$53041[ebp], 0
	jmp	SHORT $LN13@addAeroFor@2
$LN12@addAeroFor@2:
	mov	edx, DWORD PTR _j$53041[ebp]
	add	edx, 1
	mov	DWORD PTR _j$53041[ebp], edx
$LN13@addAeroFor@2:
	cmp	DWORD PTR _j$53041[ebp], 3
	jge	$LN11@addAeroFor@2
; Line 766
	mov	eax, DWORD PTR _j$53041[ebp]
	mov	ecx, DWORD PTR _f$52998[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	fldz
	fcomp	DWORD PTR [edx+96]
	fnstsw	ax
	test	ah, 5
	jp	$LN10@addAeroFor@2
; Line 769
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 476				; 000001dcH
	push	eax
	mov	ecx, DWORD PTR _j$53041[ebp]
	mov	edx, DWORD PTR _f$52998[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	add	eax, 96					; 00000060H
	push	eax
	lea	ecx, DWORD PTR _fDrag$53021[ebp]
	push	ecx
	lea	edx, DWORD PTR $T53047[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _del_v_by_fDrag$53046[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 770
	lea	ecx, DWORD PTR _del_v_by_fDrag$53046[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _del_v_by_fDrag_len2$53049[ebp]
; Line 771
	mov	ecx, DWORD PTR _j$53041[ebp]
	mov	edx, DWORD PTR _f$52998[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+8]
	add	ecx, 48					; 00000030H
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _v_len2$53050[ebp]
; Line 773
	fld	DWORD PTR _v_len2$53050[ebp]
	fcomp	DWORD PTR _del_v_by_fDrag_len2$53049[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN9@addAeroFor@2
	fldz
	fcomp	DWORD PTR _del_v_by_fDrag_len2$53049[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN9@addAeroFor@2
; Line 775
	lea	ecx, DWORD PTR _del_v_by_fDrag$53046[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _del_v_by_fDrag_len$53052[ebp]
; Line 776
	mov	eax, DWORD PTR _j$53041[ebp]
	mov	ecx, DWORD PTR _f$52998[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+8]
	add	ecx, 48					; 00000030H
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _v_len$53053[ebp]
; Line 777
	fld	DWORD PTR _v_len$53053[ebp]
	fdiv	DWORD PTR _del_v_by_fDrag_len$53052[ebp]
	fmul	DWORD PTR __real@3f4ccccd
	fstp	DWORD PTR $T66305[ebp]
	lea	edx, DWORD PTR $T66305[ebp]
	push	edx
	lea	ecx, DWORD PTR _fDrag$53021[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
$LN9@addAeroFor@2:
; Line 780
	lea	eax, DWORD PTR _fDrag$53021[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$53041[ebp]
	mov	edx, DWORD PTR _f$52998[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+8]
	add	ecx, 64					; 00000040H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 781
	lea	eax, DWORD PTR _fLift$53025[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$53041[ebp]
	mov	edx, DWORD PTR _f$52998[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+8]
	add	ecx, 64					; 00000040H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN10@addAeroFor@2:
; Line 783
	jmp	$LN12@addAeroFor@2
$LN11@addAeroFor@2:
; Line 785
	jmp	$LN1@addAeroFor@2
$LN15@addAeroFor@2:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+312], 6
	je	SHORT $LN6@addAeroFor@2
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+312], 4
	jne	$LN1@addAeroFor@2
$LN6@addAeroFor@2:
; Line 787
	mov	edx, 4
	test	edx, edx
	je	SHORT $LN5@addAeroFor@2
; Line 788
	lea	eax, DWORD PTR _rel_v$53010[ebp]
	push	eax
	lea	ecx, DWORD PTR _nrm$53017[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN30@addAeroFor@2
	mov	DWORD PTR tv348[ebp], -1
	jmp	SHORT $LN31@addAeroFor@2
$LN30@addAeroFor@2:
	mov	DWORD PTR tv348[ebp], 1
$LN31@addAeroFor@2:
	fild	DWORD PTR tv348[ebp]
	fstp	DWORD PTR $T66306[ebp]
	lea	edx, DWORD PTR $T66306[ebp]
	push	edx
	lea	ecx, DWORD PTR _nrm$53017[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
$LN5@addAeroFor@2:
; Line 790
	lea	eax, DWORD PTR _nrm$53017[ebp]
	push	eax
	lea	ecx, DWORD PTR _rel_v$53010[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dvn$53061[ebp]
; Line 792
	fldz
	fcomp	DWORD PTR _dvn$53061[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@addAeroFor@2
; Line 794
	fldz
	fstp	DWORD PTR $T66309[ebp]
	fldz
	fstp	DWORD PTR $T66310[ebp]
	fldz
	fstp	DWORD PTR $T66311[ebp]
	lea	edx, DWORD PTR $T66309[ebp]
	push	edx
	lea	eax, DWORD PTR $T66310[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66311[ebp]
	push	ecx
	lea	ecx, DWORD PTR _force$53063[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 795
	mov	edx, DWORD PTR _f$52998[ebp]
	fld	DWORD PTR [edx+48]
	fmul	DWORD PTR _dvn$53061[ebp]
	fmul	DWORD PTR _rel_v2$53013[ebp]
	fstp	DWORD PTR _c0$53067[ebp]
; Line 796
	fld	DWORD PTR _c0$53067[ebp]
	fmul	DWORD PTR _medium$52999[ebp+20]
	fstp	DWORD PTR _c1$53068[ebp]
; Line 797
	fld	DWORD PTR _c1$53068[ebp]
	fchs
	fmul	DWORD PTR _kLF$[ebp]
	fstp	DWORD PTR $T66312[ebp]
	lea	eax, DWORD PTR $T66312[ebp]
	push	eax
	lea	ecx, DWORD PTR _nrm$53017[ebp]
	push	ecx
	lea	edx, DWORD PTR $T53070[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _force$53063[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 798
	fld	DWORD PTR _c1$53068[ebp]
	fchs
	fmul	DWORD PTR _kDG$[ebp]
	fstp	DWORD PTR $T66313[ebp]
	lea	eax, DWORD PTR $T66313[ebp]
	push	eax
	lea	ecx, DWORD PTR $T53071[ebp]
	push	ecx
	lea	ecx, DWORD PTR _rel_v$53010[ebp]
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
	push	eax
	lea	edx, DWORD PTR $T53073[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _force$53063[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 799
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T66314[ebp]
	lea	eax, DWORD PTR $T66314[ebp]
	push	eax
	lea	ecx, DWORD PTR _force$53063[ebp]
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 800
	mov	DWORD PTR _j$53075[ebp], 0
	jmp	SHORT $LN3@addAeroFor@2
$LN2@addAeroFor@2:
	mov	ecx, DWORD PTR _j$53075[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$53075[ebp], ecx
$LN3@addAeroFor@2:
	cmp	DWORD PTR _j$53075[ebp], 3
	jge	SHORT $LN1@addAeroFor@2
	push	ecx
	fld	DWORD PTR _dt$[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _force$53063[ebp]
	push	edx
	mov	eax, DWORD PTR _j$53075[ebp]
	mov	ecx, DWORD PTR _f$52998[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	push	edx
	call	?ApplyClampedForce@@YAXAAUNode@btSoftBody@@ABVbtVector3@@M@Z ; ApplyClampedForce
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN2@addAeroFor@2
$LN1@addAeroFor@2:
; Line 806
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN43@addAeroFor@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN43@addAeroFor@2:
	DD	10					; 0000000aH
	DD	$LN42@addAeroFor@2
$LN42@addAeroFor@2:
	DD	-64					; ffffffc0H
	DD	32					; 00000020H
	DD	$LN32@addAeroFor@2
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN33@addAeroFor@2
	DD	-176					; ffffff50H
	DD	16					; 00000010H
	DD	$LN34@addAeroFor@2
	DD	-256					; ffffff00H
	DD	16					; 00000010H
	DD	$LN35@addAeroFor@2
	DD	-288					; fffffee0H
	DD	16					; 00000010H
	DD	$LN36@addAeroFor@2
	DD	-320					; fffffec0H
	DD	16					; 00000010H
	DD	$LN37@addAeroFor@2
	DD	-352					; fffffea0H
	DD	16					; 00000010H
	DD	$LN38@addAeroFor@2
	DD	-384					; fffffe80H
	DD	16					; 00000010H
	DD	$LN39@addAeroFor@2
	DD	-512					; fffffe00H
	DD	16					; 00000010H
	DD	$LN40@addAeroFor@2
	DD	-592					; fffffdb0H
	DD	16					; 00000010H
	DD	$LN41@addAeroFor@2
$LN41@addAeroFor@2:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN40@addAeroFor@2:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	68					; 00000044H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
$LN39@addAeroFor@2:
	DB	102					; 00000066H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN38@addAeroFor@2:
	DB	102					; 00000066H
	DB	68					; 00000044H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
$LN37@addAeroFor@2:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN36@addAeroFor@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN35@addAeroFor@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN34@addAeroFor@2:
	DB	120					; 00000078H
	DB	0
$LN33@addAeroFor@2:
	DB	118					; 00000076H
	DB	0
$LN32@addAeroFor@2:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
?addAeroForceToFace@btSoftBody@@QAEXABVbtVector3@@H@Z ENDP ; btSoftBody::addAeroForceToFace
_TEXT	ENDS
PUBLIC	?addVelocity@btSoftBody@@QAEXABVbtVector3@@H@Z	; btSoftBody::addVelocity
PUBLIC	?addVelocity@btSoftBody@@QAEXABVbtVector3@@@Z	; btSoftBody::addVelocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?addVelocity@btSoftBody@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_ni$53084 = -12						; size = 4
_i$53083 = -8						; size = 4
_this$ = -4						; size = 4
_velocity$ = 8						; size = 4
?addVelocity@btSoftBody@@QAEXABVbtVector3@@@Z PROC	; btSoftBody::addVelocity, COMDAT
; _this$ = ecx
; Line 810
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 811
	mov	DWORD PTR _i$53083[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$53084[ebp], eax
	jmp	SHORT $LN3@addVelocit
$LN2@addVelocit:
	mov	eax, DWORD PTR _i$53083[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53083[ebp], eax
$LN3@addVelocit:
	mov	ecx, DWORD PTR _i$53083[ebp]
	cmp	ecx, DWORD PTR _ni$53084[ebp]
	jge	SHORT $LN4@addVelocit
	mov	edx, DWORD PTR _i$53083[ebp]
	push	edx
	mov	eax, DWORD PTR _velocity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addVelocity@btSoftBody@@QAEXABVbtVector3@@H@Z ; btSoftBody::addVelocity
	jmp	SHORT $LN2@addVelocit
$LN4@addVelocit:
; Line 812
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?addVelocity@btSoftBody@@QAEXABVbtVector3@@@Z ENDP	; btSoftBody::addVelocity
_TEXT	ENDS
PUBLIC	?setVelocity@btSoftBody@@QAEXABVbtVector3@@@Z	; btSoftBody::setVelocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setVelocity@btSoftBody@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_n$53097 = -16						; size = 4
_ni$53093 = -12						; size = 4
_i$53092 = -8						; size = 4
_this$ = -4						; size = 4
_velocity$ = 8						; size = 4
?setVelocity@btSoftBody@@QAEXABVbtVector3@@@Z PROC	; btSoftBody::setVelocity, COMDAT
; _this$ = ecx
; Line 816
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 817
	mov	DWORD PTR _i$53092[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$53093[ebp], eax
	jmp	SHORT $LN4@setVelocit
$LN3@setVelocit:
	mov	eax, DWORD PTR _i$53092[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53092[ebp], eax
$LN4@setVelocit:
	mov	ecx, DWORD PTR _i$53092[ebp]
	cmp	ecx, DWORD PTR _ni$53093[ebp]
	jge	SHORT $LN2@setVelocit
; Line 819
	mov	edx, DWORD PTR _i$53092[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$53097[ebp], eax
; Line 820
	mov	eax, DWORD PTR _n$53097[ebp]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@setVelocit
; Line 822
	mov	ecx, DWORD PTR _velocity$[ebp]
	mov	edx, DWORD PTR _n$53097[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
$LN1@setVelocit:
; Line 824
	jmp	SHORT $LN3@setVelocit
$LN2@setVelocit:
; Line 825
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setVelocity@btSoftBody@@QAEXABVbtVector3@@@Z ENDP	; btSoftBody::setVelocity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?addVelocity@btSoftBody@@QAEXABVbtVector3@@H@Z
_TEXT	SEGMENT
_n$ = -8						; size = 4
_this$ = -4						; size = 4
_velocity$ = 8						; size = 4
_node$ = 12						; size = 4
?addVelocity@btSoftBody@@QAEXABVbtVector3@@H@Z PROC	; btSoftBody::addVelocity, COMDAT
; _this$ = ecx
; Line 830
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 831
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$[ebp], eax
; Line 832
	mov	ecx, DWORD PTR _n$[ebp]
	fldz
	fcomp	DWORD PTR [ecx+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@addVelocit@2
; Line 834
	mov	edx, DWORD PTR _velocity$[ebp]
	push	edx
	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 48					; 00000030H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN1@addVelocit@2:
; Line 836
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?addVelocity@btSoftBody@@QAEXABVbtVector3@@H@Z ENDP	; btSoftBody::addVelocity
_TEXT	ENDS
PUBLIC	?setMass@btSoftBody@@QAEXHM@Z			; btSoftBody::setMass
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setMass@btSoftBody@@QAEXHM@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_node$ = 8						; size = 4
_mass$ = 12						; size = 4
?setMass@btSoftBody@@QAEXHM@Z PROC			; btSoftBody::setMass, COMDAT
; _this$ = ecx
; Line 840
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 841
	fldz
	fcomp	DWORD PTR _mass$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@setMass
	fld1
	fdiv	DWORD PTR _mass$[ebp]
	fstp	DWORD PTR tv71[ebp]
	jmp	SHORT $LN4@setMass
$LN3@setMass:
	fldz
	fstp	DWORD PTR tv71[ebp]
$LN4@setMass:
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR tv71[ebp]
	fstp	DWORD PTR [eax+96]
; Line 842
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+960], 1
; Line 843
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setMass@btSoftBody@@QAEXHM@Z ENDP			; btSoftBody::setMass
_TEXT	ENDS
PUBLIC	?getMass@btSoftBody@@QBEMH@Z			; btSoftBody::getMass
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getMass@btSoftBody@@QBEMH@Z
_TEXT	SEGMENT
tv76 = -8						; size = 4
_this$ = -4						; size = 4
_node$ = 8						; size = 4
?getMass@btSoftBody@@QBEMH@Z PROC			; btSoftBody::getMass, COMDAT
; _this$ = ecx
; Line 847
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 848
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@getMass
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld1
	fdiv	DWORD PTR [eax+96]
	fstp	DWORD PTR tv76[ebp]
	jmp	SHORT $LN4@getMass
$LN3@getMass:
	fldz
	fstp	DWORD PTR tv76[ebp]
$LN4@getMass:
	fld	DWORD PTR tv76[ebp]
; Line 849
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getMass@btSoftBody@@QBEMH@Z ENDP			; btSoftBody::getMass
_TEXT	ENDS
PUBLIC	?getTotalMass@btSoftBody@@QBEMXZ		; btSoftBody::getTotalMass
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getTotalMass@btSoftBody@@QBEMXZ
_TEXT	SEGMENT
_i$53119 = -12						; size = 4
_mass$ = -8						; size = 4
_this$ = -4						; size = 4
?getTotalMass@btSoftBody@@QBEMXZ PROC			; btSoftBody::getTotalMass, COMDAT
; _this$ = ecx
; Line 853
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 854
	fldz
	fstp	DWORD PTR _mass$[ebp]
; Line 855
	mov	DWORD PTR _i$53119[ebp], 0
	jmp	SHORT $LN3@getTotalMa
$LN2@getTotalMa:
	mov	eax, DWORD PTR _i$53119[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53119[ebp], eax
$LN3@getTotalMa:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$53119[ebp], eax
	jge	SHORT $LN1@getTotalMa
; Line 857
	mov	ecx, DWORD PTR _i$53119[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getMass@btSoftBody@@QBEMH@Z		; btSoftBody::getMass
	fadd	DWORD PTR _mass$[ebp]
	fstp	DWORD PTR _mass$[ebp]
; Line 858
	jmp	SHORT $LN2@getTotalMa
$LN1@getTotalMa:
; Line 859
	fld	DWORD PTR _mass$[ebp]
; Line 860
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getTotalMass@btSoftBody@@QBEMXZ ENDP			; btSoftBody::getTotalMass
_TEXT	ENDS
PUBLIC	?setTotalMass@btSoftBody@@QAEXM_N@Z		; btSoftBody::setTotalMass
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setTotalMass@btSoftBody@@QAEXM_N@Z
_TEXT	SEGMENT
tv171 = -36						; size = 4
tv228 = -32						; size = 4
_itm$ = -28						; size = 4
_tm$ = -24						; size = 4
_j$53138 = -20						; size = 4
_twicearea$53137 = -16					; size = 4
_f$53136 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_mass$ = 8						; size = 4
_fromfaces$ = 12					; size = 1
?setTotalMass@btSoftBody@@QAEXM_N@Z PROC		; btSoftBody::setTotalMass, COMDAT
; _this$ = ecx
; Line 864
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 867
	movzx	eax, BYTE PTR _fromfaces$[ebp]
	test	eax, eax
	je	$LN4@setTotalMa
; Line 870
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@setTotalMa
$LN14@setTotalMa:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN15@setTotalMa:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN13@setTotalMa
; Line 872
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 873
	jmp	SHORT $LN14@setTotalMa
$LN13@setTotalMa:
; Line 874
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@setTotalMa
$LN11@setTotalMa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@setTotalMa:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN10@setTotalMa
; Line 876
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$53136[ebp], eax
; Line 879
	mov	edx, DWORD PTR _f$53136[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _f$53136[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _f$53136[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	push	ecx
	call	?AreaOf@@YAMABVbtVector3@@00@Z		; AreaOf
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _twicearea$53137[ebp]
; Line 880
	mov	DWORD PTR _j$53138[ebp], 0
	jmp	SHORT $LN9@setTotalMa
$LN8@setTotalMa:
	mov	edx, DWORD PTR _j$53138[ebp]
	add	edx, 1
	mov	DWORD PTR _j$53138[ebp], edx
$LN9@setTotalMa:
	cmp	DWORD PTR _j$53138[ebp], 3
	jge	SHORT $LN7@setTotalMa
; Line 882
	mov	eax, DWORD PTR _j$53138[ebp]
	mov	ecx, DWORD PTR _f$53136[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	fld	DWORD PTR [edx+96]
	fadd	DWORD PTR _twicearea$53137[ebp]
	mov	eax, DWORD PTR _j$53138[ebp]
	mov	ecx, DWORD PTR _f$53136[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	fstp	DWORD PTR [edx+96]
; Line 883
	jmp	SHORT $LN8@setTotalMa
$LN7@setTotalMa:
; Line 884
	jmp	$LN11@setTotalMa
$LN10@setTotalMa:
; Line 885
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@setTotalMa
$LN5@setTotalMa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@setTotalMa:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN4@setTotalMa
; Line 887
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld1
	fdiv	DWORD PTR [eax+96]
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	fstp	DWORD PTR tv228[ebp]
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR tv228[ebp]
	fstp	DWORD PTR [eax+96]
; Line 888
	jmp	SHORT $LN5@setTotalMa
$LN4@setTotalMa:
; Line 890
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getTotalMass@btSoftBody@@QBEMXZ	; btSoftBody::getTotalMass
	fstp	DWORD PTR _tm$[ebp]
; Line 891
	fld1
	fdiv	DWORD PTR _tm$[ebp]
	fstp	DWORD PTR _itm$[ebp]
; Line 892
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@setTotalMa
$LN2@setTotalMa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@setTotalMa:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@setTotalMa
; Line 894
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 96					; 00000060H
	mov	DWORD PTR tv171[ebp], eax
	fld	DWORD PTR _itm$[ebp]
	fmul	DWORD PTR _mass$[ebp]
	mov	edx, DWORD PTR tv171[ebp]
	fdivr	DWORD PTR [edx]
	mov	eax, DWORD PTR tv171[ebp]
	fstp	DWORD PTR [eax]
; Line 895
	jmp	SHORT $LN2@setTotalMa
$LN1@setTotalMa:
; Line 896
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+960], 1
; Line 897
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setTotalMass@btSoftBody@@QAEXM_N@Z ENDP		; btSoftBody::setTotalMass
_TEXT	ENDS
PUBLIC	?getVolume@btSoftBody@@QBEMXZ			; btSoftBody::getVolume
PUBLIC	?setTotalDensity@btSoftBody@@QAEXM@Z		; btSoftBody::setTotalDensity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setTotalDensity@btSoftBody@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_density$ = 8						; size = 4
?setTotalDensity@btSoftBody@@QAEXM@Z PROC		; btSoftBody::setTotalDensity, COMDAT
; _this$ = ecx
; Line 901
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 902
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVolume@btSoftBody@@QBEMXZ		; btSoftBody::getVolume
	fmul	DWORD PTR _density$[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTotalMass@btSoftBody@@QAEXM_N@Z	; btSoftBody::setTotalMass
; Line 903
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setTotalDensity@btSoftBody@@QAEXM@Z ENDP		; btSoftBody::setTotalDensity
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@M@@QAEAAMH@Z		; btAlignedObjectArray<float>::operator[]
PUBLIC	?resize@?$btAlignedObjectArray@M@@QAEXHABM@Z	; btAlignedObjectArray<float>::resize
PUBLIC	?setVolumeMass@btSoftBody@@QAEXM@Z		; btSoftBody::setVolumeMass
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setVolumeMass@btSoftBody@@QAEXM@Z
_TEXT	SEGMENT
tv240 = -56						; size = 4
tv150 = -52						; size = 4
$T66351 = -48						; size = 4
_j$53169 = -44						; size = 4
_t$53168 = -40						; size = 4
_i$ = -36						; size = 4
_ranks$ = -28						; size = 20
_this$ = -4						; size = 4
_mass$ = 8						; size = 4
?setVolumeMass@btSoftBody@@QAEXM@Z PROC			; btSoftBody::setVolumeMass, COMDAT
; _this$ = ecx
; Line 907
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 908
	lea	ecx, DWORD PTR _ranks$[ebp]
	call	??0?$btAlignedObjectArray@M@@QAE@XZ	; btAlignedObjectArray<float>::btAlignedObjectArray<float>
; Line 909
	fldz
	fstp	DWORD PTR $T66351[ebp]
	lea	eax, DWORD PTR $T66351[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	lea	ecx, DWORD PTR _ranks$[ebp]
	call	?resize@?$btAlignedObjectArray@M@@QAEXHABM@Z ; btAlignedObjectArray<float>::resize
; Line 912
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@setVolumeM
$LN12@setVolumeM:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@setVolumeM:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN11@setVolumeM
; Line 914
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 915
	jmp	SHORT $LN12@setVolumeM
$LN11@setVolumeM:
; Line 916
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@setVolumeM
$LN9@setVolumeM:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@setVolumeM:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN8@setVolumeM
; Line 918
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	DWORD PTR _t$53168[ebp], eax
; Line 919
	mov	DWORD PTR _j$53169[ebp], 0
	jmp	SHORT $LN7@setVolumeM
$LN6@setVolumeM:
	mov	edx, DWORD PTR _j$53169[ebp]
	add	edx, 1
	mov	DWORD PTR _j$53169[ebp], edx
$LN7@setVolumeM:
	cmp	DWORD PTR _j$53169[ebp], 4
	jge	SHORT $LN5@setVolumeM
; Line 921
	mov	eax, DWORD PTR _j$53169[ebp]
	mov	ecx, DWORD PTR _t$53168[ebp]
	mov	esi, DWORD PTR [ecx+eax*4+8]
	mov	edx, DWORD PTR _t$53168[ebp]
	push	ecx
	fld	DWORD PTR [edx+24]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fadd	DWORD PTR [esi+96]
	mov	eax, DWORD PTR _j$53169[ebp]
	mov	ecx, DWORD PTR _t$53168[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	fstp	DWORD PTR [edx+96]
; Line 922
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _j$53169[ebp]
	mov	edx, DWORD PTR _t$53168[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+8]
	sub	ecx, eax
	sar	ecx, 7
	push	ecx
	lea	ecx, DWORD PTR _ranks$[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	DWORD PTR tv150[ebp], eax
	mov	edx, DWORD PTR tv150[ebp]
	fld	DWORD PTR [edx]
	fadd	DWORD PTR __real@3f800000
	mov	eax, DWORD PTR tv150[ebp]
	fstp	DWORD PTR [eax]
; Line 923
	jmp	SHORT $LN6@setVolumeM
$LN5@setVolumeM:
; Line 924
	jmp	$LN9@setVolumeM
$LN8@setVolumeM:
; Line 925
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@setVolumeM
$LN3@setVolumeM:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@setVolumeM:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@setVolumeM
; Line 927
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@setVolumeM
; Line 929
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ranks$[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR [esi]
	fdiv	DWORD PTR [eax+96]
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	fstp	DWORD PTR tv240[ebp]
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR tv240[ebp]
	fstp	DWORD PTR [eax+96]
$LN1@setVolumeM:
; Line 931
	jmp	SHORT $LN3@setVolumeM
$LN2@setVolumeM:
; Line 932
	push	0
	push	ecx
	fld	DWORD PTR _mass$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setTotalMass@btSoftBody@@QAEXM_N@Z	; btSoftBody::setTotalMass
; Line 933
	lea	ecx, DWORD PTR _ranks$[ebp]
	call	??1?$btAlignedObjectArray@M@@QAE@XZ	; btAlignedObjectArray<float>::~btAlignedObjectArray<float>
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@setVolumeM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN18@setVolumeM:
	DD	1
	DD	$LN17@setVolumeM
$LN17@setVolumeM:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN16@setVolumeM
$LN16@setVolumeM:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	0
?setVolumeMass@btSoftBody@@QAEXM@Z ENDP			; btSoftBody::setVolumeMass
_TEXT	ENDS
PUBLIC	__real@40c00000
PUBLIC	?setVolumeDensity@btSoftBody@@QAEXM@Z		; btSoftBody::setVolumeDensity
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?setVolumeDensity@btSoftBody@@QAEXM@Z
_TEXT	SEGMENT
_j$53187 = -20						; size = 4
_t$53186 = -16						; size = 4
_i$53182 = -12						; size = 4
_volume$ = -8						; size = 4
_this$ = -4						; size = 4
_density$ = 8						; size = 4
?setVolumeDensity@btSoftBody@@QAEXM@Z PROC		; btSoftBody::setVolumeDensity, COMDAT
; _this$ = ecx
; Line 937
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 938
	fldz
	fstp	DWORD PTR _volume$[ebp]
; Line 939
	mov	DWORD PTR _i$53182[ebp], 0
	jmp	SHORT $LN6@setVolumeD
$LN5@setVolumeD:
	mov	eax, DWORD PTR _i$53182[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53182[ebp], eax
$LN6@setVolumeD:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	cmp	DWORD PTR _i$53182[ebp], eax
	jge	SHORT $LN4@setVolumeD
; Line 941
	mov	ecx, DWORD PTR _i$53182[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	DWORD PTR _t$53186[ebp], eax
; Line 942
	mov	DWORD PTR _j$53187[ebp], 0
	jmp	SHORT $LN3@setVolumeD
$LN2@setVolumeD:
	mov	edx, DWORD PTR _j$53187[ebp]
	add	edx, 1
	mov	DWORD PTR _j$53187[ebp], edx
$LN3@setVolumeD:
	cmp	DWORD PTR _j$53187[ebp], 4
	jge	SHORT $LN1@setVolumeD
; Line 944
	mov	eax, DWORD PTR _t$53186[ebp]
	push	ecx
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fadd	DWORD PTR _volume$[ebp]
	fstp	DWORD PTR _volume$[ebp]
; Line 945
	jmp	SHORT $LN2@setVolumeD
$LN1@setVolumeD:
; Line 946
	jmp	SHORT $LN5@setVolumeD
$LN4@setVolumeD:
; Line 947
	fld	DWORD PTR _volume$[ebp]
	fmul	DWORD PTR _density$[ebp]
	fdiv	DWORD PTR __real@40c00000
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setVolumeMass@btSoftBody@@QAEXM@Z	; btSoftBody::setVolumeMass
; Line 948
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setVolumeDensity@btSoftBody@@QAEXM@Z ENDP		; btSoftBody::setVolumeDensity
_TEXT	ENDS
PUBLIC	??4btTransform@@QAEAAV0@ABV0@@Z			; btTransform::operator=
PUBLIC	?updateConstants@btSoftBody@@QAEXXZ		; btSoftBody::updateConstants
PUBLIC	?updateNormals@btSoftBody@@QAEXXZ		; btSoftBody::updateNormals
PUBLIC	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ	; btTransform::getBasis
PUBLIC	?transform@btSoftBody@@QAEXABVbtTransform@@@Z	; btSoftBody::transform
EXTRN	?update@btDbvt@@QAEXPAUbtDbvtNode@@AAUbtDbvtAabbMm@@@Z:PROC ; btDbvt::update
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?transform@btSoftBody@@QAEXABVbtTransform@@@Z
_TEXT	SEGMENT
tv71 = -148						; size = 4
$T53206 = -144						; size = 32
$T53205 = -112						; size = 16
$T53204 = -96						; size = 16
$T53203 = -80						; size = 16
_n$53202 = -64						; size = 4
_ni$53198 = -60						; size = 4
_i$53197 = -56						; size = 4
_vol$ = -48						; size = 32
_margin$ = -8						; size = 4
_this$ = -4						; size = 4
_trs$ = 8						; size = 4
?transform@btSoftBody@@QAEXABVbtTransform@@@Z PROC	; btSoftBody::transform, COMDAT
; _this$ = ecx
; Line 952
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 953
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv71[ebp], eax
	mov	eax, DWORD PTR tv71[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _margin$[ebp]
; Line 954
	lea	ecx, DWORD PTR _vol$[ebp]
	call	??0btDbvtAabbMm@@QAE@XZ
; Line 956
	mov	DWORD PTR _i$53197[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$53198[ebp], eax
	jmp	SHORT $LN3@transform
$LN2@transform:
	mov	ecx, DWORD PTR _i$53197[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$53197[ebp], ecx
$LN3@transform:
	mov	edx, DWORD PTR _i$53197[ebp]
	cmp	edx, DWORD PTR _ni$53198[ebp]
	jge	$LN1@transform
; Line 958
	mov	eax, DWORD PTR _i$53197[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$53202[ebp], eax
; Line 959
	mov	ecx, DWORD PTR _n$53202[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T53203[ebp]
	push	edx
	mov	ecx, DWORD PTR _trs$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
	mov	ecx, DWORD PTR _n$53202[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 960
	mov	ecx, DWORD PTR _n$53202[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	edx, DWORD PTR $T53204[ebp]
	push	edx
	mov	ecx, DWORD PTR _trs$[ebx]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
	mov	ecx, DWORD PTR _n$53202[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 961
	mov	ecx, DWORD PTR _n$53202[ebp]
	add	ecx, 80					; 00000050H
	push	ecx
	mov	ecx, DWORD PTR _trs$[ebx]
	call	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	edx, DWORD PTR $T53205[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _n$53202[ebp]
	add	ecx, 80					; 00000050H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 962
	push	ecx
	fld	DWORD PTR _margin$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _n$53202[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T53206[ebp]
	push	edx
	call	?FromCR@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@M@Z ; btDbvtAabbMm::FromCR
	add	esp, 12					; 0000000cH
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR _vol$[ebp]
	rep movsd
; Line 964
	lea	eax, DWORD PTR _vol$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$53202[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	?update@btDbvt@@QAEXPAUbtDbvtNode@@AAUbtDbvtAabbMm@@@Z ; btDbvt::update
; Line 965
	jmp	$LN2@transform
$LN1@transform:
; Line 966
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateNormals@btSoftBody@@QAEXXZ	; btSoftBody::updateNormals
; Line 967
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateBounds@btSoftBody@@QAEXXZ	; btSoftBody::updateBounds
; Line 968
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateConstants@btSoftBody@@QAEXXZ	; btSoftBody::updateConstants
; Line 969
	mov	eax, DWORD PTR _trs$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1184				; 000004a0H
	call	??4btTransform@@QAEAAV0@ABV0@@Z		; btTransform::operator=
; Line 970
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@transform
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	3
$LN8@transform:
	DD	1
	DD	$LN7@transform
$LN7@transform:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN6@transform
$LN6@transform:
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
?transform@btSoftBody@@QAEXABVbtTransform@@@Z ENDP	; btSoftBody::transform
_TEXT	ENDS
PUBLIC	??4btMatrix3x3@@QAEAAV0@ABV0@@Z			; btMatrix3x3::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4btTransform@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??4btTransform@@QAEAAV0@ABV0@@Z PROC			; btTransform::operator=, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 72
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
; Line 74
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4btTransform@@QAEAAV0@ABV0@@Z ENDP			; btTransform::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4btMatrix3x3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??4btMatrix3x3@@QAEAAV0@ABV0@@Z PROC			; btMatrix3x3::operator=, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 123
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 124
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 125
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 126
	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 127
	mov	eax, DWORD PTR _this$[ebp]
; Line 128
	mov	esp, ebp
	pop	ebp
	ret	4
??4btMatrix3x3@@QAEAAV0@ABV0@@Z ENDP			; btMatrix3x3::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ PROC	; btTransform::getBasis, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ENDP	; btTransform::getBasis
_TEXT	ENDS
PUBLIC	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z	; btTransform::setOrigin
PUBLIC	__$ArrayPad$
PUBLIC	?translate@btSoftBody@@QAEXABVbtVector3@@@Z	; btSoftBody::translate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?translate@btSoftBody@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_t$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_trs$ = 8						; size = 4
?translate@btSoftBody@@QAEXABVbtVector3@@@Z PROC	; btSoftBody::translate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 974
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 975
	lea	ecx, DWORD PTR _t$[ebp]
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
; Line 976
	lea	ecx, DWORD PTR _t$[ebp]
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 977
	mov	eax, DWORD PTR _trs$[ebx]
	push	eax
	lea	ecx, DWORD PTR _t$[ebp]
	call	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ; btTransform::setOrigin
; Line 978
	lea	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?transform@btSoftBody@@QAEXABVbtTransform@@@Z ; btSoftBody::transform
; Line 979
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@translate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	3
$LN5@translate:
	DD	1
	DD	$LN4@translate
$LN4@translate:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@translate
$LN3@translate:
	DB	116					; 00000074H
	DB	0
?translate@btSoftBody@@QAEXABVbtVector3@@@Z ENDP	; btSoftBody::translate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setOrigin@btTransform@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_origin$ = 8						; size = 4
?setOrigin@btTransform@@QAEXABVbtVector3@@@Z PROC	; btTransform::setOrigin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	4
?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ENDP	; btTransform::setOrigin
_TEXT	ENDS
PUBLIC	?setRotation@btTransform@@QAEXABVbtQuaternion@@@Z ; btTransform::setRotation
PUBLIC	__$ArrayPad$
PUBLIC	?rotate@btSoftBody@@QAEXABVbtQuaternion@@@Z	; btSoftBody::rotate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?rotate@btSoftBody@@QAEXABVbtQuaternion@@@Z
_TEXT	SEGMENT
_t$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_rot$ = 8						; size = 4
?rotate@btSoftBody@@QAEXABVbtQuaternion@@@Z PROC	; btSoftBody::rotate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 983
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 984
	lea	ecx, DWORD PTR _t$[ebp]
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
; Line 985
	lea	ecx, DWORD PTR _t$[ebp]
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 986
	mov	eax, DWORD PTR _rot$[ebx]
	push	eax
	lea	ecx, DWORD PTR _t$[ebp]
	call	?setRotation@btTransform@@QAEXABVbtQuaternion@@@Z ; btTransform::setRotation
; Line 987
	lea	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?transform@btSoftBody@@QAEXABVbtTransform@@@Z ; btSoftBody::transform
; Line 988
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@rotate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	3
$LN5@rotate:
	DD	1
	DD	$LN4@rotate
$LN4@rotate:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@rotate
$LN3@rotate:
	DB	116					; 00000074H
	DB	0
?rotate@btSoftBody@@QAEXABVbtQuaternion@@@Z ENDP	; btSoftBody::rotate
_TEXT	ENDS
PUBLIC	?setRotation@btMatrix3x3@@QAEXABVbtQuaternion@@@Z ; btMatrix3x3::setRotation
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setRotation@btTransform@@QAEXABVbtQuaternion@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_q$ = 8							; size = 4
?setRotation@btTransform@@QAEXABVbtQuaternion@@@Z PROC	; btTransform::setRotation, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 166
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 167
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setRotation@btMatrix3x3@@QAEXABVbtQuaternion@@@Z ; btMatrix3x3::setRotation
; Line 168
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setRotation@btTransform@@QAEXABVbtQuaternion@@@Z ENDP	; btTransform::setRotation
_TEXT	ENDS
PUBLIC	?w@btQuadWord@@QBEABMXZ				; btQuadWord::w
PUBLIC	?z@btQuadWord@@QBEABMXZ				; btQuadWord::z
PUBLIC	?y@btQuadWord@@QBEABMXZ				; btQuadWord::y
PUBLIC	?x@btQuadWord@@QBEABMXZ				; btQuadWord::x
PUBLIC	?length2@btQuaternion@@QBEMXZ			; btQuaternion::length2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setRotation@btMatrix3x3@@QAEXABVbtQuaternion@@@Z
_TEXT	SEGMENT
$T66396 = -96						; size = 4
$T66395 = -92						; size = 4
$T66394 = -88						; size = 4
$T66393 = -84						; size = 4
$T66392 = -80						; size = 4
$T66391 = -76						; size = 4
$T66390 = -72						; size = 4
$T66389 = -68						; size = 4
$T66388 = -64						; size = 4
_zz$ = -60						; size = 4
_yz$ = -56						; size = 4
_yy$ = -52						; size = 4
_xz$ = -48						; size = 4
_xy$ = -44						; size = 4
_xx$ = -40						; size = 4
_wz$ = -36						; size = 4
_wy$ = -32						; size = 4
_wx$ = -28						; size = 4
_zs$ = -24						; size = 4
_ys$ = -20						; size = 4
_xs$ = -16						; size = 4
_s$ = -12						; size = 4
_d$ = -8						; size = 4
_this$ = -4						; size = 4
_q$ = 8							; size = 4
?setRotation@btMatrix3x3@@QAEXABVbtQuaternion@@@Z PROC	; btMatrix3x3::setRotation, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 210
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _q$[ebp]
	call	?length2@btQuaternion@@QBEMXZ		; btQuaternion::length2
	fstp	DWORD PTR _d$[ebp]
; Line 213
	fld	DWORD PTR __real@40000000
	fdiv	DWORD PTR _d$[ebp]
	fstp	DWORD PTR _s$[ebp]
; Line 267
	mov	ecx, DWORD PTR _q$[ebp]
	call	?x@btQuadWord@@QBEABMXZ			; btQuadWord::x
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR _xs$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	call	?y@btQuadWord@@QBEABMXZ			; btQuadWord::y
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR _ys$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	call	?z@btQuadWord@@QBEABMXZ			; btQuadWord::z
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR _zs$[ebp]
; Line 268
	mov	ecx, DWORD PTR _q$[ebp]
	call	?w@btQuadWord@@QBEABMXZ			; btQuadWord::w
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _xs$[ebp]
	fstp	DWORD PTR _wx$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	call	?w@btQuadWord@@QBEABMXZ			; btQuadWord::w
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _ys$[ebp]
	fstp	DWORD PTR _wy$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	call	?w@btQuadWord@@QBEABMXZ			; btQuadWord::w
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _zs$[ebp]
	fstp	DWORD PTR _wz$[ebp]
; Line 269
	mov	ecx, DWORD PTR _q$[ebp]
	call	?x@btQuadWord@@QBEABMXZ			; btQuadWord::x
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _xs$[ebp]
	fstp	DWORD PTR _xx$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	call	?x@btQuadWord@@QBEABMXZ			; btQuadWord::x
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _ys$[ebp]
	fstp	DWORD PTR _xy$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	call	?x@btQuadWord@@QBEABMXZ			; btQuadWord::x
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _zs$[ebp]
	fstp	DWORD PTR _xz$[ebp]
; Line 270
	mov	ecx, DWORD PTR _q$[ebp]
	call	?y@btQuadWord@@QBEABMXZ			; btQuadWord::y
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _ys$[ebp]
	fstp	DWORD PTR _yy$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	call	?y@btQuadWord@@QBEABMXZ			; btQuadWord::y
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _zs$[ebp]
	fstp	DWORD PTR _yz$[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	call	?z@btQuadWord@@QBEABMXZ			; btQuadWord::z
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _zs$[ebp]
	fstp	DWORD PTR _zz$[ebp]
; Line 274
	fld	DWORD PTR _xx$[ebp]
	fadd	DWORD PTR _yy$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T66388[ebp]
	fld	DWORD PTR _yz$[ebp]
	fadd	DWORD PTR _wx$[ebp]
	fstp	DWORD PTR $T66389[ebp]
	fld	DWORD PTR _xz$[ebp]
	fsub	DWORD PTR _wy$[ebp]
	fstp	DWORD PTR $T66390[ebp]
	fld	DWORD PTR _yz$[ebp]
	fsub	DWORD PTR _wx$[ebp]
	fstp	DWORD PTR $T66391[ebp]
	fld	DWORD PTR _xx$[ebp]
	fadd	DWORD PTR _zz$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T66392[ebp]
	fld	DWORD PTR _xy$[ebp]
	fadd	DWORD PTR _wz$[ebp]
	fstp	DWORD PTR $T66393[ebp]
	fld	DWORD PTR _xz$[ebp]
	fadd	DWORD PTR _wy$[ebp]
	fstp	DWORD PTR $T66394[ebp]
	fld	DWORD PTR _xy$[ebp]
	fsub	DWORD PTR _wz$[ebp]
	fstp	DWORD PTR $T66395[ebp]
	fld	DWORD PTR _yy$[ebp]
	fadd	DWORD PTR _zz$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR $T66396[ebp]
	lea	eax, DWORD PTR $T66388[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66389[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66390[ebp]
	push	edx
	lea	eax, DWORD PTR $T66391[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66392[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66393[ebp]
	push	edx
	lea	eax, DWORD PTR $T66394[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66395[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66396[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btMatrix3x3@@QAEXABM00000000@Z ; btMatrix3x3::setValue
; Line 276
	pop	edi
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setRotation@btMatrix3x3@@QAEXABVbtQuaternion@@@Z ENDP	; btMatrix3x3::setRotation
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?x@btQuadWord@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?x@btQuadWord@@QBEABMXZ PROC				; btQuadWord::x, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btquadword.h
; Line 116
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?x@btQuadWord@@QBEABMXZ ENDP				; btQuadWord::x
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?y@btQuadWord@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?y@btQuadWord@@QBEABMXZ PROC				; btQuadWord::y, COMDAT
; _this$ = ecx
; Line 118
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?y@btQuadWord@@QBEABMXZ ENDP				; btQuadWord::y
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?z@btQuadWord@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?z@btQuadWord@@QBEABMXZ PROC				; btQuadWord::z, COMDAT
; _this$ = ecx
; Line 120
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?z@btQuadWord@@QBEABMXZ ENDP				; btQuadWord::z
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?w@btQuadWord@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?w@btQuadWord@@QBEABMXZ PROC				; btQuadWord::w, COMDAT
; _this$ = ecx
; Line 122
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?w@btQuadWord@@QBEABMXZ ENDP				; btQuadWord::w
_TEXT	ENDS
PUBLIC	?dot@btQuaternion@@QBEMABV1@@Z			; btQuaternion::dot
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?length2@btQuaternion@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length2@btQuaternion@@QBEMXZ PROC			; btQuaternion::length2, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btquaternion.h
; Line 320
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 321
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btQuaternion@@QBEMABV1@@Z		; btQuaternion::dot
; Line 322
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length2@btQuaternion@@QBEMXZ ENDP			; btQuaternion::length2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?dot@btQuaternion@@QBEMABV1@@Z
_TEXT	SEGMENT
tv166 = -12						; size = 4
tv164 = -8						; size = 4
_this$ = -4						; size = 4
_q$ = 8							; size = 4
?dot@btQuaternion@@QBEMABV1@@Z PROC			; btQuaternion::dot, COMDAT
; _this$ = ecx
; Line 293
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 314
	mov	ecx, DWORD PTR _q$[ebp]
	call	?x@btQuadWord@@QBEABMXZ			; btQuadWord::x
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _q$[ebp]
	fstp	DWORD PTR tv164[ebp]
	call	?y@btQuadWord@@QBEABMXZ			; btQuadWord::y
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv164[ebp]
	mov	ecx, DWORD PTR _q$[ebp]
	fstp	DWORD PTR tv166[ebp]
	call	?z@btQuadWord@@QBEABMXZ			; btQuadWord::z
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv166[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _q$[ebp]
	fld	DWORD PTR [edx+12]
	fmul	DWORD PTR [eax+12]
	faddp	ST(1), ST(0)
; Line 316
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?dot@btQuaternion@@QBEMABV1@@Z ENDP			; btQuaternion::dot
_TEXT	ENDS
PUBLIC	??XbtVector3@@QAEAAV0@ABV0@@Z			; btVector3::operator*=
PUBLIC	?scale@btSoftBody@@QAEXABVbtVector3@@@Z		; btSoftBody::scale
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?scale@btSoftBody@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
tv71 = -100						; size = 4
$T53229 = -96						; size = 32
_n$53228 = -64						; size = 4
_ni$53224 = -60						; size = 4
_i$53223 = -56						; size = 4
_vol$ = -48						; size = 32
_margin$ = -8						; size = 4
_this$ = -4						; size = 4
_scl$ = 8						; size = 4
?scale@btSoftBody@@QAEXABVbtVector3@@@Z PROC		; btSoftBody::scale, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 992
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 994
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv71[ebp], eax
	mov	eax, DWORD PTR tv71[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv71[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _margin$[ebp]
; Line 995
	lea	ecx, DWORD PTR _vol$[ebp]
	call	??0btDbvtAabbMm@@QAE@XZ
; Line 997
	mov	DWORD PTR _i$53223[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$53224[ebp], eax
	jmp	SHORT $LN3@scale
$LN2@scale:
	mov	ecx, DWORD PTR _i$53223[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$53223[ebp], ecx
$LN3@scale:
	mov	edx, DWORD PTR _i$53223[ebp]
	cmp	edx, DWORD PTR _ni$53224[ebp]
	jge	SHORT $LN1@scale
; Line 999
	mov	eax, DWORD PTR _i$53223[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$53228[ebp], eax
; Line 1000
	mov	ecx, DWORD PTR _scl$[ebx]
	push	ecx
	mov	ecx, DWORD PTR _n$53228[ebp]
	add	ecx, 16					; 00000010H
	call	??XbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator*=
; Line 1001
	mov	edx, DWORD PTR _scl$[ebx]
	push	edx
	mov	ecx, DWORD PTR _n$53228[ebp]
	add	ecx, 32					; 00000020H
	call	??XbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator*=
; Line 1002
	push	ecx
	fld	DWORD PTR _margin$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _n$53228[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T53229[ebp]
	push	ecx
	call	?FromCR@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@M@Z ; btDbvtAabbMm::FromCR
	add	esp, 12					; 0000000cH
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR _vol$[ebp]
	rep movsd
; Line 1003
	lea	edx, DWORD PTR _vol$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$53228[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	?update@btDbvt@@QAEXPAUbtDbvtNode@@AAUbtDbvtAabbMm@@@Z ; btDbvt::update
; Line 1004
	jmp	$LN2@scale
$LN1@scale:
; Line 1005
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateNormals@btSoftBody@@QAEXXZ	; btSoftBody::updateNormals
; Line 1006
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateBounds@btSoftBody@@QAEXXZ	; btSoftBody::updateBounds
; Line 1007
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateConstants@btSoftBody@@QAEXXZ	; btSoftBody::updateConstants
; Line 1008
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@scale
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	3
$LN8@scale:
	DD	1
	DD	$LN7@scale
$LN7@scale:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN6@scale
$LN6@scale:
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
?scale@btSoftBody@@QAEXABVbtVector3@@@Z ENDP		; btSoftBody::scale
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??XbtVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??XbtVector3@@QAEAAV0@ABV0@@Z PROC			; btVector3::operator*=, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 553
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 554
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 555
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 557
	mov	eax, DWORD PTR _this$[ebp]
; Line 558
	mov	esp, ebp
	pop	ebp
	ret	4
??XbtVector3@@QAEAAV0@ABV0@@Z ENDP			; btVector3::operator*=
_TEXT	ENDS
PUBLIC	?getRestLengthScale@btSoftBody@@QAEMXZ		; btSoftBody::getRestLengthScale
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getRestLengthScale@btSoftBody@@QAEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRestLengthScale@btSoftBody@@QAEMXZ PROC		; btSoftBody::getRestLengthScale, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 1012
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1013
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+1264]
; Line 1014
	mov	esp, ebp
	pop	ebp
	ret	0
?getRestLengthScale@btSoftBody@@QAEMXZ ENDP		; btSoftBody::getRestLengthScale
_TEXT	ENDS
PUBLIC	?getActivationState@btCollisionObject@@QBEHXZ	; btCollisionObject::getActivationState
PUBLIC	?setRestLengthScale@btSoftBody@@QAEXM@Z		; btSoftBody::setRestLengthScale
EXTRN	?activate@btCollisionObject@@QBEX_N@Z:PROC	; btCollisionObject::activate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setRestLengthScale@btSoftBody@@QAEXM@Z
_TEXT	SEGMENT
_l$53242 = -16						; size = 4
_ni$53238 = -12						; size = 4
_i$53237 = -8						; size = 4
_this$ = -4						; size = 4
_restLengthScale$ = 8					; size = 4
?setRestLengthScale@btSoftBody@@QAEXM@Z PROC		; btSoftBody::setRestLengthScale, COMDAT
; _this$ = ecx
; Line 1018
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1019
	mov	DWORD PTR _i$53237[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$53238[ebp], eax
	jmp	SHORT $LN4@setRestLen
$LN3@setRestLen:
	mov	eax, DWORD PTR _i$53237[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53237[ebp], eax
$LN4@setRestLen:
	mov	ecx, DWORD PTR _i$53237[ebp]
	cmp	ecx, DWORD PTR _ni$53238[ebp]
	jge	SHORT $LN2@setRestLen
; Line 1021
	mov	edx, DWORD PTR _i$53237[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$53242[ebp], eax
; Line 1022
	mov	eax, DWORD PTR _l$53242[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+16]
	fdiv	DWORD PTR [ecx+1264]
	fmul	DWORD PTR _restLengthScale$[ebp]
	mov	edx, DWORD PTR _l$53242[ebp]
	fstp	DWORD PTR [edx+16]
; Line 1023
	mov	eax, DWORD PTR _l$53242[ebp]
	mov	ecx, DWORD PTR _l$53242[ebp]
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _l$53242[ebp]
	fstp	DWORD PTR [edx+28]
; Line 1024
	jmp	SHORT $LN3@setRestLen
$LN2@setRestLen:
; Line 1025
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _restLengthScale$[ebp]
	fstp	DWORD PTR [eax+1264]
; Line 1027
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getActivationState@btCollisionObject@@QBEHXZ ; btCollisionObject::getActivationState
	cmp	eax, 2
	jne	SHORT $LN1@setRestLen
; Line 1028
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?activate@btCollisionObject@@QBEX_N@Z	; btCollisionObject::activate
$LN1@setRestLen:
; Line 1029
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setRestLengthScale@btSoftBody@@QAEXM@Z ENDP		; btSoftBody::setRestLengthScale
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getActivationState@btCollisionObject@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getActivationState@btCollisionObject@@QBEHXZ PROC	; btCollisionObject::getActivationState, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 245
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+228]
	mov	esp, ebp
	pop	ebp
	ret	0
?getActivationState@btCollisionObject@@QBEHXZ ENDP	; btCollisionObject::getActivationState
_TEXT	ENDS
PUBLIC	?inverse@btMatrix3x3@@QBE?AV1@XZ		; btMatrix3x3::inverse
PUBLIC	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z		; btMatrix3x3::operator[]
PUBLIC	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
PUBLIC	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
PUBLIC	?evaluateCom@btSoftBody@@QBE?AVbtVector3@@XZ	; btSoftBody::evaluateCom
PUBLIC	__real@447a0000
PUBLIC	__$ArrayPad$
PUBLIC	?setPose@btSoftBody@@QAEX_N0@Z			; btSoftBody::setPose
;	COMDAT __real@447a0000
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?setPose@btSoftBody@@QAEX_N0@Z
_TEXT	SEGMENT
tv192 = -336						; size = 4
tv153 = -332						; size = 4
tv299 = -328						; size = 4
$T66435 = -324						; size = 4
$T66434 = -320						; size = 4
$T66433 = -316						; size = 4
$T66432 = -312						; size = 4
$T66431 = -308						; size = 4
$T66428 = -304						; size = 16
$T66425 = -276						; size = 4
$T53289 = -272						; size = 48
$T53288 = -224						; size = 16
$T53287 = -208						; size = 16
$T53286 = -192						; size = 16
_mq$53284 = -160					; size = 16
_q$53283 = -132						; size = 4
$T53272 = -128						; size = 16
$T53271 = -112						; size = 16
_com$ = -64						; size = 16
_n$53263 = -32						; size = 4
_tmass$ = -28						; size = 4
_kmass$ = -24						; size = 4
_omass$ = -20						; size = 4
_ni$ = -16						; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_bvolume$ = 8						; size = 1
_bframe$ = 12						; size = 1
?setPose@btSoftBody@@QAEX_N0@Z PROC			; btSoftBody::setPose, COMDAT
; _this$ = ecx
; Line 1033
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 348				; 0000015cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-348]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1034
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bvolume$[ebx]
	mov	BYTE PTR [eax+496], cl
; Line 1035
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _bframe$[ebx]
	mov	BYTE PTR [edx+497], al
; Line 1039
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getTotalMass@btSoftBody@@QBEMXZ	; btSoftBody::getTotalMass
	fstp	DWORD PTR _omass$[ebp]
; Line 1040
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR tv299[ebp], eax
	fild	DWORD PTR tv299[ebp]
	fmul	DWORD PTR _omass$[ebp]
	fmul	DWORD PTR __real@447a0000
	fstp	DWORD PTR _kmass$[ebp]
; Line 1041
	fld	DWORD PTR _omass$[ebp]
	fstp	DWORD PTR _tmass$[ebp]
; Line 1042
	fldz
	fstp	DWORD PTR $T66425[ebp]
	lea	ecx, DWORD PTR $T66425[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	?resize@?$btAlignedObjectArray@M@@QAEXHABM@Z ; btAlignedObjectArray<float>::resize
; Line 1043
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN13@setPose
$LN12@setPose:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@setPose:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	SHORT $LN11@setPose
; Line 1045
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN10@setPose
	fld	DWORD PTR _tmass$[ebp]
	fadd	DWORD PTR _kmass$[ebp]
	fstp	DWORD PTR _tmass$[ebp]
$LN10@setPose:
; Line 1046
	jmp	SHORT $LN12@setPose
$LN11@setPose:
; Line 1047
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN9@setPose
$LN8@setPose:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@setPose:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	SHORT $LN7@setPose
; Line 1049
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$53263[ebp], eax
; Line 1052
	mov	edx, DWORD PTR _n$53263[ebp]
	fldz
	fcomp	DWORD PTR [edx+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN16@setPose
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR [eax+96]
	fmul	DWORD PTR _tmass$[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR tv153[ebp]
	jmp	SHORT $LN17@setPose
$LN16@setPose:
	fld	DWORD PTR _kmass$[ebp]
	fdiv	DWORD PTR _tmass$[ebp]
	fstp	DWORD PTR tv153[ebp]
$LN17@setPose:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	fld	DWORD PTR tv153[ebp]
	fstp	DWORD PTR [eax]
; Line 1053
	jmp	$LN8@setPose
$LN7@setPose:
; Line 1055
	lea	edx, DWORD PTR _com$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?evaluateCom@btSoftBody@@QBE?AVbtVector3@@XZ ; btSoftBody::evaluateCom
; Line 1056
	lea	ecx, DWORD PTR $T66428[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 504				; 000001f8H
	call	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
; Line 1057
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN6@setPose
$LN5@setPose:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@setPose:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN4@setPose
; Line 1059
	lea	edx, DWORD PTR _com$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T53271[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 504				; 000001f8H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
; Line 1060
	jmp	SHORT $LN5@setPose
$LN4@setPose:
; Line 1061
	movzx	eax, BYTE PTR _bvolume$[ebx]
	test	eax, eax
	je	SHORT $LN18@setPose
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVolume@btSoftBody@@QBEMXZ		; btSoftBody::getVolume
	fstp	DWORD PTR tv192[ebp]
	jmp	SHORT $LN19@setPose
$LN18@setPose:
	fldz
	fstp	DWORD PTR tv192[ebp]
$LN19@setPose:
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR tv192[ebp]
	fstp	DWORD PTR [ecx+500]
; Line 1062
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 544				; 00000220H
	mov	eax, DWORD PTR _com$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _com$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _com$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _com$[ebp+12]
	mov	DWORD PTR [edx+12], ecx
; Line 1063
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 560				; 00000230H
	call	?setIdentity@btMatrix3x3@@QAEXXZ	; btMatrix3x3::setIdentity
; Line 1064
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 608				; 00000260H
	call	?setIdentity@btMatrix3x3@@QAEXXZ	; btMatrix3x3::setIdentity
; Line 1068
	fldz
	fstp	DWORD PTR $T66433[ebp]
	fldz
	fstp	DWORD PTR $T66434[ebp]
	fldz
	fstp	DWORD PTR $T66435[ebp]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	DWORD PTR $T66432[ebp], eax
	lea	edx, DWORD PTR $T66433[ebp]
	push	edx
	lea	eax, DWORD PTR $T66434[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66435[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T53272[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	edx, DWORD PTR $T66432[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	DWORD PTR $T66431[ebp], eax
	mov	ecx, DWORD PTR $T66432[ebp]
	mov	edx, DWORD PTR $T66431[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	esi, DWORD PTR $T66431[ebp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
; Line 1069
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN3@setPose
$LN2@setPose:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@setPose:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	$LN1@setPose
; Line 1071
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 504				; 000001f8H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	DWORD PTR _q$53283[ebp], eax
; Line 1072
	mov	edx, DWORD PTR _q$53283[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	push	eax
	lea	ecx, DWORD PTR _mq$53284[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 1073
	mov	edx, DWORD PTR _q$53283[ebp]
	push	edx
	lea	ecx, DWORD PTR _mq$53284[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	eax, DWORD PTR $T53286[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1074
	mov	ecx, DWORD PTR _q$53283[ebp]
	push	ecx
	lea	ecx, DWORD PTR _mq$53284[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	edx, DWORD PTR $T53287[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1075
	mov	eax, DWORD PTR _q$53283[ebp]
	push	eax
	lea	ecx, DWORD PTR _mq$53284[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	ecx, DWORD PTR $T53288[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1076
	jmp	$LN2@setPose
$LN1@setPose:
; Line 1077
	lea	edx, DWORD PTR $T53289[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?inverse@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::inverse
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 1079
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateConstants@btSoftBody@@QAEXXZ	; btSoftBody::updateConstants
; Line 1080
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@setPose
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	3
$LN23@setPose:
	DD	2
	DD	$LN22@setPose
$LN22@setPose:
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN20@setPose
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN21@setPose
$LN21@setPose:
	DB	109					; 0000006dH
	DB	113					; 00000071H
	DB	0
$LN20@setPose:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
?setPose@btSoftBody@@QAEX_N0@Z ENDP			; btSoftBody::setPose
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z PROC		; btMatrix3x3::operator[], COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 153
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
; Line 154
	mov	esp, ebp
	pop	ebp
	ret	4
??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z ENDP		; btMatrix3x3::operator[]
_TEXT	ENDS
PUBLIC	?cofac@btMatrix3x3@@QBEMHHHH@Z			; btMatrix3x3::cofac
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?inverse@btMatrix3x3@@QBE?AV1@XZ
_TEXT	SEGMENT
$T66457 = -92						; size = 4
$T66456 = -88						; size = 4
$T66455 = -84						; size = 4
$T66454 = -80						; size = 4
$T66453 = -76						; size = 4
$T66452 = -72						; size = 4
$T66451 = -68						; size = 4
$T66450 = -64						; size = 4
$T66449 = -60						; size = 4
$T66448 = -56						; size = 4
$T66447 = -52						; size = 4
$T66446 = -48						; size = 4
_s$ = -44						; size = 4
_det$ = -40						; size = 4
_co$ = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?inverse@btMatrix3x3@@QBE?AV1@XZ PROC			; btMatrix3x3::inverse, COMDAT
; _this$ = ecx
; Line 1026
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1027
	push	1
	push	2
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cofac@btMatrix3x3@@QBEMHHHH@Z		; btMatrix3x3::cofac
	fstp	DWORD PTR $T66446[ebp]
	push	0
	push	2
	push	2
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cofac@btMatrix3x3@@QBEMHHHH@Z		; btMatrix3x3::cofac
	fstp	DWORD PTR $T66447[ebp]
	push	2
	push	2
	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cofac@btMatrix3x3@@QBEMHHHH@Z		; btMatrix3x3::cofac
	fstp	DWORD PTR $T66448[ebp]
	lea	eax, DWORD PTR $T66446[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66447[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66448[ebp]
	push	edx
	lea	ecx, DWORD PTR _co$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 1028
	lea	eax, DWORD PTR _co$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR _det$[ebp]
; Line 1030
	fld1
	fdiv	DWORD PTR _det$[ebp]
	fstp	DWORD PTR _s$[ebp]
; Line 1033
	push	1
	push	1
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cofac@btMatrix3x3@@QBEMHHHH@Z		; btMatrix3x3::cofac
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR $T66449[ebp]
	push	0
	push	2
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cofac@btMatrix3x3@@QBEMHHHH@Z		; btMatrix3x3::cofac
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR $T66450[ebp]
	lea	ecx, DWORD PTR _co$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR $T66451[ebp]
	push	0
	push	1
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cofac@btMatrix3x3@@QBEMHHHH@Z		; btMatrix3x3::cofac
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR $T66452[ebp]
	push	2
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cofac@btMatrix3x3@@QBEMHHHH@Z		; btMatrix3x3::cofac
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR $T66453[ebp]
	lea	ecx, DWORD PTR _co$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR $T66454[ebp]
	push	2
	push	1
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cofac@btMatrix3x3@@QBEMHHHH@Z		; btMatrix3x3::cofac
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR $T66455[ebp]
	push	1
	push	2
	push	2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cofac@btMatrix3x3@@QBEMHHHH@Z		; btMatrix3x3::cofac
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR $T66456[ebp]
	lea	ecx, DWORD PTR _co$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [eax]
	fmul	DWORD PTR _s$[ebp]
	fstp	DWORD PTR $T66457[ebp]
	lea	ecx, DWORD PTR $T66449[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66450[ebp]
	push	edx
	lea	eax, DWORD PTR $T66451[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66452[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66453[ebp]
	push	edx
	lea	eax, DWORD PTR $T66454[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66455[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66456[ebp]
	push	edx
	lea	eax, DWORD PTR $T66457[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1034
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@inverse@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	3
$LN5@inverse@2:
	DD	1
	DD	$LN4@inverse@2
$LN4@inverse@2:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@inverse@2
$LN3@inverse@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	0
?inverse@btMatrix3x3@@QBE?AV1@XZ ENDP			; btMatrix3x3::inverse
_TEXT	ENDS
PUBLIC	??BbtVector3@@QBEPBMXZ				; btVector3::operator float const *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cofac@btMatrix3x3@@QBEMHHHH@Z
_TEXT	SEGMENT
tv139 = -8						; size = 4
_this$ = -4						; size = 4
_r1$ = 8						; size = 4
_c1$ = 12						; size = 4
_r2$ = 16						; size = 4
_c2$ = 20						; size = 4
?cofac@btMatrix3x3@@QBEMHHHH@Z PROC			; btMatrix3x3::cofac, COMDAT
; _this$ = ecx
; Line 728
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 729
	mov	ecx, DWORD PTR _r1$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	mov	esi, eax
	mov	ecx, DWORD PTR _r2$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	mov	ecx, DWORD PTR _c1$[ebp]
	mov	edx, DWORD PTR _c2$[ebp]
	fld	DWORD PTR [esi+ecx*4]
	fmul	DWORD PTR [eax+edx*4]
	mov	ecx, DWORD PTR _r1$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR tv139[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	mov	esi, eax
	mov	ecx, DWORD PTR _r2$[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	mov	ecx, DWORD PTR _c2$[ebp]
	mov	edx, DWORD PTR _c1$[ebp]
	fld	DWORD PTR [esi+ecx*4]
	fmul	DWORD PTR [eax+edx*4]
	fsubr	DWORD PTR tv139[ebp]
; Line 730
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?cofac@btMatrix3x3@@QBEMHHHH@Z ENDP			; btMatrix3x3::cofac
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BbtVector3@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BbtVector3@@QBEPBMXZ PROC				; btVector3::operator float const *, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 587
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BbtVector3@@QBEPBMXZ ENDP				; btVector3::operator float const *
_TEXT	ENDS
PUBLIC	?resetLinkRestLengths@btSoftBody@@QAEXXZ	; btSoftBody::resetLinkRestLengths
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resetLinkRestLengths@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
$T53299 = -32						; size = 16
_l$53298 = -16						; size = 4
_ni$53294 = -12						; size = 4
_i$53293 = -8						; size = 4
_this$ = -4						; size = 4
?resetLinkRestLengths@btSoftBody@@QAEXXZ PROC		; btSoftBody::resetLinkRestLengths, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 1083
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1084
	mov	DWORD PTR _i$53293[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$53294[ebp], eax
	jmp	SHORT $LN3@resetLinkR
$LN2@resetLinkR:
	mov	eax, DWORD PTR _i$53293[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53293[ebp], eax
$LN3@resetLinkR:
	mov	ecx, DWORD PTR _i$53293[ebp]
	cmp	ecx, DWORD PTR _ni$53294[ebp]
	jge	SHORT $LN1@resetLinkR
; Line 1086
	mov	edx, DWORD PTR _i$53293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$53298[ebp], eax
; Line 1087
	mov	eax, DWORD PTR _l$53298[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _l$53298[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T53299[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	mov	edx, DWORD PTR _l$53298[ebp]
	fstp	DWORD PTR [edx+16]
; Line 1088
	mov	eax, DWORD PTR _l$53298[ebp]
	mov	ecx, DWORD PTR _l$53298[ebp]
	fld	DWORD PTR [eax+16]
	fmul	DWORD PTR [ecx+16]
	mov	edx, DWORD PTR _l$53298[ebp]
	fstp	DWORD PTR [edx+28]
; Line 1089
	jmp	SHORT $LN2@resetLinkR
$LN1@resetLinkR:
; Line 1090
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?resetLinkRestLengths@btSoftBody@@QAEXXZ ENDP		; btSoftBody::resetLinkRestLengths
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getVolume@btSoftBody@@QBEMXZ
_TEXT	SEGMENT
$T53315 = -128						; size = 16
$T53314 = -112						; size = 16
$T53313 = -96						; size = 16
$T53312 = -80						; size = 16
_f$53311 = -56						; size = 4
_org$53307 = -48					; size = 16
_ni$53306 = -16						; size = 4
_i$53305 = -12						; size = 4
_vol$ = -8						; size = 4
_this$ = -4						; size = 4
?getVolume@btSoftBody@@QBEMXZ PROC			; btSoftBody::getVolume, COMDAT
; _this$ = ecx
; Line 1094
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1095
	fldz
	fstp	DWORD PTR _vol$[ebp]
; Line 1096
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	test	eax, eax
	jle	$LN4@getVolume
; Line 1100
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _org$53307[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _org$53307[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _org$53307[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _org$53307[ebp+12], edx
; Line 1101
	mov	DWORD PTR _i$53305[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$53306[ebp], eax
	jmp	SHORT $LN3@getVolume
$LN2@getVolume:
	mov	eax, DWORD PTR _i$53305[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53305[ebp], eax
$LN3@getVolume:
	mov	ecx, DWORD PTR _i$53305[ebp]
	cmp	ecx, DWORD PTR _ni$53306[ebp]
	jge	$LN1@getVolume
; Line 1103
	mov	edx, DWORD PTR _i$53305[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$53311[ebp], eax
; Line 1104
	lea	eax, DWORD PTR _org$53307[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$53311[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T53314[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _org$53307[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$53311[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T53313[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T53315[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _org$53307[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$53311[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T53312[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fadd	DWORD PTR _vol$[ebp]
	fstp	DWORD PTR _vol$[ebp]
; Line 1105
	jmp	$LN2@getVolume
$LN1@getVolume:
; Line 1106
	fld	DWORD PTR _vol$[ebp]
	fdiv	DWORD PTR __real@40c00000
	fstp	DWORD PTR _vol$[ebp]
$LN4@getVolume:
; Line 1108
	fld	DWORD PTR _vol$[ebp]
; Line 1109
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@getVolume
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN9@getVolume:
	DD	1
	DD	$LN8@getVolume
$LN8@getVolume:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN7@getVolume
$LN7@getVolume:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	0
?getVolume@btSoftBody@@QBEMXZ ENDP			; btSoftBody::getVolume
_TEXT	ENDS
PUBLIC	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
PUBLIC	?clusterCount@btSoftBody@@QBEHXZ		; btSoftBody::clusterCount
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterCount@btSoftBody@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clusterCount@btSoftBody@@QBEHXZ PROC			; btSoftBody::clusterCount, COMDAT
; _this$ = ecx
; Line 1113
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1114
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
; Line 1115
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clusterCount@btSoftBody@@QBEHXZ ENDP			; btSoftBody::clusterCount
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEABQAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
PUBLIC	??A?$btAlignedObjectArray@M@@QBEABMH@Z		; btAlignedObjectArray<float>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
PUBLIC	?clusterCom@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@@Z ; btSoftBody::clusterCom
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterCom@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@@Z
_TEXT	SEGMENT
$T66478 = -76						; size = 4
$T66477 = -72						; size = 4
$T66476 = -68						; size = 4
$T53333 = -64						; size = 16
_ni$53329 = -44						; size = 4
_i$53328 = -40						; size = 4
_com$ = -32						; size = 16
___$ReturnUdt$ = 8					; size = 4
_cluster$ = 12						; size = 4
?clusterCom@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@@Z PROC ; btSoftBody::clusterCom, COMDAT
; Line 1119
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1120
	fldz
	fstp	DWORD PTR $T66476[ebp]
	fldz
	fstp	DWORD PTR $T66477[ebp]
	fldz
	fstp	DWORD PTR $T66478[ebp]
	lea	eax, DWORD PTR $T66476[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66477[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66478[ebp]
	push	edx
	lea	ecx, DWORD PTR _com$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 1121
	mov	DWORD PTR _i$53328[ebp], 0
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	mov	DWORD PTR _ni$53329[ebp], eax
	jmp	SHORT $LN3@clusterCom
$LN2@clusterCom:
	mov	eax, DWORD PTR _i$53328[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53328[ebp], eax
$LN3@clusterCom:
	mov	ecx, DWORD PTR _i$53328[ebp]
	cmp	ecx, DWORD PTR _ni$53329[ebp]
	jge	SHORT $LN1@clusterCom
; Line 1123
	mov	edx, DWORD PTR _i$53328[ebp]
	push	edx
	mov	ecx, DWORD PTR _cluster$[ebx]
	call	??A?$btAlignedObjectArray@M@@QBEABMH@Z	; btAlignedObjectArray<float>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$53328[ebp]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEABQAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T53333[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _com$[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1124
	jmp	SHORT $LN2@clusterCom
$LN1@clusterCom:
; Line 1125
	mov	eax, DWORD PTR _cluster$[ebx]
	add	eax, 132				; 00000084H
	push	eax
	lea	ecx, DWORD PTR _com$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebx]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1126
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@clusterCom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN8@clusterCom:
	DD	1
	DD	$LN7@clusterCom
$LN7@clusterCom:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN6@clusterCom
$LN6@clusterCom:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
?clusterCom@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@@Z ENDP ; btSoftBody::clusterCom
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
PUBLIC	?clusterCom@btSoftBody@@QBE?AVbtVector3@@H@Z	; btSoftBody::clusterCom
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterCom@btSoftBody@@QBE?AVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_cluster$ = 12						; size = 4
?clusterCom@btSoftBody@@QBE?AVbtVector3@@H@Z PROC	; btSoftBody::clusterCom, COMDAT
; _this$ = ecx
; Line 1130
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1131
	mov	eax, DWORD PTR _cluster$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?clusterCom@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@@Z ; btSoftBody::clusterCom
	add	esp, 8
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1132
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?clusterCom@btSoftBody@@QBE?AVbtVector3@@H@Z ENDP	; btSoftBody::clusterCom
_TEXT	ENDS
PUBLIC	?clusterVelocity@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@ABV2@@Z ; btSoftBody::clusterVelocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterVelocity@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@ABV2@@Z
_TEXT	SEGMENT
$T53346 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_cluster$ = 12						; size = 4
_rpos$ = 16						; size = 4
?clusterVelocity@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@ABV2@@Z PROC ; btSoftBody::clusterVelocity, COMDAT
; Line 1136
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1137
	mov	eax, DWORD PTR _rpos$[ebx]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 352				; 00000160H
	push	ecx
	lea	edx, DWORD PTR $T53346[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _cluster$[ebx]
	add	eax, 336				; 00000150H
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 1138
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?clusterVelocity@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@ABV2@@Z ENDP ; btSoftBody::clusterVelocity
_TEXT	ENDS
PUBLIC	?clusterVImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z ; btSoftBody::clusterVImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterVImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z
_TEXT	SEGMENT
$T53356 = -96						; size = 16
_ai$ = -64						; size = 16
_li$ = -32						; size = 16
_cluster$ = 8						; size = 4
_rpos$ = 12						; size = 4
_impulse$ = 16						; size = 4
?clusterVImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z PROC ; btSoftBody::clusterVImpulse, COMDAT
; Line 1142
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1143
	mov	eax, DWORD PTR _impulse$[ebx]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 132				; 00000084H
	push	ecx
	lea	edx, DWORD PTR _li$[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 1144
	mov	eax, DWORD PTR _impulse$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rpos$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T53356[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _cluster$[ebx]
	add	eax, 192				; 000000c0H
	push	eax
	lea	ecx, DWORD PTR _ai$[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
; Line 1145
	lea	edx, DWORD PTR _li$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 256				; 00000100H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
	lea	eax, DWORD PTR _li$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 336				; 00000150H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1146
	lea	ecx, DWORD PTR _ai$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 272				; 00000110H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
	lea	edx, DWORD PTR _ai$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 352				; 00000160H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1147
	mov	eax, DWORD PTR _cluster$[ebx]
	mov	ecx, DWORD PTR [eax+320]
	add	ecx, 1
	mov	edx, DWORD PTR _cluster$[ebx]
	mov	DWORD PTR [edx+320], ecx
; Line 1148
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@clusterVIm
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN6@clusterVIm:
	DD	2
	DD	$LN5@clusterVIm
$LN5@clusterVIm:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@clusterVIm
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN4@clusterVIm
$LN4@clusterVIm:
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	0
$LN3@clusterVIm:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	0
?clusterVImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z ENDP ; btSoftBody::clusterVImpulse
_TEXT	ENDS
PUBLIC	?clusterDImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z ; btSoftBody::clusterDImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterDImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z
_TEXT	SEGMENT
$T53366 = -96						; size = 16
_ai$ = -64						; size = 16
_li$ = -32						; size = 16
_cluster$ = 8						; size = 4
_rpos$ = 12						; size = 4
_impulse$ = 16						; size = 4
?clusterDImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z PROC ; btSoftBody::clusterDImpulse, COMDAT
; Line 1152
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1153
	mov	eax, DWORD PTR _impulse$[ebx]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 132				; 00000084H
	push	ecx
	lea	edx, DWORD PTR _li$[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 1154
	mov	eax, DWORD PTR _impulse$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rpos$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T53366[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _cluster$[ebx]
	add	eax, 192				; 000000c0H
	push	eax
	lea	ecx, DWORD PTR _ai$[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
; Line 1155
	lea	edx, DWORD PTR _li$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 288				; 00000120H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1156
	lea	eax, DWORD PTR _ai$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 304				; 00000130H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1157
	mov	ecx, DWORD PTR _cluster$[ebx]
	mov	edx, DWORD PTR [ecx+324]
	add	edx, 1
	mov	eax, DWORD PTR _cluster$[ebx]
	mov	DWORD PTR [eax+324], edx
; Line 1158
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@clusterDIm
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN6@clusterDIm:
	DD	2
	DD	$LN5@clusterDIm
$LN5@clusterDIm:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@clusterDIm
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN4@clusterDIm
$LN4@clusterDIm:
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	0
$LN3@clusterDIm:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	0
?clusterDImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z ENDP ; btSoftBody::clusterDImpulse
_TEXT	ENDS
PUBLIC	?clusterImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@ABUImpulse@1@@Z ; btSoftBody::clusterImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@ABUImpulse@1@@Z
_TEXT	SEGMENT
_cluster$ = 8						; size = 4
_rpos$ = 12						; size = 4
_impulse$ = 16						; size = 4
?clusterImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@ABUImpulse@1@@Z PROC ; btSoftBody::clusterImpulse, COMDAT
; Line 1162
	push	ebp
	mov	ebp, esp
; Line 1163
	mov	eax, DWORD PTR _impulse$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	je	SHORT $LN2@clusterImp
	mov	edx, DWORD PTR _impulse$[ebp]
	push	edx
	mov	eax, DWORD PTR _rpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebp]
	push	ecx
	call	?clusterVImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z ; btSoftBody::clusterVImpulse
	add	esp, 12					; 0000000cH
$LN2@clusterImp:
; Line 1164
	mov	edx, DWORD PTR _impulse$[ebp]
	mov	eax, DWORD PTR [edx+32]
	shl	eax, 30					; 0000001eH
	sar	eax, 31					; 0000001fH
	test	eax, eax
	je	SHORT $LN3@clusterImp
	mov	ecx, DWORD PTR _impulse$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _rpos$[ebp]
	push	edx
	mov	eax, DWORD PTR _cluster$[ebp]
	push	eax
	call	?clusterDImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z ; btSoftBody::clusterDImpulse
	add	esp, 12					; 0000000cH
$LN3@clusterImp:
; Line 1165
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?clusterImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@ABUImpulse@1@@Z ENDP ; btSoftBody::clusterImpulse
_TEXT	ENDS
PUBLIC	?clusterVAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ; btSoftBody::clusterVAImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterVAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z
_TEXT	SEGMENT
_ai$ = -32						; size = 16
_cluster$ = 8						; size = 4
_impulse$ = 12						; size = 4
?clusterVAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z PROC ; btSoftBody::clusterVAImpulse, COMDAT
; Line 1169
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1170
	mov	eax, DWORD PTR _impulse$[ebx]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 192				; 000000c0H
	push	ecx
	lea	edx, DWORD PTR _ai$[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
; Line 1171
	lea	eax, DWORD PTR _ai$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 272				; 00000110H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
	lea	ecx, DWORD PTR _ai$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 352				; 00000160H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1172
	mov	edx, DWORD PTR _cluster$[ebx]
	mov	eax, DWORD PTR [edx+320]
	add	eax, 1
	mov	ecx, DWORD PTR _cluster$[ebx]
	mov	DWORD PTR [ecx+320], eax
; Line 1173
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@clusterVAI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN5@clusterVAI:
	DD	1
	DD	$LN4@clusterVAI
$LN4@clusterVAI:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@clusterVAI
$LN3@clusterVAI:
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	0
?clusterVAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ENDP ; btSoftBody::clusterVAImpulse
_TEXT	ENDS
PUBLIC	?clusterDAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ; btSoftBody::clusterDAImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterDAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z
_TEXT	SEGMENT
_ai$ = -32						; size = 16
_cluster$ = 8						; size = 4
_impulse$ = 12						; size = 4
?clusterDAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z PROC ; btSoftBody::clusterDAImpulse, COMDAT
; Line 1177
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1178
	mov	eax, DWORD PTR _impulse$[ebx]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 192				; 000000c0H
	push	ecx
	lea	edx, DWORD PTR _ai$[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
; Line 1179
	lea	eax, DWORD PTR _ai$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 304				; 00000130H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1180
	mov	ecx, DWORD PTR _cluster$[ebx]
	mov	edx, DWORD PTR [ecx+324]
	add	edx, 1
	mov	eax, DWORD PTR _cluster$[ebx]
	mov	DWORD PTR [eax+324], edx
; Line 1181
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@clusterDAI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN5@clusterDAI:
	DD	1
	DD	$LN4@clusterDAI
$LN4@clusterDAI:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@clusterDAI
$LN3@clusterDAI:
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	0
?clusterDAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ENDP ; btSoftBody::clusterDAImpulse
_TEXT	ENDS
PUBLIC	?clusterAImpulse@btSoftBody@@SAXPAUCluster@1@ABUImpulse@1@@Z ; btSoftBody::clusterAImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterAImpulse@btSoftBody@@SAXPAUCluster@1@ABUImpulse@1@@Z
_TEXT	SEGMENT
_cluster$ = 8						; size = 4
_impulse$ = 12						; size = 4
?clusterAImpulse@btSoftBody@@SAXPAUCluster@1@ABUImpulse@1@@Z PROC ; btSoftBody::clusterAImpulse, COMDAT
; Line 1185
	push	ebp
	mov	ebp, esp
; Line 1186
	mov	eax, DWORD PTR _impulse$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	je	SHORT $LN2@clusterAIm
	mov	edx, DWORD PTR _impulse$[ebp]
	push	edx
	mov	eax, DWORD PTR _cluster$[ebp]
	push	eax
	call	?clusterVAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ; btSoftBody::clusterVAImpulse
	add	esp, 8
$LN2@clusterAIm:
; Line 1187
	mov	ecx, DWORD PTR _impulse$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	shl	edx, 30					; 0000001eH
	sar	edx, 31					; 0000001fH
	test	edx, edx
	je	SHORT $LN3@clusterAIm
	mov	eax, DWORD PTR _impulse$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebp]
	push	ecx
	call	?clusterDAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ; btSoftBody::clusterDAImpulse
	add	esp, 8
$LN3@clusterAIm:
; Line 1188
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?clusterAImpulse@btSoftBody@@SAXPAUCluster@1@ABUImpulse@1@@Z ENDP ; btSoftBody::clusterAImpulse
_TEXT	ENDS
PUBLIC	?clusterDCImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ; btSoftBody::clusterDCImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clusterDCImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z
_TEXT	SEGMENT
$T53397 = -16						; size = 16
_cluster$ = 8						; size = 4
_impulse$ = 12						; size = 4
?clusterDCImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z PROC ; btSoftBody::clusterDCImpulse, COMDAT
; Line 1192
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1193
	mov	eax, DWORD PTR _cluster$[ebx]
	add	eax, 132				; 00000084H
	push	eax
	mov	ecx, DWORD PTR _impulse$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T53397[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _cluster$[ebx]
	add	ecx, 288				; 00000120H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1194
	mov	eax, DWORD PTR _cluster$[ebx]
	mov	ecx, DWORD PTR [eax+324]
	add	ecx, 1
	mov	edx, DWORD PTR _cluster$[ebx]
	mov	DWORD PTR [edx+324], ecx
; Line 1195
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?clusterDCImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ENDP ; btSoftBody::clusterDCImpulse
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ	; btAlignedObjectArray<NodeLinks>::~btAlignedObjectArray<NodeLinks>
PUBLIC	??A?$btAlignedObjectArray@H@@QAEAAHH@Z		; btAlignedObjectArray<int>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ; btAlignedObjectArray<NodeLinks>::size
PUBLIC	?push_back@?$btAlignedObjectArray@H@@QAEXABH@Z	; btAlignedObjectArray<int>::push_back
PUBLIC	?size@?$btAlignedObjectArray@H@@QBEHXZ		; btAlignedObjectArray<int>::size
PUBLIC	?findLinearSearch@?$btAlignedObjectArray@H@@QBEHABH@Z ; btAlignedObjectArray<int>::findLinearSearch
PUBLIC	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
PUBLIC	??1NodeLinks@@QAE@XZ				; NodeLinks::~NodeLinks
PUBLIC	?resize@?$btAlignedObjectArray@UNodeLinks@@@@QAEXHABUNodeLinks@@@Z ; btAlignedObjectArray<NodeLinks>::resize
PUBLIC	??0NodeLinks@@QAE@XZ				; NodeLinks::NodeLinks
PUBLIC	??0?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ	; btAlignedObjectArray<NodeLinks>::btAlignedObjectArray<NodeLinks>
PUBLIC	?generateBendingConstraints@btSoftBody@@QAEHHPAUMaterial@1@@Z ; btSoftBody::generateBendingConstraints
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?generateBendingConstraints@btSoftBody@@QAEHHPAUMaterial@1@@Z
_TEXT	SEGMENT
tv352 = -156						; size = 4
$T66518 = -152						; size = 4
$T66517 = -148						; size = 20
$T66516 = -128						; size = 4
_nlinks$53617 = -124					; size = 4
_sum$53615 = -120					; size = 4
_k$53605 = -116						; size = 4
_sum$53600 = -112					; size = 4
_j$53598 = -108						; size = 4
_kk$53594 = -104					; size = 4
_k$53593 = -100						; size = 4
_jj$53589 = -96						; size = 4
_i$53588 = -92						; size = 4
_ii$53584 = -88						; size = 4
_ib$53580 = -80						; size = 4
_ia$53578 = -68						; size = 4
_nodeLinks$53572 = -56					; size = 20
_ib$53439 = -32						; size = 4
_ia$53437 = -28						; size = 4
_adj$53422 = -24					; size = 4
_inf$53420 = -20					; size = 4
_n$53419 = -16						; size = 4
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_distance$ = 8						; size = 4
_mat$ = 12						; size = 4
?generateBendingConstraints@btSoftBody@@QAEHHPAUMaterial@1@@Z PROC ; btSoftBody::generateBendingConstraints, COMDAT
; _this$ = ecx
; Line 1206
	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1209
	cmp	DWORD PTR _distance$[ebp], 1
	jle	$LN48@generateBe
; Line 1212
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _n$53419[ebp], eax
; Line 1213
	mov	DWORD PTR _inf$53420[ebp], 2147483647	; 7fffffffH
; Line 1214
	mov	eax, DWORD PTR _n$53419[ebp]
	imul	eax, DWORD PTR _n$53419[ebp]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T66516[ebp], eax
	mov	eax, DWORD PTR $T66516[ebp]
	mov	DWORD PTR _adj$53422[ebp], eax
; Line 1218
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN47@generateBe
$LN46@generateBe:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN47@generateBe:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _n$53419[ebp]
	jge	SHORT $LN45@generateBe
; Line 1220
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN44@generateBe
$LN43@generateBe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN44@generateBe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _n$53419[ebp]
	jge	SHORT $LN42@generateBe
; Line 1222
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _j$[ebp]
	je	SHORT $LN41@generateBe
; Line 1224
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, DWORD PTR _n$53419[ebp]
	add	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _adj$53422[ebp]
	mov	DWORD PTR [ecx+eax*4], 2147483647	; 7fffffffH
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, DWORD PTR _n$53419[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _adj$53422[ebp]
	mov	DWORD PTR [eax+edx*4], 2147483647	; 7fffffffH
; Line 1226
	jmp	SHORT $LN40@generateBe
$LN41@generateBe:
; Line 1228
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, DWORD PTR _n$53419[ebp]
	add	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _adj$53422[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, DWORD PTR _n$53419[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _adj$53422[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
$LN40@generateBe:
; Line 1230
	jmp	SHORT $LN43@generateBe
$LN42@generateBe:
; Line 1231
	jmp	$LN46@generateBe
$LN45@generateBe:
; Line 1232
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN39@generateBe
$LN38@generateBe:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN39@generateBe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN37@generateBe
; Line 1234
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR _ia$53437[ebp], ecx
; Line 1235
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR _ib$53439[ebp], ecx
; Line 1236
	mov	edx, DWORD PTR _ib$53439[ebp]
	imul	edx, DWORD PTR _n$53419[ebp]
	add	edx, DWORD PTR _ia$53437[ebp]
	mov	eax, DWORD PTR _adj$53422[ebp]
	mov	DWORD PTR [eax+edx*4], 1
; Line 1237
	mov	ecx, DWORD PTR _ia$53437[ebp]
	imul	ecx, DWORD PTR _n$53419[ebp]
	add	ecx, DWORD PTR _ib$53439[ebp]
	mov	edx, DWORD PTR _adj$53422[ebp]
	mov	DWORD PTR [edx+ecx*4], 1
; Line 1238
	jmp	$LN38@generateBe
$LN37@generateBe:
; Line 1242
	cmp	DWORD PTR _distance$[ebp], 2
	jne	$LN36@generateBe
; Line 1245
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??0?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ ; btAlignedObjectArray<NodeLinks>::btAlignedObjectArray<NodeLinks>
; Line 1249
	lea	ecx, DWORD PTR $T66517[ebp]
	call	??0NodeLinks@@QAE@XZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	?resize@?$btAlignedObjectArray@UNodeLinks@@@@QAEXHABUNodeLinks@@@Z ; btAlignedObjectArray<NodeLinks>::resize
	lea	ecx, DWORD PTR $T66517[ebp]
	call	??1NodeLinks@@QAE@XZ
; Line 1251
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN35@generateBe
$LN34@generateBe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN35@generateBe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN33@generateBe
; Line 1253
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR [esi+8]
	sub	edx, eax
	sar	edx, 7
	mov	DWORD PTR _ia$53578[ebp], edx
; Line 1254
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR _ib$53580[ebp], ecx
; Line 1255
	lea	edx, DWORD PTR _ib$53580[ebp]
	push	edx
	mov	eax, DWORD PTR _ia$53578[ebp]
	push	eax
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	?findLinearSearch@?$btAlignedObjectArray@H@@QBEHABH@Z ; btAlignedObjectArray<int>::findLinearSearch
	mov	esi, eax
	mov	ecx, DWORD PTR _ia$53578[ebp]
	push	ecx
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	esi, eax
	jne	SHORT $LN32@generateBe
; Line 1256
	lea	edx, DWORD PTR _ib$53580[ebp]
	push	edx
	mov	eax, DWORD PTR _ia$53578[ebp]
	push	eax
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	?push_back@?$btAlignedObjectArray@H@@QAEXABH@Z ; btAlignedObjectArray<int>::push_back
$LN32@generateBe:
; Line 1258
	lea	ecx, DWORD PTR _ia$53578[ebp]
	push	ecx
	mov	edx, DWORD PTR _ib$53580[ebp]
	push	edx
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	?findLinearSearch@?$btAlignedObjectArray@H@@QBEHABH@Z ; btAlignedObjectArray<int>::findLinearSearch
	mov	esi, eax
	mov	eax, DWORD PTR _ib$53580[ebp]
	push	eax
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	esi, eax
	jne	SHORT $LN31@generateBe
; Line 1259
	lea	ecx, DWORD PTR _ia$53578[ebp]
	push	ecx
	mov	edx, DWORD PTR _ib$53580[ebp]
	push	edx
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	?push_back@?$btAlignedObjectArray@H@@QAEXABH@Z ; btAlignedObjectArray<int>::push_back
$LN31@generateBe:
; Line 1260
	jmp	$LN34@generateBe
$LN33@generateBe:
; Line 1261
	mov	DWORD PTR _ii$53584[ebp], 0
	jmp	SHORT $LN30@generateBe
$LN29@generateBe:
	mov	eax, DWORD PTR _ii$53584[ebp]
	add	eax, 1
	mov	DWORD PTR _ii$53584[ebp], eax
$LN30@generateBe:
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ; btAlignedObjectArray<NodeLinks>::size
	cmp	DWORD PTR _ii$53584[ebp], eax
	jge	$LN28@generateBe
; Line 1263
	mov	ecx, DWORD PTR _ii$53584[ebp]
	mov	DWORD PTR _i$53588[ebp], ecx
; Line 1265
	mov	DWORD PTR _jj$53589[ebp], 0
	jmp	SHORT $LN27@generateBe
$LN26@generateBe:
	mov	edx, DWORD PTR _jj$53589[ebp]
	add	edx, 1
	mov	DWORD PTR _jj$53589[ebp], edx
$LN27@generateBe:
	mov	eax, DWORD PTR _ii$53584[ebp]
	push	eax
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _jj$53589[ebp], eax
	jge	$LN25@generateBe
; Line 1267
	mov	ecx, DWORD PTR _jj$53589[ebp]
	push	ecx
	mov	edx, DWORD PTR _ii$53584[ebp]
	push	edx
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _k$53593[ebp], eax
; Line 1268
	mov	DWORD PTR _kk$53594[ebp], 0
	jmp	SHORT $LN24@generateBe
$LN23@generateBe:
	mov	ecx, DWORD PTR _kk$53594[ebp]
	add	ecx, 1
	mov	DWORD PTR _kk$53594[ebp], ecx
$LN24@generateBe:
	mov	edx, DWORD PTR _k$53593[ebp]
	push	edx
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _kk$53594[ebp], eax
	jge	$LN22@generateBe
; Line 1270
	mov	eax, DWORD PTR _kk$53594[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$53593[ebp]
	push	ecx
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ; btAlignedObjectArray<NodeLinks>::operator[]
	mov	ecx, eax
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _j$53598[ebp], edx
; Line 1271
	mov	eax, DWORD PTR _i$53588[ebp]
	cmp	eax, DWORD PTR _j$53598[ebp]
	je	SHORT $LN21@generateBe
; Line 1273
	mov	ecx, DWORD PTR _k$53593[ebp]
	imul	ecx, DWORD PTR _n$53419[ebp]
	add	ecx, DWORD PTR _i$53588[ebp]
	mov	edx, DWORD PTR _j$53598[ebp]
	imul	edx, DWORD PTR _n$53419[ebp]
	add	edx, DWORD PTR _k$53593[ebp]
	mov	eax, DWORD PTR _adj$53422[ebp]
	mov	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _adj$53422[ebp]
	add	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _sum$53600[ebp], ecx
; Line 1274
	cmp	DWORD PTR _sum$53600[ebp], 2
	je	SHORT $LN20@generateBe
	push	1274					; 000004faH
	push	OFFSET $SG53602
	call	_printf
	add	esp, 8
	int	3
$LN20@generateBe:
; Line 1275
	mov	ecx, DWORD PTR _j$53598[ebp]
	imul	ecx, DWORD PTR _n$53419[ebp]
	add	ecx, DWORD PTR _i$53588[ebp]
	mov	edx, DWORD PTR _adj$53422[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, DWORD PTR _sum$53600[ebp]
	jbe	SHORT $LN21@generateBe
; Line 1277
	mov	ecx, DWORD PTR _i$53588[ebp]
	imul	ecx, DWORD PTR _n$53419[ebp]
	add	ecx, DWORD PTR _j$53598[ebp]
	mov	edx, DWORD PTR _adj$53422[ebp]
	mov	eax, DWORD PTR _sum$53600[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _j$53598[ebp]
	imul	ecx, DWORD PTR _n$53419[ebp]
	add	ecx, DWORD PTR _i$53588[ebp]
	mov	edx, DWORD PTR _adj$53422[ebp]
	mov	eax, DWORD PTR _sum$53600[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN21@generateBe:
; Line 1281
	jmp	$LN23@generateBe
$LN22@generateBe:
; Line 1282
	jmp	$LN26@generateBe
$LN25@generateBe:
; Line 1283
	jmp	$LN29@generateBe
$LN28@generateBe:
; Line 1284
	lea	ecx, DWORD PTR _nodeLinks$53572[ebp]
	call	??1?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ ; btAlignedObjectArray<NodeLinks>::~btAlignedObjectArray<NodeLinks>
; Line 1285
	jmp	$LN18@generateBe
$LN36@generateBe:
; Line 1288
	mov	DWORD PTR _k$53605[ebp], 0
	jmp	SHORT $LN17@generateBe
$LN16@generateBe:
	mov	ecx, DWORD PTR _k$53605[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$53605[ebp], ecx
$LN17@generateBe:
	mov	edx, DWORD PTR _k$53605[ebp]
	cmp	edx, DWORD PTR _n$53419[ebp]
	jge	$LN18@generateBe
; Line 1290
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN14@generateBe
$LN13@generateBe:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN14@generateBe:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _n$53419[ebp]
	jge	$LN12@generateBe
; Line 1292
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	jmp	SHORT $LN11@generateBe
$LN10@generateBe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@generateBe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _n$53419[ebp]
	jge	SHORT $LN9@generateBe
; Line 1294
	mov	edx, DWORD PTR _k$53605[ebp]
	imul	edx, DWORD PTR _n$53419[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	imul	eax, DWORD PTR _n$53419[ebp]
	add	eax, DWORD PTR _k$53605[ebp]
	mov	ecx, DWORD PTR _adj$53422[ebp]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _adj$53422[ebp]
	add	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _sum$53615[ebp], edx
; Line 1295
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, DWORD PTR _n$53419[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _adj$53422[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	cmp	ecx, DWORD PTR _sum$53615[ebp]
	jbe	SHORT $LN8@generateBe
; Line 1297
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, DWORD PTR _n$53419[ebp]
	add	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _adj$53422[ebp]
	mov	ecx, DWORD PTR _sum$53615[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	imul	edx, DWORD PTR _n$53419[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _adj$53422[ebp]
	mov	ecx, DWORD PTR _sum$53615[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
$LN8@generateBe:
; Line 1299
	jmp	SHORT $LN10@generateBe
$LN9@generateBe:
; Line 1300
	jmp	$LN13@generateBe
$LN12@generateBe:
; Line 1301
	jmp	$LN16@generateBe
$LN18@generateBe:
; Line 1306
	mov	DWORD PTR _nlinks$53617[ebp], 0
; Line 1307
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@generateBe
$LN6@generateBe:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN7@generateBe:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _n$53419[ebp]
	jge	$LN5@generateBe
; Line 1309
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN4@generateBe
$LN3@generateBe:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@generateBe:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$53419[ebp]
	jge	SHORT $LN2@generateBe
; Line 1311
	mov	ecx, DWORD PTR _j$[ebp]
	imul	ecx, DWORD PTR _n$53419[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _adj$53422[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	cmp	eax, DWORD PTR _distance$[ebp]
	jne	SHORT $LN1@generateBe
; Line 1313
	push	0
	mov	ecx, DWORD PTR _mat$[ebp]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 1314
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	add	eax, 20					; 00000014H
	mov	DWORD PTR tv352[ebp], eax
	mov	ecx, DWORD PTR tv352[ebp]
	mov	edx, DWORD PTR [ecx]
	or	edx, 1
	mov	eax, DWORD PTR tv352[ebp]
	mov	DWORD PTR [eax], edx
; Line 1315
	mov	ecx, DWORD PTR _nlinks$53617[ebp]
	add	ecx, 1
	mov	DWORD PTR _nlinks$53617[ebp], ecx
$LN1@generateBe:
; Line 1317
	jmp	$LN3@generateBe
$LN2@generateBe:
; Line 1318
	jmp	$LN6@generateBe
$LN5@generateBe:
; Line 1319
	mov	edx, DWORD PTR _adj$53422[ebp]
	mov	DWORD PTR $T66518[ebp], edx
	mov	eax, DWORD PTR $T66518[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 1320
	mov	eax, DWORD PTR _nlinks$53617[ebp]
	jmp	SHORT $LN49@generateBe
$LN48@generateBe:
; Line 1322
	xor	eax, eax
$LN49@generateBe:
; Line 1323
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN55@generateBe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 156				; 0000009cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN55@generateBe:
	DD	3
	DD	$LN54@generateBe
$LN54@generateBe:
	DD	-56					; ffffffc8H
	DD	20					; 00000014H
	DD	$LN51@generateBe
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN52@generateBe
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN53@generateBe
$LN53@generateBe:
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	0
$LN52@generateBe:
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	0
$LN51@generateBe:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	76					; 0000004cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	0
?generateBendingConstraints@btSoftBody@@QAEHHPAUMaterial@1@@Z ENDP ; btSoftBody::generateBendingConstraints
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0NodeLinks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NodeLinks@@QAE@XZ PROC				; NodeLinks::NodeLinks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0NodeLinks@@QAE@XZ ENDP				; NodeLinks::NodeLinks
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1NodeLinks@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1NodeLinks@@QAE@XZ PROC				; NodeLinks::~NodeLinks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1NodeLinks@@QAE@XZ ENDP				; NodeLinks::~NodeLinks
_TEXT	ENDS
PUBLIC	??$btSwap@UFace@btSoftBody@@@@YAXAAUFace@btSoftBody@@0@Z ; btSwap<btSoftBody::Face>
PUBLIC	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
PUBLIC	?randomizeConstraints@btSoftBody@@QAEXXZ	; btSoftBody::randomizeConstraints
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?randomizeConstraints@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
_ni$ = -16						; size = 4
_i$ = -12						; size = 4
_seed$ = -8						; size = 4
_this$ = -4						; size = 4
?randomizeConstraints@btSoftBody@@QAEXXZ PROC		; btSoftBody::randomizeConstraints, COMDAT
; _this$ = ecx
; Line 1327
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1328
	mov	DWORD PTR _seed$[ebp], 243703		; 0003b7f7H
; Line 1332
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN6@randomizeC
$LN5@randomizeC:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@randomizeC:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN4@randomizeC
; Line 1334
	mov	edx, DWORD PTR _seed$[ebp]
	imul	edx, 1664525				; 0019660dH
	add	edx, 1013904223				; 3c6ef35fH
	mov	DWORD PTR _seed$[ebp], edx
	mov	eax, DWORD PTR _seed$[ebp]
	xor	edx, edx
	div	DWORD PTR _ni$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 1335
	jmp	SHORT $LN5@randomizeC
$LN4@randomizeC:
; Line 1336
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN3@randomizeC
$LN2@randomizeC:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@randomizeC:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN7@randomizeC
; Line 1338
	mov	eax, DWORD PTR _seed$[ebp]
	imul	eax, 1664525				; 0019660dH
	add	eax, 1013904223				; 3c6ef35fH
	mov	DWORD PTR _seed$[ebp], eax
	mov	eax, DWORD PTR _seed$[ebp]
	xor	edx, edx
	div	DWORD PTR _ni$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	push	eax
	call	??$btSwap@UFace@btSoftBody@@@@YAXAAUFace@btSoftBody@@0@Z ; btSwap<btSoftBody::Face>
	add	esp, 8
; Line 1339
	jmp	SHORT $LN2@randomizeC
$LN7@randomizeC:
; Line 1341
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?randomizeConstraints@btSoftBody@@QAEXXZ ENDP		; btSoftBody::randomizeConstraints
_TEXT	ENDS
PUBLIC	?remove@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::remove
PUBLIC	??_GCluster@btSoftBody@@QAEPAXI@Z		; btSoftBody::Cluster::`scalar deleting destructor'
PUBLIC	?releaseCluster@btSoftBody@@QAEXH@Z		; btSoftBody::releaseCluster
EXTRN	?remove@btDbvt@@QAEXPAUbtDbvtNode@@@Z:PROC	; btDbvt::remove
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?releaseCluster@btSoftBody@@QAEXH@Z
_TEXT	SEGMENT
_c$ = -12						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?releaseCluster@btSoftBody@@QAEXH@Z PROC		; btSoftBody::releaseCluster, COMDAT
; _this$ = ecx
; Line 1345
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1346
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _c$[ebp], ecx
; Line 1347
	mov	edx, DWORD PTR _c$[ebp]
	cmp	DWORD PTR [edx+368], 0
	je	SHORT $LN1@releaseClu
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1084				; 0000043cH
	call	?remove@btDbvt@@QAEXPAUbtDbvtNode@@@Z	; btDbvt::remove
$LN1@releaseClu:
; Line 1348
	push	0
	mov	ecx, DWORD PTR _c$[ebp]
	call	??_GCluster@btSoftBody@@QAEPAXI@Z
; Line 1349
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 1350
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?remove@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::remove
; Line 1351
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@releaseClu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN6@releaseClu:
	DD	1
	DD	$LN5@releaseClu
$LN5@releaseClu:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@releaseClu
$LN4@releaseClu:
	DB	99					; 00000063H
	DB	0
?releaseCluster@btSoftBody@@QAEXH@Z ENDP		; btSoftBody::releaseCluster
_TEXT	ENDS
PUBLIC	??1Cluster@btSoftBody@@QAE@XZ			; btSoftBody::Cluster::~Cluster
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCluster@btSoftBody@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCluster@btSoftBody@@QAEPAXI@Z PROC			; btSoftBody::Cluster::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Cluster@btSoftBody@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCluster@btSoftBody@@QAEPAXI@Z ENDP			; btSoftBody::Cluster::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Node *>::~btAlignedObjectArray<btSoftBody::Node *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1Cluster@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Cluster@btSoftBody@@QAE@XZ PROC			; btSoftBody::Cluster::~Cluster, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Node *>::~btAlignedObjectArray<btSoftBody::Node *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$btAlignedObjectArray@M@@QAE@XZ	; btAlignedObjectArray<float>::~btAlignedObjectArray<float>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Cluster@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Cluster::~Cluster
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?releaseClusters@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?releaseClusters@btSoftBody@@QAEXXZ PROC		; btSoftBody::releaseClusters, COMDAT
; _this$ = ecx
; Line 1355
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN2@releaseClu@2:
; Line 1356
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	test	eax, eax
	jle	SHORT $LN3@releaseClu@2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?releaseCluster@btSoftBody@@QAEXH@Z	; btSoftBody::releaseCluster
	jmp	SHORT $LN2@releaseClu@2
$LN3@releaseClu@2:
; Line 1357
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?releaseClusters@btSoftBody@@QAEXXZ ENDP		; btSoftBody::releaseClusters
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z	; btAlignedObjectArray<bool>::operator[]
PUBLIC	?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z	; btAlignedObjectArray<bool>::resize
PUBLIC	?updateClusters@btSoftBody@@QAEXXZ		; btSoftBody::updateClusters
PUBLIC	?initializeClusters@btSoftBody@@QAEXXZ		; btSoftBody::initializeClusters
PUBLIC	??$btSwap@PAUCluster@btSoftBody@@@@YAXAAPAUCluster@btSoftBody@@0@Z ; btSwap<btSoftBody::Cluster *>
PUBLIC	?push_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::push_back
PUBLIC	?reserve@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Node *>::reserve
PUBLIC	?findLinearSearch@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::findLinearSearch
PUBLIC	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z	; btAlignedObjectArray<int>::resize
PUBLIC	?resize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXHABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::resize
PUBLIC	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
PUBLIC	??$btMin@M@@YAABMABM0@Z				; btMin<float>
PUBLIC	__real@41800000
PUBLIC	?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::push_back
PUBLIC	??0Cluster@btSoftBody@@QAE@XZ			; btSoftBody::Cluster::Cluster
PUBLIC	?resize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::resize
PUBLIC	??$btMin@H@@YAABHABH0@Z				; btMin<int>
PUBLIC	__$ArrayPad$
PUBLIC	?generateClusters@btSoftBody@@QAEHHH@Z		; btSoftBody::generateClusters
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?generateClusters@btSoftBody@@QAEHHH@Z
_TEXT	SEGMENT
tv623 = -516						; size = 4
tv571 = -512						; size = 4
tv540 = -508						; size = 4
tv488 = -504						; size = 4
tv292 = -500						; size = 4
tv860 = -496						; size = 4
tv823 = -492						; size = 4
tv93 = -488						; size = 4
$T66579 = -481						; size = 1
$T66576 = -480						; size = 4
$T66575 = -476						; size = 4
$T66572 = -472						; size = 4
$T66571 = -468						; size = 4
$T66570 = -464						; size = 4
$T66567 = -460						; size = 4
$T66566 = -456						; size = 4
$T66565 = -452						; size = 4
$T66564 = -448						; size = 4
$T66563 = -444						; size = 4
$T66562 = -440						; size = 4
$T66559 = -436						; size = 4
$T66558 = -432						; size = 4
$T66557 = -428						; size = 4
$T66556 = -424						; size = 4
$T66555 = -420						; size = 4
$T66554 = -416						; size = 4
$T66553 = -412						; size = 4
$T66552 = -408						; size = 4
$T66551 = -404						; size = 4
$T66550 = -400						; size = 4
$T66549 = -396						; size = 4
$T66546 = -392						; size = 4
$T66545 = -388						; size = 4
$T66544 = -384						; size = 4
_j$53854 = -380						; size = 4
_i$53850 = -376						; size = 4
_clb$53849 = -372					; size = 4
_cla$53848 = -368					; size = 4
_connected$53847 = -361					; size = 1
_c1$53843 = -360					; size = 4
_c0$53839 = -356					; size = 4
_j$53832 = -352						; size = 4
_j$53815 = -348						; size = 4
_i$53787 = -344						; size = 4
_pmaster$53781 = -336					; size = 4
_kid$53775 = -328					; size = 4
_q$53771 = -324						; size = 4
_cid$53770 = -320					; size = 4
_j$53766 = -316						; size = 4
_idx$53765 = -308					; size = 12
_j$53758 = -292						; size = 4
_cids$53753 = -284					; size = 20
_d$53748 = -260						; size = 4
_j$53744 = -256						; size = 4
_kdist$53743 = -252					; size = 4
_kbest$53742 = -248					; size = 4
_nx$53741 = -240					; size = 16
$T53735 = -208						; size = 16
$T53734 = -192						; size = 16
$T53733 = -176						; size = 16
$T53732 = -160						; size = 16
_j$53725 = -136						; size = 4
_c$53721 = -128						; size = 16
_i$53717 = -100						; size = 4
_w$53713 = -92						; size = 4
_iterations$53709 = -84					; size = 4
_changed$53708 = -77					; size = 1
_slope$53707 = -76					; size = 4
_i$53700 = -72						; size = 4
_cog$53696 = -64					; size = 16
_centers$53695 = -36					; size = 20
_i$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_k$ = 8							; size = 4
_maxiterations$ = 12					; size = 4
?generateClusters@btSoftBody@@QAEHHH@Z PROC		; btSoftBody::generateClusters, COMDAT
; _this$ = ecx
; Line 1361
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1363
	mov	ecx, DWORD PTR _this$[ebp]
	call	?releaseClusters@btSoftBody@@QAEXXZ	; btSoftBody::releaseClusters
; Line 1364
	mov	DWORD PTR $T66544[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR $T66545[ebp], eax
	lea	eax, DWORD PTR $T66544[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66545[ebp]
	push	ecx
	lea	edx, DWORD PTR _k$[ebx]
	push	edx
	call	??$btMin@H@@YAABHABH0@Z			; btMin<int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?resize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::resize
; Line 1365
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN85@generateCl
$LN84@generateCl:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN85@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN83@generateCl
; Line 1367
	push	16					; 00000010H
	push	416					; 000001a0H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	push	eax
	push	416					; 000001a0H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66546[ebp], eax
	cmp	DWORD PTR $T66546[ebp], 0
	je	SHORT $LN88@generateCl
	mov	ecx, DWORD PTR $T66546[ebp]
	call	??0Cluster@btSoftBody@@QAE@XZ		; btSoftBody::Cluster::Cluster
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN89@generateCl
$LN88@generateCl:
	mov	DWORD PTR tv93[ebp], 0
$LN89@generateCl:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR tv93[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1368
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	BYTE PTR [eax+397], 1
; Line 1369
	jmp	$LN84@generateCl
$LN83@generateCl:
; Line 1370
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	mov	DWORD PTR _k$[ebx], eax
; Line 1371
	cmp	DWORD PTR _k$[ebx], 0
	jle	$LN82@generateCl
; Line 1374
	lea	ecx, DWORD PTR _centers$53695[ebp]
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
; Line 1375
	fldz
	fstp	DWORD PTR $T66549[ebp]
	fldz
	fstp	DWORD PTR $T66550[ebp]
	fldz
	fstp	DWORD PTR $T66551[ebp]
	lea	ecx, DWORD PTR $T66549[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66550[ebp]
	push	edx
	lea	eax, DWORD PTR $T66551[ebp]
	push	eax
	lea	ecx, DWORD PTR _cog$53696[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 1377
	mov	DWORD PTR _i$53700[ebp], 0
	jmp	SHORT $LN81@generateCl
$LN80@generateCl:
	mov	ecx, DWORD PTR _i$53700[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$53700[ebp], ecx
$LN81@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$53700[ebp], eax
	jge	SHORT $LN79@generateCl
; Line 1379
	mov	edx, DWORD PTR _i$53700[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _cog$53696[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1380
	mov	eax, DWORD PTR _i$53700[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR $T66552[ebp], eax
	lea	ecx, DWORD PTR $T66552[ebp]
	push	ecx
	mov	esi, DWORD PTR _i$53700[ebp]
	imul	esi, 29873				; 000074b1H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	mov	ecx, eax
	mov	eax, esi
	cdq
	idiv	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::push_back
; Line 1381
	jmp	$LN80@generateCl
$LN79@generateCl:
; Line 1382
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR tv823[ebp], eax
	fild	DWORD PTR tv823[ebp]
	fstp	DWORD PTR $T66553[ebp]
	lea	edx, DWORD PTR $T66553[ebp]
	push	edx
	lea	ecx, DWORD PTR _cog$53696[ebp]
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 1383
	lea	eax, DWORD PTR _cog$53696[ebp]
	push	eax
	mov	ecx, DWORD PTR _k$[ebx]
	push	ecx
	lea	ecx, DWORD PTR _centers$53695[ebp]
	call	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
; Line 1385
	fld	DWORD PTR __real@41800000
	fstp	DWORD PTR _slope$53707[ebp]
; Line 1387
	mov	DWORD PTR _iterations$53709[ebp], 0
$LN78@generateCl:
; Line 1390
	fild	DWORD PTR _iterations$53709[ebp]
	fdiv	DWORD PTR _slope$53707[ebp]
	fstp	DWORD PTR $T66554[ebp]
	fld1
	fstp	DWORD PTR $T66555[ebp]
	lea	edx, DWORD PTR $T66554[ebp]
	push	edx
	lea	eax, DWORD PTR $T66555[ebp]
	push	eax
	call	??$btMin@M@@YAABMABM0@Z			; btMin<float>
	add	esp, 8
	fld	DWORD PTR __real@40000000
	fsub	DWORD PTR [eax]
	fstp	DWORD PTR _w$53713[ebp]
; Line 1391
	mov	BYTE PTR _changed$53708[ebp], 0
; Line 1392
	mov	ecx, DWORD PTR _iterations$53709[ebp]
	add	ecx, 1
	mov	DWORD PTR _iterations$53709[ebp], ecx
; Line 1395
	mov	DWORD PTR _i$53717[ebp], 0
	jmp	SHORT $LN75@generateCl
$LN74@generateCl:
	mov	edx, DWORD PTR _i$53717[ebp]
	add	edx, 1
	mov	DWORD PTR _i$53717[ebp], edx
$LN75@generateCl:
	mov	eax, DWORD PTR _i$53717[ebp]
	cmp	eax, DWORD PTR _k$[ebx]
	jge	$LN73@generateCl
; Line 1397
	fldz
	fstp	DWORD PTR $T66556[ebp]
	fldz
	fstp	DWORD PTR $T66557[ebp]
	fldz
	fstp	DWORD PTR $T66558[ebp]
	lea	ecx, DWORD PTR $T66556[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66557[ebp]
	push	edx
	lea	eax, DWORD PTR $T66558[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$53721[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 1398
	mov	DWORD PTR _j$53725[ebp], 0
	jmp	SHORT $LN72@generateCl
$LN71@generateCl:
	mov	ecx, DWORD PTR _j$53725[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$53725[ebp], ecx
$LN72@generateCl:
	mov	edx, DWORD PTR _i$53717[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _j$53725[ebp], eax
	jge	SHORT $LN70@generateCl
; Line 1400
	mov	eax, DWORD PTR _j$53725[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$53717[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	edx, DWORD PTR [eax]
	add	edx, 16					; 00000010H
	push	edx
	lea	ecx, DWORD PTR _c$53721[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 1401
	jmp	SHORT $LN71@generateCl
$LN70@generateCl:
; Line 1402
	mov	eax, DWORD PTR _i$53717[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	test	eax, eax
	je	$LN69@generateCl
; Line 1404
	mov	ecx, DWORD PTR _i$53717[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	mov	DWORD PTR tv860[ebp], eax
	fild	DWORD PTR tv860[ebp]
	fstp	DWORD PTR $T66559[ebp]
	lea	edx, DWORD PTR $T66559[ebp]
	push	edx
	lea	ecx, DWORD PTR _c$53721[ebp]
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 1405
	lea	eax, DWORD PTR _w$53713[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$53717[ebp]
	push	ecx
	lea	ecx, DWORD PTR _centers$53695[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	lea	edx, DWORD PTR _c$53721[ebp]
	push	edx
	lea	eax, DWORD PTR $T53732[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T53733[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$53717[ebp]
	push	edx
	lea	ecx, DWORD PTR _centers$53695[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	lea	eax, DWORD PTR $T53734[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _c$53721[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$53721[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$53721[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _c$53721[ebp+12], edx
; Line 1406
	mov	eax, DWORD PTR _i$53717[ebp]
	push	eax
	lea	ecx, DWORD PTR _centers$53695[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	lea	ecx, DWORD PTR _c$53721[ebp]
	push	ecx
	lea	edx, DWORD PTR $T53735[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fcomp	DWORD PTR __real@34000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN90@generateCl
	mov	DWORD PTR tv292[ebp], 1
	jmp	SHORT $LN91@generateCl
$LN90@generateCl:
	mov	DWORD PTR tv292[ebp], 0
$LN91@generateCl:
	movzx	eax, BYTE PTR _changed$53708[ebp]
	or	eax, DWORD PTR tv292[ebp]
	mov	BYTE PTR _changed$53708[ebp], al
; Line 1407
	mov	ecx, DWORD PTR _i$53717[ebp]
	push	ecx
	lea	ecx, DWORD PTR _centers$53695[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	edx, DWORD PTR _c$53721[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _c$53721[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _c$53721[ebp+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _c$53721[ebp+12]
	mov	DWORD PTR [eax+12], ecx
; Line 1408
	mov	DWORD PTR $T66562[ebp], 0
	lea	edx, DWORD PTR $T66562[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _i$53717[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?resize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXHABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::resize
$LN69@generateCl:
; Line 1410
	jmp	$LN74@generateCl
$LN73@generateCl:
; Line 1411
	mov	DWORD PTR _i$53717[ebp], 0
	jmp	SHORT $LN68@generateCl
$LN67@generateCl:
	mov	ecx, DWORD PTR _i$53717[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$53717[ebp], ecx
$LN68@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$53717[ebp], eax
	jge	$LN66@generateCl
; Line 1413
	mov	edx, DWORD PTR _i$53717[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _nx$53741[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _nx$53741[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _nx$53741[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _nx$53741[ebp+12], edx
; Line 1414
	mov	DWORD PTR _kbest$53742[ebp], 0
; Line 1415
	lea	eax, DWORD PTR _nx$53741[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _centers$53695[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	call	?ClusterMetric@@YAMABVbtVector3@@0@Z	; ClusterMetric
	add	esp, 8
	fstp	DWORD PTR _kdist$53743[ebp]
; Line 1416
	mov	DWORD PTR _j$53744[ebp], 1
	jmp	SHORT $LN65@generateCl
$LN64@generateCl:
	mov	ecx, DWORD PTR _j$53744[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$53744[ebp], ecx
$LN65@generateCl:
	mov	edx, DWORD PTR _j$53744[ebp]
	cmp	edx, DWORD PTR _k$[ebx]
	jge	SHORT $LN63@generateCl
; Line 1418
	lea	eax, DWORD PTR _nx$53741[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$53744[ebp]
	push	ecx
	lea	ecx, DWORD PTR _centers$53695[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	call	?ClusterMetric@@YAMABVbtVector3@@0@Z	; ClusterMetric
	add	esp, 8
	fstp	DWORD PTR _d$53748[ebp]
; Line 1419
	fld	DWORD PTR _kdist$53743[ebp]
	fcomp	DWORD PTR _d$53748[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN62@generateCl
; Line 1421
	mov	edx, DWORD PTR _j$53744[ebp]
	mov	DWORD PTR _kbest$53742[ebp], edx
; Line 1422
	fld	DWORD PTR _d$53748[ebp]
	fstp	DWORD PTR _kdist$53743[ebp]
$LN62@generateCl:
; Line 1424
	jmp	SHORT $LN64@generateCl
$LN63@generateCl:
; Line 1425
	mov	eax, DWORD PTR _i$53717[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR $T66563[ebp], eax
	lea	ecx, DWORD PTR $T66563[ebp]
	push	ecx
	mov	edx, DWORD PTR _kbest$53742[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::push_back
; Line 1426
	jmp	$LN67@generateCl
$LN66@generateCl:
; Line 1428
	movzx	eax, BYTE PTR _changed$53708[ebp]
	test	eax, eax
	je	SHORT $LN61@generateCl
	mov	ecx, DWORD PTR _iterations$53709[ebp]
	cmp	ecx, DWORD PTR _maxiterations$[ebx]
	jl	$LN78@generateCl
$LN61@generateCl:
; Line 1430
	lea	ecx, DWORD PTR _cids$53753[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
; Line 1431
	mov	DWORD PTR $T66564[ebp], -1
	lea	edx, DWORD PTR $T66564[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	lea	ecx, DWORD PTR _cids$53753[ebp]
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
; Line 1432
	mov	DWORD PTR _i$53700[ebp], 0
	jmp	SHORT $LN60@generateCl
$LN59@generateCl:
	mov	eax, DWORD PTR _i$53700[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53700[ebp], eax
$LN60@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$53700[ebp], eax
	jge	$LN58@generateCl
; Line 1434
	mov	DWORD PTR _j$53758[ebp], 0
	jmp	SHORT $LN57@generateCl
$LN56@generateCl:
	mov	ecx, DWORD PTR _j$53758[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$53758[ebp], ecx
$LN57@generateCl:
	mov	edx, DWORD PTR _i$53700[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _j$53758[ebp], eax
	jge	SHORT $LN55@generateCl
; Line 1436
	mov	eax, DWORD PTR _j$53758[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$53700[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR [esi]
	sub	edx, eax
	sar	edx, 7
	push	edx
	lea	ecx, DWORD PTR _cids$53753[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR _i$53700[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1437
	jmp	$LN56@generateCl
$LN55@generateCl:
; Line 1438
	jmp	$LN59@generateCl
$LN58@generateCl:
; Line 1439
	mov	DWORD PTR _i$53700[ebp], 0
	jmp	SHORT $LN54@generateCl
$LN53@generateCl:
	mov	edx, DWORD PTR _i$53700[ebp]
	add	edx, 1
	mov	DWORD PTR _i$53700[ebp], edx
$LN54@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$53700[ebp], eax
	jge	$LN52@generateCl
; Line 1441
	mov	eax, DWORD PTR _i$53700[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR _idx$53765[ebp], ecx
; Line 1442
	mov	edx, DWORD PTR _i$53700[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR _idx$53765[ebp+4], ecx
; Line 1444
	mov	edx, DWORD PTR _i$53700[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi+16]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR _idx$53765[ebp+8], ecx
; Line 1445
	mov	DWORD PTR _j$53766[ebp], 0
	jmp	SHORT $LN51@generateCl
$LN50@generateCl:
	mov	edx, DWORD PTR _j$53766[ebp]
	add	edx, 1
	mov	DWORD PTR _j$53766[ebp], edx
$LN51@generateCl:
	cmp	DWORD PTR _j$53766[ebp], 3
	jge	$LN49@generateCl
; Line 1447
	mov	eax, DWORD PTR _j$53766[ebp]
	mov	ecx, DWORD PTR _idx$53765[ebp+eax*4]
	push	ecx
	lea	ecx, DWORD PTR _cids$53753[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _cid$53770[ebp], edx
; Line 1448
	mov	DWORD PTR _q$53771[ebp], 1
	jmp	SHORT $LN48@generateCl
$LN47@generateCl:
	mov	eax, DWORD PTR _q$53771[ebp]
	add	eax, 1
	mov	DWORD PTR _q$53771[ebp], eax
$LN48@generateCl:
	cmp	DWORD PTR _q$53771[ebp], 3
	jge	$LN46@generateCl
; Line 1450
	mov	eax, DWORD PTR _j$53766[ebp]
	add	eax, DWORD PTR _q$53771[ebp]
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	edx, DWORD PTR _idx$53765[ebp+edx*4]
	mov	DWORD PTR _kid$53775[ebp], edx
; Line 1451
	mov	eax, DWORD PTR _kid$53775[ebp]
	push	eax
	lea	ecx, DWORD PTR _cids$53753[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _cid$53770[ebp]
	je	$LN44@generateCl
; Line 1453
	mov	edx, DWORD PTR _kid$53775[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR $T66565[ebp], eax
	lea	eax, DWORD PTR $T66565[ebp]
	push	eax
	mov	ecx, DWORD PTR _cid$53770[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?findLinearSearch@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::findLinearSearch
	mov	esi, eax
	mov	edx, DWORD PTR _cid$53770[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	esi, eax
	jne	SHORT $LN44@generateCl
; Line 1455
	mov	eax, DWORD PTR _kid$53775[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR $T66566[ebp], eax
	lea	ecx, DWORD PTR $T66566[ebp]
	push	ecx
	mov	edx, DWORD PTR _cid$53770[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::push_back
$LN44@generateCl:
; Line 1458
	jmp	$LN47@generateCl
$LN46@generateCl:
; Line 1459
	jmp	$LN50@generateCl
$LN49@generateCl:
; Line 1460
	jmp	$LN53@generateCl
$LN52@generateCl:
; Line 1462
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	eax, 1
	jle	$LN43@generateCl
; Line 1464
	push	16					; 00000010H
	push	416					; 000001a0H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	push	eax
	push	416					; 000001a0H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66567[ebp], eax
	cmp	DWORD PTR $T66567[ebp], 0
	je	SHORT $LN92@generateCl
	mov	ecx, DWORD PTR $T66567[ebp]
	call	??0Cluster@btSoftBody@@QAE@XZ		; btSoftBody::Cluster::Cluster
	mov	DWORD PTR tv488[ebp], eax
	jmp	SHORT $LN93@generateCl
$LN92@generateCl:
	mov	DWORD PTR tv488[ebp], 0
$LN93@generateCl:
	mov	eax, DWORD PTR tv488[ebp]
	mov	DWORD PTR _pmaster$53781[ebp], eax
; Line 1465
	mov	ecx, DWORD PTR _pmaster$53781[ebp]
	mov	BYTE PTR [ecx+397], 0
; Line 1466
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	mov	ecx, DWORD PTR _pmaster$53781[ebp]
	add	ecx, 20					; 00000014H
	call	?reserve@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Node *>::reserve
; Line 1467
	mov	DWORD PTR _i$53787[ebp], 0
	jmp	SHORT $LN42@generateCl
$LN41@generateCl:
	mov	edx, DWORD PTR _i$53787[ebp]
	add	edx, 1
	mov	DWORD PTR _i$53787[ebp], edx
$LN42@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$53787[ebp], eax
	jge	SHORT $LN40@generateCl
	mov	eax, DWORD PTR _i$53787[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR $T66570[ebp], eax
	lea	ecx, DWORD PTR $T66570[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pmaster$53781[ebp]
	add	ecx, 20					; 00000014H
	call	?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::push_back
	jmp	SHORT $LN41@generateCl
$LN40@generateCl:
; Line 1468
	lea	edx, DWORD PTR _pmaster$53781[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?push_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::push_back
; Line 1469
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	push	eax
	call	??$btSwap@PAUCluster@btSoftBody@@@@YAXAAPAUCluster@btSoftBody@@0@Z ; btSwap<btSoftBody::Cluster *>
	add	esp, 8
$LN43@generateCl:
; Line 1472
	mov	DWORD PTR _i$53700[ebp], 0
	jmp	SHORT $LN39@generateCl
$LN38@generateCl:
	mov	eax, DWORD PTR _i$53700[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53700[ebp], eax
$LN39@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$53700[ebp], eax
	jge	SHORT $LN37@generateCl
; Line 1474
	mov	ecx, DWORD PTR _i$53700[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	test	eax, eax
	jne	SHORT $LN36@generateCl
; Line 1476
	mov	edx, DWORD PTR _i$53700[ebp]
	mov	DWORD PTR tv540[ebp], edx
	mov	eax, DWORD PTR _i$53700[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$53700[ebp], eax
	mov	ecx, DWORD PTR tv540[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?releaseCluster@btSoftBody@@QAEXH@Z	; btSoftBody::releaseCluster
$LN36@generateCl:
; Line 1478
	jmp	SHORT $LN38@generateCl
$LN37@generateCl:
; Line 1479
	lea	ecx, DWORD PTR _cids$53753[ebp]
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	lea	ecx, DWORD PTR _centers$53695[ebp]
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
; Line 1480
	jmp	$LN18@generateCl
$LN82@generateCl:
; Line 1483
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	test	eax, eax
	je	$LN34@generateCl
; Line 1485
	mov	DWORD PTR $T66571[ebp], 0
	lea	edx, DWORD PTR $T66571[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?resize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::resize
; Line 1486
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN33@generateCl
$LN32@generateCl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN33@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN31@generateCl
; Line 1488
	push	16					; 00000010H
	push	416					; 000001a0H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	push	eax
	push	416					; 000001a0H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66572[ebp], eax
	cmp	DWORD PTR $T66572[ebp], 0
	je	SHORT $LN94@generateCl
	mov	ecx, DWORD PTR $T66572[ebp]
	call	??0Cluster@btSoftBody@@QAE@XZ		; btSoftBody::Cluster::Cluster
	mov	DWORD PTR tv571[ebp], eax
	jmp	SHORT $LN95@generateCl
$LN94@generateCl:
	mov	DWORD PTR tv571[ebp], 0
$LN95@generateCl:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR tv571[ebp]
	mov	DWORD PTR [eax], edx
; Line 1489
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+397], 1
; Line 1490
	jmp	$LN32@generateCl
$LN31@generateCl:
; Line 1491
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@generateCl
$LN29@generateCl:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN30@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN28@generateCl
; Line 1493
	mov	DWORD PTR _j$53815[ebp], 0
	jmp	SHORT $LN27@generateCl
$LN26@generateCl:
	mov	eax, DWORD PTR _j$53815[ebp]
	add	eax, 1
	mov	DWORD PTR _j$53815[ebp], eax
$LN27@generateCl:
	cmp	DWORD PTR _j$53815[ebp], 4
	jge	SHORT $LN25@generateCl
; Line 1495
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	edx, DWORD PTR _j$53815[ebp]
	lea	eax, DWORD PTR [eax+edx*4+8]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::push_back
; Line 1496
	jmp	SHORT $LN26@generateCl
$LN25@generateCl:
; Line 1497
	jmp	SHORT $LN29@generateCl
$LN28@generateCl:
; Line 1500
	jmp	$LN18@generateCl
$LN34@generateCl:
; Line 1502
	mov	DWORD PTR $T66575[ebp], 0
	lea	edx, DWORD PTR $T66575[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?resize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::resize
; Line 1503
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@generateCl
$LN22@generateCl:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN21@generateCl
; Line 1505
	push	16					; 00000010H
	push	416					; 000001a0H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	push	eax
	push	416					; 000001a0H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T66576[ebp], eax
	cmp	DWORD PTR $T66576[ebp], 0
	je	SHORT $LN96@generateCl
	mov	ecx, DWORD PTR $T66576[ebp]
	call	??0Cluster@btSoftBody@@QAE@XZ		; btSoftBody::Cluster::Cluster
	mov	DWORD PTR tv623[ebp], eax
	jmp	SHORT $LN97@generateCl
$LN96@generateCl:
	mov	DWORD PTR tv623[ebp], 0
$LN97@generateCl:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR tv623[ebp]
	mov	DWORD PTR [eax], edx
; Line 1506
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+397], 1
; Line 1507
	jmp	$LN22@generateCl
$LN21@generateCl:
; Line 1509
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@generateCl
$LN19@generateCl:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN20@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN18@generateCl
; Line 1511
	mov	DWORD PTR _j$53832[ebp], 0
	jmp	SHORT $LN17@generateCl
$LN16@generateCl:
	mov	eax, DWORD PTR _j$53832[ebp]
	add	eax, 1
	mov	DWORD PTR _j$53832[ebp], eax
$LN17@generateCl:
	cmp	DWORD PTR _j$53832[ebp], 3
	jge	SHORT $LN15@generateCl
; Line 1513
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$53832[ebp]
	lea	eax, DWORD PTR [eax+edx*4+8]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::push_back
; Line 1514
	jmp	SHORT $LN16@generateCl
$LN15@generateCl:
; Line 1515
	jmp	SHORT $LN19@generateCl
$LN18@generateCl:
; Line 1519
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	test	eax, eax
	je	$LN11@generateCl
; Line 1521
	mov	ecx, DWORD PTR _this$[ebp]
	call	?initializeClusters@btSoftBody@@QAEXXZ	; btSoftBody::initializeClusters
; Line 1522
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateClusters@btSoftBody@@QAEXXZ	; btSoftBody::updateClusters
; Line 1526
	mov	BYTE PTR $T66579[ebp], 0
	lea	edx, DWORD PTR $T66579[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	imul	esi, eax
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1164				; 0000048cH
	call	?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z ; btAlignedObjectArray<bool>::resize
; Line 1528
	mov	DWORD PTR _c0$53839[ebp], 0
	jmp	SHORT $LN13@generateCl
$LN12@generateCl:
	mov	eax, DWORD PTR _c0$53839[ebp]
	add	eax, 1
	mov	DWORD PTR _c0$53839[ebp], eax
$LN13@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _c0$53839[ebp], eax
	jge	$LN11@generateCl
; Line 1530
	mov	ecx, DWORD PTR _c0$53839[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _c0$53839[ebp]
	mov	DWORD PTR [edx+400], eax
; Line 1531
	mov	DWORD PTR _c1$53843[ebp], 0
	jmp	SHORT $LN10@generateCl
$LN9@generateCl:
	mov	ecx, DWORD PTR _c1$53843[ebp]
	add	ecx, 1
	mov	DWORD PTR _c1$53843[ebp], ecx
$LN10@generateCl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _c1$53843[ebp], eax
	jge	$LN8@generateCl
; Line 1534
	mov	BYTE PTR _connected$53847[ebp], 0
; Line 1535
	mov	edx, DWORD PTR _c0$53839[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _cla$53848[ebp], eax
; Line 1536
	mov	ecx, DWORD PTR _c1$53843[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _clb$53849[ebp], edx
; Line 1537
	mov	DWORD PTR _i$53850[ebp], 0
	jmp	SHORT $LN7@generateCl
$LN6@generateCl:
	mov	eax, DWORD PTR _i$53850[ebp]
	add	eax, 1
	mov	DWORD PTR _i$53850[ebp], eax
$LN7@generateCl:
	movzx	ecx, BYTE PTR _connected$53847[ebp]
	test	ecx, ecx
	jne	$LN5@generateCl
	mov	ecx, DWORD PTR _cla$53848[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _i$53850[ebp], eax
	jge	SHORT $LN5@generateCl
; Line 1539
	mov	DWORD PTR _j$53854[ebp], 0
	jmp	SHORT $LN4@generateCl
$LN3@generateCl:
	mov	edx, DWORD PTR _j$53854[ebp]
	add	edx, 1
	mov	DWORD PTR _j$53854[ebp], edx
$LN4@generateCl:
	mov	ecx, DWORD PTR _clb$53849[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _j$53854[ebp], eax
	jge	SHORT $LN2@generateCl
; Line 1541
	mov	eax, DWORD PTR _i$53850[ebp]
	push	eax
	mov	ecx, DWORD PTR _cla$53848[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _j$53854[ebp]
	push	ecx
	mov	ecx, DWORD PTR _clb$53849[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	edx, DWORD PTR [esi]
	cmp	edx, DWORD PTR [eax]
	jne	SHORT $LN1@generateCl
; Line 1543
	mov	BYTE PTR _connected$53847[ebp], 1
; Line 1544
	jmp	SHORT $LN2@generateCl
$LN1@generateCl:
; Line 1546
	jmp	SHORT $LN3@generateCl
$LN2@generateCl:
; Line 1547
	jmp	$LN6@generateCl
$LN5@generateCl:
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	imul	eax, DWORD PTR _c1$53843[ebp]
	add	eax, DWORD PTR _c0$53839[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1164				; 0000048cH
	call	??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z ; btAlignedObjectArray<bool>::operator[]
	mov	cl, BYTE PTR _connected$53847[ebp]
	mov	BYTE PTR [eax], cl
; Line 1549
	jmp	$LN9@generateCl
$LN8@generateCl:
; Line 1550
	jmp	$LN12@generateCl
$LN11@generateCl:
; Line 1554
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
; Line 1555
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN107@generateCl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	3
$LN107@generateCl:
	DD	8
	DD	$LN106@generateCl
$LN106@generateCl:
	DD	-36					; ffffffdcH
	DD	20					; 00000014H
	DD	$LN98@generateCl
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN99@generateCl
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN100@generateCl
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN101@generateCl
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN102@generateCl
	DD	-284					; fffffee4H
	DD	20					; 00000014H
	DD	$LN103@generateCl
	DD	-308					; fffffeccH
	DD	12					; 0000000cH
	DD	$LN104@generateCl
	DD	-336					; fffffeb0H
	DD	4
	DD	$LN105@generateCl
$LN105@generateCl:
	DB	112					; 00000070H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN104@generateCl:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN103@generateCl:
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN102@generateCl:
	DB	110					; 0000006eH
	DB	120					; 00000078H
	DB	0
$LN101@generateCl:
	DB	99					; 00000063H
	DB	0
$LN100@generateCl:
	DB	119					; 00000077H
	DB	0
$LN99@generateCl:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	0
$LN98@generateCl:
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
?generateClusters@btSoftBody@@QAEHHH@Z ENDP		; btSoftBody::generateClusters
_TEXT	ENDS
PUBLIC	__real@3c23d70a
PUBLIC	__real@42c80000
PUBLIC	??0?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Node *>::btAlignedObjectArray<btSoftBody::Node *>
;	COMDAT __real@3c23d70a
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0Cluster@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Cluster@btSoftBody@@QAE@XZ PROC			; btSoftBody::Cluster::Cluster, COMDAT
; _this$ = ecx
; Line 352
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedObjectArray@M@@QAE@XZ	; btAlignedObjectArray<float>::btAlignedObjectArray<float>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ ; btAlignedObjectArray<btSoftBody::Node *>::btAlignedObjectArray<btSoftBody::Node *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 256				; 00000100H
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+368], 0
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+372]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+376]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+380]
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+384]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR [ecx+388]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3c23d70a
	fstp	DWORD PTR [edx+392]
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+396], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Cluster@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Cluster::Cluster
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClusterMetric@@YAMABVbtVector3@@0@Z
_TEXT	SEGMENT
tv138 = -44						; size = 4
tv136 = -40						; size = 4
_d$ = -32						; size = 16
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?ClusterMetric@@YAMABVbtVector3@@0@Z PROC		; ClusterMetric, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 236
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 237
	mov	eax, DWORD PTR _y$[ebx]
	push	eax
	mov	ecx, DWORD PTR _x$[ebx]
	push	ecx
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 238
	lea	ecx, DWORD PTR _d$[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	lea	ecx, DWORD PTR _d$[ebp]
	fstp	DWORD PTR tv136[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	push	ecx
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fadd	DWORD PTR tv136[ebp]
	lea	ecx, DWORD PTR _d$[ebp]
	fstp	DWORD PTR tv138[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fadd	DWORD PTR tv138[ebp]
; Line 239
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ClusterMet
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@ClusterMet:
	DD	1
	DD	$LN4@ClusterMet
$LN4@ClusterMet:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@ClusterMet
$LN3@ClusterMet:
	DB	100					; 00000064H
	DB	0
?ClusterMetric@@YAMABVbtVector3@@0@Z ENDP		; ClusterMetric
_TEXT	ENDS
PUBLIC	?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z		; btSoftBody::cal_m
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z
_TEXT	SEGMENT
_f$53897 = -40						; size = 4
_mc$53896 = -36						; size = 4
_mb$53895 = -28						; size = 4
_ma$53894 = -16						; size = 4
_m$ = -8						; size = 4
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_t$ = 16						; size = 4
_impact$ = 20						; size = 4
?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z PROC		; btSoftBody::cal_m, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 1580
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 1581
	fldz
	fstp	DWORD PTR _m$[ebp]
; Line 1582
	mov	eax, DWORD PTR _a$[ebp]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 5
	jp	$LN6@cal_m
; Line 1585
	mov	ecx, DWORD PTR _b$[ebp]
	fldz
	fcomp	DWORD PTR [ecx+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@cal_m
; Line 1589
	mov	edx, DWORD PTR _a$[ebp]
	fld1
	fdiv	DWORD PTR [edx+96]
	fstp	DWORD PTR _ma$53894[ebp]
; Line 1590
	mov	eax, DWORD PTR _b$[ebp]
	fld1
	fdiv	DWORD PTR [eax+96]
	fstp	DWORD PTR _mb$53895[ebp]
; Line 1591
	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _mb$53895[ebp]
	push	ecx
	lea	edx, DWORD PTR _ma$53894[ebp]
	push	edx
	call	??$Lerp@M@@YAMABM0M@Z			; Lerp<float>
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _mc$53896[ebp]
; Line 1592
	fld	DWORD PTR _ma$53894[ebp]
	fadd	DWORD PTR _mb$53895[ebp]
	fld	DWORD PTR _ma$53894[ebp]
	fadd	DWORD PTR _mb$53895[ebp]
	fadd	DWORD PTR _mc$53896[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _f$53897[ebp]
; Line 1596
	fld	DWORD PTR _ma$53894[ebp]
	fmul	DWORD PTR _f$53897[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	mov	eax, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [eax+96]
; Line 1597
	fld	DWORD PTR _mb$53895[ebp]
	fmul	DWORD PTR _f$53897[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	DWORD PTR [ecx+96]
; Line 1599
	fld	DWORD PTR _mc$53896[ebp]
	fmul	DWORD PTR _f$53897[ebp]
	fstp	DWORD PTR _m$[ebp]
; Line 1601
	jmp	SHORT $LN4@cal_m
$LN5@cal_m:
; Line 1603
	mov	edx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [edx+96]
	fdiv	DWORD PTR __real@3f000000
	mov	eax, DWORD PTR _a$[ebp]
	fstp	DWORD PTR [eax+96]
; Line 1604
	mov	ecx, DWORD PTR _a$[ebp]
	fld1
	fdiv	DWORD PTR [ecx+96]
	fstp	DWORD PTR _m$[ebp]
$LN4@cal_m:
; Line 1607
	jmp	SHORT $LN1@cal_m
$LN6@cal_m:
; Line 1610
	mov	edx, DWORD PTR _b$[ebp]
	fldz
	fcomp	DWORD PTR [edx+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@cal_m
; Line 1612
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax+96]
	fdiv	DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _b$[ebp]
	fstp	DWORD PTR [ecx+96]
; Line 1613
	mov	edx, DWORD PTR _b$[ebp]
	fld1
	fdiv	DWORD PTR [edx+96]
	fstp	DWORD PTR _m$[ebp]
; Line 1615
	jmp	SHORT $LN1@cal_m
$LN2@cal_m:
; Line 1617
	mov	eax, DWORD PTR _impact$[ebp]
	fld	DWORD PTR [eax+96]
	fdiv	DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _impact$[ebp]
	fstp	DWORD PTR [ecx+96]
; Line 1618
	mov	edx, DWORD PTR _impact$[ebp]
	fld1
	fdiv	DWORD PTR [edx+96]
	fstp	DWORD PTR _m$[ebp]
; Line 1619
	push	OFFSET $SG53902
	call	_printf
	add	esp, 4
$LN1@cal_m:
; Line 1622
	fld	DWORD PTR _m$[ebp]
; Line 1624
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@cal_m
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN12@cal_m:
	DD	2
	DD	$LN11@cal_m
$LN11@cal_m:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN9@cal_m
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN10@cal_m
$LN10@cal_m:
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	0
$LN9@cal_m:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	0
?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z ENDP		; btSoftBody::cal_m
_TEXT	ENDS
PUBLIC	__real@3da3d70a
PUBLIC	?setZ@btVector3@@QAEXM@Z			; btVector3::setZ
PUBLIC	??1?$btSymMatrix@H@@QAE@XZ			; btSymMatrix<int>::~btSymMatrix<int>
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	??R?$btSymMatrix@H@@QAEAAHHH@Z			; btSymMatrix<int>::operator()
PUBLIC	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
PUBLIC	??0?$btSymMatrix@H@@QAE@HABH@Z			; btSymMatrix<int>::btSymMatrix<int>
PUBLIC	__$ArrayPad$
PUBLIC	?refine2@btSoftBody@@QAEXPAUImplicitFn@1@M_NAAVbtVector3@@@Z ; btSoftBody::refine2
EXTRN	_strcat:PROC
EXTRN	?outputInfo@@3PADA:BYTE				; outputInfo
EXTRN	_fclose:PROC
EXTRN	_fprintf:PROC
EXTRN	_fopen:PROC
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?refine2@btSoftBody@@QAEXPAUImplicitFn@1@M_NAAVbtVector3@@@Z
_TEXT	SEGMENT
tv10816 = -2048						; size = 4
tv10814 = -2044						; size = 4
tv10812 = -2040						; size = 4
tv10810 = -2036						; size = 4
tv10808 = -2032						; size = 4
tv10806 = -2028						; size = 4
tv10804 = -2024						; size = 4
tv10802 = -2020						; size = 4
tv10800 = -2016						; size = 4
tv10798 = -2012						; size = 4
tv10796 = -2008						; size = 4
tv10794 = -2004						; size = 4
tv10792 = -2000						; size = 4
tv10790 = -1996						; size = 4
tv10788 = -1992						; size = 4
tv10786 = -1988						; size = 4
tv10784 = -1984						; size = 4
tv10782 = -1980						; size = 4
tv10780 = -1976						; size = 4
$T66617 = -1972						; size = 4
$T66616 = -1968						; size = 4
$T66615 = -1964						; size = 4
$T66614 = -1960						; size = 4
$T66613 = -1956						; size = 4
$T66612 = -1952						; size = 4
_pft$54510 = -1944					; size = 8
_pft$54506 = -1928					; size = 8
_idx$54502 = -1912					; size = 8
_feat$54501 = -1900					; size = 4
_pft$54494 = -1892					; size = 8
_pft$54488 = -1876					; size = 8
_pftt$54484 = -1860					; size = 8
_pft$54481 = -1844					; size = 8
_pft$54476 = -1828					; size = 8
_pft$54467 = -1812					; size = 8
_pft$54461 = -1796					; size = 8
_idx$54457 = -1780					; size = 8
_feat$54456 = -1768					; size = 4
_pfttt$54445 = -1760					; size = 8
_pftt$54443 = -1744					; size = 4
_pftt$54438 = -1732					; size = 4
_pftt$54432 = -1720					; size = 4
_pft$54428 = -1708					; size = 8
_idx$54425 = -1692					; size = 12
_feat$54424 = -1676					; size = 4
_pftttt$54407 = -1668					; size = 8
_pftttt$54390 = -1652					; size = 8
_l$54383 = -1640					; size = 4
_idx$54379 = -1632					; size = 12
_feat$54378 = -1616					; size = 4
_poplr$54373 = -1612					; size = 4
_pft$54362 = -1604					; size = 8
_pft$54358 = -1588					; size = 8
_idx$54354 = -1572					; size = 8
_feat$54353 = -1560					; size = 4
_pfttt$54349 = -1552					; size = 8
_pftt$54348 = -1536					; size = 4
_pft$54347 = -1524					; size = 8
_idx$54345 = -1508					; size = 12
_feat$54344 = -1492					; size = 4
$T54336 = -1488						; size = 16
$T54333 = -1472						; size = 16
$T54323 = -1456						; size = 16
$T54321 = -1440						; size = 16
$T54316 = -1424						; size = 16
$T54313 = -1408						; size = 16
_v$54302 = -1376					; size = 16
_x$54301 = -1344					; size = 16
_m$54300 = -1316					; size = 4
_t$54299 = -1312					; size = 4
_edge_lcut$54296 = -1308				; size = 4
_edge_rcut$54295 = -1304				; size = 4
_lcut_node$54294 = -1300				; size = 4
_rcut_node$54293 = -1296				; size = 4
_up_node$54292 = -1292					; size = 4
_gap$54291 = -1288					; size = 4
_impact_v$54289 = -1280					; size = 16
_impact_m$54284 = -1248					; size = 4
_impact_im$54283 = -1244				; size = 4
_impact_node$54277 = -1240				; size = 4
_ab$54235 = -1232					; size = 16
_b$54234 = -1200					; size = 4
_a$54233 = -1196					; size = 4
_b$54207 = -1192					; size = 4
_a$54206 = -1188					; size = 4
_J$54204 = -1184					; size = 4
_I$54203 = -1180					; size = 4
_end_dir$54186 = -1176					; size = 4
_ab$54156 = -1168					; size = 16
_in$54144 = -1140					; size = 4
$T54136 = -1136						; size = 16
_same$54119 = -1112					; size = 4
_in$54118 = -1108					; size = 4
$T54115 = -1104						; size = 16
_same$54102 = -1084					; size = 4
_in$54101 = -1080					; size = 4
_v2$54096 = -1072					; size = 16
_v1$54095 = -1040					; size = 16
_u2$54094 = -1008					; size = 16
_u1$54093 = -976					; size = 16
_abn$54086 = -944					; size = 4
_linkab$54085 = -936					; size = 400
$T54080 = -528						; size = 16
_out_cross$54078 = -504					; size = 4
_intersect$54077 = -496					; size = 16
_cutedge$54076 = -476					; size = 4
_crossface$54075 = -472					; size = 4
_right_node$54074 = -468				; size = 4
_left_node$54073 = -464					; size = 4
_up_face$54072 = -460					; size = 4
_cut_state$54071 = -456					; size = 4
_fi$54063 = -452					; size = 4
$T54061 = -448						; size = 16
$T54060 = -432						; size = 16
$T54059 = -416						; size = 16
$T54058 = -400						; size = 16
$T54057 = -384						; size = 16
$T54056 = -368						; size = 16
$T54055 = -352						; size = 16
$T54054 = -336						; size = 16
_f$54050 = -320						; size = 4
_facenum$54049 = -312					; size = 8
_face$54048 = -296					; size = 24
_f$54037 = -268						; size = 4
_l$54032 = -264						; size = 4
_l$54018 = -260						; size = 4
_beding_cnt$ = -256					; size = 4
_frr$ = -252						; size = 4
_fr$ = -248						; size = 4
_fp$ = -244						; size = 4
_end_foldline$ = -240					; size = 4
_cut_foldline$ = -236					; size = 4
_allow$ = -232						; size = 4
_corner3$ = -224					; size = 16
_corner2$ = -192					; size = 16
_corner1$ = -160					; size = 16
_corner0$ = -128					; size = 16
_V$ = -96						; size = 16
_ni$ = -68						; size = 4
_k$ = -64						; size = 4
_j$ = -60						; size = 4
_i$ = -56						; size = 4
_newnodes$ = -52					; size = 4
_edges$ = -44						; size = 24
_ncount$ = -16						; size = 4
_nbase$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ifn$ = 8						; size = 4
_accurary$ = 12						; size = 4
_cut$ = 16						; size = 1
_impact$ = 20						; size = 4
?refine2@btSoftBody@@QAEXPAUImplicitFn@1@M_NAAVbtVector3@@@Z PROC ; btSoftBody::refine2, COMDAT
; _this$ = ecx
; Line 1628
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 2056				; 00000808H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2056]
	mov	ecx, 514				; 00000202H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1629
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
; Line 1630
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ncount$[ebp], eax
; Line 1631
	mov	DWORD PTR $T66612[ebp], -2		; fffffffeH
	lea	eax, DWORD PTR $T66612[ebp]
	push	eax
	mov	ecx, DWORD PTR _ncount$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??0?$btSymMatrix@H@@QAE@HABH@Z		; btSymMatrix<int>::btSymMatrix<int>
; Line 1634
	mov	DWORD PTR _newnodes$[ebp], 0
; Line 1637
	fldz
	fstp	DWORD PTR $T66613[ebp]
	fldz
	fstp	DWORD PTR $T66614[ebp]
	fldz
	fstp	DWORD PTR $T66615[ebp]
	lea	edx, DWORD PTR $T66613[ebp]
	push	edx
	lea	eax, DWORD PTR $T66614[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66615[ebp]
	push	ecx
	lea	ecx, DWORD PTR _V$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 1638
	mov	DWORD PTR ?cur_step@@3HA, 4		; cur_step
; Line 1639
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN417@refine2
$LN416@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN417@refine2:
	cmp	DWORD PTR _i$[ebp], 9
	jge	SHORT $LN415@refine2
; Line 1640
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR [eax+96]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN414@refine2
; Line 1641
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR ?oldmass@@3MA			; oldmass
	fstp	DWORD PTR [eax+96]
$LN414@refine2:
; Line 1643
	jmp	SHORT $LN416@refine2
$LN415@refine2:
	cmp	DWORD PTR ?state@@3HA, 1		; state
	jne	$LN413@refine2
; Line 1645
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1646
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1647
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN398@refine2
$LN413@refine2:
; Line 1649
	cmp	DWORD PTR ?state@@3HA, 2		; state
	jne	SHORT $LN411@refine2
; Line 1651
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1652
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN398@refine2
$LN411@refine2:
; Line 1654
	cmp	DWORD PTR ?state@@3HA, 3		; state
	jne	SHORT $LN409@refine2
; Line 1656
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1657
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN398@refine2
$LN409@refine2:
; Line 1660
	cmp	DWORD PTR ?state@@3HA, 4		; state
	jne	SHORT $LN407@refine2
; Line 1662
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1663
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN398@refine2
$LN407@refine2:
; Line 1665
	cmp	DWORD PTR ?state@@3HA, 5		; state
	jne	SHORT $LN405@refine2
; Line 1667
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1668
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN398@refine2
$LN405@refine2:
; Line 1670
	cmp	DWORD PTR ?state@@3HA, 6		; state
	jne	SHORT $LN403@refine2
; Line 1672
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1673
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN398@refine2
$LN403@refine2:
; Line 1675
	cmp	DWORD PTR ?state@@3HA, 7		; state
	jne	SHORT $LN401@refine2
; Line 1677
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1678
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN398@refine2
$LN401@refine2:
; Line 1680
	cmp	DWORD PTR ?state@@3HA, 8		; state
	jne	SHORT $LN399@refine2
; Line 1682
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1683
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 1685
	jmp	SHORT $LN398@refine2
$LN399@refine2:
; Line 1687
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
$LN398@refine2:
; Line 1693
	lea	ecx, DWORD PTR _corner0$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	lea	ecx, DWORD PTR _corner1$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	lea	ecx, DWORD PTR _corner2$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	lea	ecx, DWORD PTR _corner3$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 1695
	cmp	DWORD PTR ?state@@3HA, 0		; state
	jne	$LN397@refine2
; Line 1697
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _corner0$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner0$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner0$[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _corner0$[ebp+12], eax
; Line 1698
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner1$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner1$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner1$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner1$[ebp+12], edx
; Line 1699
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner2$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner2$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner2$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner2$[ebp+12], edx
; Line 1700
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner3$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner3$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner3$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner3$[ebp+12], edx
$LN397@refine2:
; Line 1702
	cmp	DWORD PTR ?state@@3HA, 1		; state
	jne	$LN396@refine2
; Line 1704
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner0$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner0$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner0$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner0$[ebp+12], edx
; Line 1705
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner1$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner1$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner1$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner1$[ebp+12], edx
; Line 1706
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner2$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner2$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner2$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner2$[ebp+12], edx
$LN396@refine2:
; Line 1710
	cmp	DWORD PTR ?state@@3HA, 3		; state
	jne	$LN395@refine2
; Line 1712
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner0$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner0$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner0$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner0$[ebp+12], edx
; Line 1713
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner1$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner1$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner1$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner1$[ebp+12], edx
; Line 1714
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner2$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner2$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner2$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner2$[ebp+12], edx
$LN395@refine2:
; Line 1716
	cmp	DWORD PTR ?state@@3HA, 5		; state
	jne	$LN394@refine2
; Line 1718
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner0$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner0$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner0$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner0$[ebp+12], edx
; Line 1719
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner1$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner1$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner1$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner1$[ebp+12], edx
; Line 1720
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner2$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner2$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner2$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner2$[ebp+12], edx
$LN394@refine2:
; Line 1722
	cmp	DWORD PTR ?state@@3HA, 7		; state
	jne	$LN393@refine2
; Line 1724
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner0$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner0$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner0$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner0$[ebp+12], edx
; Line 1725
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner1$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner1$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner1$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner1$[ebp+12], edx
; Line 1726
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _corner2$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _corner2$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _corner2$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _corner2$[ebp+12], edx
$LN393@refine2:
; Line 1732
	fld	DWORD PTR __real@3f333333
	fstp	DWORD PTR _allow$[ebp]
; Line 1735
	lea	ecx, DWORD PTR _corner3$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _corner1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	lea	eax, DWORD PTR _corner3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _corner1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _impact$[ebx]
	push	edx
	call	?dis@@YAMAAVbtVector3@@00@Z		; dis
	add	esp, 4
	fstp	QWORD PTR [esp]
	push	OFFSET $SG53984
	call	_printf
	add	esp, 28					; 0000001cH
; Line 1736
	cmp	DWORD PTR ?start_node@@3HA, -1		; start_node
	jne	$LN385@refine2
; Line 1739
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _corner0$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fcomp	DWORD PTR _allow$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN391@refine2
; Line 1741
	mov	eax, DWORD PTR _impact$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?start@@3VbtVector3@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?start@@3VbtVector3@@A+4, edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?start@@3VbtVector3@@A+8, ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR ?start@@3VbtVector3@@A+12, edx
; Line 1742
	lea	ecx, DWORD PTR _corner0$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?start@@3VbtVector3@@A	; start
	call	?setY@btVector3@@QAEXM@Z		; btVector3::setY
; Line 1745
	mov	DWORD PTR ?start_node@@3HA, 1		; start_node
; Line 1746
	mov	DWORD PTR ?start_dir@@3HA, 0		; start_dir
; Line 1747
	push	OFFSET $SG53987
	call	_printf
	add	esp, 4
	jmp	$LN385@refine2
$LN391@refine2:
; Line 1751
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	lea	ecx, DWORD PTR _corner1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fcomp	DWORD PTR _allow$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN389@refine2
; Line 1753
	mov	eax, DWORD PTR _impact$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?start@@3VbtVector3@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?start@@3VbtVector3@@A+4, edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?start@@3VbtVector3@@A+8, ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR ?start@@3VbtVector3@@A+12, edx
; Line 1754
	lea	ecx, DWORD PTR _corner1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?start@@3VbtVector3@@A	; start
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
; Line 1757
	mov	DWORD PTR ?start_node@@3HA, 1		; start_node
; Line 1758
	mov	DWORD PTR ?start_dir@@3HA, 1		; start_dir
; Line 1759
	push	OFFSET $SG53990
	call	_printf
	add	esp, 4
	jmp	$LN385@refine2
$LN389@refine2:
; Line 1763
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	lea	ecx, DWORD PTR _corner0$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fcomp	DWORD PTR _allow$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN387@refine2
; Line 1765
	mov	eax, DWORD PTR _impact$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?start@@3VbtVector3@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?start@@3VbtVector3@@A+4, edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?start@@3VbtVector3@@A+8, ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR ?start@@3VbtVector3@@A+12, edx
; Line 1766
	lea	ecx, DWORD PTR _corner0$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?start@@3VbtVector3@@A	; start
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
; Line 1769
	mov	DWORD PTR ?start_node@@3HA, 1		; start_node
; Line 1770
	mov	DWORD PTR ?start_dir@@3HA, 2		; start_dir
; Line 1771
	push	OFFSET $SG53993
	call	_printf
	add	esp, 4
	jmp	$LN385@refine2
$LN387@refine2:
; Line 1775
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _corner2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fcomp	DWORD PTR _allow$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN385@refine2
; Line 1777
	mov	eax, DWORD PTR _impact$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?start@@3VbtVector3@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?start@@3VbtVector3@@A+4, edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?start@@3VbtVector3@@A+8, ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR ?start@@3VbtVector3@@A+12, edx
; Line 1778
	lea	ecx, DWORD PTR _corner2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?start@@3VbtVector3@@A	; start
	call	?setY@btVector3@@QAEXM@Z		; btVector3::setY
; Line 1781
	mov	DWORD PTR ?start_node@@3HA, 1		; start_node
; Line 1782
	mov	DWORD PTR ?start_dir@@3HA, 3		; start_dir
; Line 1783
	push	OFFSET $SG53996
	call	_printf
	add	esp, 4
$LN385@refine2:
; Line 1788
	mov	DWORD PTR _cut_foldline$[ebp], 0
; Line 1789
	mov	DWORD PTR _end_foldline$[ebp], 0
; Line 1795
	cmp	DWORD PTR ?state@@3HA, 1		; state
	jne	SHORT $LN382@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 0		; start_dir
	je	SHORT $LN383@refine2
$LN382@refine2:
	cmp	DWORD PTR ?state@@3HA, 5		; state
	jne	SHORT $LN381@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 1		; start_dir
	je	SHORT $LN383@refine2
$LN381@refine2:
	cmp	DWORD PTR ?state@@3HA, 3		; state
	jne	SHORT $LN380@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 2		; start_dir
	je	SHORT $LN383@refine2
$LN380@refine2:
	cmp	DWORD PTR ?state@@3HA, 7		; state
	jne	SHORT $LN384@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 3		; start_dir
	jne	SHORT $LN384@refine2
$LN383@refine2:
; Line 1796
	mov	DWORD PTR _cut_foldline$[ebp], 1
$LN384@refine2:
; Line 1804
	push	OFFSET $SG54007
	push	OFFSET $SG54008
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax
; Line 1805
	push	OFFSET $SG54009
	push	OFFSET $SG54010
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fr$[ebp], eax
; Line 1806
	push	OFFSET $SG54011
	push	OFFSET $SG54012
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _frr$[ebp], eax
; Line 1809
	push	OFFSET $SG54013
	call	_printf
	add	esp, 4
; Line 1811
	mov	DWORD PTR _beding_cnt$[ebp], 0
; Line 1816
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN379@refine2
$LN378@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN379@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN377@refine2
; Line 1818
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$54018[ebp], eax
; Line 1820
	mov	edx, DWORD PTR _l$54018[ebp]
	mov	eax, DWORD PTR [edx+20]
	shl	eax, 31					; 0000001fH
	sar	eax, 31					; 0000001fH
	test	eax, eax
	je	$LN375@refine2
; Line 1822
	mov	ecx, DWORD PTR _beding_cnt$[ebp]
	add	ecx, 1
	mov	DWORD PTR _beding_cnt$[ebp], ecx
; Line 1824
	mov	edx, DWORD PTR _l$54018[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	mov	ecx, DWORD PTR _l$54018[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	push	OFFSET $SG54020
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
; Line 1825
	mov	ecx, DWORD PTR _l$54018[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 16					; 00000010H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR $T66616[ebp]
	mov	ecx, DWORD PTR _l$54018[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 16					; 00000010H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR $T66617[ebp]
	lea	ecx, DWORD PTR $T66616[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66617[ebp]
	push	edx
	call	??$SameSign@M@@YA_NABM0@Z		; SameSign<float>
	add	esp, 8
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN375@refine2
; Line 1827
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 1828
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 1829
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN375@refine2:
; Line 1832
	jmp	$LN378@refine2
$LN377@refine2:
; Line 1833
	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
; Line 1839
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN374@refine2
$LN373@refine2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN374@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN372@refine2
; Line 1841
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$54032[ebp], eax
; Line 1842
	mov	eax, DWORD PTR _l$54032[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _l$54032[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET $SG54033
	mov	edx, DWORD PTR _fr$[ebp]
	push	edx
	call	_fprintf
	add	esp, 20					; 00000014H
; Line 1844
	mov	eax, DWORD PTR _l$54032[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _l$54032[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -1
; Line 1845
	jmp	$LN373@refine2
$LN372@refine2:
; Line 1846
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN371@refine2
$LN370@refine2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN371@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN369@refine2
; Line 1848
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$54037[ebp], eax
; Line 1850
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	push	eax
	push	OFFSET $SG54038
	mov	ecx, DWORD PTR _fr$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 1851
	mov	edx, DWORD PTR _f$54037[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	mov	ecx, DWORD PTR _f$54037[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	push	OFFSET $SG54039
	mov	eax, DWORD PTR _fr$[ebp]
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
; Line 1852
	mov	ecx, DWORD PTR _f$54037[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _f$54037[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	push	OFFSET $SG54040
	mov	edx, DWORD PTR _fr$[ebp]
	push	edx
	call	_fprintf
	add	esp, 16					; 00000010H
; Line 1853
	mov	eax, DWORD PTR _f$54037[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _f$54037[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	push	OFFSET $SG54041
	mov	ecx, DWORD PTR _fr$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 16					; 00000010H
; Line 1855
	mov	edx, DWORD PTR _f$54037[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	mov	ecx, DWORD PTR _f$54037[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -1
; Line 1856
	mov	eax, DWORD PTR _f$54037[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _f$54037[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -1
; Line 1857
	mov	ecx, DWORD PTR _f$54037[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _f$54037[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -1
; Line 1858
	jmp	$LN370@refine2
$LN369@refine2:
; Line 1860
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN368@refine2
$LN367@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN368@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN366@refine2
; Line 1870
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [eax+108]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	eax, DWORD PTR [eax+104]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR [eax+100]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR [eax+96]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 80					; 00000050H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 80					; 00000050H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 80					; 00000050H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 64					; 00000040H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 64					; 00000040H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 64					; 00000040H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 32					; 00000020H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 32					; 00000020H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 32					; 00000020H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG54045
	mov	edx, DWORD PTR _fr$[ebp]
	push	edx
	call	_fprintf
	add	esp, 156				; 0000009cH
	jmp	$LN367@refine2
$LN366@refine2:
; Line 1872
	mov	eax, DWORD PTR _fr$[ebp]
	push	eax
	call	_fclose
	add	esp, 4
; Line 1882
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG54046
	call	_printf
	add	esp, 28					; 0000001cH
; Line 1886
	cmp	DWORD PTR ?start_node@@3HA, -1		; start_node
	je	$LN358@refine2
; Line 1893
	mov	DWORD PTR _f$54050[ebp], 0
; Line 1896
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN364@refine2
$LN363@refine2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN364@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN362@refine2
; Line 1899
	mov	edx, DWORD PTR _impact$[ebx]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T54055[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _impact$[ebx]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR [eax+8]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T54054[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	call	?cross_2@@YAMAAVbtVector3@@0@Z		; cross_2
	add	esp, 8
	mov	ecx, DWORD PTR _impact$[ebx]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	fstp	DWORD PTR tv10780[ebp]
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	eax, DWORD PTR [eax+16]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T54057[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _impact$[ebx]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T54056[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	call	?cross_2@@YAMAAVbtVector3@@0@Z		; cross_2
	add	esp, 8
	fadd	DWORD PTR tv10780[ebp]
	mov	eax, DWORD PTR _impact$[ebx]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	fstp	DWORD PTR tv10782[ebp]
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR [eax+16]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T54059[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _impact$[ebx]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T54058[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	call	?cross_2@@YAMAAVbtVector3@@0@Z		; cross_2
	add	esp, 8
	fadd	DWORD PTR tv10782[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	fstp	DWORD PTR tv10784[ebp]
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR [eax+16]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T54061[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR [eax+8]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T54060[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	call	?cross_2@@YAMAAVbtVector3@@0@Z		; cross_2
	add	esp, 8
	fsubr	DWORD PTR tv10784[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fcomp	QWORD PTR __real@3f1a36e2eb1c432d
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$LN361@refine2
; Line 1901
	mov	eax, DWORD PTR _f$54050[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _facenum$54049[ebp+eax*4], ecx
; Line 1903
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _f$54050[ebp]
	imul	ecx, 12					; 0000000cH
	mov	DWORD PTR _face$54048[ebp+ecx], eax
; Line 1904
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _f$54050[ebp]
	imul	ecx, 12					; 0000000cH
	mov	DWORD PTR _face$54048[ebp+ecx+4], eax
; Line 1905
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	eax, DWORD PTR [eax+16]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _f$54050[ebp]
	imul	ecx, 12					; 0000000cH
	mov	DWORD PTR _face$54048[ebp+ecx+8], eax
; Line 1907
	mov	edx, DWORD PTR _f$54050[ebp]
	add	edx, 1
	mov	DWORD PTR _f$54050[ebp], edx
$LN361@refine2:
; Line 1909
	jmp	$LN363@refine2
$LN362@refine2:
; Line 1914
	mov	DWORD PTR _fi$54063[ebp], 0
	jmp	SHORT $LN360@refine2
$LN359@refine2:
	mov	eax, DWORD PTR _fi$54063[ebp]
	add	eax, 1
	mov	DWORD PTR _fi$54063[ebp], eax
$LN360@refine2:
	mov	ecx, DWORD PTR _fi$54063[ebp]
	cmp	ecx, DWORD PTR _f$54050[ebp]
	jge	$LN358@refine2
; Line 1916
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	push	eax
	push	OFFSET $SG54067
	call	_printf
	add	esp, 8
; Line 1917
	mov	ecx, DWORD PTR _fi$54063[ebp]
	cmp	DWORD PTR ?last_face@@3PAHA[ecx*4], -1
	je	SHORT $LN357@refine2
; Line 1918
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	push	OFFSET $SG54069
	call	_printf
	add	esp, 16					; 00000010H
$LN357@refine2:
; Line 1920
	mov	edx, DWORD PTR _fi$54063[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _face$54048[ebp+edx+8]
	push	eax
	mov	ecx, DWORD PTR _fi$54063[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _face$54048[ebp+ecx+4]
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$54048[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	push	OFFSET $SG54070
	call	_printf
	add	esp, 20					; 00000014H
; Line 1923
	mov	ecx, DWORD PTR _fi$54063[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _face$54048[ebp+ecx+4]
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$54048[ebp+eax]
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -3			; fffffffdH
; Line 1924
	mov	edx, DWORD PTR _fi$54063[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _face$54048[ebp+edx+8]
	push	eax
	mov	ecx, DWORD PTR _fi$54063[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _face$54048[ebp+ecx+4]
	push	edx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -3			; fffffffdH
; Line 1925
	mov	eax, DWORD PTR _fi$54063[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _face$54048[ebp+eax]
	push	ecx
	mov	edx, DWORD PTR _fi$54063[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _face$54048[ebp+edx+8]
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -3			; fffffffdH
; Line 1928
	mov	DWORD PTR _up_face$54072[ebp], -1
; Line 1929
	mov	DWORD PTR _left_node$54073[ebp], -1
	mov	DWORD PTR _right_node$54074[ebp], -1
; Line 1930
	mov	DWORD PTR _crossface$54075[ebp], 0
; Line 1931
	mov	DWORD PTR _cutedge$54076[ebp], -1
; Line 1932
	lea	ecx, DWORD PTR _intersect$54077[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 1933
	mov	DWORD PTR _out_cross$54078[ebp], 0
; Line 1937
	mov	ecx, DWORD PTR _fi$54063[ebp]
	cmp	DWORD PTR ?last_face@@3PAHA[ecx*4], -1
	je	$LN272@refine2
; Line 1939
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _impact$[ebx]
	push	edx
	lea	eax, DWORD PTR $T54080[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fcomp	QWORD PTR __real@3f50624dd2f1a9fc
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN355@refine2
; Line 1940
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??1?$btSymMatrix@H@@QAE@XZ
	jmp	$LN418@refine2
$LN355@refine2:
; Line 1945
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	push	eax
	push	OFFSET $SG54082
	call	_printf
	add	esp, 8
; Line 1946
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+4]
	push	eax
	push	OFFSET $SG54083
	call	_printf
	add	esp, 8
; Line 1947
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+8]
	push	eax
	push	OFFSET $SG54084
	call	_printf
	add	esp, 8
; Line 1951
	mov	DWORD PTR _abn$54086[ebp], 0
; Line 1953
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN354@refine2
$LN353@refine2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN354@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN352@refine2
; Line 1955
	mov	DWORD PTR _j$[ebp], 2
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN351@refine2
$LN350@refine2:
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN351@refine2:
	cmp	DWORD PTR _k$[ebp], 3
	jge	$LN349@refine2
; Line 1957
	lea	ecx, DWORD PTR _u1$54093[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	lea	ecx, DWORD PTR _u2$54094[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	lea	ecx, DWORD PTR _v1$54095[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	lea	ecx, DWORD PTR _v2$54096[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 1959
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _u1$54093[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _u1$54093[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _u1$54093[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _u1$54093[ebp+12], edx
; Line 1960
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _u2$54094[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _u2$54094[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _u2$54094[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _u2$54094[ebp+12], ecx
; Line 1962
	mov	edx, DWORD PTR _impact$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _v1$54095[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _v1$54095[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _v1$54095[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _v1$54095[ebp+12], ecx
; Line 1963
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _v2$54096[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v2$54096[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v2$54096[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _v2$54096[ebp+12], eax
; Line 1965
	lea	ecx, DWORD PTR _v2$54096[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$54095[ebp]
	push	edx
	lea	eax, DWORD PTR _u2$54094[ebp]
	push	eax
	lea	ecx, DWORD PTR _u1$54093[ebp]
	push	ecx
	call	?parallel@@YAHAAVbtVector3@@000@Z	; parallel
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN347@refine2
	lea	edx, DWORD PTR _v2$54096[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$54095[ebp]
	push	eax
	lea	ecx, DWORD PTR _u2$54094[ebp]
	push	ecx
	lea	edx, DWORD PTR _u1$54093[ebp]
	push	edx
	call	?intersect_in@@YAHAAVbtVector3@@000@Z	; intersect_in
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN348@refine2
$LN347@refine2:
; Line 1969
	jmp	$LN318@refine2
$LN348@refine2:
; Line 1974
	cmp	DWORD PTR _f$54050[ebp], 1
	jne	$LN345@refine2
; Line 1978
	mov	DWORD PTR _same$54102[ebp], 0
; Line 1979
	mov	DWORD PTR _in$54101[ebp], 0
	jmp	SHORT $LN344@refine2
$LN343@refine2:
	mov	eax, DWORD PTR _in$54101[ebp]
	add	eax, 1
	mov	DWORD PTR _in$54101[ebp], eax
$LN344@refine2:
	mov	ecx, DWORD PTR _in$54101[ebp]
	cmp	ecx, DWORD PTR _abn$54086[ebp]
	jge	$LN342@refine2
; Line 1982
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _in$54101[ebp]
	cmp	DWORD PTR _linkab$54085[ebp+eax*8], edx
	jne	SHORT $LN339@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _in$54101[ebp]
	cmp	DWORD PTR _linkab$54085[ebp+ecx*8+4], eax
	je	SHORT $LN340@refine2
$LN339@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _in$54101[ebp]
	cmp	DWORD PTR _linkab$54085[ebp+eax*8], edx
	jne	SHORT $LN341@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _in$54101[ebp]
	cmp	DWORD PTR _linkab$54085[ebp+ecx*8+4], eax
	jne	SHORT $LN341@refine2
$LN340@refine2:
; Line 1983
	mov	DWORD PTR _same$54102[ebp], 1
$LN341@refine2:
; Line 1984
	jmp	$LN343@refine2
$LN342@refine2:
; Line 1986
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	je	SHORT $LN337@refine2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	SHORT $LN338@refine2
$LN337@refine2:
; Line 1987
	jmp	$LN334@refine2
$LN338@refine2:
	cmp	DWORD PTR _same$54102[ebp], 1
	jne	SHORT $LN335@refine2
; Line 1988
	jmp	$LN334@refine2
$LN335@refine2:
; Line 1991
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	push	OFFSET $SG54114
	call	_printf
	add	esp, 12					; 0000000cH
; Line 1992
	mov	eax, DWORD PTR _crossface$54075[ebp]
	add	eax, 1
	mov	DWORD PTR _crossface$54075[ebp], eax
; Line 1993
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _abn$54086[ebp]
	mov	DWORD PTR _linkab$54085[ebp+ecx*8], eax
; Line 1994
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _abn$54086[ebp]
	mov	DWORD PTR _linkab$54085[ebp+eax*8+4], edx
; Line 1995
	mov	ecx, DWORD PTR _abn$54086[ebp]
	add	ecx, 1
	mov	DWORD PTR _abn$54086[ebp], ecx
; Line 1996
	lea	edx, DWORD PTR _v2$54096[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$54095[ebp]
	push	eax
	lea	ecx, DWORD PTR _u2$54094[ebp]
	push	ecx
	lea	edx, DWORD PTR _u1$54093[ebp]
	push	edx
	lea	eax, DWORD PTR $T54115[ebp]
	push	eax
	call	?intersection@@YA?AVbtVector3@@AAV1@000@Z ; intersection
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _intersect$54077[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _intersect$54077[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _intersect$54077[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _intersect$54077[ebp+12], edx
$LN334@refine2:
; Line 2000
	jmp	$LN318@refine2
$LN345@refine2:
; Line 2002
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN332@refine2
; Line 2004
	mov	eax, DWORD PTR ?last_face@@3PAHA
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	mov	DWORD PTR ?one@@3HA, ecx		; one
; Line 2006
	mov	edx, DWORD PTR ?last_face@@3PAHA+4
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	mov	DWORD PTR ?another@@3HA, eax		; another
$LN332@refine2:
; Line 2010
	mov	DWORD PTR _same$54119[ebp], 0
; Line 2011
	mov	DWORD PTR _in$54118[ebp], 0
	jmp	SHORT $LN331@refine2
$LN330@refine2:
	mov	ecx, DWORD PTR _in$54118[ebp]
	add	ecx, 1
	mov	DWORD PTR _in$54118[ebp], ecx
$LN331@refine2:
	mov	edx, DWORD PTR _in$54118[ebp]
	cmp	edx, DWORD PTR _abn$54086[ebp]
	jge	$LN329@refine2
; Line 2014
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _in$54118[ebp]
	cmp	DWORD PTR _linkab$54085[ebp+eax*8], edx
	jne	SHORT $LN326@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _in$54118[ebp]
	cmp	DWORD PTR _linkab$54085[ebp+ecx*8+4], eax
	je	SHORT $LN327@refine2
$LN326@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _in$54118[ebp]
	cmp	DWORD PTR _linkab$54085[ebp+eax*8], edx
	jne	SHORT $LN328@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _in$54118[ebp]
	cmp	DWORD PTR _linkab$54085[ebp+ecx*8+4], eax
	jne	SHORT $LN328@refine2
$LN327@refine2:
; Line 2015
	mov	DWORD PTR _same$54119[ebp], 1
$LN328@refine2:
; Line 2016
	jmp	$LN330@refine2
$LN329@refine2:
; Line 2019
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR ?one@@3HA		; one
	je	SHORT $LN324@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR ?one@@3HA		; one
	jne	SHORT $LN325@refine2
$LN324@refine2:
; Line 2020
	jmp	$LN318@refine2
$LN325@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR ?another@@3HA		; another
	je	SHORT $LN321@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR ?another@@3HA		; another
	jne	SHORT $LN322@refine2
$LN321@refine2:
; Line 2021
	jmp	$LN318@refine2
$LN322@refine2:
	cmp	DWORD PTR _same$54119[ebp], 1
	jne	SHORT $LN319@refine2
; Line 2022
	jmp	$LN318@refine2
$LN319@refine2:
; Line 2027
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -3			; fffffffdH
	jne	$LN317@refine2
; Line 2029
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	push	OFFSET $SG54135
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2031
	mov	eax, DWORD PTR _crossface$54075[ebp]
	add	eax, 1
	mov	DWORD PTR _crossface$54075[ebp], eax
; Line 2032
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _abn$54086[ebp]
	mov	DWORD PTR _linkab$54085[ebp+ecx*8], eax
; Line 2033
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _abn$54086[ebp]
	mov	DWORD PTR _linkab$54085[ebp+eax*8+4], edx
; Line 2034
	mov	ecx, DWORD PTR _abn$54086[ebp]
	add	ecx, 1
	mov	DWORD PTR _abn$54086[ebp], ecx
; Line 2035
	lea	edx, DWORD PTR _v2$54096[ebp]
	push	edx
	lea	eax, DWORD PTR _v1$54095[ebp]
	push	eax
	lea	ecx, DWORD PTR _u2$54094[ebp]
	push	ecx
	lea	edx, DWORD PTR _u1$54093[ebp]
	push	edx
	lea	eax, DWORD PTR $T54136[ebp]
	push	eax
	call	?intersection@@YA?AVbtVector3@@AAV1@000@Z ; intersection
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _intersect$54077[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _intersect$54077[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _intersect$54077[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _intersect$54077[ebp+12], edx
$LN317@refine2:
; Line 2037
	mov	eax, DWORD PTR _out_cross$54078[ebp]
	add	eax, 1
	mov	DWORD PTR _out_cross$54078[ebp], eax
$LN318@refine2:
; Line 2047
	jmp	$LN350@refine2
$LN349@refine2:
; Line 2048
	jmp	$LN353@refine2
$LN352@refine2:
; Line 2056
	mov	ecx, DWORD PTR _out_cross$54078[ebp]
	push	ecx
	mov	edx, DWORD PTR _crossface$54075[ebp]
	push	edx
	push	OFFSET $SG54137
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2058
	mov	eax, DWORD PTR _out_cross$54078[ebp]
	add	eax, 1
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cmp	eax, 1
	jle	SHORT $LN316@refine2
; Line 2060
	push	OFFSET $SG54139
	call	_printf
	add	esp, 4
; Line 2061
	push	OFFSET $SG54140
	push	OFFSET ?outputInfo@@3PADA		; outputInfo
	call	_strcat
	add	esp, 8
; Line 2062
	mov	DWORD PTR _out_cross$54078[ebp], 0
; Line 2064
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??1?$btSymMatrix@H@@QAE@XZ
	jmp	$LN418@refine2
	jmp	$LN305@refine2
$LN316@refine2:
; Line 2067
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	$LN314@refine2
; Line 2069
	push	OFFSET $SG54143
	call	_printf
	add	esp, 4
; Line 2072
	mov	DWORD PTR _in$54144[ebp], 0
	jmp	SHORT $LN313@refine2
$LN312@refine2:
	mov	eax, DWORD PTR _in$54144[ebp]
	add	eax, 1
	mov	DWORD PTR _in$54144[ebp], eax
$LN313@refine2:
	mov	ecx, DWORD PTR _in$54144[ebp]
	cmp	ecx, DWORD PTR _abn$54086[ebp]
	jge	$LN311@refine2
; Line 2074
	mov	edx, DWORD PTR _in$54144[ebp]
	mov	eax, DWORD PTR _linkab$54085[ebp+edx*8+4]
	push	eax
	mov	ecx, DWORD PTR _in$54144[ebp]
	mov	edx, DWORD PTR _linkab$54085[ebp+ecx*8]
	push	edx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -3			; fffffffdH
	jne	SHORT $LN310@refine2
; Line 2076
	mov	eax, DWORD PTR _in$54144[ebp]
	mov	ecx, DWORD PTR _linkab$54085[ebp+eax*8+4]
	push	ecx
	mov	edx, DWORD PTR _in$54144[ebp]
	mov	eax, DWORD PTR _linkab$54085[ebp+edx*8]
	push	eax
	push	OFFSET $SG54149
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2077
	mov	ecx, DWORD PTR _in$54144[ebp]
	mov	edx, DWORD PTR _linkab$54085[ebp+ecx*8+4]
	push	edx
	mov	eax, DWORD PTR _in$54144[ebp]
	mov	ecx, DWORD PTR _linkab$54085[ebp+eax*8]
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -4			; fffffffcH
; Line 2078
	jmp	SHORT $LN311@refine2
$LN310@refine2:
; Line 2080
	jmp	$LN312@refine2
$LN311@refine2:
; Line 2085
	lea	ecx, DWORD PTR _intersect$54077[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?store_inter@@3VbtVector3@@A ; store_inter
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
; Line 2086
	lea	ecx, DWORD PTR _intersect$54077[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?store_inter@@3VbtVector3@@A ; store_inter
	call	?setY@btVector3@@QAEXM@Z		; btVector3::setY
; Line 2087
	lea	ecx, DWORD PTR _intersect$54077[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?store_inter@@3VbtVector3@@A ; store_inter
	call	?setZ@btVector3@@QAEXM@Z		; btVector3::setZ
	jmp	$LN305@refine2
$LN314@refine2:
; Line 2090
	cmp	DWORD PTR _crossface$54075[ebp], 0
	jne	$LN305@refine2
; Line 2092
	push	OFFSET $SG54152
	call	_printf
	add	esp, 4
; Line 2094
	mov	DWORD PTR _j$[ebp], 2
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN307@refine2
$LN306@refine2:
	mov	edx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _j$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN307@refine2:
	cmp	DWORD PTR _k$[ebp], 3
	jge	$LN305@refine2
; Line 2098
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _ab$54156[ebp]
	push	ecx
	call	?getab@@YA?AVbtVector3@@AAV1@0@Z	; getab
	add	esp, 12					; 0000000cH
; Line 2099
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54156[ebp]
	fstp	DWORD PTR tv10786[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10786[ebp]
	fsub	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG54158
	call	_printf
	add	esp, 20					; 00000014H
; Line 2102
	cmp	DWORD PTR ?start_dir@@3HA, 0		; start_dir
	je	SHORT $LN303@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 3		; start_dir
	jne	$LN304@refine2
$LN303@refine2:
; Line 2109
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	SHORT $LN300@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+16]
	je	$LN301@refine2
$LN300@refine2:
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+16]
	jne	$LN302@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	SHORT $LN302@refine2
$LN301@refine2:
; Line 2110
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -4			; fffffffcH
; Line 2117
	jmp	$LN298@refine2
$LN302@refine2:
; Line 2118
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR _facenum$54049[ebp+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	SHORT $LN296@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+12]
	je	$LN297@refine2
$LN296@refine2:
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+12]
	jne	$LN298@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	SHORT $LN298@refine2
$LN297@refine2:
; Line 2119
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -4			; fffffffcH
$LN298@refine2:
; Line 2121
	jmp	$LN282@refine2
$LN304@refine2:
; Line 2122
	cmp	DWORD PTR ?start_dir@@3HA, 1		; start_dir
	je	SHORT $LN293@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 2		; start_dir
	jne	$LN282@refine2
$LN293@refine2:
; Line 2125
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN290@refine2
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54156[ebp]
	fstp	DWORD PTR tv10788[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10788[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN291@refine2
$LN290@refine2:
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	$LN292@refine2
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54156[ebp]
	fstp	DWORD PTR tv10790[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10790[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	$LN292@refine2
$LN291@refine2:
; Line 2127
	push	OFFSET $SG54174
	call	_printf
	add	esp, 4
; Line 2129
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR _facenum$54049[ebp+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	SHORT $LN287@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+16]
	je	$LN288@refine2
$LN287@refine2:
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+16]
	jne	$LN289@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	SHORT $LN289@refine2
$LN288@refine2:
; Line 2130
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -4			; fffffffcH
$LN289@refine2:
; Line 2133
	jmp	$LN282@refine2
$LN292@refine2:
; Line 2134
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN283@refine2
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54156[ebp]
	fstp	DWORD PTR tv10792[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10792[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN284@refine2
$LN283@refine2:
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	$LN282@refine2
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54156[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54156[ebp]
	fstp	DWORD PTR tv10794[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10794[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN282@refine2
$LN284@refine2:
; Line 2136
	push	OFFSET $SG54182
	call	_printf
	add	esp, 4
; Line 2138
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR _facenum$54049[ebp+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	SHORT $LN280@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+12]
	je	$LN281@refine2
$LN280@refine2:
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+12]
	jne	$LN282@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	SHORT $LN282@refine2
$LN281@refine2:
; Line 2139
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -4			; fffffffcH
$LN282@refine2:
; Line 2143
	jmp	$LN306@refine2
$LN305@refine2:
; Line 2155
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _corner2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fcomp	DWORD PTR _allow$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN279@refine2
; Line 2157
	lea	ecx, DWORD PTR _corner2$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?setY@btVector3@@QAEXM@Z		; btVector3::setY
; Line 2158
	mov	DWORD PTR _cutedge$54076[ebp], 1
; Line 2159
	mov	DWORD PTR _end_dir$54186[ebp], 0
	jmp	$LN273@refine2
$LN279@refine2:
; Line 2162
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	lea	ecx, DWORD PTR _corner1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fcomp	DWORD PTR _allow$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN277@refine2
; Line 2164
	lea	ecx, DWORD PTR _corner1$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
; Line 2165
	mov	DWORD PTR _cutedge$54076[ebp], 1
; Line 2166
	mov	DWORD PTR _end_dir$54186[ebp], 1
	jmp	$LN273@refine2
$LN277@refine2:
; Line 2169
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	lea	ecx, DWORD PTR _corner0$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fcomp	DWORD PTR _allow$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN275@refine2
; Line 2171
	lea	ecx, DWORD PTR _corner0$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
; Line 2172
	mov	DWORD PTR _cutedge$54076[ebp], 1
; Line 2173
	mov	DWORD PTR _end_dir$54186[ebp], 2
	jmp	SHORT $LN273@refine2
$LN275@refine2:
; Line 2176
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _corner0$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fcomp	DWORD PTR _allow$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN273@refine2
; Line 2178
	lea	ecx, DWORD PTR _corner0$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?setY@btVector3@@QAEXM@Z		; btVector3::setY
; Line 2179
	mov	DWORD PTR _cutedge$54076[ebp], 1
; Line 2180
	mov	DWORD PTR _end_dir$54186[ebp], 3
$LN273@refine2:
; Line 2188
	cmp	DWORD PTR ?state@@3HA, 1		; state
	jne	SHORT $LN270@refine2
	cmp	DWORD PTR _end_dir$54186[ebp], 3
	je	SHORT $LN271@refine2
$LN270@refine2:
	cmp	DWORD PTR ?state@@3HA, 3		; state
	jne	SHORT $LN269@refine2
	cmp	DWORD PTR _end_dir$54186[ebp], 2
	je	SHORT $LN271@refine2
$LN269@refine2:
	cmp	DWORD PTR ?state@@3HA, 5		; state
	jne	SHORT $LN268@refine2
	cmp	DWORD PTR _end_dir$54186[ebp], 1
	je	SHORT $LN271@refine2
$LN268@refine2:
	cmp	DWORD PTR ?state@@3HA, 7		; state
	jne	SHORT $LN272@refine2
	cmp	DWORD PTR _end_dir$54186[ebp], 0
	jne	SHORT $LN272@refine2
$LN271@refine2:
; Line 2189
	mov	DWORD PTR _end_foldline$[ebp], 1
$LN272@refine2:
; Line 2194
	cmp	DWORD PTR _f$54050[ebp], 1
	jle	SHORT $LN267@refine2
	cmp	DWORD PTR _cutedge$54076[ebp], 1
	jne	SHORT $LN267@refine2
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	SHORT $LN267@refine2
; Line 2196
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??1?$btSymMatrix@H@@QAE@XZ
	jmp	$LN418@refine2
$LN267@refine2:
; Line 2202
	mov	DWORD PTR _j$[ebp], 2
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN266@refine2
$LN265@refine2:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
$LN266@refine2:
	cmp	DWORD PTR _k$[ebp], 3
	jge	$LN264@refine2
; Line 2206
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [eax+edx*4+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	DWORD PTR _I$54203[ebp], eax
; Line 2207
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR _facenum$54049[ebp+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	DWORD PTR _J$54204[ebp], edx
; Line 2209
	mov	eax, DWORD PTR _J$54204[ebp]
	push	eax
	mov	ecx, DWORD PTR _I$54203[ebp]
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -3			; fffffffdH
	jne	$LN247@refine2
; Line 2212
	mov	edx, DWORD PTR _I$54203[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _a$54206[ebp], eax
; Line 2213
	mov	eax, DWORD PTR _J$54204[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _b$54207[ebp], eax
; Line 2219
	mov	ecx, DWORD PTR _fi$54063[ebp]
	cmp	DWORD PTR ?last_face@@3PAHA[ecx*4], -1
	jne	$LN262@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 0		; start_dir
	jne	$LN262@refine2
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	$LN262@refine2
	mov	ecx, DWORD PTR _b$54207[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	$LN262@refine2
; Line 2222
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN261@refine2
; Line 2225
	mov	edx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _right_node$54074[ebp], edx
; Line 2226
	mov	eax, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _left_node$54073[ebp], eax
	jmp	SHORT $LN259@refine2
$LN261@refine2:
; Line 2228
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN259@refine2
; Line 2231
	mov	ecx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _right_node$54074[ebp], ecx
; Line 2232
	mov	edx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _left_node$54073[ebp], edx
$LN259@refine2:
; Line 2235
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _right_node$54074[ebp]
	push	ecx
	push	OFFSET $SG54212
	call	_printf
	add	esp, 12					; 0000000cH
	jmp	$LN247@refine2
$LN262@refine2:
; Line 2238
	mov	edx, DWORD PTR _fi$54063[ebp]
	cmp	DWORD PTR ?last_face@@3PAHA[edx*4], -1
	jne	$LN257@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 1		; start_dir
	jne	$LN257@refine2
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN257@refine2
	mov	ecx, DWORD PTR _b$54207[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN257@refine2
; Line 2241
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN256@refine2
; Line 2244
	mov	eax, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _right_node$54074[ebp], eax
; Line 2245
	mov	ecx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _left_node$54073[ebp], ecx
	jmp	SHORT $LN254@refine2
$LN256@refine2:
; Line 2247
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN254@refine2
; Line 2250
	mov	edx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _right_node$54074[ebp], edx
; Line 2251
	mov	eax, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _left_node$54073[ebp], eax
$LN254@refine2:
; Line 2254
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	push	OFFSET $SG54218
	call	_printf
	add	esp, 12					; 0000000cH
	jmp	$LN247@refine2
$LN257@refine2:
; Line 2257
	mov	eax, DWORD PTR _fi$54063[ebp]
	cmp	DWORD PTR ?last_face@@3PAHA[eax*4], -1
	jne	$LN252@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 2		; start_dir
	jne	$LN252@refine2
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	$LN252@refine2
	mov	ecx, DWORD PTR _b$54207[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	$LN252@refine2
; Line 2260
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN251@refine2
; Line 2263
	mov	ecx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _right_node$54074[ebp], ecx
; Line 2264
	mov	edx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _left_node$54073[ebp], edx
	jmp	SHORT $LN249@refine2
$LN251@refine2:
; Line 2266
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN249@refine2
; Line 2269
	mov	eax, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _right_node$54074[ebp], eax
; Line 2270
	mov	ecx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _left_node$54073[ebp], ecx
$LN249@refine2:
; Line 2273
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	eax, DWORD PTR _right_node$54074[ebp]
	push	eax
	push	OFFSET $SG54224
	call	_printf
	add	esp, 12					; 0000000cH
	jmp	$LN247@refine2
$LN252@refine2:
; Line 2276
	mov	ecx, DWORD PTR _fi$54063[ebp]
	cmp	DWORD PTR ?last_face@@3PAHA[ecx*4], -1
	jne	$LN247@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 3		; start_dir
	jne	$LN247@refine2
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN247@refine2
	mov	ecx, DWORD PTR _b$54207[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN247@refine2
; Line 2278
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN246@refine2
; Line 2281
	mov	edx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _right_node$54074[ebp], edx
; Line 2282
	mov	eax, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _left_node$54073[ebp], eax
	jmp	SHORT $LN244@refine2
$LN246@refine2:
; Line 2284
	mov	ecx, DWORD PTR _a$54206[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _impact$[ebx]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN244@refine2
; Line 2287
	mov	ecx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _right_node$54074[ebp], ecx
; Line 2288
	mov	edx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _left_node$54073[ebp], edx
$LN244@refine2:
; Line 2291
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _right_node$54074[ebp]
	push	ecx
	push	OFFSET $SG54230
	call	_printf
	add	esp, 12					; 0000000cH
$LN247@refine2:
; Line 2296
	mov	edx, DWORD PTR _J$54204[ebp]
	push	edx
	mov	eax, DWORD PTR _I$54203[ebp]
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -4			; fffffffcH
	jne	$LN225@refine2
; Line 2299
	mov	ecx, DWORD PTR _J$54204[ebp]
	push	ecx
	mov	edx, DWORD PTR _I$54203[ebp]
	push	edx
	push	OFFSET $SG54232
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2301
	mov	eax, DWORD PTR _I$54203[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _a$54233[ebp], eax
; Line 2302
	mov	ecx, DWORD PTR _J$54204[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _b$54234[ebp], eax
; Line 2305
	mov	edx, DWORD PTR _impact$[ebx]
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	eax, DWORD PTR _ab$54235[ebp]
	push	eax
	call	?getab@@YA?AVbtVector3@@AAV1@0@Z	; getab
	add	esp, 12					; 0000000cH
; Line 2306
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG54237
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2308
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10796[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10796[ebp]
	fsub	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG54238
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2309
	mov	ecx, DWORD PTR _b$54234[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _b$54234[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10798[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10798[ebp]
	fsub	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG54239
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2310
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _I$54203[ebp]
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+4]
	je	SHORT $LN241@refine2
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _I$54203[ebp]
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+8]
	je	SHORT $LN241@refine2
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _J$54204[ebp]
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+4]
	je	SHORT $LN241@refine2
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _J$54204[ebp]
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+8]
	jne	SHORT $LN242@refine2
$LN241@refine2:
; Line 2311
	jmp	$LN225@refine2
$LN242@refine2:
; Line 2314
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	$LN239@refine2
; Line 2317
	cmp	DWORD PTR ?start_dir@@3HA, 0		; start_dir
	je	SHORT $LN237@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 3		; start_dir
	je	SHORT $LN237@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 1		; start_dir
	je	SHORT $LN237@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 2		; start_dir
	jne	$LN238@refine2
$LN237@refine2:
; Line 2320
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	$LN236@refine2
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld1
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN236@refine2
; Line 2322
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10800[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10800[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN235@refine2
; Line 2324
	mov	ecx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _right_node$54074[ebp], ecx
; Line 2325
	mov	edx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _left_node$54073[ebp], edx
; Line 2327
	jmp	SHORT $LN234@refine2
$LN235@refine2:
; Line 2329
	mov	eax, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _right_node$54074[ebp], eax
; Line 2330
	mov	ecx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _left_node$54073[ebp], ecx
$LN234@refine2:
; Line 2334
	jmp	$LN228@refine2
$LN236@refine2:
; Line 2335
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN230@refine2
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10802[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10802[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN231@refine2
$LN230@refine2:
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN232@refine2
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10804[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10804[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN232@refine2
$LN231@refine2:
; Line 2338
	mov	edx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _right_node$54074[ebp], edx
; Line 2339
	mov	eax, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _left_node$54073[ebp], eax
; Line 2342
	jmp	$LN228@refine2
$LN232@refine2:
; Line 2343
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN226@refine2
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10806[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10806[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN227@refine2
$LN226@refine2:
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN228@refine2
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10808[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10808[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN228@refine2
$LN227@refine2:
; Line 2345
	mov	ecx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _right_node$54074[ebp], ecx
; Line 2346
	mov	edx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _left_node$54073[ebp], edx
$LN228@refine2:
; Line 2348
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _right_node$54074[ebp]
	push	ecx
	push	OFFSET $SG54257
	call	_printf
	add	esp, 12					; 0000000cH
$LN238@refine2:
; Line 2352
	jmp	$LN225@refine2
$LN239@refine2:
; Line 2354
	cmp	DWORD PTR ?start_dir@@3HA, 0		; start_dir
	je	SHORT $LN223@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 3		; start_dir
	jne	$LN218@refine2
$LN223@refine2:
; Line 2357
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN220@refine2
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10810[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10810[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	je	SHORT $LN221@refine2
$LN220@refine2:
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN222@refine2
	mov	ecx, DWORD PTR _b$54234[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _b$54234[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10812[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10812[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN222@refine2
$LN221@refine2:
; Line 2360
	mov	edx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _right_node$54074[ebp], edx
; Line 2361
	mov	eax, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _left_node$54073[ebp], eax
; Line 2364
	jmp	$LN218@refine2
$LN222@refine2:
; Line 2365
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN216@refine2
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10814[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10814[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jnp	SHORT $LN217@refine2
$LN216@refine2:
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN218@refine2
	mov	ecx, DWORD PTR _b$54234[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _ab$54235[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	edi, eax
	mov	ecx, DWORD PTR _b$54234[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [edi]
	fmul	DWORD PTR [eax]
	fsubr	DWORD PTR [esi]
	lea	ecx, DWORD PTR _ab$54235[ebp]
	fstp	DWORD PTR tv10816[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv10816[ebp]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN218@refine2
$LN217@refine2:
; Line 2367
	mov	ecx, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _right_node$54074[ebp], ecx
; Line 2368
	mov	edx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _left_node$54073[ebp], edx
$LN218@refine2:
; Line 2382
	cmp	DWORD PTR ?start_dir@@3HA, 1		; start_dir
	je	SHORT $LN214@refine2
	cmp	DWORD PTR ?start_dir@@3HA, 2		; start_dir
	jne	$LN211@refine2
$LN214@refine2:
; Line 2384
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _b$54234[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN213@refine2
; Line 2386
	mov	eax, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _right_node$54074[ebp], eax
; Line 2387
	mov	ecx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _left_node$54073[ebp], ecx
	jmp	SHORT $LN211@refine2
$LN213@refine2:
; Line 2389
	mov	ecx, DWORD PTR _a$54233[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _b$54234[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN211@refine2
; Line 2391
	mov	edx, DWORD PTR _J$54204[ebp]
	mov	DWORD PTR _right_node$54074[ebp], edx
; Line 2392
	mov	eax, DWORD PTR _I$54203[ebp]
	mov	DWORD PTR _left_node$54073[ebp], eax
$LN211@refine2:
; Line 2395
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	push	OFFSET $SG54273
	call	_printf
	add	esp, 12					; 0000000cH
$LN225@refine2:
; Line 2400
	jmp	$LN265@refine2
$LN264@refine2:
; Line 2402
	cmp	DWORD PTR _right_node$54074[ebp], -1
	jne	SHORT $LN210@refine2
	cmp	DWORD PTR _left_node$54073[ebp], -1
	jne	SHORT $LN210@refine2
; Line 2404
	push	OFFSET $SG54275
	call	_printf
	add	esp, 4
; Line 2405
	push	OFFSET $SG54276
	push	OFFSET ?outputInfo@@3PADA		; outputInfo
	call	_strcat
	add	esp, 8
; Line 2406
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??1?$btSymMatrix@H@@QAE@XZ
	jmp	$LN418@refine2
$LN210@refine2:
; Line 2412
	cmp	DWORD PTR _end_foldline$[ebp], 1
	jne	$LN209@refine2
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	$LN209@refine2
; Line 2414
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4-4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	mov	DWORD PTR _impact_node$54277[ebp], edx
; Line 2415
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	push	OFFSET $SG54279
	call	_printf
	add	esp, 32					; 00000020H
	jmp	$LN207@refine2
$LN209@refine2:
; Line 2417
	cmp	DWORD PTR _end_foldline$[ebp], 0
	je	SHORT $LN206@refine2
	cmp	DWORD PTR _end_foldline$[ebp], 1
	jne	$LN207@refine2
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	$LN207@refine2
$LN206@refine2:
; Line 2422
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN205@refine2
$LN204@refine2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN205@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN203@refine2
; Line 2425
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR [eax+96]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN202@refine2
; Line 2427
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR [eax+96]
	fdiv	DWORD PTR __real@3f000000
	fstp	DWORD PTR _impact_im$54283[ebp]
; Line 2428
	jmp	SHORT $LN203@refine2
$LN202@refine2:
; Line 2430
	jmp	SHORT $LN204@refine2
$LN203@refine2:
; Line 2432
	fld1
	fdiv	DWORD PTR _impact_im$54283[ebp]
	fstp	DWORD PTR _impact_m$54284[ebp]
; Line 2435
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _impact_v$54289[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _impact_v$54289[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _impact_v$54289[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _impact_v$54289[ebp+12], edx
; Line 2437
	push	ecx
	fld	DWORD PTR _impact_m$54284[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _impact$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 2438
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	mov	DWORD PTR _impact_node$54277[ebp], eax
; Line 2439
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	push	OFFSET $SG54290
	call	_printf
	add	esp, 32					; 00000020H
; Line 2440
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _V$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _V$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _V$[ebp+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _V$[ebp+12]
	mov	DWORD PTR [eax+12], ecx
; Line 2441
	mov	edx, DWORD PTR _newnodes$[ebp]
	add	edx, 1
	mov	DWORD PTR _newnodes$[ebp], edx
; Line 2442
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
; Line 2444
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+120], 1
$LN207@refine2:
; Line 2448
	fld	DWORD PTR __real@3da3d70a
	fstp	DWORD PTR _gap$54291[ebp]
; Line 2453
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	SHORT $LN201@refine2
; Line 2454
	mov	ecx, OFFSET ?store_inter@@3VbtVector3@@A ; store_inter
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, OFFSET ?store_inter@@3VbtVector3@@A ; store_inter
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, OFFSET ?store_inter@@3VbtVector3@@A ; store_inter
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG54298
	call	_printf
	add	esp, 28					; 0000001cH
$LN201@refine2:
; Line 2458
	lea	ecx, DWORD PTR _x$54301[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	lea	ecx, DWORD PTR _v$54302[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 2461
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN200@refine2
$LN199@refine2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN200@refine2:
	cmp	DWORD PTR _i$[ebp], 3
	jge	$LN198@refine2
; Line 2464
	mov	edx, DWORD PTR _fi$54063[ebp]
	imul	edx, 12					; 0000000cH
	lea	eax, DWORD PTR _face$54048[ebp+edx]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	edx, DWORD PTR _right_node$54074[ebp]
	je	$LN187@refine2
	mov	eax, DWORD PTR _fi$54063[ebp]
	imul	eax, 12					; 0000000cH
	lea	ecx, DWORD PTR _face$54048[ebp+eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _left_node$54073[ebp]
	je	$LN187@refine2
; Line 2467
	mov	ecx, DWORD PTR _fi$54063[ebp]
	imul	ecx, 12					; 0000000cH
	lea	edx, DWORD PTR _face$54048[ebp+ecx]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _up_node$54292[ebp], ecx
; Line 2468
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	push	OFFSET $SG54307
	call	_printf
	add	esp, 8
; Line 2471
	cmp	DWORD PTR _end_foldline$[ebp], 1
	jne	SHORT $LN196@refine2
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN196@refine2
; Line 2473
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4-4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+4]
	mov	DWORD PTR _rcut_node$54293[ebp], edx
; Line 2474
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4-4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	mov	DWORD PTR _lcut_node$54294[ebp], edx
; Line 2476
	push	OFFSET $SG54309
	call	_printf
	add	esp, 4
$LN196@refine2:
; Line 2480
	cmp	DWORD PTR _end_foldline$[ebp], 0
	je	SHORT $LN194@refine2
	cmp	DWORD PTR _end_foldline$[ebp], 1
	jne	$LN192@refine2
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	$LN192@refine2
$LN194@refine2:
; Line 2483
	push	256					; 00000100H
	push	ecx
	fld	DWORD PTR _accurary$[ebx]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _right_node$54074[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	call	?Solve@@YAMABVbtVector3@@00MH@Z		; Solve
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _t$54299[ebp]
; Line 2485
	fldz
	fcomp	DWORD PTR _t$54299[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN193@refine2
; Line 2487
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _right_node$54074[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	edx, DWORD PTR $T54313[ebp]
	push	edx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$54301[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$54301[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$54301[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _x$54301[ebp+12], edx
; Line 2488
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$54302[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$54302[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$54302[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _v$54302[ebp+12], edx
; Line 2489
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _right_node$54074[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z	; btSoftBody::cal_m
	fstp	DWORD PTR _m$54300[ebp]
; Line 2491
	push	ecx
	fld	DWORD PTR _m$54300[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _x$54301[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 2492
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	mov	DWORD PTR _rcut_node$54293[ebp], eax
; Line 2493
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _V$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _V$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _V$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _V$[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 2494
	mov	eax, DWORD PTR _newnodes$[ebp]
	add	eax, 1
	mov	DWORD PTR _newnodes$[ebp], eax
; Line 2495
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
; Line 2496
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	push	OFFSET $SG54314
	call	_printf
	add	esp, 32					; 00000020H
$LN193@refine2:
; Line 2503
	push	256					; 00000100H
	push	ecx
	fld	DWORD PTR _accurary$[ebx]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	call	?Solve@@YAMABVbtVector3@@00MH@Z		; Solve
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _t$54299[ebp]
; Line 2504
	fldz
	fcomp	DWORD PTR _t$54299[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN192@refine2
; Line 2506
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T54316[ebp]
	push	ecx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _x$54301[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$54301[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$54301[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _x$54301[ebp+12], eax
; Line 2507
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _v$54302[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$54302[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$54302[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _v$54302[ebp+12], eax
; Line 2508
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z	; btSoftBody::cal_m
	fstp	DWORD PTR _m$54300[ebp]
; Line 2510
	push	ecx
	fld	DWORD PTR _m$54300[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _x$54301[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 2511
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	mov	DWORD PTR _lcut_node$54294[ebp], eax
; Line 2512
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _V$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _V$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _V$[ebp+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _V$[ebp+12]
	mov	DWORD PTR [eax+12], ecx
; Line 2513
	mov	edx, DWORD PTR _newnodes$[ebp]
	add	edx, 1
	mov	DWORD PTR _newnodes$[ebp], edx
; Line 2514
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
; Line 2515
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _lcut_node$54294[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	push	OFFSET $SG54317
	call	_printf
	add	esp, 32					; 00000020H
$LN192@refine2:
; Line 2520
	mov	ecx, DWORD PTR _fi$54063[ebp]
	cmp	DWORD PTR ?last_face@@3PAHA[ecx*4], -1
	jne	$LN191@refine2
; Line 2522
	mov	DWORD PTR _cut_state$54071[ebp], 0
; Line 2527
	cmp	DWORD PTR _cut_foldline$[ebp], 1
	jne	SHORT $LN190@refine2
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN190@refine2
; Line 2529
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4-4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	add	ecx, 2
	mov	DWORD PTR _edge_rcut$54295[ebp], ecx
; Line 2530
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4-4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+8]
	add	ecx, 2
	mov	DWORD PTR _edge_lcut$54296[ebp], ecx
; Line 2531
	jmp	$LN198@refine2
$LN190@refine2:
; Line 2534
	push	256					; 00000100H
	push	ecx
	fld	DWORD PTR _accurary$[ebx]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ?start@@3VbtVector3@@A		; start
	push	OFFSET ?start@@3VbtVector3@@A		; start
	call	?Solve@@YAMABVbtVector3@@00MH@Z		; Solve
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _t$54299[ebp]
; Line 2535
	fldz
	fcomp	DWORD PTR _t$54299[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN189@refine2
; Line 2537
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _right_node$54074[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ?start@@3VbtVector3@@A		; start
	lea	ecx, DWORD PTR $T54321[ebp]
	push	ecx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _x$54301[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$54301[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$54301[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _x$54301[ebp+12], eax
; Line 2538
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _v$54302[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$54302[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$54302[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _v$54302[ebp+12], eax
; Line 2539
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z	; btSoftBody::cal_m
	fstp	DWORD PTR _m$54300[ebp]
; Line 2541
	push	ecx
	fld	DWORD PTR _m$54300[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _x$54301[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 2542
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	mov	DWORD PTR _edge_rcut$54295[ebp], eax
; Line 2543
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _V$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _V$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _V$[ebp+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _V$[ebp+12]
	mov	DWORD PTR [eax+12], ecx
; Line 2544
	mov	edx, DWORD PTR _newnodes$[ebp]
	add	edx, 1
	mov	DWORD PTR _newnodes$[ebp], edx
; Line 2545
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
$LN189@refine2:
; Line 2551
	push	256					; 00000100H
	push	ecx
	fld	DWORD PTR _accurary$[ebx]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ?start@@3VbtVector3@@A		; start
	push	OFFSET ?start@@3VbtVector3@@A		; start
	call	?Solve@@YAMABVbtVector3@@00MH@Z		; Solve
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _t$54299[ebp]
; Line 2552
	fldz
	fcomp	DWORD PTR _t$54299[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN188@refine2
; Line 2554
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ?start@@3VbtVector3@@A		; start
	lea	edx, DWORD PTR $T54323[ebp]
	push	edx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$54301[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$54301[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$54301[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _x$54301[ebp+12], edx
; Line 2555
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$54302[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$54302[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$54302[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _v$54302[ebp+12], edx
; Line 2556
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z	; btSoftBody::cal_m
	fstp	DWORD PTR _m$54300[ebp]
; Line 2558
	push	ecx
	fld	DWORD PTR _m$54300[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _x$54301[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 2559
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	mov	DWORD PTR _edge_lcut$54296[ebp], eax
; Line 2560
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _V$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _V$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _V$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _V$[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 2561
	mov	eax, DWORD PTR _newnodes$[ebp]
	add	eax, 1
	mov	DWORD PTR _newnodes$[ebp], eax
; Line 2562
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
$LN188@refine2:
; Line 2567
	jmp	$LN198@refine2
; Line 2570
	jmp	$LN187@refine2
$LN191@refine2:
; Line 2573
	mov	DWORD PTR _cut_state$54071[ebp], 1
; Line 2576
	cmp	DWORD PTR _crossface$54075[ebp], 0
	jne	SHORT $LN183@refine2
; Line 2579
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _right_node$54074[ebp]
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	jne	SHORT $LN185@refine2
; Line 2580
	mov	DWORD PTR _up_face$54072[ebp], 0
	jmp	SHORT $LN183@refine2
$LN185@refine2:
; Line 2581
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _left_node$54073[ebp]
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	jne	SHORT $LN183@refine2
; Line 2582
	mov	DWORD PTR _up_face$54072[ebp], 1
$LN183@refine2:
; Line 2584
	mov	ecx, DWORD PTR _up_face$54072[ebp]
	push	ecx
	push	OFFSET $SG54329
	call	_printf
	add	esp, 8
; Line 2587
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	$LN180@refine2
; Line 2590
	push	256					; 00000100H
	push	ecx
	fld	DWORD PTR _accurary$[ebx]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ?store_inter@@3VbtVector3@@A	; store_inter
	push	OFFSET ?store_inter@@3VbtVector3@@A	; store_inter
	call	?Solve@@YAMABVbtVector3@@00MH@Z		; Solve
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _t$54299[ebp]
; Line 2591
	fld	DWORD PTR _t$54299[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG54331
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2592
	fldz
	fcomp	DWORD PTR _t$54299[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN181@refine2
; Line 2594
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _right_node$54074[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ?store_inter@@3VbtVector3@@A	; store_inter
	lea	ecx, DWORD PTR $T54333[ebp]
	push	ecx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _x$54301[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$54301[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$54301[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _x$54301[ebp+12], eax
; Line 2595
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _v$54302[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$54302[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$54302[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _v$54302[ebp+12], eax
; Line 2596
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z	; btSoftBody::cal_m
	fstp	DWORD PTR _m$54300[ebp]
; Line 2598
	push	ecx
	fld	DWORD PTR _m$54300[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _x$54301[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 2599
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	mov	DWORD PTR _edge_rcut$54295[ebp], eax
; Line 2600
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _V$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _V$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _V$[ebp+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _V$[ebp+12]
	mov	DWORD PTR [eax+12], ecx
; Line 2601
	mov	edx, DWORD PTR _newnodes$[ebp]
	add	edx, 1
	mov	DWORD PTR _newnodes$[ebp], edx
; Line 2602
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
; Line 2603
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	push	OFFSET $SG54334
	call	_printf
	add	esp, 32					; 00000020H
$LN181@refine2:
; Line 2608
	push	256					; 00000100H
	push	ecx
	fld	DWORD PTR _accurary$[ebx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ?store_inter@@3VbtVector3@@A	; store_inter
	push	OFFSET ?store_inter@@3VbtVector3@@A	; store_inter
	call	?Solve@@YAMABVbtVector3@@00MH@Z		; Solve
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _t$54299[ebp]
; Line 2609
	fldz
	fcomp	DWORD PTR _t$54299[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN180@refine2
; Line 2611
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	OFFSET ?store_inter@@3VbtVector3@@A	; store_inter
	lea	eax, DWORD PTR $T54336[ebp]
	push	eax
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$54301[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$54301[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$54301[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _x$54301[ebp+12], edx
; Line 2612
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$54302[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$54302[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$54302[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _v$54302[ebp+12], edx
; Line 2613
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	push	ecx
	fld	DWORD PTR _t$54299[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cal_m@btSoftBody@@QAEMAAUNode@1@0M0@Z	; btSoftBody::cal_m
	fstp	DWORD PTR _m$54300[ebp]
; Line 2615
	push	ecx
	fld	DWORD PTR _m$54300[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _x$54301[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 2616
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	mov	DWORD PTR _edge_lcut$54296[ebp], eax
; Line 2617
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _V$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _V$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _V$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _V$[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 2618
	mov	eax, DWORD PTR _newnodes$[ebp]
	add	eax, 1
	mov	DWORD PTR _newnodes$[ebp], eax
; Line 2619
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
; Line 2620
	mov	ecx, DWORD PTR _edge_lcut$54296[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _edge_lcut$54296[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _edge_lcut$54296[ebp]
	push	ecx
	push	OFFSET $SG54337
	call	_printf
	add	esp, 32					; 00000020H
$LN180@refine2:
; Line 2624
	jmp	SHORT $LN198@refine2
$LN187@refine2:
; Line 2627
	jmp	$LN199@refine2
$LN198@refine2:
; Line 2629
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	call	?same_side@@YAHAAVbtVector3@@000@Z	; same_side
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET $SG54338
	call	_printf
	add	esp, 8
; Line 2630
	cmp	DWORD PTR _cut_state$54071[ebp], 0
	jne	$LN179@refine2
; Line 2632
	push	OFFSET $SG54340
	call	_printf
	add	esp, 4
; Line 2635
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN178@refine2
$LN177@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN178@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN176@refine2
; Line 2638
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _feat$54344[ebp], eax
; Line 2639
	mov	ecx, DWORD PTR _feat$54344[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	DWORD PTR _idx$54345[ebp], edx
; Line 2640
	mov	eax, DWORD PTR _feat$54344[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _idx$54345[ebp+4], ecx
; Line 2641
	mov	edx, DWORD PTR _feat$54344[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	DWORD PTR _idx$54345[ebp+8], eax
; Line 2644
	mov	ecx, DWORD PTR _fi$54063[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _idx$54345[ebp]
	cmp	edx, DWORD PTR _face$54048[ebp+ecx]
	jne	$LN175@refine2
	mov	eax, DWORD PTR _fi$54063[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _idx$54345[ebp+4]
	cmp	ecx, DWORD PTR _face$54048[ebp+eax+4]
	jne	$LN175@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _idx$54345[ebp+8]
	cmp	eax, DWORD PTR _face$54048[ebp+edx+8]
	jne	$LN175@refine2
; Line 2647
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 2649
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54347[ebp], eax
; Line 2650
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54347[ebp+4], eax
; Line 2653
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54347[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 2654
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54347[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2655
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54347[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2658
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54347[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 2659
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54347[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 2660
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54347[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 2664
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 2666
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftt$54348[ebp], eax
; Line 2669
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftt$54348[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2670
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54348[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2671
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54348[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2675
	push	0
	push	0
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2676
	push	0
	push	0
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2677
	push	0
	push	0
	mov	eax, DWORD PTR _right_node$54074[ebp]
	push	eax
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2681
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 2683
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pfttt$54349[ebp], eax
; Line 2684
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pfttt$54349[ebp+4], eax
; Line 2687
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pfttt$54349[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2688
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54349[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2689
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54349[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2692
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54349[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 2693
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54349[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 2694
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54349[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 2698
	push	0
	push	0
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2699
	push	0
	push	0
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2704
	mov	DWORD PTR _j$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN174@refine2
$LN173@refine2:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN174@refine2:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	$LN172@refine2
; Line 2706
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _feat$54353[ebp], eax
; Line 2707
	mov	eax, DWORD PTR _feat$54353[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _idx$54354[ebp], ecx
; Line 2708
	mov	edx, DWORD PTR _feat$54353[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	DWORD PTR _idx$54354[ebp+4], eax
; Line 2710
	mov	ecx, DWORD PTR _idx$54354[ebp]
	cmp	ecx, DWORD PTR _impact_node$54277[ebp]
	jne	SHORT $LN169@refine2
	mov	edx, DWORD PTR _idx$54354[ebp+4]
	cmp	edx, DWORD PTR _right_node$54074[ebp]
	je	SHORT $LN170@refine2
$LN169@refine2:
	mov	eax, DWORD PTR _idx$54354[ebp+4]
	cmp	eax, DWORD PTR _impact_node$54277[ebp]
	jne	$LN171@refine2
	mov	ecx, DWORD PTR _idx$54354[ebp]
	cmp	ecx, DWORD PTR _right_node$54074[ebp]
	jne	$LN171@refine2
$LN170@refine2:
; Line 2713
	push	0
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 2715
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54358[ebp], eax
; Line 2716
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54358[ebp+4], eax
; Line 2718
	mov	ecx, DWORD PTR _idx$54354[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54358[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2719
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54358[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2723
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54358[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 2724
	mov	edx, DWORD PTR _idx$54354[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54358[ebp+4]
	mov	DWORD PTR [ecx+12], eax
$LN171@refine2:
; Line 2729
	mov	edx, DWORD PTR _idx$54354[ebp]
	cmp	edx, DWORD PTR _impact_node$54277[ebp]
	jne	SHORT $LN166@refine2
	mov	eax, DWORD PTR _idx$54354[ebp+4]
	cmp	eax, DWORD PTR _left_node$54073[ebp]
	je	SHORT $LN167@refine2
$LN166@refine2:
	mov	ecx, DWORD PTR _idx$54354[ebp+4]
	cmp	ecx, DWORD PTR _impact_node$54277[ebp]
	jne	$LN168@refine2
	mov	edx, DWORD PTR _idx$54354[ebp]
	cmp	edx, DWORD PTR _left_node$54073[ebp]
	jne	$LN168@refine2
$LN167@refine2:
; Line 2732
	push	0
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 2734
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54362[ebp], eax
; Line 2735
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54362[ebp+4], eax
; Line 2737
	mov	edx, DWORD PTR _idx$54354[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54362[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 2738
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54362[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2741
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54362[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 2742
	mov	edx, DWORD PTR _idx$54354[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54362[ebp+4]
	mov	DWORD PTR [ecx+12], eax
$LN168@refine2:
; Line 2749
	jmp	$LN173@refine2
$LN172@refine2:
; Line 2750
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	push	eax
	push	OFFSET $SG54363
	call	_printf
	add	esp, 8
$LN175@refine2:
; Line 2752
	jmp	$LN177@refine2
$LN176@refine2:
; Line 2757
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN165@refine2
$LN164@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN165@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN163@refine2
; Line 2760
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _left_node$54073[ebp]
	jne	SHORT $LN160@refine2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	cmp	eax, DWORD PTR _right_node$54074[ebp]
	je	SHORT $LN161@refine2
$LN160@refine2:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _left_node$54073[ebp]
	jne	SHORT $LN162@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _right_node$54074[ebp]
	jne	SHORT $LN162@refine2
$LN161@refine2:
; Line 2762
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 2763
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 2764
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN162@refine2:
; Line 2767
	jmp	$LN164@refine2
$LN163@refine2:
; Line 2771
	push	0
	push	0
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2772
	push	0
	push	0
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge_lcut$54296[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2778
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[eax], ecx
; Line 2779
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[eax+4], ecx
; Line 2780
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _lcut_node$54294[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[eax+8], ecx
; Line 2781
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _right_node$54074[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[eax+12], ecx
; Line 2782
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[eax+16], ecx
; Line 2783
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _facenum$54049[ebp+edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _up_node$54292[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[eax+20], ecx
; Line 2785
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	mov	DWORD PTR ?last_face@@3PAHA[edx*4], ecx
	jmp	$LN158@refine2
$LN179@refine2:
; Line 2790
	cmp	DWORD PTR _cut_state$54071[ebp], 1
	jne	$LN158@refine2
; Line 2793
	push	OFFSET $SG54372
	call	_printf
	add	esp, 4
; Line 2796
	mov	DWORD PTR _poplr$54373[ebp], -1
; Line 2797
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	$LN154@refine2
; Line 2799
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN156@refine2
$LN155@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN156@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN154@refine2
; Line 2802
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _feat$54378[ebp], eax
; Line 2803
	mov	ecx, DWORD PTR _feat$54378[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	DWORD PTR _idx$54379[ebp], edx
; Line 2804
	mov	eax, DWORD PTR _feat$54378[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _idx$54379[ebp+4], ecx
; Line 2805
	mov	edx, DWORD PTR _feat$54378[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	DWORD PTR _idx$54379[ebp+8], eax
; Line 2808
	mov	DWORD PTR _j$[ebp], 2
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN153@refine2
$LN152@refine2:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
$LN153@refine2:
	cmp	DWORD PTR _k$[ebp], 3
	jge	$LN151@refine2
; Line 2810
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _l$54383[ebp], edx
; Line 2812
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _idx$54379[ebp+ecx*4]
	push	edx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -4			; fffffffcH
	jne	$LN138@refine2
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _l$54383[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	$LN138@refine2
; Line 2814
	mov	ecx, DWORD PTR _idx$54379[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _idx$54379[ebp+4]
	push	edx
	mov	eax, DWORD PTR _idx$54379[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG54385
	call	_printf
	add	esp, 20					; 00000014H
; Line 2815
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _idx$54379[ebp+ecx*4]
	push	edx
	push	OFFSET $SG54386
	call	_printf
	add	esp, 12					; 0000000cH
; Line 2818
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54379[ebp+eax*4]
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN148@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+8]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -1
	jne	$LN149@refine2
$LN148@refine2:
; Line 2820
	mov	DWORD PTR _poplr$54373[ebp], 0
; Line 2822
	mov	ecx, DWORD PTR _poplr$54373[ebp]
	push	ecx
	push	OFFSET $SG54389
	call	_printf
	add	esp, 8
; Line 2823
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 2825
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftttt$54390[ebp], eax
; Line 2826
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftttt$54390[ebp+4], eax
; Line 2828
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	call	?intersect_in@@YAHAAVbtVector3@@000@Z	; intersect_in
	add	esp, 16					; 00000010H
	cmp	eax, 1
	jne	$LN147@refine2
; Line 2830
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54379[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftttt$54390[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2831
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54390[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2832
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54390[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2833
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54379[ebp+eax*4]
	push	ecx
	push	OFFSET $SG54392
	call	_printf
	add	esp, 16					; 00000010H
; Line 2835
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftttt$54390[ebp+4]
	mov	DWORD PTR [edx+8], eax
; Line 2836
	mov	eax, DWORD PTR _edge_lcut$54296[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54390[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 2837
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54390[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 2838
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	push	OFFSET $SG54393
	call	_printf
	add	esp, 16					; 00000010H
; Line 2840
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN146@refine2
; Line 2842
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
; Line 2843
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
	jmp	SHORT $LN144@refine2
$LN146@refine2:
; Line 2845
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN144@refine2
; Line 2847
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
; Line 2848
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
$LN144@refine2:
; Line 2851
	push	0
	push	0
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+8]
	push	eax
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2852
	push	0
	push	0
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2854
	jmp	$LN143@refine2
$LN147@refine2:
; Line 2856
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54379[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftttt$54390[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2857
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54390[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2858
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54390[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2859
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54379[ebp+eax*4]
	push	ecx
	push	OFFSET $SG54398
	call	_printf
	add	esp, 16					; 00000010H
; Line 2861
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftttt$54390[ebp+4]
	mov	DWORD PTR [edx+8], eax
; Line 2862
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54390[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 2863
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54390[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 2864
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	push	OFFSET $SG54399
	call	_printf
	add	esp, 16					; 00000010H
; Line 2866
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN142@refine2
; Line 2868
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
; Line 2869
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
	jmp	SHORT $LN140@refine2
$LN142@refine2:
; Line 2871
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN140@refine2
; Line 2873
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
; Line 2874
	mov	eax, DWORD PTR _edge_lcut$54296[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
$LN140@refine2:
; Line 2878
	push	0
	push	0
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+8]
	push	eax
	mov	ecx, DWORD PTR _edge_lcut$54296[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2879
	push	0
	push	0
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN143@refine2:
; Line 2881
	jmp	$LN151@refine2
	jmp	$LN138@refine2
$LN149@refine2:
; Line 2884
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+4]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54379[ebp+eax*4]
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -1
	je	SHORT $LN137@refine2
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -1
	jne	$LN138@refine2
$LN137@refine2:
; Line 2886
	mov	DWORD PTR _poplr$54373[ebp], 1
; Line 2888
	mov	ecx, DWORD PTR _poplr$54373[ebp]
	push	ecx
	push	OFFSET $SG54406
	call	_printf
	add	esp, 8
; Line 2889
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 2891
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftttt$54407[ebp], eax
; Line 2892
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftttt$54407[ebp+4], eax
; Line 2895
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	call	?intersect_in@@YAHAAVbtVector3@@000@Z	; intersect_in
	add	esp, 16					; 00000010H
	push	eax
	push	OFFSET $SG54408
	call	_printf
	add	esp, 8
; Line 2896
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _edge_lcut$54296[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	call	?intersect_in@@YAHAAVbtVector3@@000@Z	; intersect_in
	add	esp, 16					; 00000010H
	cmp	eax, 1
	jne	$LN136@refine2
; Line 2898
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54407[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 2899
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftttt$54407[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 2900
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54407[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2901
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54379[ebp+eax*4]
	push	ecx
	push	OFFSET $SG54410
	call	_printf
	add	esp, 16					; 00000010H
; Line 2903
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftttt$54407[ebp+4]
	mov	DWORD PTR [edx+8], eax
; Line 2904
	mov	eax, DWORD PTR _edge_lcut$54296[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54407[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 2905
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54407[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 2906
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _edge_lcut$54296[ebp]
	push	ecx
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	push	OFFSET $SG54411
	call	_printf
	add	esp, 16					; 00000010H
; Line 2908
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN135@refine2
; Line 2910
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
; Line 2911
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
	jmp	SHORT $LN133@refine2
$LN135@refine2:
; Line 2913
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN133@refine2
; Line 2915
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
; Line 2916
	mov	eax, DWORD PTR _edge_lcut$54296[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
$LN133@refine2:
; Line 2920
	push	0
	push	0
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	push	eax
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2921
	push	0
	push	0
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2924
	jmp	$LN132@refine2
$LN136@refine2:
; Line 2926
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54379[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftttt$54407[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2927
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54407[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2928
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54407[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2929
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54379[ebp+eax*4]
	push	ecx
	push	OFFSET $SG54416
	call	_printf
	add	esp, 16					; 00000010H
; Line 2931
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftttt$54407[ebp+4]
	mov	DWORD PTR [edx+8], eax
; Line 2932
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54407[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 2933
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftttt$54407[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 2934
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54379[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	push	OFFSET $SG54417
	call	_printf
	add	esp, 16					; 00000010H
; Line 2936
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN131@refine2
; Line 2938
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
; Line 2939
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
	jmp	SHORT $LN129@refine2
$LN131@refine2:
; Line 2941
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN129@refine2
; Line 2943
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
; Line 2944
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
$LN129@refine2:
; Line 2948
	push	0
	push	0
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	push	eax
	mov	ecx, DWORD PTR _edge_lcut$54296[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2949
	push	0
	push	0
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN132@refine2:
; Line 2951
	jmp	SHORT $LN151@refine2
$LN138@refine2:
; Line 2956
	jmp	$LN152@refine2
$LN151@refine2:
; Line 2957
	jmp	$LN155@refine2
$LN154@refine2:
; Line 2961
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN128@refine2
$LN127@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN128@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN126@refine2
; Line 2964
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _feat$54424[ebp], eax
; Line 2965
	mov	edx, DWORD PTR _feat$54424[ebp]
	mov	eax, DWORD PTR [edx+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	DWORD PTR _idx$54425[ebp], eax
; Line 2966
	mov	ecx, DWORD PTR _feat$54424[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	DWORD PTR _idx$54425[ebp+4], edx
; Line 2967
	mov	eax, DWORD PTR _feat$54424[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _idx$54425[ebp+8], ecx
; Line 2970
	mov	edx, DWORD PTR _fi$54063[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _idx$54425[ebp]
	cmp	eax, DWORD PTR _face$54048[ebp+edx]
	jne	$LN82@refine2
	mov	ecx, DWORD PTR _fi$54063[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _idx$54425[ebp+4]
	cmp	edx, DWORD PTR _face$54048[ebp+ecx+4]
	jne	$LN82@refine2
	mov	eax, DWORD PTR _fi$54063[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _idx$54425[ebp+8]
	cmp	ecx, DWORD PTR _face$54048[ebp+eax+8]
	jne	$LN82@refine2
; Line 2973
	cmp	DWORD PTR _cutedge$54076[ebp], -1
	jne	$LN124@refine2
; Line 2975
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 2977
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54428[ebp], eax
; Line 2978
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54428[ebp+4], eax
; Line 2980
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54428[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 2981
	mov	eax, DWORD PTR _up_node$54292[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54428[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 2982
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54428[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 2983
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	eax, DWORD PTR _up_node$54292[ebp]
	push	eax
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	push	OFFSET $SG54429
	call	_printf
	add	esp, 16					; 00000010H
; Line 2985
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54428[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 2986
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54428[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 2987
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54428[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 2988
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	eax, DWORD PTR _up_node$54292[ebp]
	push	eax
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	push	OFFSET $SG54430
	call	_printf
	add	esp, 16					; 00000010H
; Line 2991
	push	0
	push	0
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2992
	push	0
	push	0
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2993
	push	0
	push	0
	mov	eax, DWORD PTR _right_node$54074[ebp]
	push	eax
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 2995
	cmp	DWORD PTR _up_face$54072[ebp], 0
	jne	$LN123@refine2
; Line 2997
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 2999
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftt$54432[ebp], eax
; Line 3002
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftt$54432[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 3003
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54432[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3004
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftt$54432[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 3006
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN122@refine2
; Line 3007
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
	jmp	SHORT $LN120@refine2
$LN122@refine2:
; Line 3008
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN120@refine2
; Line 3009
	mov	ecx, DWORD PTR _lcut_node$54294[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
$LN120@refine2:
; Line 3011
	push	0
	mov	edx, DWORD PTR _pftt$54432[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+8]
	push	eax
	mov	ecx, DWORD PTR _lcut_node$54294[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
	jmp	$LN118@refine2
$LN123@refine2:
; Line 3013
	cmp	DWORD PTR _up_face$54072[ebp], 1
	jne	$LN118@refine2
; Line 3015
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3016
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftt$54438[ebp], eax
; Line 3019
	mov	ecx, DWORD PTR _right_node$54074[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftt$54438[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 3020
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54438[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3021
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pftt$54438[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 3023
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN117@refine2
; Line 3024
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
	jmp	SHORT $LN115@refine2
$LN117@refine2:
; Line 3025
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN115@refine2
; Line 3026
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
$LN115@refine2:
; Line 3027
	push	0
	push	0
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN118@refine2:
; Line 3031
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	$LN114@refine2
; Line 3034
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3036
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftt$54443[ebp], eax
; Line 3039
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54443[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3040
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54443[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3041
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54443[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 3042
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	push	OFFSET $SG54444
	call	_printf
	add	esp, 16					; 00000010H
; Line 3045
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3047
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pfttt$54445[ebp], eax
; Line 3048
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pfttt$54445[ebp+4], eax
; Line 3051
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pfttt$54445[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 3052
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54445[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3053
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54445[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 3054
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	push	OFFSET $SG54446
	call	_printf
	add	esp, 16					; 00000010H
; Line 3056
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54445[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3057
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54445[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 3058
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pfttt$54445[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 3059
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	push	OFFSET $SG54447
	call	_printf
	add	esp, 16					; 00000010H
; Line 3061
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN113@refine2
; Line 3063
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	cmp	DWORD PTR [eax+112], 1
	jne	SHORT $LN112@refine2
; Line 3064
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
$LN112@refine2:
; Line 3065
	jmp	SHORT $LN109@refine2
$LN113@refine2:
; Line 3066
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN109@refine2
; Line 3068
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	cmp	DWORD PTR [eax+116], 1
	jne	SHORT $LN109@refine2
; Line 3069
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
$LN109@refine2:
; Line 3071
	push	0
	push	0
	mov	eax, DWORD PTR _edge_lcut$54296[ebp]
	push	eax
	mov	ecx, DWORD PTR _lcut_node$54294[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3072
	push	0
	push	0
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN114@refine2:
; Line 3078
	mov	DWORD PTR _j$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN108@refine2
$LN107@refine2:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN108@refine2:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	$LN106@refine2
; Line 3080
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _feat$54456[ebp], eax
; Line 3081
	mov	ecx, DWORD PTR _feat$54456[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	DWORD PTR _idx$54457[ebp], edx
; Line 3082
	mov	eax, DWORD PTR _feat$54456[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _idx$54457[ebp+4], ecx
; Line 3084
	mov	edx, DWORD PTR _idx$54457[ebp]
	cmp	edx, DWORD PTR _impact_node$54277[ebp]
	jne	SHORT $LN103@refine2
	mov	eax, DWORD PTR _idx$54457[ebp+4]
	cmp	eax, DWORD PTR _right_node$54074[ebp]
	je	SHORT $LN104@refine2
$LN103@refine2:
	mov	ecx, DWORD PTR _idx$54457[ebp+4]
	cmp	ecx, DWORD PTR _impact_node$54277[ebp]
	jne	$LN105@refine2
	mov	edx, DWORD PTR _idx$54457[ebp]
	cmp	edx, DWORD PTR _right_node$54074[ebp]
	jne	$LN105@refine2
$LN104@refine2:
; Line 3087
	push	0
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 3089
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54461[ebp], eax
; Line 3090
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54461[ebp+4], eax
; Line 3092
	mov	edx, DWORD PTR _idx$54457[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54461[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3093
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54461[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3094
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	eax, DWORD PTR _idx$54457[ebp]
	push	eax
	push	OFFSET $SG54462
	call	_printf
	add	esp, 12					; 0000000cH
; Line 3096
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54461[ebp+4]
	mov	DWORD PTR [edx+8], eax
; Line 3097
	mov	eax, DWORD PTR _idx$54457[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54461[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 3098
	mov	edx, DWORD PTR _idx$54457[ebp+4]
	push	edx
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	push	OFFSET $SG54463
	call	_printf
	add	esp, 12					; 0000000cH
$LN105@refine2:
; Line 3102
	mov	ecx, DWORD PTR _idx$54457[ebp]
	cmp	ecx, DWORD PTR _impact_node$54277[ebp]
	jne	SHORT $LN100@refine2
	mov	edx, DWORD PTR _idx$54457[ebp+4]
	cmp	edx, DWORD PTR _left_node$54073[ebp]
	je	SHORT $LN101@refine2
$LN100@refine2:
	mov	eax, DWORD PTR _idx$54457[ebp+4]
	cmp	eax, DWORD PTR _impact_node$54277[ebp]
	jne	$LN102@refine2
	mov	ecx, DWORD PTR _idx$54457[ebp]
	cmp	ecx, DWORD PTR _left_node$54073[ebp]
	jne	$LN102@refine2
$LN101@refine2:
; Line 3104
	push	0
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 3106
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54467[ebp], eax
; Line 3107
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54467[ebp+4], eax
; Line 3109
	mov	ecx, DWORD PTR _idx$54457[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54467[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 3110
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54467[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3111
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	eax, DWORD PTR _idx$54457[ebp]
	push	eax
	push	OFFSET $SG54468
	call	_printf
	add	esp, 12					; 0000000cH
; Line 3113
	mov	ecx, DWORD PTR _lcut_node$54294[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54467[ebp+4]
	mov	DWORD PTR [edx+8], eax
; Line 3114
	mov	eax, DWORD PTR _idx$54457[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54467[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 3115
	mov	edx, DWORD PTR _idx$54457[ebp+4]
	push	edx
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	push	OFFSET $SG54469
	call	_printf
	add	esp, 12					; 0000000cH
$LN102@refine2:
; Line 3119
	jmp	$LN107@refine2
$LN106@refine2:
; Line 3120
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	push	eax
	push	OFFSET $SG54470
	call	_printf
	add	esp, 8
; Line 3122
	jmp	$LN126@refine2
	jmp	$LN82@refine2
$LN124@refine2:
; Line 3125
	cmp	DWORD PTR _cutedge$54076[ebp], 1
	jne	$LN82@refine2
; Line 3127
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	$LN97@refine2
; Line 3129
	push	OFFSET $SG54474
	call	_printf
	add	esp, 4
; Line 3130
	cmp	DWORD PTR _poplr$54373[ebp], 0
	jne	$LN96@refine2
; Line 3132
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3134
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54476[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54476[ebp+4], eax
; Line 3136
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54476[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3137
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54476[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3138
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54476[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 3140
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54476[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3141
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54476[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 3142
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54476[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 3143
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	push	OFFSET $SG54477
	call	_printf
	add	esp, 16					; 00000010H
; Line 3144
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _up_node$54292[ebp]
	push	ecx
	push	OFFSET $SG54478
	call	_printf
	add	esp, 16					; 00000010H
; Line 3145
	push	0
	push	0
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
	jmp	$LN94@refine2
$LN96@refine2:
; Line 3147
	cmp	DWORD PTR _poplr$54373[ebp], 1
	jne	$LN94@refine2
; Line 3149
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3151
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54481[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54481[ebp+4], eax
; Line 3153
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54481[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3154
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54481[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3155
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54481[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 3157
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54481[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3158
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54481[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 3159
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54481[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 3160
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	push	OFFSET $SG54482
	call	_printf
	add	esp, 16					; 00000010H
; Line 3161
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _up_node$54292[ebp]
	push	ecx
	push	OFFSET $SG54483
	call	_printf
	add	esp, 16					; 00000010H
; Line 3162
	push	0
	push	0
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN94@refine2:
; Line 3164
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3166
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftt$54484[ebp], eax
; Line 3167
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pftt$54484[ebp+4], eax
; Line 3169
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54484[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3170
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54484[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3171
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54484[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 3174
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54484[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3175
	mov	edx, DWORD PTR _edge_rcut$54295[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54484[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 3176
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pftt$54484[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 3178
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _left_node$54073[ebp]
	push	ecx
	push	OFFSET $SG54485
	call	_printf
	add	esp, 16					; 00000010H
; Line 3179
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	eax, DWORD PTR _edge_rcut$54295[ebp]
	push	eax
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	push	OFFSET $SG54486
	call	_printf
	add	esp, 16					; 00000010H
; Line 3180
	push	0
	push	0
	mov	edx, DWORD PTR _edge_lcut$54296[ebp]
	push	edx
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3181
	push	0
	push	0
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN97@refine2:
; Line 3184
	cmp	DWORD PTR _up_face$54072[ebp], 0
	jne	$LN93@refine2
; Line 3186
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3188
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54488[ebp], eax
; Line 3189
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54488[ebp+4], eax
; Line 3192
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54488[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3193
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54488[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3194
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54488[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 3197
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54488[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3198
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54488[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 3199
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54488[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 3202
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN92@refine2
; Line 3203
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
	jmp	SHORT $LN90@refine2
$LN92@refine2:
; Line 3204
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN90@refine2
; Line 3205
	mov	eax, DWORD PTR _lcut_node$54294[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
$LN90@refine2:
; Line 3207
	push	0
	push	0
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+8]
	push	eax
	mov	ecx, DWORD PTR _lcut_node$54294[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3208
	push	0
	push	0
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
	jmp	$LN88@refine2
$LN93@refine2:
; Line 3211
	cmp	DWORD PTR _up_face$54072[ebp], 1
	jne	$LN88@refine2
; Line 3213
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3215
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54494[ebp], eax
; Line 3216
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54494[ebp+4], eax
; Line 3219
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54494[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3220
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54494[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3221
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54494[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 3224
	mov	eax, DWORD PTR _impact_node$54277[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54494[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3225
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54494[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 3226
	mov	edx, DWORD PTR _left_node$54073[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54494[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 3229
	cmp	DWORD PTR _fi$54063[ebp], 0
	jne	SHORT $LN87@refine2
; Line 3230
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+112], 1
	jmp	SHORT $LN85@refine2
$LN87@refine2:
; Line 3231
	cmp	DWORD PTR _fi$54063[ebp], 1
	jne	SHORT $LN85@refine2
; Line 3232
	mov	eax, DWORD PTR _rcut_node$54293[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR [eax+116], 1
$LN85@refine2:
; Line 3234
	push	0
	push	0
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+4]
	push	eax
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3235
	push	0
	push	0
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	push	ecx
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN88@refine2:
; Line 3241
	mov	DWORD PTR _j$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN84@refine2
$LN83@refine2:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN84@refine2:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	$LN82@refine2
; Line 3243
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _feat$54501[ebp], eax
; Line 3244
	mov	eax, DWORD PTR _feat$54501[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _idx$54502[ebp], ecx
; Line 3245
	mov	edx, DWORD PTR _feat$54501[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	DWORD PTR _idx$54502[ebp+4], eax
; Line 3247
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	mov	eax, DWORD PTR _idx$54502[ebp]
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	jne	SHORT $LN79@refine2
	mov	ecx, DWORD PTR _idx$54502[ebp+4]
	cmp	ecx, DWORD PTR _left_node$54073[ebp]
	je	SHORT $LN80@refine2
$LN79@refine2:
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _idx$54502[ebp+4]
	cmp	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	jne	$LN81@refine2
	mov	edx, DWORD PTR _idx$54502[ebp]
	cmp	edx, DWORD PTR _left_node$54073[ebp]
	jne	$LN81@refine2
$LN80@refine2:
; Line 3249
	push	0
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 3251
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54506[ebp], eax
; Line 3252
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54506[ebp+4], eax
; Line 3254
	mov	edx, DWORD PTR _idx$54502[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54506[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3255
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54506[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 3258
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54506[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3259
	mov	edx, DWORD PTR _idx$54502[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54506[ebp+4]
	mov	DWORD PTR [ecx+12], eax
$LN81@refine2:
; Line 3263
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _idx$54502[ebp]
	cmp	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	jne	SHORT $LN76@refine2
	mov	edx, DWORD PTR _idx$54502[ebp+4]
	cmp	edx, DWORD PTR _right_node$54074[ebp]
	je	SHORT $LN77@refine2
$LN76@refine2:
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _idx$54502[ebp+4]
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx]
	jne	$LN78@refine2
	mov	eax, DWORD PTR _idx$54502[ebp]
	cmp	eax, DWORD PTR _right_node$54074[ebp]
	jne	$LN78@refine2
$LN77@refine2:
; Line 3266
	push	0
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 3268
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54510[ebp], eax
; Line 3269
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54510[ebp+4], eax
; Line 3271
	mov	eax, DWORD PTR _idx$54502[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54510[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3272
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54510[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 3275
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54510[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3276
	mov	edx, DWORD PTR _idx$54502[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54510[ebp+4]
	mov	DWORD PTR [ecx+12], eax
$LN78@refine2:
; Line 3281
	jmp	$LN83@refine2
$LN82@refine2:
; Line 3284
	jmp	$LN127@refine2
$LN126@refine2:
; Line 3288
	cmp	DWORD PTR _up_face$54072[ebp], 0
	jne	$LN75@refine2
; Line 3292
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN74@refine2
$LN73@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN74@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN72@refine2
; Line 3295
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _right_node$54074[ebp]
	jne	SHORT $LN69@refine2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+8]
	je	SHORT $LN70@refine2
$LN69@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _right_node$54074[ebp]
	jne	$LN71@refine2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+8]
	jne	SHORT $LN71@refine2
$LN70@refine2:
; Line 3297
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3298
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 3299
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN71@refine2:
; Line 3302
	jmp	$LN73@refine2
$LN72@refine2:
; Line 3305
	jmp	$LN64@refine2
$LN75@refine2:
	cmp	DWORD PTR _up_face$54072[ebp], 1
	jne	$LN64@refine2
; Line 3309
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN66@refine2
$LN65@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN66@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN64@refine2
; Line 3312
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _left_node$54073[ebp]
	jne	SHORT $LN61@refine2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+4]
	je	SHORT $LN62@refine2
$LN61@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _left_node$54073[ebp]
	jne	$LN63@refine2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx+4]
	jne	SHORT $LN63@refine2
$LN62@refine2:
; Line 3314
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3315
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 3316
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN63@refine2:
; Line 3318
	jmp	$LN65@refine2
$LN64@refine2:
; Line 3322
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	$LN51@refine2
; Line 3325
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN59@refine2
$LN58@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN59@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN57@refine2
; Line 3328
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _left_node$54073[ebp]
	jne	SHORT $LN54@refine2
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	cmp	eax, DWORD PTR _right_node$54074[ebp]
	je	SHORT $LN55@refine2
$LN54@refine2:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _left_node$54073[ebp]
	jne	SHORT $LN56@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _right_node$54074[ebp]
	jne	SHORT $LN56@refine2
$LN55@refine2:
; Line 3330
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3331
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 3332
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN56@refine2:
; Line 3335
	jmp	$LN58@refine2
$LN57@refine2:
; Line 3338
	push	0
	push	0
	mov	ecx, DWORD PTR _edge_rcut$54295[ebp]
	push	ecx
	mov	edx, DWORD PTR _right_node$54074[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3339
	push	0
	push	0
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _edge_lcut$54296[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3343
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN53@refine2
$LN52@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN53@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN51@refine2
; Line 3345
	cmp	DWORD PTR _poplr$54373[ebp], 1
	jne	$LN50@refine2
; Line 3348
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	cmp	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	jne	SHORT $LN47@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+4]
	je	SHORT $LN48@refine2
$LN47@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	jne	$LN49@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	cmp	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+4]
	jne	SHORT $LN49@refine2
$LN48@refine2:
; Line 3350
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3351
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 3352
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN49@refine2:
; Line 3355
	jmp	$LN44@refine2
$LN50@refine2:
; Line 3356
	cmp	DWORD PTR _poplr$54373[ebp], 0
	jne	$LN44@refine2
; Line 3359
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	cmp	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax]
	jne	SHORT $LN42@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR ?last_face@@3PAHA[eax*4]
	imul	ecx, 24					; 00000018H
	cmp	edx, DWORD PTR ?info@@3PAUcut_info@@A[ecx+8]
	je	SHORT $LN43@refine2
$LN42@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR ?last_face@@3PAHA[ecx*4]
	imul	edx, 24					; 00000018H
	cmp	eax, DWORD PTR ?info@@3PAUcut_info@@A[edx]
	jne	$LN44@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	edx, DWORD PTR _fi$54063[ebp]
	mov	eax, DWORD PTR ?last_face@@3PAHA[edx*4]
	imul	eax, 24					; 00000018H
	cmp	ecx, DWORD PTR ?info@@3PAUcut_info@@A[eax+8]
	jne	SHORT $LN44@refine2
$LN43@refine2:
; Line 3361
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3362
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 3363
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN44@refine2:
; Line 3367
	jmp	$LN52@refine2
$LN51@refine2:
; Line 3371
	cmp	DWORD PTR _cutedge$54076[ebp], 1
	jne	$LN16@refine2
; Line 3375
	cmp	DWORD PTR _crossface$54075[ebp], 1
	jne	$LN31@refine2
; Line 3377
	cmp	DWORD PTR _poplr$54373[ebp], 0
	jne	$LN39@refine2
; Line 3379
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN38@refine2
$LN37@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN38@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN36@refine2
; Line 3382
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _up_node$54292[ebp]
	jne	SHORT $LN33@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _right_node$54074[ebp]
	je	SHORT $LN34@refine2
$LN33@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	cmp	eax, DWORD PTR _up_node$54292[ebp]
	jne	SHORT $LN35@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _right_node$54074[ebp]
	jne	SHORT $LN35@refine2
$LN34@refine2:
; Line 3384
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3385
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 3386
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN35@refine2:
; Line 3388
	jmp	$LN37@refine2
$LN36@refine2:
; Line 3390
	push	0
	push	0
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	eax, DWORD PTR _right_node$54074[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3391
	push	0
	push	0
	mov	ecx, DWORD PTR _lcut_node$54294[ebp]
	push	ecx
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
	jmp	$LN31@refine2
$LN39@refine2:
; Line 3393
	cmp	DWORD PTR _poplr$54373[ebp], 1
	jne	$LN31@refine2
; Line 3395
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@refine2
$LN29@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN30@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN28@refine2
; Line 3398
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _up_node$54292[ebp]
	jne	SHORT $LN25@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _left_node$54073[ebp]
	je	SHORT $LN26@refine2
$LN25@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	cmp	eax, DWORD PTR _up_node$54292[ebp]
	jne	SHORT $LN27@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _left_node$54073[ebp]
	jne	SHORT $LN27@refine2
$LN26@refine2:
; Line 3400
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3401
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 3402
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN27@refine2:
; Line 3404
	jmp	$LN29@refine2
$LN28@refine2:
; Line 3406
	push	0
	push	0
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3407
	push	0
	push	0
	mov	ecx, DWORD PTR _rcut_node$54293[ebp]
	push	ecx
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN31@refine2:
; Line 3411
	cmp	DWORD PTR _up_face$54072[ebp], 0
	jne	$LN24@refine2
; Line 3413
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN23@refine2
$LN22@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN23@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN21@refine2
; Line 3416
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _up_node$54292[ebp]
	jne	SHORT $LN18@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _left_node$54073[ebp]
	je	SHORT $LN19@refine2
$LN18@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	cmp	eax, DWORD PTR _up_node$54292[ebp]
	jne	SHORT $LN20@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _left_node$54073[ebp]
	jne	SHORT $LN20@refine2
$LN19@refine2:
; Line 3418
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3419
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 3420
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN20@refine2:
; Line 3423
	jmp	$LN22@refine2
$LN21@refine2:
; Line 3426
	push	0
	push	0
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	push	edx
	mov	eax, DWORD PTR _left_node$54073[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3427
	push	0
	push	0
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
	jmp	$LN16@refine2
$LN24@refine2:
; Line 3429
	cmp	DWORD PTR _up_face$54072[ebp], 1
	jne	$LN16@refine2
; Line 3431
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@refine2
$LN14@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN13@refine2
; Line 3434
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _up_node$54292[ebp]
	jne	SHORT $LN10@refine2
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	cmp	ecx, DWORD PTR _right_node$54074[ebp]
	je	SHORT $LN11@refine2
$LN10@refine2:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	cmp	eax, DWORD PTR _up_node$54292[ebp]
	jne	SHORT $LN12@refine2
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	cmp	edx, DWORD PTR _right_node$54074[ebp]
	jne	SHORT $LN12@refine2
$LN11@refine2:
; Line 3436
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3437
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
; Line 3438
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@refine2:
; Line 3441
	jmp	$LN14@refine2
$LN13@refine2:
; Line 3444
	push	0
	push	0
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	push	edx
	mov	eax, DWORD PTR _right_node$54074[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3445
	push	0
	push	0
	mov	ecx, DWORD PTR _impact_node$54277[ebp]
	push	ecx
	mov	edx, DWORD PTR _up_node$54292[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN16@refine2:
; Line 3455
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _impact_node$54277[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[ecx], edx
; Line 3456
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _rcut_node$54293[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[ecx+4], edx
; Line 3457
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _lcut_node$54294[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[ecx+8], edx
; Line 3458
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _right_node$54074[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[ecx+12], edx
; Line 3459
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _left_node$54073[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[ecx+16], edx
; Line 3460
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _facenum$54049[ebp+eax*4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _up_node$54292[ebp]
	mov	DWORD PTR ?info@@3PAUcut_info@@A[ecx+20], edx
; Line 3462
	mov	eax, DWORD PTR _fi$54063[ebp]
	mov	ecx, DWORD PTR _fi$54063[ebp]
	mov	edx, DWORD PTR _facenum$54049[ebp+ecx*4]
	mov	DWORD PTR ?last_face@@3PAHA[eax*4], edx
$LN158@refine2:
; Line 3466
	jmp	$LN359@refine2
$LN358@refine2:
; Line 3470
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@refine2
$LN8@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN7@refine2
; Line 3472
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET $SG54580
	mov	edx, DWORD PTR _frr$[ebp]
	push	edx
	call	_fprintf
	add	esp, 24					; 00000018H
; Line 3473
	jmp	$LN8@refine2
$LN7@refine2:
; Line 3475
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@refine2
$LN5@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN4@refine2
; Line 3477
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET $SG54584
	mov	eax, DWORD PTR _frr$[ebp]
	push	eax
	call	_fprintf
	add	esp, 20					; 00000014H
; Line 3478
	jmp	SHORT $LN5@refine2
$LN4@refine2:
; Line 3479
	mov	ecx, DWORD PTR _frr$[ebp]
	push	ecx
	call	_fclose
	add	esp, 4
; Line 3480
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+960], 1
; Line 3482
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@refine2
$LN2@refine2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@refine2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN1@refine2
; Line 3483
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _V$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _V$[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _V$[ebp+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _V$[ebp+12]
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN2@refine2
$LN1@refine2:
; Line 3485
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??1?$btSymMatrix@H@@QAE@XZ
$LN418@refine2:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN467@refine2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	3
$LN467@refine2:
	DD	46					; 0000002eH
	DD	$LN466@refine2
$LN466@refine2:
	DD	-44					; ffffffd4H
	DD	24					; 00000018H
	DD	$LN420@refine2
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN421@refine2
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN422@refine2
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN423@refine2
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN424@refine2
	DD	-224					; ffffff20H
	DD	16					; 00000010H
	DD	$LN425@refine2
	DD	-296					; fffffed8H
	DD	24					; 00000018H
	DD	$LN426@refine2
	DD	-312					; fffffec8H
	DD	8
	DD	$LN427@refine2
	DD	-496					; fffffe10H
	DD	16					; 00000010H
	DD	$LN428@refine2
	DD	-936					; fffffc58H
	DD	400					; 00000190H
	DD	$LN429@refine2
	DD	-976					; fffffc30H
	DD	16					; 00000010H
	DD	$LN430@refine2
	DD	-1008					; fffffc10H
	DD	16					; 00000010H
	DD	$LN431@refine2
	DD	-1040					; fffffbf0H
	DD	16					; 00000010H
	DD	$LN432@refine2
	DD	-1072					; fffffbd0H
	DD	16					; 00000010H
	DD	$LN433@refine2
	DD	-1168					; fffffb70H
	DD	16					; 00000010H
	DD	$LN434@refine2
	DD	-1232					; fffffb30H
	DD	16					; 00000010H
	DD	$LN435@refine2
	DD	-1280					; fffffb00H
	DD	16					; 00000010H
	DD	$LN436@refine2
	DD	-1344					; fffffac0H
	DD	16					; 00000010H
	DD	$LN437@refine2
	DD	-1376					; fffffaa0H
	DD	16					; 00000010H
	DD	$LN438@refine2
	DD	-1508					; fffffa1cH
	DD	12					; 0000000cH
	DD	$LN439@refine2
	DD	-1524					; fffffa0cH
	DD	8
	DD	$LN440@refine2
	DD	-1536					; fffffa00H
	DD	4
	DD	$LN441@refine2
	DD	-1552					; fffff9f0H
	DD	8
	DD	$LN442@refine2
	DD	-1572					; fffff9dcH
	DD	8
	DD	$LN443@refine2
	DD	-1588					; fffff9ccH
	DD	8
	DD	$LN444@refine2
	DD	-1604					; fffff9bcH
	DD	8
	DD	$LN445@refine2
	DD	-1632					; fffff9a0H
	DD	12					; 0000000cH
	DD	$LN446@refine2
	DD	-1652					; fffff98cH
	DD	8
	DD	$LN447@refine2
	DD	-1668					; fffff97cH
	DD	8
	DD	$LN448@refine2
	DD	-1692					; fffff964H
	DD	12					; 0000000cH
	DD	$LN449@refine2
	DD	-1708					; fffff954H
	DD	8
	DD	$LN450@refine2
	DD	-1720					; fffff948H
	DD	4
	DD	$LN451@refine2
	DD	-1732					; fffff93cH
	DD	4
	DD	$LN452@refine2
	DD	-1744					; fffff930H
	DD	4
	DD	$LN453@refine2
	DD	-1760					; fffff920H
	DD	8
	DD	$LN454@refine2
	DD	-1780					; fffff90cH
	DD	8
	DD	$LN455@refine2
	DD	-1796					; fffff8fcH
	DD	8
	DD	$LN456@refine2
	DD	-1812					; fffff8ecH
	DD	8
	DD	$LN457@refine2
	DD	-1828					; fffff8dcH
	DD	8
	DD	$LN458@refine2
	DD	-1844					; fffff8ccH
	DD	8
	DD	$LN459@refine2
	DD	-1860					; fffff8bcH
	DD	8
	DD	$LN460@refine2
	DD	-1876					; fffff8acH
	DD	8
	DD	$LN461@refine2
	DD	-1892					; fffff89cH
	DD	8
	DD	$LN462@refine2
	DD	-1912					; fffff888H
	DD	8
	DD	$LN463@refine2
	DD	-1928					; fffff878H
	DD	8
	DD	$LN464@refine2
	DD	-1944					; fffff868H
	DD	8
	DD	$LN465@refine2
$LN465@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN464@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN463@refine2:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN462@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN461@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN460@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
$LN459@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN458@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN457@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN456@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN455@refine2:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN454@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
$LN453@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
$LN452@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
$LN451@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
$LN450@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN449@refine2:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN448@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
$LN447@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
$LN446@refine2:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN445@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN444@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN443@refine2:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN442@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
$LN441@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
$LN440@refine2:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN439@refine2:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN438@refine2:
	DB	118					; 00000076H
	DB	0
$LN437@refine2:
	DB	120					; 00000078H
	DB	0
$LN436@refine2:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	0
$LN435@refine2:
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	0
$LN434@refine2:
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	0
$LN433@refine2:
	DB	118					; 00000076H
	DB	50					; 00000032H
	DB	0
$LN432@refine2:
	DB	118					; 00000076H
	DB	49					; 00000031H
	DB	0
$LN431@refine2:
	DB	117					; 00000075H
	DB	50					; 00000032H
	DB	0
$LN430@refine2:
	DB	117					; 00000075H
	DB	49					; 00000031H
	DB	0
$LN429@refine2:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	0
$LN428@refine2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN427@refine2:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
$LN426@refine2:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN425@refine2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	51					; 00000033H
	DB	0
$LN424@refine2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN423@refine2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	49					; 00000031H
	DB	0
$LN422@refine2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	48					; 00000030H
	DB	0
$LN421@refine2:
	DB	86					; 00000056H
	DB	0
$LN420@refine2:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?refine2@btSoftBody@@QAEXPAUImplicitFn@1@M_NAAVbtVector3@@@Z ENDP ; btSoftBody::refine2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setZ@btVector3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__z$ = 8						; size = 4
?setZ@btVector3@@QAEXM@Z PROC				; btVector3::setZ, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 571
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	4
?setZ@btVector3@@QAEXM@Z ENDP				; btVector3::setZ
_TEXT	ENDS
PUBLIC	__real@bf800000
PUBLIC	??$btSwap@M@@YAXAAM0@Z				; btSwap<float>
PUBLIC	__real@3e19999a
;	COMDAT __real@bf800000
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Solve@@YAMABVbtVector3@@00MH@Z
_TEXT	SEGMENT
$T19598 = -128						; size = 16
$T19597 = -112						; size = 16
_v$19596 = -92						; size = 4
_t$19589 = -88						; size = 4
_i$19585 = -84						; size = 4
$T19578 = -80						; size = 16
$T19577 = -64						; size = 16
_values$ = -32						; size = 8
_len$ = -20						; size = 4
_span$ = -12						; size = 8
_center$ = 8						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_accuracy$ = 20						; size = 4
_maxiterations$ = 24					; size = 4
?Solve@@YAMABVbtVector3@@00MH@Z PROC			; Solve, COMDAT
; Line 429
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 430
	fldz
	fstp	DWORD PTR _span$[ebp]
	fld1
	fstp	DWORD PTR _span$[ebp+4]
; Line 431
	fld	DWORD PTR __real@3e19999a
	fstp	DWORD PTR _len$[ebp]
; Line 433
	mov	eax, DWORD PTR _center$[ebx]
	push	eax
	mov	ecx, DWORD PTR _a$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19577[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fld	DWORD PTR _len$[ebp]
	fmul	DWORD PTR _len$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _values$[ebp]
	mov	eax, DWORD PTR _center$[ebx]
	push	eax
	mov	ecx, DWORD PTR _b$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19578[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fld	DWORD PTR _len$[ebp]
	fmul	DWORD PTR _len$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _values$[ebp+4]
; Line 436
	fld	DWORD PTR _values$[ebp+4]
	fcomp	DWORD PTR _values$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN9@Solve
; Line 438
	lea	eax, DWORD PTR _span$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _span$[ebp]
	push	ecx
	call	??$btSwap@M@@YAXAAM0@Z			; btSwap<float>
	add	esp, 8
; Line 439
	lea	edx, DWORD PTR _values$[ebp+4]
	push	edx
	lea	eax, DWORD PTR _values$[ebp]
	push	eax
	call	??$btSwap@M@@YAXAAM0@Z			; btSwap<float>
	add	esp, 8
$LN9@Solve:
; Line 445
	mov	DWORD PTR _i$19585[ebp], 0
	jmp	SHORT $LN8@Solve
$LN7@Solve:
	mov	ecx, DWORD PTR _i$19585[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$19585[ebp], ecx
$LN8@Solve:
	mov	edx, DWORD PTR _i$19585[ebp]
	cmp	edx, DWORD PTR _maxiterations$[ebx]
	jge	$LN6@Solve
; Line 448
	fld	DWORD PTR _values$[ebp]
	fsub	DWORD PTR _values$[ebp+4]
	fdivr	DWORD PTR _values$[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _span$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _span$[ebp]
	push	ecx
	call	??$Lerp@M@@YAMABM0M@Z			; Lerp<float>
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _t$19589[ebp]
; Line 449
	mov	edx, DWORD PTR _center$[ebx]
	push	edx
	push	ecx
	fld	DWORD PTR _t$19589[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _b$[ebx]
	push	eax
	mov	ecx, DWORD PTR _a$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19597[ebp]
	push	edx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	push	eax
	lea	eax, DWORD PTR $T19598[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fld	DWORD PTR _len$[ebp]
	fmul	DWORD PTR _len$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _v$19596[ebp]
; Line 450
	fldz
	fcomp	DWORD PTR _t$19589[ebp]
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN4@Solve
	fld1
	fcomp	DWORD PTR _t$19589[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@Solve
$LN4@Solve:
	jmp	SHORT $LN6@Solve
$LN5@Solve:
; Line 451
	push	ecx
	fld	DWORD PTR _v$19596[ebp]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fcomp	DWORD PTR _accuracy$[ebx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Solve
	fld	DWORD PTR _t$19589[ebp]
	jmp	SHORT $LN10@Solve
$LN3@Solve:
; Line 452
	fldz
	fcomp	DWORD PTR _v$19596[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@Solve
; Line 453
	fld	DWORD PTR _t$19589[ebp]
	fstp	DWORD PTR _span$[ebp]
	fld	DWORD PTR _v$19596[ebp]
	fstp	DWORD PTR _values$[ebp]
; Line 454
	jmp	SHORT $LN1@Solve
$LN2@Solve:
; Line 455
	fld	DWORD PTR _t$19589[ebp]
	fstp	DWORD PTR _span$[ebp+4]
	fld	DWORD PTR _v$19596[ebp]
	fstp	DWORD PTR _values$[ebp+4]
$LN1@Solve:
; Line 456
	jmp	$LN7@Solve
$LN6@Solve:
; Line 457
	fld	DWORD PTR __real@bf800000
$LN10@Solve:
; Line 458
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Solve
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN15@Solve:
	DD	2
	DD	$LN14@Solve
$LN14@Solve:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN12@Solve
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN13@Solve
$LN13@Solve:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN12@Solve:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	0
?Solve@@YAMABVbtVector3@@00MH@Z ENDP			; Solve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$btSymMatrix@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btSymMatrix@H@@QAE@XZ PROC				; btSymMatrix<int>::~btSymMatrix<int>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btSymMatrix@H@@QAE@XZ ENDP				; btSymMatrix<int>::~btSymMatrix<int>
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?refine@btSoftBody@@QAEXPAUImplicitFn@1@M_NAAVbtVector3@@@Z ; btSoftBody::refine
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?refine@btSoftBody@@QAEXPAUImplicitFn@1@M_NAAVbtVector3@@@Z
_TEXT	SEGMENT
tv1081 = -556						; size = 4
tv1075 = -552						; size = 4
tv1033 = -548						; size = 4
tv1012 = -544						; size = 4
tv793 = -540						; size = 4
$T66693 = -536						; size = 4
$T66692 = -532						; size = 4
$T66691 = -528						; size = 4
$T66690 = -524						; size = 4
$T66689 = -520						; size = 4
_sg$54757 = -512					; size = 2
_id$54756 = -500					; size = 8
_j$54749 = -488						; size = 4
_j$54742 = -484						; size = 4
_todelete$54737 = -476					; size = 20
_ranks$54735 = -448					; size = 20
_nnodes$54733 = -424					; size = 4
_cn$54731 = -420					; size = 4
_j$54727 = -416						; size = 4
_n$54725 = -412						; size = 4
_cn$54720 = -408					; size = 4
_j$54716 = -404						; size = 4
_l$54715 = -400						; size = 4
_todetach$54710 = -396					; size = 4
_id$54709 = -388					; size = 8
_m$54704 = -376						; size = 4
_v$54703 = -368						; size = 16
_x$54700 = -336						; size = 16
_i$54695 = -308						; size = 4
_pcount$54694 = -304					; size = 4
_cnodes$54693 = -296					; size = 20
_pft$54690 = -268					; size = 8
_l$54689 = -256						; size = 4
_ni$54687 = -252					; size = 4
_idx$54682 = -244					; size = 12
_feat$54681 = -228					; size = 4
_pft$54677 = -220					; size = 8
_ni$54675 = -208					; size = 4
_idx$54673 = -200					; size = 8
_feat$54672 = -188					; size = 4
_f$54664 = -184						; size = 4
_mc$54663 = -180					; size = 4
_mb$54662 = -172					; size = 4
_ma$54661 = -160					; size = 4
_m$54658 = -152						; size = 4
_v$54656 = -144						; size = 16
_x$54654 = -112						; size = 16
_t$54652 = -92						; size = 4
_b$54651 = -88						; size = 4
_a$54650 = -84						; size = 4
_f$54642 = -80						; size = 4
_l$54638 = -76						; size = 4
_l$54630 = -72						; size = 4
_ni$ = -68						; size = 4
_k$ = -64						; size = 4
_j$ = -60						; size = 4
_i$ = -56						; size = 4
_newnodes$ = -52					; size = 4
_edges$ = -44						; size = 24
_ncount$ = -16						; size = 4
_nbase$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_ifn$ = 8						; size = 4
_accurary$ = 12						; size = 4
_cut$ = 16						; size = 1
_impact$ = 20						; size = 4
?refine@btSoftBody@@QAEXPAUImplicitFn@1@M_NAAVbtVector3@@@Z PROC ; btSoftBody::refine, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 3490
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 3492
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
; Line 3493
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ncount$[ebp], eax
; Line 3494
	mov	DWORD PTR $T66689[ebp], -2		; fffffffeH
	lea	eax, DWORD PTR $T66689[ebp]
	push	eax
	mov	ecx, DWORD PTR _ncount$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??0?$btSymMatrix@H@@QAE@HABH@Z		; btSymMatrix<int>::btSymMatrix<int>
; Line 3495
	mov	DWORD PTR _newnodes$[ebp], 0
; Line 3498
	mov	DWORD PTR ?cur_step@@3HA, 4		; cur_step
; Line 3511
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN102@refine
$LN101@refine:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN102@refine:
	cmp	DWORD PTR _i$[ebp], 9
	jge	SHORT $LN100@refine
; Line 3512
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR [eax+96]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN99@refine
; Line 3513
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fld	DWORD PTR ?oldmass@@3MA			; oldmass
	fstp	DWORD PTR [eax+96]
$LN99@refine:
; Line 3516
	jmp	SHORT $LN101@refine
$LN100@refine:
	cmp	DWORD PTR ?state@@3HA, 1		; state
	jne	$LN98@refine
; Line 3518
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3519
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3520
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN83@refine
$LN98@refine:
; Line 3522
	cmp	DWORD PTR ?state@@3HA, 2		; state
	jne	SHORT $LN96@refine
; Line 3524
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3525
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN83@refine
$LN96@refine:
; Line 3527
	cmp	DWORD PTR ?state@@3HA, 3		; state
	jne	SHORT $LN94@refine
; Line 3529
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3530
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN83@refine
$LN94@refine:
; Line 3533
	cmp	DWORD PTR ?state@@3HA, 4		; state
	jne	SHORT $LN92@refine
; Line 3535
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3536
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN83@refine
$LN92@refine:
; Line 3538
	cmp	DWORD PTR ?state@@3HA, 5		; state
	jne	SHORT $LN90@refine
; Line 3540
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3541
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN83@refine
$LN90@refine:
; Line 3544
	cmp	DWORD PTR ?state@@3HA, 6		; state
	jne	SHORT $LN88@refine
; Line 3546
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3547
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN83@refine
$LN88@refine:
; Line 3549
	cmp	DWORD PTR ?state@@3HA, 7		; state
	jne	SHORT $LN86@refine
; Line 3551
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3552
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	jmp	$LN83@refine
$LN86@refine:
; Line 3554
	cmp	DWORD PTR ?state@@3HA, 8		; state
	jne	SHORT $LN84@refine
; Line 3556
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3557
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3559
	jmp	SHORT $LN83@refine
$LN84@refine:
; Line 3561
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3562
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
; Line 3563
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+96]
$LN83@refine:
; Line 3567
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN82@refine
$LN81@refine:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN82@refine:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN80@refine
; Line 3569
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$54630[ebp], eax
; Line 3571
	mov	ecx, DWORD PTR _l$54630[ebp]
	mov	edx, DWORD PTR [ecx+20]
	shl	edx, 31					; 0000001fH
	sar	edx, 31					; 0000001fH
	test	edx, edx
	je	$LN78@refine
; Line 3573
	mov	eax, DWORD PTR _l$54630[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 16					; 00000010H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR $T66690[ebp]
	mov	eax, DWORD PTR _l$54630[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR $T66691[ebp]
	lea	eax, DWORD PTR $T66690[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66691[ebp]
	push	ecx
	call	??$SameSign@M@@YA_NABM0@Z		; SameSign<float>
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN78@refine
; Line 3575
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3576
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN78@refine:
; Line 3580
	jmp	$LN81@refine
$LN80@refine:
; Line 3582
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN77@refine
$LN76@refine:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN77@refine:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN75@refine
; Line 3584
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$54638[ebp], eax
; Line 3585
	mov	ecx, DWORD PTR _l$54638[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _l$54638[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -1
; Line 3586
	jmp	SHORT $LN76@refine
$LN75@refine:
; Line 3587
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN74@refine
$LN73@refine:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN74@refine:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN72@refine
; Line 3589
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$54642[ebp], eax
; Line 3590
	mov	ecx, DWORD PTR _f$54642[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	mov	eax, DWORD PTR _f$54642[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -1
; Line 3591
	mov	edx, DWORD PTR _f$54642[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	mov	ecx, DWORD PTR _f$54642[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -1
; Line 3592
	mov	eax, DWORD PTR _f$54642[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	mov	edx, DWORD PTR _f$54642[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], -1
; Line 3593
	jmp	$LN73@refine
$LN72@refine:
; Line 3596
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN71@refine
$LN70@refine:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN71@refine:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ncount$[ebp]
	jge	$LN69@refine
; Line 3598
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	jmp	SHORT $LN68@refine
$LN67@refine:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN68@refine:
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _ncount$[ebp]
	jge	$LN66@refine
; Line 3600
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	cmp	DWORD PTR [eax], -1
	jne	$LN64@refine
; Line 3603
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _a$54650[ebp], eax
; Line 3604
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _b$54651[ebp], eax
; Line 3605
	push	256					; 00000100H
	push	ecx
	fld	DWORD PTR _accurary$[ebx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _b$54651[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _a$54650[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _ifn$[ebx]
	push	eax
	call	?ImplicitSolve@@YAMPAUImplicitFn@btSoftBody@@ABVbtVector3@@1MH@Z ; ImplicitSolve
	add	esp, 20					; 00000014H
	fstp	DWORD PTR _t$54652[ebp]
; Line 3607
	fldz
	fcomp	DWORD PTR _t$54652[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN64@refine
; Line 3609
	push	ecx
	fld	DWORD PTR _t$54652[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _b$54651[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _a$54650[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR _x$54654[ebp]
	push	eax
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
; Line 3610
	add	esp, 12					; 0000000cH
	fld	DWORD PTR _t$54652[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _b$54651[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _a$54650[ebp]
	add	edx, 48					; 00000030H
	push	edx
	lea	eax, DWORD PTR _v$54656[ebp]
	push	eax
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
; Line 3611
	fldz
	fstp	DWORD PTR _m$54658[ebp]
; Line 3612
	mov	ecx, DWORD PTR _a$54650[ebp]
	fldz
	fcomp	DWORD PTR [ecx+96]
	fnstsw	ax
	test	ah, 5
	jp	$LN63@refine
; Line 3614
	mov	edx, DWORD PTR _b$54651[ebp]
	fldz
	fcomp	DWORD PTR [edx+96]
	fnstsw	ax
	test	ah, 5
	jp	$LN62@refine
; Line 3616
	mov	eax, DWORD PTR _a$54650[ebp]
	fld1
	fdiv	DWORD PTR [eax+96]
	fstp	DWORD PTR _ma$54661[ebp]
; Line 3617
	mov	ecx, DWORD PTR _b$54651[ebp]
	fld1
	fdiv	DWORD PTR [ecx+96]
	fstp	DWORD PTR _mb$54662[ebp]
; Line 3618
	push	ecx
	fld	DWORD PTR _t$54652[ebp]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _mb$54662[ebp]
	push	edx
	lea	eax, DWORD PTR _ma$54661[ebp]
	push	eax
	call	??$Lerp@M@@YAMABM0M@Z			; Lerp<float>
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _mc$54663[ebp]
; Line 3619
	fld	DWORD PTR _ma$54661[ebp]
	fadd	DWORD PTR _mb$54662[ebp]
	fld	DWORD PTR _ma$54661[ebp]
	fadd	DWORD PTR _mb$54662[ebp]
	fadd	DWORD PTR _mc$54663[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _f$54664[ebp]
; Line 3620
	fld	DWORD PTR _ma$54661[ebp]
	fmul	DWORD PTR _f$54664[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	mov	ecx, DWORD PTR _a$54650[ebp]
	fstp	DWORD PTR [ecx+96]
; Line 3621
	fld	DWORD PTR _mb$54662[ebp]
	fmul	DWORD PTR _f$54664[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	mov	edx, DWORD PTR _b$54651[ebp]
	fstp	DWORD PTR [edx+96]
; Line 3622
	fld	DWORD PTR _mc$54663[ebp]
	fmul	DWORD PTR _f$54664[ebp]
	fstp	DWORD PTR _m$54658[ebp]
; Line 3624
	jmp	SHORT $LN61@refine
$LN62@refine:
; Line 3625
	mov	eax, DWORD PTR _a$54650[ebp]
	fld	DWORD PTR [eax+96]
	fdiv	DWORD PTR __real@3f000000
	mov	ecx, DWORD PTR _a$54650[ebp]
	fstp	DWORD PTR [ecx+96]
	mov	edx, DWORD PTR _a$54650[ebp]
	fld1
	fdiv	DWORD PTR [edx+96]
	fstp	DWORD PTR _m$54658[ebp]
$LN61@refine:
; Line 3628
	jmp	SHORT $LN58@refine
$LN63@refine:
; Line 3630
	mov	eax, DWORD PTR _b$54651[ebp]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN59@refine
; Line 3631
	mov	ecx, DWORD PTR _b$54651[ebp]
	fld	DWORD PTR [ecx+96]
	fdiv	DWORD PTR __real@3f000000
	mov	edx, DWORD PTR _b$54651[ebp]
	fstp	DWORD PTR [edx+96]
	mov	eax, DWORD PTR _b$54651[ebp]
	fld1
	fdiv	DWORD PTR [eax+96]
	fstp	DWORD PTR _m$54658[ebp]
; Line 3632
	jmp	SHORT $LN58@refine
$LN59@refine:
; Line 3633
	fld	DWORD PTR ?oldmass@@3MA			; oldmass
	fstp	DWORD PTR _m$54658[ebp]
$LN58@refine:
; Line 3637
	push	ecx
	fld	DWORD PTR _m$54658[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _x$54654[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 3643
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	esi, eax
	sub	esi, 1
	mov	edx, DWORD PTR _j$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	DWORD PTR [eax], esi
; Line 3644
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR _v$54656[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _v$54656[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _v$54656[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _v$54656[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 3645
	mov	eax, DWORD PTR _newnodes$[ebp]
	add	eax, 1
	mov	DWORD PTR _newnodes$[ebp], eax
$LN64@refine:
; Line 3649
	jmp	$LN67@refine
$LN66@refine:
; Line 3650
	jmp	$LN70@refine
$LN69@refine:
; Line 3651
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
; Line 3656
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN57@refine
$LN56@refine:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN57@refine:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	$LN55@refine
; Line 3658
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _feat$54672[ebp], eax
; Line 3659
	mov	ecx, DWORD PTR _feat$54672[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	DWORD PTR _idx$54673[ebp], edx
; Line 3660
	mov	eax, DWORD PTR _feat$54672[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _idx$54673[ebp+4], ecx
; Line 3662
	mov	edx, DWORD PTR _idx$54673[ebp]
	cmp	edx, DWORD PTR _ncount$[ebp]
	jge	$LN53@refine
	mov	eax, DWORD PTR _idx$54673[ebp+4]
	cmp	eax, DWORD PTR _ncount$[ebp]
	jge	$LN53@refine
; Line 3664
	mov	ecx, DWORD PTR _idx$54673[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _idx$54673[ebp]
	push	edx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _ni$54675[ebp], eax
; Line 3665
	cmp	DWORD PTR _ni$54675[ebp], 0
	jle	$LN53@refine
; Line 3667
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 3668
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54677[ebp], eax
; Line 3669
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54677[ebp+4], eax
; Line 3671
	mov	eax, DWORD PTR _idx$54673[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54677[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 3672
	mov	edx, DWORD PTR _ni$54675[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54677[ebp]
	mov	DWORD PTR [ecx+12], eax
; Line 3673
	mov	edx, DWORD PTR _ni$54675[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54677[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3674
	mov	edx, DWORD PTR _idx$54673[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54677[ebp+4]
	mov	DWORD PTR [ecx+12], eax
$LN53@refine:
; Line 3678
	jmp	$LN56@refine
$LN55@refine:
; Line 3681
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN52@refine
$LN51@refine:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN52@refine:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN50@refine
; Line 3683
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _feat$54681[ebp], eax
; Line 3684
	mov	ecx, DWORD PTR _feat$54681[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	DWORD PTR _idx$54682[ebp], edx
; Line 3685
	mov	eax, DWORD PTR _feat$54681[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _idx$54682[ebp+4], ecx
; Line 3686
	mov	edx, DWORD PTR _feat$54681[ebp]
	mov	eax, DWORD PTR [edx+16]
	sub	eax, DWORD PTR _nbase$[ebp]
	sar	eax, 7
	mov	DWORD PTR _idx$54682[ebp+8], eax
; Line 3687
	mov	DWORD PTR _j$[ebp], 2
	mov	DWORD PTR _k$[ebp], 0
	jmp	SHORT $LN49@refine
$LN48@refine:
	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR _j$[ebp], ecx
	mov	edx, DWORD PTR _k$[ebp]
	add	edx, 1
	mov	DWORD PTR _k$[ebp], edx
$LN49@refine:
	cmp	DWORD PTR _k$[ebp], 3
	jge	$LN47@refine
; Line 3689
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54682[ebp+eax*4]
	cmp	ecx, DWORD PTR _ncount$[ebp]
	jge	$LN45@refine
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54682[ebp+edx*4]
	cmp	eax, DWORD PTR _ncount$[ebp]
	jge	$LN45@refine
; Line 3691
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _idx$54682[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54682[ebp+eax*4]
	push	ecx
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??R?$btSymMatrix@H@@QAEAAHHH@Z		; btSymMatrix<int>::operator()
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _ni$54687[ebp], edx
; Line 3692
	cmp	DWORD PTR _ni$54687[ebp], 0
	jle	$LN45@refine
; Line 3694
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3695
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR _l$54689[ebp], edx
; Line 3696
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54690[ebp], eax
; Line 3697
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54690[ebp+4], eax
; Line 3699
	mov	eax, DWORD PTR _l$54689[ebp]
	mov	ecx, DWORD PTR _idx$54682[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54690[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 3700
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _idx$54682[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _pft$54690[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 3701
	mov	eax, DWORD PTR _ni$54687[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54690[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 3703
	mov	edx, DWORD PTR _ni$54687[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54690[ebp+4]
	mov	DWORD PTR [ecx+8], eax
; Line 3704
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _idx$54682[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54690[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 3705
	mov	edx, DWORD PTR _l$54689[ebp]
	mov	eax, DWORD PTR _idx$54682[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _pft$54690[ebp+4]
	mov	DWORD PTR [ecx+16], eax
; Line 3706
	push	0
	mov	edx, DWORD PTR _pft$54690[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _l$54689[ebp]
	mov	edx, DWORD PTR _idx$54682[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _ni$54687[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3707
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN47@refine
$LN45@refine:
; Line 3710
	jmp	$LN48@refine
$LN47@refine:
; Line 3711
	jmp	$LN51@refine
$LN50@refine:
; Line 3714
	movzx	edx, BYTE PTR _cut$[ebx]
	test	edx, edx
	je	$LN44@refine
; Line 3716
	lea	ecx, DWORD PTR _cnodes$54693[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
; Line 3717
	mov	eax, DWORD PTR _ncount$[ebp]
	mov	DWORD PTR _pcount$54694[ebp], eax
; Line 3719
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ncount$[ebp], eax
; Line 3720
	mov	DWORD PTR $T66692[ebp], 0
	lea	ecx, DWORD PTR $T66692[ebp]
	push	ecx
	mov	edx, DWORD PTR _ncount$[ebp]
	push	edx
	lea	ecx, DWORD PTR _cnodes$54693[ebp]
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
; Line 3723
	mov	DWORD PTR _i$54695[ebp], 0
	jmp	SHORT $LN43@refine
$LN42@refine:
	mov	eax, DWORD PTR _i$54695[ebp]
	add	eax, 1
	mov	DWORD PTR _i$54695[ebp], eax
$LN43@refine:
	mov	ecx, DWORD PTR _i$54695[ebp]
	cmp	ecx, DWORD PTR _ncount$[ebp]
	jge	$LN41@refine
; Line 3725
	mov	edx, DWORD PTR _i$54695[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$54700[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$54700[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$54700[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _x$54700[ebp+12], edx
; Line 3726
	mov	eax, DWORD PTR _i$54695[ebp]
	cmp	eax, DWORD PTR _pcount$54694[ebp]
	jge	SHORT $LN39@refine
	mov	esi, esp
	lea	ecx, DWORD PTR _x$54700[ebp]
	push	ecx
	mov	edx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	ecx
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fcomp	DWORD PTR _accurary$[ebx]
	fnstsw	ax
	test	ah, 5
	jp	$LN40@refine
$LN39@refine:
; Line 3728
	mov	eax, DWORD PTR _i$54695[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$54703[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$54703[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$54703[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _v$54703[ebp+12], edx
; Line 3729
	mov	eax, DWORD PTR _i$54695[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getMass@btSoftBody@@QBEMH@Z		; btSoftBody::getMass
	fstp	DWORD PTR _m$54704[ebp]
; Line 3730
	fldz
	fcomp	DWORD PTR _m$54704[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN38@refine
	fld	DWORD PTR _m$54704[ebp]
	fmul	DWORD PTR __real@3f000000
	fstp	DWORD PTR _m$54704[ebp]
; Line 3731
	mov	ecx, DWORD PTR _i$54695[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 96					; 00000060H
	mov	DWORD PTR tv793[ebp], eax
	mov	edx, DWORD PTR tv793[ebp]
	fld	DWORD PTR [edx]
	fdiv	DWORD PTR __real@3f000000
	mov	eax, DWORD PTR tv793[ebp]
	fstp	DWORD PTR [eax]
$LN38@refine:
; Line 3733
	push	ecx
	fld	DWORD PTR _m$54704[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _x$54700[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 3739
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	esi, eax
	sub	esi, 1
	mov	edx, DWORD PTR _i$54695[ebp]
	push	edx
	lea	ecx, DWORD PTR _cnodes$54693[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR [eax], esi
; Line 3740
	mov	eax, DWORD PTR _i$54695[ebp]
	push	eax
	lea	ecx, DWORD PTR _cnodes$54693[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	edx, DWORD PTR _v$54703[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _v$54703[ebp+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _v$54703[ebp+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR _v$54703[ebp+12]
	mov	DWORD PTR [eax+12], ecx
$LN40@refine:
; Line 3742
	jmp	$LN42@refine
$LN41@refine:
; Line 3743
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _nbase$[ebp], eax
; Line 3745
	mov	DWORD PTR _i$54695[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN37@refine
$LN36@refine:
	mov	edx, DWORD PTR _i$54695[ebp]
	add	edx, 1
	mov	DWORD PTR _i$54695[ebp], edx
$LN37@refine:
	mov	eax, DWORD PTR _i$54695[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	$LN35@refine
; Line 3747
	mov	ecx, DWORD PTR _i$54695[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	DWORD PTR _id$54709[ebp], edx
; Line 3748
	mov	eax, DWORD PTR _i$54695[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _id$54709[ebp+4], ecx
; Line 3749
	mov	DWORD PTR _todetach$54710[ebp], 0
; Line 3750
	mov	edx, DWORD PTR _id$54709[ebp]
	push	edx
	lea	ecx, DWORD PTR _cnodes$54693[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN34@refine
	mov	eax, DWORD PTR _id$54709[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _cnodes$54693[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN34@refine
; Line 3754
	push	0
	mov	ecx, DWORD PTR _i$54695[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 3755
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	mov	DWORD PTR _todetach$54710[ebp], eax
; Line 3758
	jmp	SHORT $LN32@refine
$LN34@refine:
; Line 3761
	mov	edx, DWORD PTR _id$54709[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fcomp	DWORD PTR _accurary$[ebx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN32@refine
	mov	ecx, DWORD PTR _id$54709[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fcomp	DWORD PTR _accurary$[ebx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN32@refine
; Line 3762
	mov	eax, DWORD PTR _i$54695[ebp]
	mov	DWORD PTR _todetach$54710[ebp], eax
$LN32@refine:
; Line 3765
	cmp	DWORD PTR _todetach$54710[ebp], 0
	je	$LN28@refine
; Line 3767
	mov	ecx, DWORD PTR _todetach$54710[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$54715[ebp], eax
; Line 3769
	mov	DWORD PTR _j$54716[ebp], 0
	jmp	SHORT $LN30@refine
$LN29@refine:
	mov	edx, DWORD PTR _j$54716[ebp]
	add	edx, 1
	mov	DWORD PTR _j$54716[ebp], edx
$LN30@refine:
	cmp	DWORD PTR _j$54716[ebp], 2
	jge	SHORT $LN28@refine
; Line 3771
	mov	eax, DWORD PTR _j$54716[ebp]
	mov	ecx, DWORD PTR _l$54715[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	lea	ecx, DWORD PTR _cnodes$54693[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _cn$54720[ebp], eax
; Line 3772
	cmp	DWORD PTR _cn$54720[ebp], 0
	je	SHORT $LN27@refine
	mov	ecx, DWORD PTR _cn$54720[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _j$54716[ebp]
	mov	ecx, DWORD PTR _l$54715[ebp]
	mov	DWORD PTR [ecx+edx*4+8], eax
$LN27@refine:
; Line 3773
	jmp	SHORT $LN29@refine
$LN28@refine:
; Line 3776
	jmp	$LN36@refine
$LN35@refine:
; Line 3778
	mov	DWORD PTR _i$54695[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN26@refine
$LN25@refine:
	mov	edx, DWORD PTR _i$54695[ebp]
	add	edx, 1
	mov	DWORD PTR _i$54695[ebp], edx
$LN26@refine:
	mov	eax, DWORD PTR _i$54695[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	$LN24@refine
; Line 3780
	mov	ecx, DWORD PTR _i$54695[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	add	eax, 8
	mov	DWORD PTR _n$54725[ebp], eax
; Line 3783
	mov	edx, DWORD PTR _n$54725[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fcomp	DWORD PTR _accurary$[ebx]
	fnstsw	ax
	test	ah, 5
	jp	$LN20@refine
	mov	ecx, DWORD PTR _n$54725[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 16					; 00000010H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fcomp	DWORD PTR _accurary$[ebx]
	fnstsw	ax
	test	ah, 5
	jp	$LN20@refine
	mov	ecx, DWORD PTR _n$54725[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 16					; 00000010H
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _ifn$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _ifn$[ebx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fcomp	DWORD PTR _accurary$[ebx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN20@refine
; Line 3785
	mov	DWORD PTR _j$54727[ebp], 0
	jmp	SHORT $LN22@refine
$LN21@refine:
	mov	ecx, DWORD PTR _j$54727[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$54727[ebp], ecx
$LN22@refine:
	cmp	DWORD PTR _j$54727[ebp], 3
	jge	SHORT $LN20@refine
; Line 3787
	mov	edx, DWORD PTR _j$54727[ebp]
	mov	eax, DWORD PTR _n$54725[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	push	ecx
	lea	ecx, DWORD PTR _cnodes$54693[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _cn$54731[ebp], edx
; Line 3788
	cmp	DWORD PTR _cn$54731[ebp], 0
	je	SHORT $LN19@refine
	mov	eax, DWORD PTR _cn$54731[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _j$54727[ebp]
	mov	edx, DWORD PTR _n$54725[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN19@refine:
; Line 3789
	jmp	SHORT $LN21@refine
$LN20@refine:
; Line 3791
	jmp	$LN25@refine
$LN24@refine:
; Line 3795
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _nnodes$54733[ebp], eax
; Line 3796
	lea	ecx, DWORD PTR _ranks$54735[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
; Line 3797
	lea	ecx, DWORD PTR _todelete$54737[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
; Line 3798
	mov	DWORD PTR $T66693[ebp], 0
	lea	eax, DWORD PTR $T66693[ebp]
	push	eax
	mov	ecx, DWORD PTR _nnodes$54733[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ranks$54735[ebp]
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
; Line 3799
	mov	DWORD PTR _i$54695[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN18@refine
$LN17@refine:
	mov	edx, DWORD PTR _i$54695[ebp]
	add	edx, 1
	mov	DWORD PTR _i$54695[ebp], edx
$LN18@refine:
	mov	eax, DWORD PTR _i$54695[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	SHORT $LN16@refine
; Line 3801
	mov	DWORD PTR _j$54742[ebp], 0
	jmp	SHORT $LN15@refine
$LN14@refine:
	mov	ecx, DWORD PTR _j$54742[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$54742[ebp], ecx
$LN15@refine:
	cmp	DWORD PTR _j$54742[ebp], 2
	jge	SHORT $LN13@refine
; Line 3803
	mov	edx, DWORD PTR _i$54695[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR _j$54742[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	lea	ecx, DWORD PTR _ranks$54735[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR tv1012[ebp], eax
	mov	eax, DWORD PTR tv1012[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR tv1012[ebp]
	mov	DWORD PTR [edx], ecx
; Line 3804
	jmp	SHORT $LN14@refine
$LN13@refine:
; Line 3806
	jmp	$LN17@refine
$LN16@refine:
; Line 3808
	mov	DWORD PTR _i$54695[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN12@refine
$LN11@refine:
	mov	eax, DWORD PTR _i$54695[ebp]
	add	eax, 1
	mov	DWORD PTR _i$54695[ebp], eax
$LN12@refine:
	mov	ecx, DWORD PTR _i$54695[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN10@refine
; Line 3810
	mov	DWORD PTR _j$54749[ebp], 0
	jmp	SHORT $LN9@refine
$LN8@refine:
	mov	edx, DWORD PTR _j$54749[ebp]
	add	edx, 1
	mov	DWORD PTR _j$54749[ebp], edx
$LN9@refine:
	cmp	DWORD PTR _j$54749[ebp], 3
	jge	SHORT $LN7@refine
	mov	eax, DWORD PTR _i$54695[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$54749[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	push	edx
	lea	ecx, DWORD PTR _ranks$54735[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR tv1033[ebp], eax
	mov	eax, DWORD PTR tv1033[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR tv1033[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN8@refine
$LN7@refine:
; Line 3811
	jmp	$LN11@refine
$LN10@refine:
; Line 3813
	mov	DWORD PTR _i$54695[ebp], 0
	jmp	SHORT $LN6@refine
$LN5@refine:
	mov	eax, DWORD PTR _i$54695[ebp]
	add	eax, 1
	mov	DWORD PTR _i$54695[ebp], eax
$LN6@refine:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _i$54695[ebp], eax
	jge	$LN4@refine
; Line 3815
	mov	ecx, DWORD PTR _i$54695[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR _nbase$[ebp]
	sar	edx, 7
	mov	DWORD PTR _id$54756[ebp], edx
; Line 3816
	mov	eax, DWORD PTR _i$54695[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, DWORD PTR _nbase$[ebp]
	sar	ecx, 7
	mov	DWORD PTR _id$54756[ebp+4], ecx
; Line 3817
	mov	edx, DWORD PTR _id$54756[ebp]
	push	edx
	lea	ecx, DWORD PTR _ranks$54735[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	cmp	DWORD PTR [eax], 1
	sete	al
	mov	BYTE PTR _sg$54757[ebp], al
; Line 3818
	mov	ecx, DWORD PTR _id$54756[ebp+4]
	push	ecx
	lea	ecx, DWORD PTR _ranks$54735[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	cmp	DWORD PTR [eax], 1
	sete	dl
	mov	BYTE PTR _sg$54757[ebp+1], dl
; Line 3820
	movzx	eax, BYTE PTR _sg$54757[ebp]
	test	eax, eax
	jne	SHORT $LN2@refine
	movzx	ecx, BYTE PTR _sg$54757[ebp+1]
	test	ecx, ecx
	je	$LN3@refine
$LN2@refine:
; Line 3822
	mov	edx, DWORD PTR _id$54756[ebp]
	push	edx
	lea	ecx, DWORD PTR _ranks$54735[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR tv1075[ebp], eax
	mov	eax, DWORD PTR tv1075[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR tv1075[ebp]
	mov	DWORD PTR [edx], ecx
; Line 3823
	mov	eax, DWORD PTR _id$54756[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _ranks$54735[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR tv1081[ebp], eax
	mov	ecx, DWORD PTR tv1081[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR tv1081[ebp]
	mov	DWORD PTR [eax], edx
; Line 3824
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$54695[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	push	eax
	call	??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ; btSwap<btSoftBody::Link>
	add	esp, 8
; Line 3825
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::pop_back
	mov	edx, DWORD PTR _i$54695[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$54695[ebp], edx
$LN3@refine:
; Line 3827
	jmp	$LN5@refine
$LN4@refine:
; Line 3855
	lea	ecx, DWORD PTR _todelete$54737[ebp]
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	lea	ecx, DWORD PTR _ranks$54735[ebp]
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	lea	ecx, DWORD PTR _cnodes$54693[ebp]
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
$LN44@refine:
; Line 3856
	cmp	DWORD PTR _newnodes$[ebp], 0
	jle	SHORT $LN1@refine
; Line 3858
	push	OFFSET $SG54761
	push	OFFSET ?outputInfo@@3PADA		; outputInfo
	call	_strcat
	add	esp, 8
$LN1@refine:
; Line 3868
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+960], 1
; Line 3869
	lea	ecx, DWORD PTR _edges$[ebp]
	call	??1?$btSymMatrix@H@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN123@refine
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	2
$LN123@refine:
	DD	17					; 00000011H
	DD	$LN122@refine
$LN122@refine:
	DD	-44					; ffffffd4H
	DD	24					; 00000018H
	DD	$LN105@refine
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN106@refine
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN107@refine
	DD	-160					; ffffff60H
	DD	4
	DD	$LN108@refine
	DD	-172					; ffffff54H
	DD	4
	DD	$LN109@refine
	DD	-200					; ffffff38H
	DD	8
	DD	$LN110@refine
	DD	-220					; ffffff24H
	DD	8
	DD	$LN111@refine
	DD	-244					; ffffff0cH
	DD	12					; 0000000cH
	DD	$LN112@refine
	DD	-268					; fffffef4H
	DD	8
	DD	$LN113@refine
	DD	-296					; fffffed8H
	DD	20					; 00000014H
	DD	$LN114@refine
	DD	-336					; fffffeb0H
	DD	16					; 00000010H
	DD	$LN115@refine
	DD	-368					; fffffe90H
	DD	16					; 00000010H
	DD	$LN116@refine
	DD	-388					; fffffe7cH
	DD	8
	DD	$LN117@refine
	DD	-448					; fffffe40H
	DD	20					; 00000014H
	DD	$LN118@refine
	DD	-476					; fffffe24H
	DD	20					; 00000014H
	DD	$LN119@refine
	DD	-500					; fffffe0cH
	DD	8
	DD	$LN120@refine
	DD	-512					; fffffe00H
	DD	2
	DD	$LN121@refine
$LN121@refine:
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
$LN120@refine:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN119@refine:
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
$LN118@refine:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	0
$LN117@refine:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
$LN116@refine:
	DB	118					; 00000076H
	DB	0
$LN115@refine:
	DB	120					; 00000078H
	DB	0
$LN114@refine:
	DB	99					; 00000063H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN113@refine:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN112@refine:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN111@refine:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN110@refine:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN109@refine:
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	0
$LN108@refine:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	0
$LN107@refine:
	DB	118					; 00000076H
	DB	0
$LN106@refine:
	DB	120					; 00000078H
	DB	0
$LN105@refine:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?refine@btSoftBody@@QAEXPAUImplicitFn@1@M_NAAVbtVector3@@@Z ENDP ; btSoftBody::refine
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ImplicitSolve@@YAMPAUImplicitFn@btSoftBody@@ABVbtVector3@@1MH@Z
_TEXT	SEGMENT
$T19622 = -64						; size = 16
_v$19621 = -44						; size = 4
_t$19620 = -40						; size = 4
_i$19616 = -36						; size = 4
_values$ = -28						; size = 8
_span$ = -12						; size = 8
_fn$ = 8						; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_accuracy$ = 20						; size = 4
_maxiterations$ = 24					; size = 4
?ImplicitSolve@@YAMPAUImplicitFn@btSoftBody@@ABVbtVector3@@1MH@Z PROC ; ImplicitSolve, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 466
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 467
	fldz
	fstp	DWORD PTR _span$[ebp]
	fld1
	fstp	DWORD PTR _span$[ebp+4]
; Line 468
	mov	esi, esp
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	mov	ecx, DWORD PTR _fn$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _fn$[ebx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _values$[ebp]
	mov	esi, esp
	mov	ecx, DWORD PTR _b$[ebx]
	push	ecx
	mov	edx, DWORD PTR _fn$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _fn$[ebx]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _values$[ebp+4]
; Line 470
	fld	DWORD PTR _values$[ebp+4]
	fcomp	DWORD PTR _values$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@ImplicitSo
; Line 472
	lea	eax, DWORD PTR _span$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _span$[ebp]
	push	ecx
	call	??$btSwap@M@@YAXAAM0@Z			; btSwap<float>
	add	esp, 8
; Line 473
	lea	edx, DWORD PTR _values$[ebp+4]
	push	edx
	lea	eax, DWORD PTR _values$[ebp]
	push	eax
	call	??$btSwap@M@@YAXAAM0@Z			; btSwap<float>
	add	esp, 8
$LN11@ImplicitSo:
; Line 477
	fld	DWORD PTR _accuracy$[ebx]
	fchs
	fcomp	DWORD PTR _values$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN10@ImplicitSo
	fld	DWORD PTR __real@bf800000
	jmp	$LN12@ImplicitSo
$LN10@ImplicitSo:
; Line 478
	fld	DWORD PTR _accuracy$[ebx]
	fcomp	DWORD PTR _values$[ebp+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN9@ImplicitSo
	fld	DWORD PTR __real@bf800000
	jmp	$LN12@ImplicitSo
$LN9@ImplicitSo:
; Line 479
	mov	DWORD PTR _i$19616[ebp], 0
	jmp	SHORT $LN8@ImplicitSo
$LN7@ImplicitSo:
	mov	ecx, DWORD PTR _i$19616[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$19616[ebp], ecx
$LN8@ImplicitSo:
	mov	edx, DWORD PTR _i$19616[ebp]
	cmp	edx, DWORD PTR _maxiterations$[ebx]
	jge	$LN6@ImplicitSo
; Line 481
	fld	DWORD PTR _values$[ebp]
	fsub	DWORD PTR _values$[ebp+4]
	fdivr	DWORD PTR _values$[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _span$[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _span$[ebp]
	push	ecx
	call	??$Lerp@M@@YAMABM0M@Z			; Lerp<float>
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _t$19620[ebp]
; Line 482
	push	ecx
	fld	DWORD PTR _t$19620[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _b$[ebx]
	push	edx
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T19622[ebp]
	push	ecx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _fn$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _fn$[ebx]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _v$19621[ebp]
; Line 485
	fldz
	fcomp	DWORD PTR _t$19620[ebp]
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN4@ImplicitSo
	fld1
	fcomp	DWORD PTR _t$19620[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@ImplicitSo
$LN4@ImplicitSo:
	jmp	SHORT $LN6@ImplicitSo
$LN5@ImplicitSo:
; Line 486
	push	ecx
	fld	DWORD PTR _v$19621[ebp]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fcomp	DWORD PTR _accuracy$[ebx]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@ImplicitSo
	fld	DWORD PTR _t$19620[ebp]
	jmp	SHORT $LN12@ImplicitSo
$LN3@ImplicitSo:
; Line 487
	fldz
	fcomp	DWORD PTR _v$19621[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@ImplicitSo
; Line 488
	fld	DWORD PTR _t$19620[ebp]
	fstp	DWORD PTR _span$[ebp]
	fld	DWORD PTR _v$19621[ebp]
	fstp	DWORD PTR _values$[ebp]
; Line 489
	jmp	SHORT $LN1@ImplicitSo
$LN2@ImplicitSo:
; Line 490
	fld	DWORD PTR _t$19620[ebp]
	fstp	DWORD PTR _span$[ebp+4]
	fld	DWORD PTR _v$19621[ebp]
	fstp	DWORD PTR _values$[ebp+4]
$LN1@ImplicitSo:
; Line 491
	jmp	$LN7@ImplicitSo
$LN6@ImplicitSo:
; Line 492
	fld	DWORD PTR __real@bf800000
$LN12@ImplicitSo:
; Line 493
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ImplicitSo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN17@ImplicitSo:
	DD	2
	DD	$LN16@ImplicitSo
$LN16@ImplicitSo:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN14@ImplicitSo
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN15@ImplicitSo
$LN15@ImplicitSo:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN14@ImplicitSo:
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	0
?ImplicitSolve@@YAMPAUImplicitFn@btSoftBody@@ABVbtVector3@@1MH@Z ENDP ; ImplicitSolve
_TEXT	ENDS
PUBLIC	?cutLink@btSoftBody@@QAE_NHHM@Z			; btSoftBody::cutLink
PUBLIC	?cutLink@btSoftBody@@QAE_NPBUNode@1@0M@Z	; btSoftBody::cutLink
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cutLink@btSoftBody@@QAE_NPBUNode@1@0M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_node0$ = 8						; size = 4
_node1$ = 12						; size = 4
_position$ = 16						; size = 4
?cutLink@btSoftBody@@QAE_NPBUNode@1@0M@Z PROC		; btSoftBody::cutLink, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 3872
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 3873
	push	ecx
	fld	DWORD PTR _position$[ebp]
	fstp	DWORD PTR [esp]
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _node1$[ebp]
	sub	ecx, eax
	sar	ecx, 7
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _node0$[ebp]
	sub	edx, eax
	sar	edx, 7
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?cutLink@btSoftBody@@QAE_NHHM@Z		; btSoftBody::cutLink
; Line 3874
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?cutLink@btSoftBody@@QAE_NPBUNode@1@0M@Z ENDP		; btSoftBody::cutLink
_TEXT	ENDS
PUBLIC	?pop_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::pop_back
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cutLink@btSoftBody@@QAE_NHHM@Z
_TEXT	SEGMENT
_pft$54801 = -156					; size = 8
_mtch$54799 = -144					; size = 4
_l$54795 = -140						; size = 4
_k$54794 = -136						; size = 4
_pft$54790 = -128					; size = 8
_mtch$54788 = -116					; size = 4
_pn$ = -108						; size = 8
_pb$ = -96						; size = 4
_pa$ = -92						; size = 4
_m$ = -88						; size = 4
_v$ = -80						; size = 16
_x$ = -48						; size = 16
_ni$ = -16						; size = 4
_i$ = -12						; size = 4
_done$ = -5						; size = 1
_this$ = -4						; size = 4
_node0$ = 8						; size = 4
_node1$ = 12						; size = 4
_position$ = 16						; size = 4
?cutLink@btSoftBody@@QAE_NHHM@Z PROC			; btSoftBody::cutLink, COMDAT
; _this$ = ecx
; Line 3878
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3879
	mov	BYTE PTR _done$[ebp], 0
; Line 3882
	push	ecx
	fld	DWORD PTR _position$[ebx]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _node1$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _node0$[ebx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	edx, DWORD PTR _x$[ebp]
	push	edx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
; Line 3883
	add	esp, 12					; 0000000cH
	fld	DWORD PTR _position$[ebx]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _node1$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _node0$[ebx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	push	eax
	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
; Line 3884
	fld1
	fstp	DWORD PTR _m$[ebp]
; Line 3885
	push	ecx
	fld	DWORD PTR _m$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 3886
	push	ecx
	fld	DWORD PTR _m$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendNode@btSoftBody@@QAEXABVbtVector3@@M@Z ; btSoftBody::appendNode
; Line 3887
	mov	edx, DWORD PTR _node0$[ebx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _pa$[ebp], eax
; Line 3888
	mov	eax, DWORD PTR _node1$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _pb$[ebp], eax
; Line 3889
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _pn$[ebp], eax
; Line 3891
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _pn$[ebp+4], eax
; Line 3892
	mov	ecx, DWORD PTR _pn$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _v$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _v$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
; Line 3893
	mov	ecx, DWORD PTR _pn$[ebp+4]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _v$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _v$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
; Line 3894
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN12@cutLink
$LN11@cutLink:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@cutLink:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	$LN10@cutLink
; Line 3896
	mov	eax, DWORD PTR _pb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pa$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	push	edx
	call	?MatchEdge@@YAHPBUNode@btSoftBody@@000@Z ; MatchEdge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mtch$54788[ebp], eax
; Line 3897
	cmp	DWORD PTR _mtch$54788[ebp], -1
	je	SHORT $LN9@cutLink
; Line 3899
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendLink
; Line 3900
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54790[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _pft$54790[ebp+4], eax
; Line 3901
	mov	edx, DWORD PTR _pft$54790[ebp]
	mov	eax, DWORD PTR _mtch$54788[ebp]
	mov	ecx, DWORD PTR _pn$[ebp+eax*4]
	mov	DWORD PTR [edx+12], ecx
; Line 3902
	mov	edx, 1
	sub	edx, DWORD PTR _mtch$54788[ebp]
	mov	eax, DWORD PTR _pft$54790[ebp+4]
	mov	ecx, DWORD PTR _pn$[ebp+edx*4]
	mov	DWORD PTR [eax+8], ecx
; Line 3903
	mov	BYTE PTR _done$[ebp], 1
$LN9@cutLink:
; Line 3905
	jmp	$LN11@cutLink
$LN10@cutLink:
; Line 3906
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN8@cutLink
$LN7@cutLink:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN8@cutLink:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	$LN6@cutLink
; Line 3908
	mov	DWORD PTR _k$54794[ebp], 2
	mov	DWORD PTR _l$54795[ebp], 0
	jmp	SHORT $LN5@cutLink
$LN4@cutLink:
	mov	ecx, DWORD PTR _l$54795[ebp]
	mov	DWORD PTR _k$54794[ebp], ecx
	mov	edx, DWORD PTR _l$54795[ebp]
	add	edx, 1
	mov	DWORD PTR _l$54795[ebp], edx
$LN5@cutLink:
	cmp	DWORD PTR _l$54795[ebp], 3
	jge	$LN3@cutLink
; Line 3910
	mov	eax, DWORD PTR _pb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pa$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _l$54795[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _k$54794[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+8]
	push	edx
	call	?MatchEdge@@YAHPBUNode@btSoftBody@@000@Z ; MatchEdge
	add	esp, 16					; 00000010H
	mov	DWORD PTR _mtch$54799[ebp], eax
; Line 3911
	cmp	DWORD PTR _mtch$54799[ebp], -1
	je	$LN2@cutLink
; Line 3913
	push	0
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendFace@btSoftBody@@QAEXHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 3914
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54801[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _pft$54801[ebp+4], eax
; Line 3915
	mov	edx, DWORD PTR _l$54795[ebp]
	mov	eax, DWORD PTR _pft$54801[ebp]
	mov	ecx, DWORD PTR _mtch$54799[ebp]
	mov	ecx, DWORD PTR _pn$[ebp+ecx*4]
	mov	DWORD PTR [eax+edx*4+8], ecx
; Line 3916
	mov	edx, 1
	sub	edx, DWORD PTR _mtch$54799[ebp]
	mov	eax, DWORD PTR _k$54794[ebp]
	mov	ecx, DWORD PTR _pft$54801[ebp+4]
	mov	edx, DWORD PTR _pn$[ebp+edx*4]
	mov	DWORD PTR [ecx+eax*4+8], edx
; Line 3917
	push	1
	mov	eax, DWORD PTR _pft$54801[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	eax, DWORD PTR _l$54795[ebp]
	add	eax, 1
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	eax, DWORD PTR _pft$54801[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+8]
	push	ecx
	mov	edx, DWORD PTR _pn$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXPAUNode@1@0PAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 3918
	push	1
	mov	eax, DWORD PTR _pft$54801[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	eax, DWORD PTR _l$54795[ebp]
	add	eax, 1
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	eax, DWORD PTR _pft$54801[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+8]
	push	ecx
	mov	edx, DWORD PTR _pn$[ebp+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?appendLink@btSoftBody@@QAEXPAUNode@1@0PAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN2@cutLink:
; Line 3920
	jmp	$LN4@cutLink
$LN3@cutLink:
; Line 3921
	jmp	$LN7@cutLink
$LN6@cutLink:
; Line 3922
	movzx	eax, BYTE PTR _done$[ebp]
	test	eax, eax
	jne	SHORT $LN1@cutLink
; Line 3924
	mov	ecx, DWORD PTR _pn$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	?remove@btDbvt@@QAEXPAUbtDbvtNode@@@Z	; btDbvt::remove
; Line 3925
	mov	eax, DWORD PTR _pn$[ebp+4]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	?remove@btDbvt@@QAEXPAUbtDbvtNode@@@Z	; btDbvt::remove
; Line 3926
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?pop_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::pop_back
; Line 3927
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?pop_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::pop_back
$LN1@cutLink:
; Line 3929
	mov	al, BYTE PTR _done$[ebp]
; Line 3930
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@cutLink
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
	npad	3
$LN21@cutLink:
	DD	5
	DD	$LN20@cutLink
$LN20@cutLink:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN15@cutLink
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN16@cutLink
	DD	-108					; ffffff94H
	DD	8
	DD	$LN17@cutLink
	DD	-128					; ffffff80H
	DD	8
	DD	$LN18@cutLink
	DD	-156					; ffffff64H
	DD	8
	DD	$LN19@cutLink
$LN19@cutLink:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN18@cutLink:
	DB	112					; 00000070H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
$LN17@cutLink:
	DB	112					; 00000070H
	DB	110					; 0000006eH
	DB	0
$LN16@cutLink:
	DB	118					; 00000076H
	DB	0
$LN15@cutLink:
	DB	120					; 00000078H
	DB	0
?cutLink@btSoftBody@@QAE_NHHM@Z ENDP			; btSoftBody::cutLink
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MatchEdge@@YAHPBUNode@btSoftBody@@000@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_ma$ = 16						; size = 4
_mb$ = 20						; size = 4
?MatchEdge@@YAHPBUNode@btSoftBody@@000@Z PROC		; MatchEdge, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 587
	push	ebp
	mov	ebp, esp
; Line 588
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _ma$[ebp]
	jne	SHORT $LN2@MatchEdge
	mov	ecx, DWORD PTR _b$[ebp]
	cmp	ecx, DWORD PTR _mb$[ebp]
	jne	SHORT $LN2@MatchEdge
	xor	eax, eax
	jmp	SHORT $LN3@MatchEdge
$LN2@MatchEdge:
; Line 589
	mov	edx, DWORD PTR _a$[ebp]
	cmp	edx, DWORD PTR _mb$[ebp]
	jne	SHORT $LN1@MatchEdge
	mov	eax, DWORD PTR _b$[ebp]
	cmp	eax, DWORD PTR _ma$[ebp]
	jne	SHORT $LN1@MatchEdge
	mov	eax, 1
	jmp	SHORT $LN3@MatchEdge
$LN1@MatchEdge:
; Line 590
	or	eax, -1
$LN3@MatchEdge:
; Line 591
	pop	ebp
	ret	0
?MatchEdge@@YAHPBUNode@btSoftBody@@000@Z ENDP		; MatchEdge
_TEXT	ENDS
PUBLIC	?rayTest@btSoftBody@@QBEHABVbtVector3@@0AAMAAW4_@eFeature@1@AAH_N@Z ; btSoftBody::rayTest
PUBLIC	?initializeFaceTree@btSoftBody@@QAEXXZ		; btSoftBody::initializeFaceTree
PUBLIC	?empty@btDbvt@@QBE_NXZ				; btDbvt::empty
PUBLIC	?rayTest@btSoftBody@@QAE_NABVbtVector3@@0AAUsRayCast@1@@Z ; btSoftBody::rayTest
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?rayTest@btSoftBody@@QAE_NABVbtVector3@@0AAUsRayCast@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_rayFrom$ = 8						; size = 4
_rayTo$ = 12						; size = 4
_results$ = 16						; size = 4
?rayTest@btSoftBody@@QAE_NABVbtVector3@@0AAUsRayCast@1@@Z PROC ; btSoftBody::rayTest, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 3936
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 3938
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	test	eax, eax
	je	SHORT $LN1@rayTest
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?empty@btDbvt@@QBE_NXZ			; btDbvt::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@rayTest
; Line 3939
	mov	ecx, DWORD PTR _this$[ebp]
	call	?initializeFaceTree@btSoftBody@@QAEXXZ	; btSoftBody::initializeFaceTree
$LN1@rayTest:
; Line 3941
	mov	ecx, DWORD PTR _results$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 3942
	mov	eax, DWORD PTR _results$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]
; Line 3943
	mov	ecx, DWORD PTR _results$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 3944
	mov	edx, DWORD PTR _results$[ebp]
	mov	DWORD PTR [edx+8], -1
; Line 3946
	push	0
	mov	eax, DWORD PTR _results$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _results$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _results$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _rayTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rayFrom$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?rayTest@btSoftBody@@QBEHABVbtVector3@@0AAMAAW4_@eFeature@1@AAH_N@Z ; btSoftBody::rayTest
	neg	eax
	sbb	eax, eax
	neg	eax
; Line 3947
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?rayTest@btSoftBody@@QAE_NABVbtVector3@@0AAUsRayCast@1@@Z ENDP ; btSoftBody::rayTest
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?empty@btDbvt@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?empty@btDbvt@@QBE_NXZ PROC				; btDbvt::empty, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 273
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@btDbvt@@QBE_NXZ ENDP				; btDbvt::empty
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXABW4_@eVSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::push_back
PUBLIC	?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
PUBLIC	?clear@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::clear
PUBLIC	?clear@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setSolver@btSoftBody@@QAEXW4_@eSolverPresets@1@@Z
_TEXT	SEGMENT
tv73 = -44						; size = 4
$T66746 = -40						; size = 4
$T66745 = -36						; size = 4
$T66744 = -32						; size = 4
$T66743 = -28						; size = 4
$T66742 = -24						; size = 4
$T66741 = -20						; size = 4
$T66740 = -16						; size = 4
$T66739 = -12						; size = 4
$T66738 = -8						; size = 4
_this$ = -4						; size = 4
_preset$ = 8						; size = 4
?setSolver@btSoftBody@@QAEXW4_@eSolverPresets@1@@Z PROC	; btSoftBody::setSolver, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 3951
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 3952
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	call	?clear@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::clear
; Line 3953
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?clear@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::clear
; Line 3954
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	?clear@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::clear
; Line 3955
	mov	eax, DWORD PTR _preset$[ebp]
	mov	DWORD PTR tv73[ebp], eax
	cmp	DWORD PTR tv73[ebp], 0
	je	SHORT $LN2@setSolver
	cmp	DWORD PTR tv73[ebp], 1
	je	SHORT $LN1@setSolver
	jmp	$LN5@setSolver
$LN2@setSolver:
; Line 3958
	mov	DWORD PTR $T66738[ebp], 1
	lea	ecx, DWORD PTR $T66738[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
; Line 3959
	mov	DWORD PTR $T66739[ebp], 2
	lea	edx, DWORD PTR $T66739[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
; Line 3960
	mov	DWORD PTR $T66740[ebp], 3
	lea	eax, DWORD PTR $T66740[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
; Line 3961
	mov	DWORD PTR $T66741[ebp], 0
	lea	ecx, DWORD PTR $T66741[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
; Line 3962
	jmp	SHORT $LN5@setSolver
$LN1@setSolver:
; Line 3964
	mov	DWORD PTR $T66742[ebp], 0
	lea	edx, DWORD PTR $T66742[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	call	?push_back@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXABW4_@eVSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::push_back
; Line 3966
	mov	DWORD PTR $T66743[ebp], 1
	lea	eax, DWORD PTR $T66743[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
; Line 3967
	mov	DWORD PTR $T66744[ebp], 2
	lea	ecx, DWORD PTR $T66744[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
; Line 3968
	mov	DWORD PTR $T66745[ebp], 3
	lea	edx, DWORD PTR $T66745[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
; Line 3970
	mov	DWORD PTR $T66746[ebp], 0
	lea	eax, DWORD PTR $T66746[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
$LN5@setSolver:
; Line 3973
	pop	edi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setSolver@btSoftBody@@QAEXW4_@eSolverPresets@1@@Z ENDP	; btSoftBody::setSolver
_TEXT	ENDS
PUBLIC	?resize@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXHABUSContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::SContact>::resize
PUBLIC	??0SContact@btSoftBody@@QAE@XZ			; btSoftBody::SContact::SContact
PUBLIC	?resize@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXHABURContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::RContact>::resize
PUBLIC	??0RContact@btSoftBody@@QAE@XZ			; btSoftBody::RContact::RContact
PUBLIC	?updatePose@btSoftBody@@QAEXXZ			; btSoftBody::updatePose
PUBLIC	??BbtVector3@@QAEPAMXZ				; btVector3::operator float *
PUBLIC	?applyForces@btSoftBody@@QAEXXZ			; btSoftBody::applyForces
PUBLIC	__$ArrayPad$
PUBLIC	?predictMotion@btSoftBody@@QAEXM@Z		; btSoftBody::predictMotion
EXTRN	?optimizeIncremental@btDbvt@@QAEXH@Z:PROC	; btDbvt::optimizeIncremental
EXTRN	?update@btDbvt@@QAE_NPAUbtDbvtNode@@AAUbtDbvtAabbMm@@ABVbtVector3@@M@Z:PROC ; btDbvt::update
EXTRN	?clear@btDbvt@@QAEXXZ:PROC			; btDbvt::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?predictMotion@btSoftBody@@QAEXM@Z
_TEXT	SEGMENT
tv649 = -984						; size = 4
tv132 = -980						; size = 4
$T66755 = -976						; size = 64
$T66754 = -912						; size = 144
$T66753 = -768						; size = 4
$T66752 = -764						; size = 4
$T66751 = -760						; size = 4
$T66750 = -756						; size = 4
$T54891 = -544						; size = 16
$T54889 = -528						; size = 16
_x$54888 = -496						; size = 16
_n$54886 = -464						; size = 4
_ni$54882 = -460					; size = 4
_i$54881 = -456						; size = 4
_posetrs$54880 = -448					; size = 48
$T54878 = -384						; size = 16
$T54877 = -368						; size = 32
$T54874 = -336						; size = 16
$T54873 = -320						; size = 16
_v$54872 = -288						; size = 16
_f$54871 = -264						; size = 4
_i$54867 = -260						; size = 4
$T54865 = -256						; size = 16
$T54864 = -240						; size = 32
_n$54863 = -200						; size = 4
_vol$ = -192						; size = 32
$T54855 = -144						; size = 16
$T54854 = -128						; size = 16
_c$54848 = -108						; size = 4
_clampDeltaV$54847 = -104				; size = 4
_maxDisplacement$54846 = -100				; size = 4
$T54844 = -96						; size = 16
_deltaV$54843 = -64					; size = 16
_n$54842 = -36						; size = 4
$T54838 = -32						; size = 16
_ni$ = -16						; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dt$ = 8						; size = 4
?predictMotion@btSoftBody@@QAEXM@Z PROC			; btSoftBody::predictMotion, COMDAT
; _this$ = ecx
; Line 3977
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 984				; 000003d8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-984]
	mov	ecx, 246				; 000000f6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 3982
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+960]
	test	ecx, ecx
	je	SHORT $LN21@predictMot
; Line 3984
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+960], 0
; Line 3985
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateConstants@btSoftBody@@QAEXXZ	; btSoftBody::updateConstants
; Line 3986
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?clear@btDbvt@@QAEXXZ			; btDbvt::clear
; Line 3987
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	and	ecx, 16					; 00000010H
	je	SHORT $LN21@predictMot
; Line 3989
	mov	ecx, DWORD PTR _this$[ebp]
	call	?initializeFaceTree@btSoftBody@@QAEXXZ	; btSoftBody::initializeFaceTree
$LN21@predictMot:
; Line 3994
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _dt$[ebx]
	fmul	DWORD PTR [edx+392]
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+476]
; Line 3995
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fdiv	DWORD PTR [ecx+476]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+480]
; Line 3996
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+476]
	fmul	DWORD PTR __real@40400000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+484]
; Line 3997
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv132[ebp], eax
	mov	edx, DWORD PTR tv132[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv132[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+488]
; Line 3998
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+488]
	fmul	DWORD PTR __real@3e800000
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+492]
; Line 4000
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 476				; 000001dcH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+708]
	add	edx, 48					; 00000030H
	push	edx
	lea	eax, DWORD PTR $T54838[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addVelocity@btSoftBody@@QAEXABVbtVector3@@@Z ; btSoftBody::addVelocity
; Line 4001
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyForces@btSoftBody@@QAEXXZ		; btSoftBody::applyForces
; Line 4003
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN20@predictMot
$LN19@predictMot:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN20@predictMot:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	$LN18@predictMot
; Line 4005
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$54842[ebp], eax
; Line 4006
	mov	ecx, DWORD PTR _n$54842[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _n$54842[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 4007
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 476				; 000001dcH
	push	edx
	mov	eax, DWORD PTR _n$54842[ebp]
	add	eax, 96					; 00000060H
	push	eax
	mov	ecx, DWORD PTR _n$54842[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	lea	edx, DWORD PTR $T54844[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _deltaV$54843[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 4009
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+708]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR _maxDisplacement$54846[ebp]
; Line 4010
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _maxDisplacement$54846[ebp]
	fdiv	DWORD PTR [eax+476]
	fstp	DWORD PTR _clampDeltaV$54847[ebp]
; Line 4011
	mov	DWORD PTR _c$54848[ebp], 0
	jmp	SHORT $LN17@predictMot
$LN16@predictMot:
	mov	ecx, DWORD PTR _c$54848[ebp]
	add	ecx, 1
	mov	DWORD PTR _c$54848[ebp], ecx
$LN17@predictMot:
	cmp	DWORD PTR _c$54848[ebp], 3
	jge	SHORT $LN15@predictMot
; Line 4013
	lea	ecx, DWORD PTR _deltaV$54843[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	mov	edx, DWORD PTR _c$54848[ebp]
	fld	DWORD PTR _clampDeltaV$54847[ebp]
	fcomp	DWORD PTR [eax+edx*4]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN14@predictMot
; Line 4015
	lea	ecx, DWORD PTR _deltaV$54843[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	mov	ecx, DWORD PTR _c$54848[ebp]
	fld	DWORD PTR _clampDeltaV$54847[ebp]
	fstp	DWORD PTR [eax+ecx*4]
$LN14@predictMot:
; Line 4017
	lea	ecx, DWORD PTR _deltaV$54843[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR _clampDeltaV$54847[ebp]
	fchs
	mov	edx, DWORD PTR _c$54848[ebp]
	fcomp	DWORD PTR [eax+edx*4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN13@predictMot
; Line 4019
	fld	DWORD PTR _clampDeltaV$54847[ebp]
	fchs
	lea	ecx, DWORD PTR _deltaV$54843[ebp]
	fstp	DWORD PTR tv649[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	mov	ecx, DWORD PTR _c$54848[ebp]
	fld	DWORD PTR tv649[ebp]
	fstp	DWORD PTR [eax+ecx*4]
$LN13@predictMot:
; Line 4021
	jmp	SHORT $LN16@predictMot
$LN15@predictMot:
; Line 4023
	lea	edx, DWORD PTR _deltaV$54843[ebp]
	push	edx
	mov	ecx, DWORD PTR _n$54842[ebp]
	add	ecx, 48					; 00000030H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4024
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 476				; 000001dcH
	push	eax
	mov	ecx, DWORD PTR _n$54842[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR $T54854[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$54842[ebp]
	add	ecx, 16					; 00000010H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4025
	fldz
	fstp	DWORD PTR $T66750[ebp]
	fldz
	fstp	DWORD PTR $T66751[ebp]
	fldz
	fstp	DWORD PTR $T66752[ebp]
	lea	eax, DWORD PTR $T66750[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66751[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66752[ebp]
	push	edx
	lea	ecx, DWORD PTR $T54855[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _n$54842[ebp]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4026
	jmp	$LN19@predictMot
$LN18@predictMot:
; Line 4028
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateClusters@btSoftBody@@QAEXXZ	; btSoftBody::updateClusters
; Line 4030
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateBounds@btSoftBody@@QAEXXZ	; btSoftBody::updateBounds
; Line 4032
	lea	ecx, DWORD PTR _vol$[ebp]
	call	??0btDbvtAabbMm@@QAE@XZ
; Line 4033
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN12@predictMot
$LN11@predictMot:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@predictMot:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	$LN10@predictMot
; Line 4035
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$54863[ebp], eax
; Line 4036
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+488]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _n$54863[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T54864[ebp]
	push	eax
	call	?FromCR@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@M@Z ; btDbvtAabbMm::FromCR
	add	esp, 12					; 0000000cH
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR _vol$[ebp]
	rep movsd
; Line 4040
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+492]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 484				; 000001e4H
	push	edx
	mov	eax, DWORD PTR _n$54863[ebp]
	add	eax, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR $T54865[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _vol$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$54863[ebp]
	mov	ecx, DWORD PTR [eax+104]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	?update@btDbvt@@QAE_NPAUbtDbvtNode@@AAUbtDbvtAabbMm@@ABVbtVector3@@M@Z ; btDbvt::update
; Line 4041
	jmp	$LN11@predictMot
$LN10@predictMot:
; Line 4043
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?empty@btDbvt@@QBE_NXZ			; btDbvt::empty
	movzx	edx, al
	test	edx, edx
	jne	$LN6@predictMot
; Line 4045
	mov	DWORD PTR _i$54867[ebp], 0
	jmp	SHORT $LN8@predictMot
$LN7@predictMot:
	mov	eax, DWORD PTR _i$54867[ebp]
	add	eax, 1
	mov	DWORD PTR _i$54867[ebp], eax
$LN8@predictMot:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$54867[ebp], eax
	jge	$LN6@predictMot
; Line 4047
	mov	ecx, DWORD PTR _i$54867[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$54871[ebp], eax
; Line 4050
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T66753[ebp]
	lea	edx, DWORD PTR $T66753[ebp]
	push	edx
	mov	eax, DWORD PTR _f$54871[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _f$54871[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _f$54871[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 48					; 00000030H
	push	edx
	lea	eax, DWORD PTR $T54873[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T54874[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _v$54872[ebp]
	push	edx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
; Line 4051
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+488]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _f$54871[ebp]
	push	ecx
	lea	edx, DWORD PTR $T54877[ebp]
	push	edx
	call	?VolumeOf@@YA?AUbtDbvtAabbMm@@ABUFace@btSoftBody@@M@Z ; VolumeOf
	add	esp, 12					; 0000000cH
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR _vol$[ebp]
	rep movsd
; Line 4055
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+492]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 484				; 000001e4H
	push	ecx
	lea	edx, DWORD PTR _v$54872[ebp]
	push	edx
	lea	eax, DWORD PTR $T54878[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _vol$[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$54871[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?update@btDbvt@@QAE_NPAUbtDbvtNode@@AAUbtDbvtAabbMm@@ABVbtVector3@@M@Z ; btDbvt::update
; Line 4056
	jmp	$LN7@predictMot
$LN6@predictMot:
; Line 4059
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updatePose@btSoftBody@@QAEXXZ		; btSoftBody::updatePose
; Line 4061
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+497]
	test	edx, edx
	je	$LN2@predictMot
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fcomp	DWORD PTR [eax+344]
	fnstsw	ax
	test	ah, 5
	jp	$LN2@predictMot
; Line 4063
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 560				; 00000230H
	push	ecx
	lea	ecx, DWORD PTR _posetrs$54880[ebp]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
; Line 4064
	mov	DWORD PTR _i$54881[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$54882[ebp], eax
	jmp	SHORT $LN4@predictMot
$LN3@predictMot:
	mov	edx, DWORD PTR _i$54881[ebp]
	add	edx, 1
	mov	DWORD PTR _i$54881[ebp], edx
$LN4@predictMot:
	mov	eax, DWORD PTR _i$54881[ebp]
	cmp	eax, DWORD PTR _ni$54882[ebp]
	jge	$LN2@predictMot
; Line 4066
	mov	ecx, DWORD PTR _i$54881[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$54886[ebp], eax
; Line 4067
	mov	edx, DWORD PTR _n$54886[ebp]
	fldz
	fcomp	DWORD PTR [edx+96]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@predictMot
; Line 4069
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 544				; 00000220H
	push	eax
	mov	ecx, DWORD PTR _i$54881[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 504				; 000001f8H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	lea	edx, DWORD PTR _posetrs$54880[ebp]
	push	edx
	lea	eax, DWORD PTR $T54889[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _x$54888[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 4070
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+344]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _x$54888[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$54886[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T54891[ebp]
	push	edx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _n$54886[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
$LN1@predictMot:
; Line 4072
	jmp	$LN3@predictMot
$LN2@predictMot:
; Line 4075
	lea	ecx, DWORD PTR $T66754[ebp]
	call	??0RContact@btSoftBody@@QAE@XZ
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 832				; 00000340H
	call	?resize@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXHABURContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::RContact>::resize
; Line 4076
	lea	ecx, DWORD PTR $T66755[ebp]
	call	??0SContact@btSoftBody@@QAE@XZ
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 852				; 00000354H
	call	?resize@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXHABUSContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::SContact>::resize
; Line 4078
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	?optimizeIncremental@btDbvt@@QAEXH@Z	; btDbvt::optimizeIncremental
; Line 4079
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?optimizeIncremental@btDbvt@@QAEXH@Z	; btDbvt::optimizeIncremental
; Line 4080
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1084				; 0000043cH
	call	?optimizeIncremental@btDbvt@@QAEXH@Z	; btDbvt::optimizeIncremental
; Line 4081
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@predictMot
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
$LN31@predictMot:
	DD	5
	DD	$LN30@predictMot
$LN30@predictMot:
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN25@predictMot
	DD	-192					; ffffff40H
	DD	32					; 00000020H
	DD	$LN26@predictMot
	DD	-288					; fffffee0H
	DD	16					; 00000010H
	DD	$LN27@predictMot
	DD	-448					; fffffe40H
	DD	48					; 00000030H
	DD	$LN28@predictMot
	DD	-496					; fffffe10H
	DD	16					; 00000010H
	DD	$LN29@predictMot
$LN29@predictMot:
	DB	120					; 00000078H
	DB	0
$LN28@predictMot:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN27@predictMot:
	DB	118					; 00000076H
	DB	0
$LN26@predictMot:
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN25@predictMot:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	86					; 00000056H
	DB	0
?predictMotion@btSoftBody@@QAEXM@Z ENDP			; btSoftBody::predictMotion
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BbtVector3@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BbtVector3@@QAEPAMXZ PROC				; btVector3::operator float *, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 586
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??BbtVector3@@QAEPAMXZ ENDP				; btVector3::operator float *
_TEXT	ENDS
PUBLIC	?Expand@btDbvtAabbMm@@QAEXABVbtVector3@@@Z	; btDbvtAabbMm::Expand
PUBLIC	?FromPoints@btDbvtAabbMm@@SA?AU1@PAPBVbtVector3@@H@Z ; btDbvtAabbMm::FromPoints
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?VolumeOf@@YA?AUbtDbvtAabbMm@@ABUFace@btSoftBody@@M@Z
_TEXT	SEGMENT
$T19648 = -96						; size = 16
_vol$ = -64						; size = 32
_pts$ = -16						; size = 12
___$ReturnUdt$ = 8					; size = 4
_f$ = 12						; size = 4
_margin$ = 16						; size = 4
?VolumeOf@@YA?AUbtDbvtAabbMm@@ABUFace@btSoftBody@@M@Z PROC ; VolumeOf, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 508
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 509
	mov	eax, DWORD PTR _f$[ebx]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _pts$[ebp], ecx
; Line 510
	mov	edx, DWORD PTR _f$[ebx]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _pts$[ebp+4], eax
; Line 511
	mov	ecx, DWORD PTR _f$[ebx]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _pts$[ebp+8], edx
; Line 512
	push	3
	lea	eax, DWORD PTR _pts$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vol$[ebp]
	push	ecx
	call	?FromPoints@btDbvtAabbMm@@SA?AU1@PAPBVbtVector3@@H@Z ; btDbvtAabbMm::FromPoints
	add	esp, 12					; 0000000cH
; Line 513
	lea	edx, DWORD PTR _margin$[ebx]
	push	edx
	lea	eax, DWORD PTR _margin$[ebx]
	push	eax
	lea	ecx, DWORD PTR _margin$[ebx]
	push	ecx
	lea	ecx, DWORD PTR $T19648[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	ecx, DWORD PTR _vol$[ebp]
	call	?Expand@btDbvtAabbMm@@QAEXABVbtVector3@@@Z ; btDbvtAabbMm::Expand
; Line 514
	mov	ecx, 8
	lea	esi, DWORD PTR _vol$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 515
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@VolumeOf@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN6@VolumeOf@2:
	DD	2
	DD	$LN5@VolumeOf@2
$LN5@VolumeOf@2:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@VolumeOf@2
	DD	-64					; ffffffc0H
	DD	32					; 00000020H
	DD	$LN4@VolumeOf@2
$LN4@VolumeOf@2:
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN3@VolumeOf@2:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?VolumeOf@@YA?AUbtDbvtAabbMm@@ABUFace@btSoftBody@@M@Z ENDP ; VolumeOf
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?FromPoints@btDbvtAabbMm@@SA?AU1@PAPBVbtVector3@@H@Z
_TEXT	SEGMENT
_i$13609 = -56						; size = 4
_box$ = -48						; size = 32
___$ReturnUdt$ = 8					; size = 4
_ppts$ = 12						; size = 4
_n$ = 16						; size = 4
?FromPoints@btDbvtAabbMm@@SA?AU1@PAPBVbtVector3@@H@Z PROC ; btDbvtAabbMm::FromPoints, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 433
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 434
	lea	ecx, DWORD PTR _box$[ebp]
	call	??0btDbvtAabbMm@@QAE@XZ
; Line 435
	mov	eax, DWORD PTR _ppts$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _box$[ebp+16], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _box$[ebp+20], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _box$[ebp+24], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _box$[ebp+28], eax
	mov	ecx, DWORD PTR _box$[ebp+16]
	mov	DWORD PTR _box$[ebp], ecx
	mov	edx, DWORD PTR _box$[ebp+20]
	mov	DWORD PTR _box$[ebp+4], edx
	mov	eax, DWORD PTR _box$[ebp+24]
	mov	DWORD PTR _box$[ebp+8], eax
	mov	ecx, DWORD PTR _box$[ebp+28]
	mov	DWORD PTR _box$[ebp+12], ecx
; Line 436
	mov	DWORD PTR _i$13609[ebp], 1
	jmp	SHORT $LN3@FromPoints
$LN2@FromPoints:
	mov	edx, DWORD PTR _i$13609[ebp]
	add	edx, 1
	mov	DWORD PTR _i$13609[ebp], edx
$LN3@FromPoints:
	mov	eax, DWORD PTR _i$13609[ebp]
	cmp	eax, DWORD PTR _n$[ebx]
	jge	SHORT $LN1@FromPoints
; Line 438
	mov	ecx, DWORD PTR _i$13609[ebp]
	mov	edx, DWORD PTR _ppts$[ebx]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	lea	ecx, DWORD PTR _box$[ebp]
	call	?setMin@btVector3@@QAEXABV1@@Z		; btVector3::setMin
; Line 439
	mov	ecx, DWORD PTR _i$13609[ebp]
	mov	edx, DWORD PTR _ppts$[ebx]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	lea	ecx, DWORD PTR _box$[ebp+16]
	call	?setMax@btVector3@@QAEXABV1@@Z		; btVector3::setMax
; Line 440
	jmp	SHORT $LN2@FromPoints
$LN1@FromPoints:
; Line 441
	mov	ecx, 8
	lea	esi, DWORD PTR _box$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 442
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@FromPoints
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN8@FromPoints:
	DD	1
	DD	$LN7@FromPoints
$LN7@FromPoints:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN6@FromPoints
$LN6@FromPoints:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
?FromPoints@btDbvtAabbMm@@SA?AU1@PAPBVbtVector3@@H@Z ENDP ; btDbvtAabbMm::FromPoints
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Expand@btDbvtAabbMm@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
?Expand@btDbvtAabbMm@@QAEXABVbtVector3@@@Z PROC		; btDbvtAabbMm::Expand, COMDAT
; _this$ = ecx
; Line 446
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 447
	mov	eax, DWORD PTR _e$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
	mov	ecx, DWORD PTR _e$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 448
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Expand@btDbvtAabbMm@@QAEXABVbtVector3@@@Z ENDP		; btDbvtAabbMm::Expand
_TEXT	ENDS
PUBLIC	??0sCti@btSoftBody@@QAE@XZ			; btSoftBody::sCti::sCti
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0RContact@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0RContact@btSoftBody@@QAE@XZ PROC			; btSoftBody::RContact::RContact, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0sCti@btSoftBody@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0RContact@btSoftBody@@QAE@XZ ENDP			; btSoftBody::RContact::RContact
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0SContact@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SContact@btSoftBody@@QAE@XZ PROC			; btSoftBody::SContact::SContact, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0SContact@btSoftBody@@QAE@XZ ENDP			; btSoftBody::SContact::SContact
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0sCti@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sCti@btSoftBody@@QAE@XZ PROC				; btSoftBody::sCti::sCti, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0sCti@btSoftBody@@QAE@XZ ENDP				; btSoftBody::sCti::sCti
_TEXT	ENDS
PUBLIC	?dampClusters@btSoftBody@@QAEXXZ		; btSoftBody::dampClusters
PUBLIC	?getSolver@btSoftBody@@SAP6AXPAV1@MM@ZW4_@ePSolver@1@@Z ; btSoftBody::getSolver
PUBLIC	??A?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEAAW4_@ePSolver@btSoftBody@@H@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
PUBLIC	?getSolver@btSoftBody@@SAP6AXPAV1@M@ZW4_@eVSolver@1@@Z ; btSoftBody::getSolver
PUBLIC	??A?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEAAW4_@eVSolver@btSoftBody@@H@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::size
PUBLIC	?getInvMass@btRigidBody@@QBEMXZ			; btRigidBody::getInvMass
PUBLIC	?getInvInertiaTensorWorld@btRigidBody@@QBEABVbtMatrix3x3@@XZ ; btRigidBody::getInvInertiaTensorWorld
PUBLIC	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
PUBLIC	?applyClusters@btSoftBody@@QAEX_N@Z		; btSoftBody::applyClusters
PUBLIC	__$ArrayPad$
PUBLIC	?solveConstraints@btSoftBody@@QAEXXZ		; btSoftBody::solveConstraints
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?solveConstraints@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
$T66789 = -364						; size = 4
$T66788 = -360						; size = 4
$T66787 = -356						; size = 4
$T54971 = -352						; size = 16
$T54970 = -336						; size = 16
_n$54969 = -308						; size = 4
_ni$54965 = -304					; size = 4
_i$54964 = -300						; size = 4
_iseq$54960 = -296					; size = 4
_idrift$54956 = -292					; size = 4
_n$54955 = -288						; size = 4
_vcf$54951 = -280					; size = 4
$T54946 = -272						; size = 16
$T54945 = -256						; size = 16
$T54944 = -240						; size = 16
_n$54943 = -220						; size = 4
_vc$54939 = -212					; size = 4
_iseq$54935 = -204					; size = 4
_ti$54933 = -200					; size = 4
_isolve$54929 = -196					; size = 4
$T54927 = -192						; size = 16
$T54926 = -176						; size = 16
_n$54925 = -156						; size = 4
_iseq$54918 = -152					; size = 4
_isolve$54914 = -148					; size = 4
$T54912 = -144						; size = 48
_ra$54910 = -80						; size = 16
_a$54909 = -52						; size = 4
$T54905 = -48						; size = 16
_l$54904 = -20						; size = 4
_ni$ = -16						; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?solveConstraints@btSoftBody@@QAEXXZ PROC		; btSoftBody::solveConstraints, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 4085
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4088
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyClusters@btSoftBody@@QAEX_N@Z	; btSoftBody::applyClusters
; Line 4093
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN39@solveConst
$LN38@solveConst:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN39@solveConst:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN37@solveConst
; Line 4095
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$54904[ebp], eax
; Line 4096
	mov	eax, DWORD PTR _l$54904[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _l$54904[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR $T54905[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _l$54904[ebp]
	add	edx, 48					; 00000030H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 4097
	mov	ecx, DWORD PTR _l$54904[ebp]
	add	ecx, 48					; 00000030H
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	mov	ecx, DWORD PTR _l$54904[ebp]
	fmul	DWORD PTR [ecx+24]
	fld1
	fdivrp	ST(1), ST(0)
	mov	edx, DWORD PTR _l$54904[ebp]
	fstp	DWORD PTR [edx+32]
; Line 4098
	jmp	SHORT $LN38@solveConst
$LN37@solveConst:
; Line 4100
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN36@solveConst
$LN35@solveConst:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN36@solveConst:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	$LN34@solveConst
; Line 4102
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	DWORD PTR _a$54909[ebp], eax
; Line 4103
	mov	eax, DWORD PTR _a$54909[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _a$54909[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	mov	ecx, eax
	call	?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	edx, DWORD PTR _ra$54910[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
; Line 4108
	lea	eax, DWORD PTR _ra$54910[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$54909[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?getInvInertiaTensorWorld@btRigidBody@@QBEABVbtMatrix3x3@@XZ ; btRigidBody::getInvInertiaTensorWorld
	push	eax
	mov	edx, DWORD PTR _a$54909[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?getInvMass@btRigidBody@@QBEMXZ		; btRigidBody::getInvMass
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _a$54909[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	fld	DWORD PTR [ecx+96]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+476]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T54912[ebp]
	push	eax
	call	?ImpulseMatrix@@YA?AVbtMatrix3x3@@MMMABV1@ABVbtVector3@@@Z ; ImpulseMatrix
	add	esp, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _a$54909[ebp]
	add	ecx, 48					; 00000030H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 4109
	mov	ecx, DWORD PTR _a$54909[ebp]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _ra$54910[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _ra$54910[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _ra$54910[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _ra$54910[ebp+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4110
	mov	ecx, DWORD PTR _a$54909[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+476]
	fmul	DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _a$54909[ebp]
	fstp	DWORD PTR [ecx+112]
; Line 4111
	push	0
	mov	edx, DWORD PTR _a$54909[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?activate@btCollisionObject@@QBEX_N@Z	; btCollisionObject::activate
; Line 4112
	jmp	$LN35@solveConst
$LN34@solveConst:
; Line 4114
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+396], 0
	jle	$LN24@solveConst
; Line 4117
	mov	DWORD PTR _isolve$54914[ebp], 0
	jmp	SHORT $LN32@solveConst
$LN31@solveConst:
	mov	ecx, DWORD PTR _isolve$54914[ebp]
	add	ecx, 1
	mov	DWORD PTR _isolve$54914[ebp], ecx
$LN32@solveConst:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _isolve$54914[ebp]
	cmp	eax, DWORD PTR [edx+396]
	jge	SHORT $LN30@solveConst
; Line 4119
	mov	DWORD PTR _iseq$54918[ebp], 0
	jmp	SHORT $LN29@solveConst
$LN28@solveConst:
	mov	ecx, DWORD PTR _iseq$54918[ebp]
	add	ecx, 1
	mov	DWORD PTR _iseq$54918[ebp], ecx
$LN29@solveConst:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	call	?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::size
	cmp	DWORD PTR _iseq$54918[ebp], eax
	jge	SHORT $LN27@solveConst
; Line 4121
	mov	esi, esp
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _iseq$54918[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 416				; 000001a0H
	call	??A?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEAAW4_@eVSolver@btSoftBody@@H@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?getSolver@btSoftBody@@SAP6AXPAV1@M@ZW4_@eVSolver@1@@Z ; btSoftBody::getSolver
	add	esp, 4
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4122
	jmp	SHORT $LN28@solveConst
$LN27@solveConst:
; Line 4123
	jmp	$LN31@solveConst
$LN30@solveConst:
; Line 4125
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN26@solveConst
$LN25@solveConst:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN26@solveConst:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	SHORT $LN24@solveConst
; Line 4127
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$54925[ebp], eax
; Line 4128
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 476				; 000001dcH
	push	edx
	mov	eax, DWORD PTR _n$54925[ebp]
	add	eax, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR $T54926[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _n$54925[ebp]
	add	edx, 32					; 00000020H
	push	edx
	lea	eax, DWORD PTR $T54927[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _n$54925[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4129
	jmp	$LN25@solveConst
$LN24@solveConst:
; Line 4132
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+400], 0
	jle	$LN14@solveConst
; Line 4134
	mov	DWORD PTR _isolve$54929[ebp], 0
	jmp	SHORT $LN22@solveConst
$LN21@solveConst:
	mov	edx, DWORD PTR _isolve$54929[ebp]
	add	edx, 1
	mov	DWORD PTR _isolve$54929[ebp], edx
$LN22@solveConst:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _isolve$54929[ebp]
	cmp	ecx, DWORD PTR [eax+400]
	jge	$LN20@solveConst
; Line 4136
	fild	DWORD PTR _isolve$54929[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fidiv	DWORD PTR [edx+400]
	fstp	DWORD PTR _ti$54933[ebp]
; Line 4137
	mov	DWORD PTR _iseq$54935[ebp], 0
	jmp	SHORT $LN19@solveConst
$LN18@solveConst:
	mov	eax, DWORD PTR _iseq$54935[ebp]
	add	eax, 1
	mov	DWORD PTR _iseq$54935[ebp], eax
$LN19@solveConst:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
	cmp	DWORD PTR _iseq$54935[ebp], eax
	jge	SHORT $LN17@solveConst
; Line 4139
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _ti$54933[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iseq$54935[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	??A?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEAAW4_@ePSolver@btSoftBody@@H@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	call	?getSolver@btSoftBody@@SAP6AXPAV1@MM@ZW4_@ePSolver@1@@Z ; btSoftBody::getSolver
	add	esp, 4
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4140
	jmp	SHORT $LN18@solveConst
$LN17@solveConst:
; Line 4141
	jmp	$LN21@solveConst
$LN20@solveConst:
; Line 4142
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fsub	DWORD PTR [ecx+320]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+480]
	fstp	DWORD PTR _vc$54939[ebp]
; Line 4143
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN16@solveConst
$LN15@solveConst:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@solveConst:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	$LN14@solveConst
; Line 4145
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$54943[ebp], eax
; Line 4146
	lea	eax, DWORD PTR _vc$54939[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$54943[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _n$54943[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T54944[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T54945[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _n$54943[ebp]
	add	edx, 48					; 00000030H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 4147
	fldz
	fstp	DWORD PTR $T66787[ebp]
	fldz
	fstp	DWORD PTR $T66788[ebp]
	fldz
	fstp	DWORD PTR $T66789[ebp]
	lea	ecx, DWORD PTR $T66787[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66788[ebp]
	push	edx
	lea	eax, DWORD PTR $T66789[ebp]
	push	eax
	lea	ecx, DWORD PTR $T54946[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _n$54943[ebp]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4148
	jmp	$LN15@solveConst
$LN14@solveConst:
; Line 4151
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+404], 0
	jle	$LN1@solveConst
; Line 4153
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+316]
	fmul	DWORD PTR [eax+480]
	fstp	DWORD PTR _vcf$54951[ebp]
; Line 4154
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN12@solveConst
$LN11@solveConst:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN12@solveConst:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN10@solveConst
; Line 4156
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$54955[ebp], eax
; Line 4157
	mov	ecx, DWORD PTR _n$54955[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _n$54955[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 4158
	jmp	SHORT $LN11@solveConst
$LN10@solveConst:
; Line 4159
	mov	DWORD PTR _idrift$54956[ebp], 0
	jmp	SHORT $LN9@solveConst
$LN8@solveConst:
	mov	edx, DWORD PTR _idrift$54956[ebp]
	add	edx, 1
	mov	DWORD PTR _idrift$54956[ebp], edx
$LN9@solveConst:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _idrift$54956[ebp]
	cmp	ecx, DWORD PTR [eax+404]
	jge	SHORT $LN7@solveConst
; Line 4161
	mov	DWORD PTR _iseq$54960[ebp], 0
	jmp	SHORT $LN6@solveConst
$LN5@solveConst:
	mov	edx, DWORD PTR _iseq$54960[ebp]
	add	edx, 1
	mov	DWORD PTR _iseq$54960[ebp], edx
$LN6@solveConst:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
	cmp	DWORD PTR _iseq$54960[ebp], eax
	jge	SHORT $LN4@solveConst
; Line 4163
	mov	esi, esp
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iseq$54960[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 456				; 000001c8H
	call	??A?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEAAW4_@ePSolver@btSoftBody@@H@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?getSolver@btSoftBody@@SAP6AXPAV1@MM@ZW4_@ePSolver@1@@Z ; btSoftBody::getSolver
	add	esp, 4
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4164
	jmp	SHORT $LN5@solveConst
$LN4@solveConst:
; Line 4165
	jmp	$LN8@solveConst
$LN7@solveConst:
; Line 4166
	mov	DWORD PTR _i$54964[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$54965[ebp], eax
	jmp	SHORT $LN3@solveConst
$LN2@solveConst:
	mov	eax, DWORD PTR _i$54964[ebp]
	add	eax, 1
	mov	DWORD PTR _i$54964[ebp], eax
$LN3@solveConst:
	mov	ecx, DWORD PTR _i$54964[ebp]
	cmp	ecx, DWORD PTR _ni$54965[ebp]
	jge	SHORT $LN1@solveConst
; Line 4168
	mov	edx, DWORD PTR _i$54964[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$54969[ebp], eax
; Line 4169
	lea	eax, DWORD PTR _vcf$54951[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$54969[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _n$54969[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T54970[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T54971[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$54969[ebp]
	add	ecx, 48					; 00000030H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4170
	jmp	$LN2@solveConst
$LN1@solveConst:
; Line 4173
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dampClusters@btSoftBody@@QAEXXZ	; btSoftBody::dampClusters
; Line 4174
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyClusters@btSoftBody@@QAEX_N@Z	; btSoftBody::applyClusters
; Line 4175
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@solveConst
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN46@solveConst:
	DD	3
	DD	$LN45@solveConst
$LN45@solveConst:
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN42@solveConst
	DD	-212					; ffffff2cH
	DD	4
	DD	$LN43@solveConst
	DD	-280					; fffffee8H
	DD	4
	DD	$LN44@solveConst
$LN44@solveConst:
	DB	118					; 00000076H
	DB	99					; 00000063H
	DB	102					; 00000066H
	DB	0
$LN43@solveConst:
	DB	118					; 00000076H
	DB	99					; 00000063H
	DB	0
$LN42@solveConst:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
?solveConstraints@btSoftBody@@QAEXXZ ENDP		; btSoftBody::solveConstraints
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getInvMass@btRigidBody@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInvMass@btRigidBody@@QBEMXZ PROC			; btRigidBody::getInvMass, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletdynamics\dynamics\btrigidbody.h
; Line 267
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+368]
	mov	esp, ebp
	pop	ebp
	ret	0
?getInvMass@btRigidBody@@QBEMXZ ENDP			; btRigidBody::getInvMass
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getInvInertiaTensorWorld@btRigidBody@@QBEABVbtMatrix3x3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInvInertiaTensorWorld@btRigidBody@@QBEABVbtMatrix3x3@@XZ PROC ; btRigidBody::getInvInertiaTensorWorld, COMDAT
; _this$ = ecx
; Line 268
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 269
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 288				; 00000120H
; Line 270
	mov	esp, ebp
	pop	ebp
	ret	0
?getInvInertiaTensorWorld@btRigidBody@@QBEABVbtMatrix3x3@@XZ ENDP ; btRigidBody::getInvInertiaTensorWorld
_TEXT	ENDS
PUBLIC	??D@YA?AVbtMatrix3x3@@ABV0@0@Z			; operator*
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ImpulseMatrix@@YA?AVbtMatrix3x3@@MMMABV1@ABVbtVector3@@@Z
_TEXT	SEGMENT
$T19443 = -256						; size = 48
$T19442 = -208						; size = 48
$T19441 = -160						; size = 48
$T19440 = -112						; size = 48
$T19439 = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_dt$ = 12						; size = 4
_ima$ = 16						; size = 4
_imb$ = 20						; size = 4
_iwi$ = 24						; size = 4
_r$ = 28						; size = 4
?ImpulseMatrix@@YA?AVbtMatrix3x3@@MMMABV1@ABVbtVector3@@@Z PROC ; ImpulseMatrix, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 317
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 318
	lea	eax, DWORD PTR $T19443[ebp]
	push	eax
	mov	ecx, DWORD PTR _r$[ebx]
	push	ecx
	mov	edx, DWORD PTR _iwi$[ebx]
	push	edx
	push	ecx
	fld	DWORD PTR _imb$[ebx]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T19441[ebp]
	push	eax
	call	?MassMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@@Z ; MassMatrix
	add	esp, 16					; 00000010H
	push	eax
	push	ecx
	fld	DWORD PTR _ima$[ebx]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T19440[ebp]
	push	ecx
	call	?Diagonal@@YA?AVbtMatrix3x3@@M@Z	; Diagonal
	add	esp, 8
	push	eax
	lea	edx, DWORD PTR $T19442[ebp]
	push	edx
	call	?Add@@YA?AVbtMatrix3x3@@ABV1@0@Z	; Add
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?inverse@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::inverse
	push	eax
	fld1
	fdiv	DWORD PTR _dt$[ebx]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T19439[ebp]
	push	eax
	call	?Diagonal@@YA?AVbtMatrix3x3@@M@Z	; Diagonal
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	push	ecx
	call	??D@YA?AVbtMatrix3x3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 319
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?ImpulseMatrix@@YA?AVbtMatrix3x3@@MMMABV1@ABVbtVector3@@@Z ENDP ; ImpulseMatrix
_TEXT	ENDS
PUBLIC	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z	; btMatrix3x3::tdotx
PUBLIC	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z	; btMatrix3x3::tdoty
PUBLIC	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z	; btMatrix3x3::tdotz
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??D@YA?AVbtMatrix3x3@@ABV0@0@Z
_TEXT	SEGMENT
$T66812 = -36						; size = 4
$T66811 = -32						; size = 4
$T66810 = -28						; size = 4
$T66809 = -24						; size = 4
$T66808 = -20						; size = 4
$T66807 = -16						; size = 4
$T66806 = -12						; size = 4
$T66805 = -8						; size = 4
$T66804 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??D@YA?AVbtMatrix3x3@@ABV0@0@Z PROC			; operator*, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 1198
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1277
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T66804[ebp]
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T66805[ebp]
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T66806[ebp]
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T66807[ebp]
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T66808[ebp]
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T66809[ebp]
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T66810[ebp]
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T66811[ebp]
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T66812[ebp]
	lea	eax, DWORD PTR $T66804[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66805[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66806[ebp]
	push	edx
	lea	eax, DWORD PTR $T66807[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66808[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66809[ebp]
	push	edx
	lea	eax, DWORD PTR $T66810[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66811[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66812[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1279
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtMatrix3x3@@ABV0@0@Z ENDP			; operator*
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z PROC		; btMatrix3x3::tdotx, COMDAT
; _this$ = ecx
; Line 617
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 618
	mov	ecx, DWORD PTR _this$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	fstp	DWORD PTR tv128[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR tv130[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv130[ebp]
; Line 619
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ENDP		; btMatrix3x3::tdotx
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z PROC		; btMatrix3x3::tdoty, COMDAT
; _this$ = ecx
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 622
	mov	ecx, DWORD PTR _this$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	fstp	DWORD PTR tv128[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR tv130[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv130[ebp]
; Line 623
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ENDP		; btMatrix3x3::tdoty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z PROC		; btMatrix3x3::tdotz, COMDAT
; _this$ = ecx
; Line 625
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	fstp	DWORD PTR tv128[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR tv130[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv130[ebp]
; Line 627
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ENDP		; btMatrix3x3::tdotz
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Diagonal@@YA?AVbtMatrix3x3@@M@Z
_TEXT	SEGMENT
$T66827 = -152						; size = 4
$T66826 = -148						; size = 4
$T66825 = -144						; size = 4
$T66824 = -140						; size = 4
$T66823 = -136						; size = 4
$T66822 = -132						; size = 4
$T19374 = -128						; size = 16
$T19371 = -112						; size = 16
$T19368 = -96						; size = 16
_m$ = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?Diagonal@@YA?AVbtMatrix3x3@@M@Z PROC			; Diagonal, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 266
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 267
	lea	ecx, DWORD PTR _m$[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
; Line 268
	fldz
	fstp	DWORD PTR $T66822[ebp]
	fldz
	fstp	DWORD PTR $T66823[ebp]
	lea	eax, DWORD PTR $T66822[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66823[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$[ebx]
	push	edx
	lea	ecx, DWORD PTR $T19368[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
; Line 269
	fldz
	fstp	DWORD PTR $T66824[ebp]
	fldz
	fstp	DWORD PTR $T66825[ebp]
	lea	eax, DWORD PTR $T66824[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T66825[ebp]
	push	edx
	lea	ecx, DWORD PTR $T19371[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
; Line 270
	fldz
	fstp	DWORD PTR $T66826[ebp]
	fldz
	fstp	DWORD PTR $T66827[ebp]
	lea	eax, DWORD PTR _x$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T66826[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66827[ebp]
	push	edx
	lea	ecx, DWORD PTR $T19374[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
; Line 271
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 272
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Diagonal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN5@Diagonal:
	DD	1
	DD	$LN4@Diagonal
$LN4@Diagonal:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN3@Diagonal
$LN3@Diagonal:
	DB	109					; 0000006dH
	DB	0
?Diagonal@@YA?AVbtMatrix3x3@@M@Z ENDP			; Diagonal
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@@YA?AVbtMatrix3x3@@ABV1@0@Z
_TEXT	SEGMENT
$T19387 = -96						; size = 16
_i$19383 = -72						; size = 4
_r$ = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
?Add@@YA?AVbtMatrix3x3@@ABV1@0@Z PROC			; Add, COMDAT
; Line 276
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 277
	lea	ecx, DWORD PTR _r$[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
; Line 278
	mov	DWORD PTR _i$19383[ebp], 0
	jmp	SHORT $LN3@Add
$LN2@Add:
	mov	eax, DWORD PTR _i$19383[ebp]
	add	eax, 1
	mov	DWORD PTR _i$19383[ebp], eax
$LN3@Add:
	cmp	DWORD PTR _i$19383[ebp], 3
	jge	SHORT $LN1@Add
	mov	ecx, DWORD PTR _i$19383[ebp]
	push	ecx
	mov	ecx, DWORD PTR _b$[ebx]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	edx, DWORD PTR _i$19383[ebp]
	push	edx
	mov	ecx, DWORD PTR _a$[ebx]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	lea	eax, DWORD PTR $T19387[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	ecx, DWORD PTR _i$19383[ebp]
	push	ecx
	lea	ecx, DWORD PTR _r$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN2@Add
$LN1@Add:
; Line 279
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 280
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Add
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN8@Add:
	DD	1
	DD	$LN7@Add
$LN7@Add:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN6@Add
$LN6@Add:
	DB	114					; 00000072H
	DB	0
?Add@@YA?AVbtMatrix3x3@@ABV1@0@Z ENDP			; Add
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MassMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@@Z
_TEXT	SEGMENT
$T19429 = -224						; size = 48
$T19428 = -176						; size = 48
$T19427 = -128						; size = 48
_cr$ = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_im$ = 12						; size = 4
_iwi$ = 16						; size = 4
_r$ = 20						; size = 4
?MassMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@@Z PROC ; MassMatrix, COMDAT
; Line 306
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 307
	mov	eax, DWORD PTR _r$[ebx]
	push	eax
	lea	ecx, DWORD PTR _cr$[ebp]
	push	ecx
	call	?Cross@@YA?AVbtMatrix3x3@@ABVbtVector3@@@Z ; Cross
	add	esp, 8
; Line 308
	lea	edx, DWORD PTR _cr$[ebp]
	push	edx
	mov	eax, DWORD PTR _iwi$[ebx]
	push	eax
	lea	ecx, DWORD PTR _cr$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T19428[ebp]
	push	edx
	call	??D@YA?AVbtMatrix3x3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T19429[ebp]
	push	eax
	call	??D@YA?AVbtMatrix3x3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	ecx
	fld	DWORD PTR _im$[ebx]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T19427[ebp]
	push	ecx
	call	?Diagonal@@YA?AVbtMatrix3x3@@M@Z	; Diagonal
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebx]
	push	edx
	call	?Sub@@YA?AVbtMatrix3x3@@ABV1@0@Z	; Sub
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 309
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@MassMatrix
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN5@MassMatrix:
	DD	1
	DD	$LN4@MassMatrix
$LN4@MassMatrix:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN3@MassMatrix
$LN3@MassMatrix:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	0
?MassMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@@Z ENDP ; MassMatrix
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Cross@@YA?AVbtMatrix3x3@@ABVbtVector3@@@Z
_TEXT	SEGMENT
$T66854 = -164						; size = 4
$T66853 = -160						; size = 4
$T66852 = -156						; size = 4
$T66851 = -152						; size = 4
$T66850 = -148						; size = 4
$T66849 = -144						; size = 4
$T66848 = -140						; size = 4
$T66847 = -136						; size = 4
$T66846 = -132						; size = 4
$T19359 = -128						; size = 16
$T19355 = -112						; size = 16
$T19351 = -96						; size = 16
_m$ = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?Cross@@YA?AVbtMatrix3x3@@ABVbtVector3@@@Z PROC		; Cross, COMDAT
; Line 257
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 258
	lea	ecx, DWORD PTR _m$[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
; Line 259
	mov	ecx, DWORD PTR _v$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [eax]
	fstp	DWORD PTR $T66846[ebp]
	mov	ecx, DWORD PTR _v$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [eax]
	fchs
	fstp	DWORD PTR $T66847[ebp]
	fldz
	fstp	DWORD PTR $T66848[ebp]
	lea	eax, DWORD PTR $T66846[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66847[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66848[ebp]
	push	edx
	lea	ecx, DWORD PTR $T19351[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, eax
	push	0
	lea	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
; Line 260
	mov	ecx, DWORD PTR _v$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [eax]
	fchs
	fstp	DWORD PTR $T66849[ebp]
	fldz
	fstp	DWORD PTR $T66850[ebp]
	mov	ecx, DWORD PTR _v$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [eax]
	fstp	DWORD PTR $T66851[ebp]
	lea	eax, DWORD PTR $T66849[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66850[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66851[ebp]
	push	edx
	lea	ecx, DWORD PTR $T19355[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, eax
	push	1
	lea	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
; Line 261
	fldz
	fstp	DWORD PTR $T66852[ebp]
	mov	ecx, DWORD PTR _v$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [eax]
	fstp	DWORD PTR $T66853[ebp]
	mov	ecx, DWORD PTR _v$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [eax]
	fchs
	fstp	DWORD PTR $T66854[ebp]
	lea	eax, DWORD PTR $T66852[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66853[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66854[ebp]
	push	edx
	lea	ecx, DWORD PTR $T19359[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, eax
	push	2
	lea	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
; Line 262
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 263
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Cross
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN5@Cross:
	DD	1
	DD	$LN4@Cross
$LN4@Cross:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN3@Cross
$LN3@Cross:
	DB	109					; 0000006dH
	DB	0
?Cross@@YA?AVbtMatrix3x3@@ABVbtVector3@@@Z ENDP		; Cross
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Sub@@YA?AVbtMatrix3x3@@ABV1@0@Z
_TEXT	SEGMENT
$T19398 = -96						; size = 16
_i$19394 = -72						; size = 4
_r$ = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
?Sub@@YA?AVbtMatrix3x3@@ABV1@0@Z PROC			; Sub, COMDAT
; Line 284
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 285
	lea	ecx, DWORD PTR _r$[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
; Line 286
	mov	DWORD PTR _i$19394[ebp], 0
	jmp	SHORT $LN3@Sub
$LN2@Sub:
	mov	eax, DWORD PTR _i$19394[ebp]
	add	eax, 1
	mov	DWORD PTR _i$19394[ebp], eax
$LN3@Sub:
	cmp	DWORD PTR _i$19394[ebp], 3
	jge	SHORT $LN1@Sub
	mov	ecx, DWORD PTR _i$19394[ebp]
	push	ecx
	mov	ecx, DWORD PTR _b$[ebx]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	edx, DWORD PTR _i$19394[ebp]
	push	edx
	mov	ecx, DWORD PTR _a$[ebx]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	lea	eax, DWORD PTR $T19398[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	ecx, DWORD PTR _i$19394[ebp]
	push	ecx
	lea	ecx, DWORD PTR _r$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN2@Sub
$LN1@Sub:
; Line 287
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 288
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Sub
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN8@Sub:
	DD	1
	DD	$LN7@Sub
$LN7@Sub:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN6@Sub
$LN6@Sub:
	DB	114					; 00000072H
	DB	0
?Sub@@YA?AVbtMatrix3x3@@ABV1@0@Z ENDP			; Sub
_TEXT	ENDS
PUBLIC	?staticSolve@btSoftBody@@QAEXH@Z		; btSoftBody::staticSolve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?staticSolve@btSoftBody@@QAEXH@Z
_TEXT	SEGMENT
_iseq$54980 = -12					; size = 4
_isolve$54976 = -8					; size = 4
_this$ = -4						; size = 4
_iterations$ = 8					; size = 4
?staticSolve@btSoftBody@@QAEXH@Z PROC			; btSoftBody::staticSolve, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 4179
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4180
	mov	DWORD PTR _isolve$54976[ebp], 0
	jmp	SHORT $LN6@staticSolv
$LN5@staticSolv:
	mov	eax, DWORD PTR _isolve$54976[ebp]
	add	eax, 1
	mov	DWORD PTR _isolve$54976[ebp], eax
$LN6@staticSolv:
	mov	ecx, DWORD PTR _isolve$54976[ebp]
	cmp	ecx, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN4@staticSolv
; Line 4182
	mov	DWORD PTR _iseq$54980[ebp], 0
	jmp	SHORT $LN3@staticSolv
$LN2@staticSolv:
	mov	edx, DWORD PTR _iseq$54980[ebp]
	add	edx, 1
	mov	DWORD PTR _iseq$54980[ebp], edx
$LN3@staticSolv:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
	cmp	DWORD PTR _iseq$54980[ebp], eax
	jge	SHORT $LN1@staticSolv
; Line 4184
	mov	esi, esp
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iseq$54980[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 436				; 000001b4H
	call	??A?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEAAW4_@ePSolver@btSoftBody@@H@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?getSolver@btSoftBody@@SAP6AXPAV1@MM@ZW4_@ePSolver@1@@Z ; btSoftBody::getSolver
	add	esp, 4
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4185
	jmp	SHORT $LN2@staticSolv
$LN1@staticSolv:
; Line 4186
	jmp	SHORT $LN5@staticSolv
$LN4@staticSolv:
; Line 4187
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?staticSolve@btSoftBody@@QAEXH@Z ENDP			; btSoftBody::staticSolve
_TEXT	ENDS
PUBLIC	?solveCommonConstraints@btSoftBody@@SAXPAPAV1@HH@Z ; btSoftBody::solveCommonConstraints
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?solveCommonConstraints@btSoftBody@@SAXPAPAV1@HH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?solveCommonConstraints@btSoftBody@@SAXPAPAV1@HH@Z PROC	; btSoftBody::solveCommonConstraints, COMDAT
; Line 4191
	push	ebp
	mov	ebp, esp
; Line 4193
	pop	ebp
	ret	0
?solveCommonConstraints@btSoftBody@@SAXPAPAV1@HH@Z ENDP	; btSoftBody::solveCommonConstraints
_TEXT	ENDS
PUBLIC	?cleanupClusters@btSoftBody@@QAEXXZ		; btSoftBody::cleanupClusters
PUBLIC	?solveClusters@btSoftBody@@QAEXM@Z		; btSoftBody::solveClusters
PUBLIC	?prepareClusters@btSoftBody@@QAEXH@Z		; btSoftBody::prepareClusters
PUBLIC	??$btMax@H@@YAABHABH0@Z				; btMax<int>
PUBLIC	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEABQAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
PUBLIC	?solveClusters@btSoftBody@@SAXABV?$btAlignedObjectArray@PAVbtSoftBody@@@@@Z ; btSoftBody::solveClusters
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?solveClusters@btSoftBody@@SAXABV?$btAlignedObjectArray@PAVbtSoftBody@@@@@Z
_TEXT	SEGMENT
_j$55139 = -28						; size = 4
_sor$55138 = -24					; size = 4
_i$ = -20						; size = 4
_iterations$ = -12					; size = 4
_nb$ = -4						; size = 4
_bodies$ = 8						; size = 4
?solveClusters@btSoftBody@@SAXABV?$btAlignedObjectArray@PAVbtSoftBody@@@@@Z PROC ; btSoftBody::solveClusters, COMDAT
; Line 4197
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 4198
	mov	ecx, DWORD PTR _bodies$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	mov	DWORD PTR _nb$[ebp], eax
; Line 4199
	mov	DWORD PTR _iterations$[ebp], 0
; Line 4202
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@solveClust
$LN14@solveClust:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@solveClust:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nb$[ebp]
	jge	SHORT $LN13@solveClust
; Line 4204
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _bodies$[ebp]
	call	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEABQAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, 408				; 00000198H
	push	eax
	lea	ecx, DWORD PTR _iterations$[ebp]
	push	ecx
	call	??$btMax@H@@YAABHABH0@Z			; btMax<int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _iterations$[ebp], edx
; Line 4205
	jmp	SHORT $LN14@solveClust
$LN13@solveClust:
; Line 4206
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@solveClust
$LN11@solveClust:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@solveClust:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nb$[ebp]
	jge	SHORT $LN10@solveClust
; Line 4208
	mov	edx, DWORD PTR _iterations$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bodies$[ebp]
	call	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEABQAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?prepareClusters@btSoftBody@@QAEXH@Z	; btSoftBody::prepareClusters
; Line 4209
	jmp	SHORT $LN11@solveClust
$LN10@solveClust:
; Line 4210
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@solveClust
$LN8@solveClust:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@solveClust:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _iterations$[ebp]
	jge	SHORT $LN7@solveClust
; Line 4212
	fld1
	fstp	DWORD PTR _sor$55138[ebp]
; Line 4213
	mov	DWORD PTR _j$55139[ebp], 0
	jmp	SHORT $LN6@solveClust
$LN5@solveClust:
	mov	eax, DWORD PTR _j$55139[ebp]
	add	eax, 1
	mov	DWORD PTR _j$55139[ebp], eax
$LN6@solveClust:
	mov	ecx, DWORD PTR _j$55139[ebp]
	cmp	ecx, DWORD PTR _nb$[ebp]
	jge	SHORT $LN4@solveClust
; Line 4215
	push	ecx
	fld	DWORD PTR _sor$55138[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _j$55139[ebp]
	push	edx
	mov	ecx, DWORD PTR _bodies$[ebp]
	call	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEABQAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?solveClusters@btSoftBody@@QAEXM@Z	; btSoftBody::solveClusters
; Line 4216
	jmp	SHORT $LN5@solveClust
$LN4@solveClust:
; Line 4217
	jmp	SHORT $LN8@solveClust
$LN7@solveClust:
; Line 4218
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@solveClust
$LN2@solveClust:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@solveClust:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nb$[ebp]
	jge	SHORT $LN1@solveClust
; Line 4220
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _bodies$[ebp]
	call	??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEABQAVbtSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?cleanupClusters@btSoftBody@@QAEXXZ	; btSoftBody::cleanupClusters
; Line 4221
	jmp	SHORT $LN2@solveClust
$LN1@solveClust:
; Line 4222
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@solveClust
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@solveClust:
	DD	1
	DD	$LN19@solveClust
$LN19@solveClust:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN18@solveClust
$LN18@solveClust:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
?solveClusters@btSoftBody@@SAXABV?$btAlignedObjectArray@PAVbtSoftBody@@@@@Z ENDP ; btSoftBody::solveClusters
_TEXT	ENDS
PUBLIC	?integrateMotion@btSoftBody@@QAEXXZ		; btSoftBody::integrateMotion
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?integrateMotion@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?integrateMotion@btSoftBody@@QAEXXZ PROC		; btSoftBody::integrateMotion, COMDAT
; _this$ = ecx
; Line 4226
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4228
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateNormals@btSoftBody@@QAEXXZ	; btSoftBody::updateNormals
; Line 4229
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?integrateMotion@btSoftBody@@QAEXXZ ENDP		; btSoftBody::integrateMotion
_TEXT	ENDS
PUBLIC	??0RayFromToCaster@btSoftBody@@QAE@ABVbtVector3@@0M@Z ; btSoftBody::RayFromToCaster::RayFromToCaster
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0RayFromToCaster@btSoftBody@@QAE@ABVbtVector3@@0M@Z
_TEXT	SEGMENT
$T55155 = -32						; size = 16
_this$ = -4						; size = 4
_rayFrom$ = 8						; size = 4
_rayTo$ = 12						; size = 4
_mxt$ = 16						; size = 4
??0RayFromToCaster@btSoftBody@@QAE@ABVbtVector3@@0M@Z PROC ; btSoftBody::RayFromToCaster::RayFromToCaster, COMDAT
; _this$ = ecx
; Line 4233
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 4234
	mov	eax, DWORD PTR _rayFrom$[ebx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4235
	mov	ecx, DWORD PTR _rayFrom$[ebx]
	push	ecx
	mov	edx, DWORD PTR _rayTo$[ebx]
	push	edx
	lea	eax, DWORD PTR $T55155[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4236
	mov	ecx, DWORD PTR _rayTo$[ebx]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 4237
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _mxt$[ebx]
	fstp	DWORD PTR [edx+48]
; Line 4238
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 0
; Line 4239
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], 0
; Line 4240
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
??0RayFromToCaster@btSoftBody@@QAE@ABVbtVector3@@0M@Z ENDP ; btSoftBody::RayFromToCaster::RayFromToCaster
_TEXT	ENDS
PUBLIC	?rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z ; btSoftBody::RayFromToCaster::rayFromToTriangle
PUBLIC	?Process@RayFromToCaster@btSoftBody@@QAEXPBUbtDbvtNode@@@Z ; btSoftBody::RayFromToCaster::Process
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Process@RayFromToCaster@btSoftBody@@QAEXPBUbtDbvtNode@@@Z
_TEXT	SEGMENT
_t$ = -12						; size = 4
_f$ = -8						; size = 4
_this$ = -4						; size = 4
_leaf$ = 8						; size = 4
?Process@RayFromToCaster@btSoftBody@@QAEXPBUbtDbvtNode@@@Z PROC ; btSoftBody::RayFromToCaster::Process, COMDAT
; _this$ = ecx
; Line 4244
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4245
	mov	eax, DWORD PTR _leaf$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _f$[ebp], ecx
; Line 4250
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+48]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _f$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z ; btSoftBody::RayFromToCaster::rayFromToTriangle
	add	esp, 28					; 0000001cH
	fstp	DWORD PTR _t$[ebp]
; Line 4251
	fldz
	fcomp	DWORD PTR _t$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@Process
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	fcomp	DWORD PTR _t$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@Process
; Line 4253
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [ecx+48]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _f$[ebp]
	mov	DWORD PTR [edx+52], eax
$LN1@Process:
; Line 4255
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], edx
; Line 4256
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Process@RayFromToCaster@btSoftBody@@QAEXPBUbtDbvtNode@@@Z ENDP ; btSoftBody::RayFromToCaster::Process
_TEXT	ENDS
PUBLIC	?ceps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB ; `btSoftBody::RayFromToCaster::rayFromToTriangle'::`2'::ceps
PUBLIC	?teps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB ; `btSoftBody::RayFromToCaster::rayFromToTriangle'::`2'::teps
PUBLIC	?btFuzzyZero@@YA_NM@Z				; btFuzzyZero
;	COMDAT ?ceps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB
CONST	SEGMENT
?ceps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB DD 0b5a00000r ; -1.19209e-006 ; `btSoftBody::RayFromToCaster::rayFromToTriangle'::`2'::ceps
CONST	ENDS
;	COMDAT ?teps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB
CONST	SEGMENT
?teps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB DD 035a00000r ; 1.19209e-006 ; `btSoftBody::RayFromToCaster::rayFromToTriangle'::`2'::teps
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z
_TEXT	SEGMENT
$T55198 = -304						; size = 16
$T55197 = -288						; size = 16
$T55196 = -272						; size = 16
$T55195 = -256						; size = 16
$T55194 = -240						; size = 16
$T55193 = -224						; size = 16
$T55192 = -208						; size = 16
$T55191 = -192						; size = 16
$T55190 = -176						; size = 16
$T55188 = -160						; size = 16
_hit$55187 = -128					; size = 16
_t$55185 = -100						; size = 4
_num$55184 = -92					; size = 4
_den$ = -88						; size = 4
_d$ = -84						; size = 4
$T55179 = -80						; size = 16
$T55178 = -64						; size = 16
_n$ = -32						; size = 16
_rayFrom$ = 8						; size = 4
_rayTo$ = 12						; size = 4
_rayNormalizedDirection$ = 16				; size = 4
_a$ = 20						; size = 4
_b$ = 24						; size = 4
_c$ = 28						; size = 4
_maxt$ = 32						; size = 4
?rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z PROC ; btSoftBody::RayFromToCaster::rayFromToTriangle, COMDAT
; Line 4266
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 4270
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	mov	ecx, DWORD PTR _c$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T55179[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	mov	ecx, DWORD PTR _b$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T55178[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
; Line 4271
	lea	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebx]
	push	edx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _d$[ebp]
; Line 4272
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rayNormalizedDirection$[ebx]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _den$[ebp]
; Line 4273
	push	ecx
	fld	DWORD PTR _den$[ebp]
	fstp	DWORD PTR [esp]
	call	?btFuzzyZero@@YA_NM@Z			; btFuzzyZero
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	$LN1@rayFromToT
; Line 4275
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rayFrom$[ebx]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fsub	DWORD PTR _d$[ebp]
	fstp	DWORD PTR _num$55184[ebp]
; Line 4276
	fld	DWORD PTR _num$55184[ebp]
	fchs
	fdiv	DWORD PTR _den$[ebp]
	fstp	DWORD PTR _t$55185[ebp]
; Line 4277
	fld	DWORD PTR ?teps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB ; `btSoftBody::RayFromToCaster::rayFromToTriangle'::`2'::teps
	fcomp	DWORD PTR _t$55185[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@rayFromToT
	fld	DWORD PTR _maxt$[ebx]
	fcomp	DWORD PTR _t$55185[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1@rayFromToT
; Line 4279
	lea	edx, DWORD PTR _t$55185[ebp]
	push	edx
	mov	eax, DWORD PTR _rayNormalizedDirection$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T55188[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _rayFrom$[ebx]
	push	edx
	lea	eax, DWORD PTR _hit$55187[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 4282
	lea	ecx, DWORD PTR _hit$55187[ebp]
	push	ecx
	mov	edx, DWORD PTR _b$[ebx]
	push	edx
	lea	eax, DWORD PTR $T55191[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _hit$55187[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebx]
	push	edx
	lea	eax, DWORD PTR $T55190[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55192[ebp]
	push	ecx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _n$[ebp]
	push	edx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR ?ceps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB ; `btSoftBody::RayFromToCaster::rayFromToTriangle'::`2'::ceps
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1@rayFromToT
	lea	eax, DWORD PTR _hit$55187[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T55194[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _hit$55187[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T55193[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T55195[ebp]
	push	eax
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _n$[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR ?ceps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB ; `btSoftBody::RayFromToCaster::rayFromToTriangle'::`2'::ceps
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@rayFromToT
	lea	edx, DWORD PTR _hit$55187[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T55197[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _hit$55187[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T55196[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T55198[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _n$[ebp]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR ?ceps@?1??rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z@4MB ; `btSoftBody::RayFromToCaster::rayFromToTriangle'::`2'::ceps
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@rayFromToT
; Line 4284
	fld	DWORD PTR _t$55185[ebp]
	jmp	SHORT $LN4@rayFromToT
$LN1@rayFromToT:
; Line 4288
	fld	DWORD PTR __real@bf800000
$LN4@rayFromToT:
; Line 4289
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@rayFromToT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN10@rayFromToT:
	DD	3
	DD	$LN9@rayFromToT
$LN9@rayFromToT:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN6@rayFromToT
	DD	-100					; ffffff9cH
	DD	4
	DD	$LN7@rayFromToT
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN8@rayFromToT
$LN8@rayFromToT:
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
$LN7@rayFromToT:
	DB	116					; 00000074H
	DB	0
$LN6@rayFromToT:
	DB	110					; 0000006eH
	DB	0
?rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z ENDP ; btSoftBody::RayFromToCaster::rayFromToTriangle
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?btFuzzyZero@@YA_NM@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_x$ = 8							; size = 4
?btFuzzyZero@@YA_NM@Z PROC				; btFuzzyZero, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 468
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fcomp	DWORD PTR __real@34000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@btFuzzyZer
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@btFuzzyZer
$LN3@btFuzzyZer:
	mov	DWORD PTR tv67[ebp], 0
$LN4@btFuzzyZer:
	mov	al, BYTE PTR tv67[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?btFuzzyZero@@YA_NM@Z ENDP				; btFuzzyZero
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?pointersToIndices@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
tv72 = -24						; size = 4
_j$55231 = -20						; size = 4
_ni$ = -16						; size = 4
_i$ = -12						; size = 4
_base$ = -8						; size = 4
_this$ = -4						; size = 4
?pointersToIndices@btSoftBody@@QAEXXZ PROC		; btSoftBody::pointersToIndices, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 4293
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4295
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	test	eax, eax
	je	SHORT $LN23@pointersTo
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN24@pointersTo
$LN23@pointersTo:
	mov	DWORD PTR tv72[ebp], 0
$LN24@pointersTo:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _base$[ebp], eax
; Line 4298
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN20@pointersTo
$LN19@pointersTo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN20@pointersTo:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN18@pointersTo
; Line 4300
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN17@pointersTo
; Line 4302
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR [eax+104]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+36], eax
$LN17@pointersTo:
; Line 4304
	jmp	SHORT $LN19@pointersTo
$LN18@pointersTo:
; Line 4305
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN16@pointersTo
$LN15@pointersTo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN16@pointersTo:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN14@pointersTo
; Line 4307
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, DWORD PTR [eax+8]
	sub	esi, DWORD PTR _base$[ebp]
	sar	esi, 7
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR [eax+8], esi
; Line 4308
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, DWORD PTR [eax+12]
	sub	esi, DWORD PTR _base$[ebp]
	sar	esi, 7
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR [eax+12], esi
; Line 4309
	jmp	SHORT $LN15@pointersTo
$LN14@pointersTo:
; Line 4310
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN13@pointersTo
$LN12@pointersTo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN13@pointersTo:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	$LN11@pointersTo
; Line 4312
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, DWORD PTR [eax+8]
	sub	esi, DWORD PTR _base$[ebp]
	sar	esi, 7
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR [eax+8], esi
; Line 4313
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, DWORD PTR [eax+12]
	sub	esi, DWORD PTR _base$[ebp]
	sar	esi, 7
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR [eax+12], esi
; Line 4314
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, DWORD PTR [eax+16]
	sub	esi, DWORD PTR _base$[ebp]
	sar	esi, 7
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR [eax+16], esi
; Line 4315
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN10@pointersTo
; Line 4317
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+36], eax
$LN10@pointersTo:
; Line 4319
	jmp	$LN12@pointersTo
$LN11@pointersTo:
; Line 4320
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN9@pointersTo
$LN8@pointersTo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@pointersTo:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN7@pointersTo
; Line 4322
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	esi, DWORD PTR [eax]
	sub	esi, DWORD PTR _base$[ebp]
	sar	esi, 7
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	DWORD PTR [eax], esi
; Line 4323
	jmp	SHORT $LN8@pointersTo
$LN7@pointersTo:
; Line 4324
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN6@pointersTo
$LN5@pointersTo:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@pointersTo:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	SHORT $LN21@pointersTo
; Line 4326
	mov	DWORD PTR _j$55231[ebp], 0
	jmp	SHORT $LN3@pointersTo
$LN2@pointersTo:
	mov	ecx, DWORD PTR _j$55231[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$55231[ebp], ecx
$LN3@pointersTo:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
	mov	ecx, DWORD PTR _j$55231[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN1@pointersTo
; Line 4328
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
	mov	ecx, DWORD PTR _j$55231[ebp]
	mov	esi, DWORD PTR [eax+ecx*4+36]
	sub	esi, DWORD PTR _base$[ebp]
	sar	esi, 7
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
	mov	ecx, DWORD PTR _j$55231[ebp]
	mov	DWORD PTR [eax+ecx*4+36], esi
; Line 4329
	jmp	SHORT $LN2@pointersTo
$LN1@pointersTo:
; Line 4330
	jmp	SHORT $LN5@pointersTo
$LN21@pointersTo:
; Line 4332
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pointersToIndices@btSoftBody@@QAEXXZ ENDP		; btSoftBody::pointersToIndices
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?indicesToPointers@btSoftBody@@QAEXPBH@Z
_TEXT	SEGMENT
tv347 = -52						; size = 4
tv306 = -48						; size = 4
tv265 = -44						; size = 4
tv239 = -40						; size = 4
tv213 = -36						; size = 4
tv182 = -32						; size = 4
tv156 = -28						; size = 4
tv72 = -24						; size = 4
_j$55284 = -20						; size = 4
_ni$ = -16						; size = 4
_i$ = -12						; size = 4
_base$ = -8						; size = 4
_this$ = -4						; size = 4
_map$ = 8						; size = 4
?indicesToPointers@btSoftBody@@QAEXPBH@Z PROC		; btSoftBody::indicesToPointers, COMDAT
; _this$ = ecx
; Line 4336
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4339
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	test	eax, eax
	je	SHORT $LN23@indicesToP
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN24@indicesToP
$LN23@indicesToP:
	mov	DWORD PTR tv72[ebp], 0
$LN24@indicesToP:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _base$[ebp], eax
; Line 4342
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN20@indicesToP
$LN19@indicesToP:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN20@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN18@indicesToP
; Line 4344
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN17@indicesToP
; Line 4346
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	eax, DWORD PTR [eax+104]
	mov	DWORD PTR [eax+36], esi
$LN17@indicesToP:
; Line 4348
	jmp	SHORT $LN19@indicesToP
$LN18@indicesToP:
; Line 4349
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN16@indicesToP
$LN15@indicesToP:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN16@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	$LN14@indicesToP
; Line 4351
	cmp	DWORD PTR _map$[ebp], 0
	je	SHORT $LN25@indicesToP
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _map$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shl	eax, 7
	add	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv156[ebp], eax
	jmp	SHORT $LN26@indicesToP
$LN25@indicesToP:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	edx, DWORD PTR [eax+8]
	shl	edx, 7
	add	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv156[ebp], edx
$LN26@indicesToP:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR tv156[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 4352
	cmp	DWORD PTR _map$[ebp], 0
	je	SHORT $LN27@indicesToP
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shl	edx, 7
	add	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv182[ebp], edx
	jmp	SHORT $LN28@indicesToP
$LN27@indicesToP:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	shl	ecx, 7
	add	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv182[ebp], ecx
$LN28@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR tv182[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 4353
	jmp	$LN15@indicesToP
$LN14@indicesToP:
; Line 4354
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN13@indicesToP
$LN12@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN13@indicesToP:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	$LN11@indicesToP
; Line 4356
	cmp	DWORD PTR _map$[ebp], 0
	je	SHORT $LN29@indicesToP
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _map$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shl	ecx, 7
	add	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv213[ebp], ecx
	jmp	SHORT $LN30@indicesToP
$LN29@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	eax, DWORD PTR [eax+8]
	shl	eax, 7
	add	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv213[ebp], eax
$LN30@indicesToP:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR tv213[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 4357
	cmp	DWORD PTR _map$[ebp], 0
	je	SHORT $LN31@indicesToP
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _map$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	shl	eax, 7
	add	eax, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv239[ebp], eax
	jmp	SHORT $LN32@indicesToP
$LN31@indicesToP:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR [eax+12]
	shl	edx, 7
	add	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv239[ebp], edx
$LN32@indicesToP:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR tv239[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 4358
	cmp	DWORD PTR _map$[ebp], 0
	je	SHORT $LN33@indicesToP
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	eax, DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shl	edx, 7
	add	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv265[ebp], edx
	jmp	SHORT $LN34@indicesToP
$LN33@indicesToP:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 7
	add	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv265[ebp], ecx
$LN34@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR tv265[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 4359
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN10@indicesToP
; Line 4361
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	edx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+36], esi
$LN10@indicesToP:
; Line 4363
	jmp	$LN12@indicesToP
$LN11@indicesToP:
; Line 4364
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN9@indicesToP
$LN8@indicesToP:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@indicesToP:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN7@indicesToP
; Line 4366
	cmp	DWORD PTR _map$[ebp], 0
	je	SHORT $LN35@indicesToP
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _map$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	shl	edx, 7
	add	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv306[ebp], edx
	jmp	SHORT $LN36@indicesToP
$LN35@indicesToP:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 7
	add	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv306[ebp], ecx
$LN36@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	ecx, DWORD PTR tv306[ebp]
	mov	DWORD PTR [eax], ecx
; Line 4367
	jmp	SHORT $LN8@indicesToP
$LN7@indicesToP:
; Line 4368
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN6@indicesToP
$LN5@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN6@indicesToP:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	$LN21@indicesToP
; Line 4370
	mov	DWORD PTR _j$55284[ebp], 0
	jmp	SHORT $LN3@indicesToP
$LN2@indicesToP:
	mov	ecx, DWORD PTR _j$55284[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$55284[ebp], ecx
$LN3@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
	mov	ecx, DWORD PTR _j$55284[ebp]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN1@indicesToP
; Line 4372
	cmp	DWORD PTR _map$[ebp], 0
	je	SHORT $LN37@indicesToP
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
	mov	ecx, DWORD PTR _j$55284[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+36]
	mov	eax, DWORD PTR _map$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	shl	ecx, 7
	add	ecx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv347[ebp], ecx
	jmp	SHORT $LN38@indicesToP
$LN37@indicesToP:
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
	mov	ecx, DWORD PTR _j$55284[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+36]
	shl	edx, 7
	add	edx, DWORD PTR _base$[ebp]
	mov	DWORD PTR tv347[ebp], edx
$LN38@indicesToP:
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 712				; 000002c8H
	call	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
	mov	ecx, DWORD PTR _j$55284[ebp]
	mov	edx, DWORD PTR tv347[ebp]
	mov	DWORD PTR [eax+ecx*4+36], edx
; Line 4373
	jmp	$LN2@indicesToP
$LN1@indicesToP:
; Line 4374
	jmp	$LN5@indicesToP
$LN21@indicesToP:
; Line 4376
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?indicesToPointers@btSoftBody@@QAEXPBH@Z ENDP		; btSoftBody::indicesToPointers
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
PUBLIC	??$rayTest@URayFromToCaster@btSoftBody@@@btDbvt@@SAXPBUbtDbvtNode@@ABVbtVector3@@1AAURayFromToCaster@btSoftBody@@@Z ; btDbvt::rayTest<btSoftBody::RayFromToCaster>
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?rayTest@btSoftBody@@QBEHABVbtVector3@@0AAMAAW4_@eFeature@1@AAH_N@Z
_TEXT	SEGMENT
_t$55341 = -312						; size = 4
_v2$55340 = -304					; size = 16
_v1$55339 = -272					; size = 16
_v0$55338 = -240					; size = 16
_index2$55337 = -212					; size = 4
_index1$55336 = -208					; size = 4
_index0$55335 = -204					; size = 4
_f$55331 = -200						; size = 4
_tetfaces$55330 = -192					; size = 48
_tet$55329 = -140					; size = 4
_i$55325 = -136						; size = 4
_collider$55316 = -128					; size = 64
_t$55312 = -52						; size = 4
_f$55311 = -48						; size = 4
_ni$55307 = -44						; size = 4
_i$55306 = -40						; size = 4
_dir$ = -32						; size = 16
_cnt$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_rayFrom$ = 8						; size = 4
_rayTo$ = 12						; size = 4
_mint$ = 16						; size = 4
_feature$ = 20						; size = 4
_index$ = 24						; size = 4
_bcountonly$ = 28					; size = 1
?rayTest@btSoftBody@@QBEHABVbtVector3@@0AAMAAW4_@eFeature@1@AAH_N@Z PROC ; btSoftBody::rayTest, COMDAT
; _this$ = ecx
; Line 4381
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4382
	mov	DWORD PTR _cnt$[ebp], 0
; Line 4383
	mov	eax, DWORD PTR _rayFrom$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rayTo$[ebx]
	push	ecx
	lea	edx, DWORD PTR _dir$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 4386
	movzx	eax, BYTE PTR _bcountonly$[ebx]
	test	eax, eax
	jne	SHORT $LN16@rayTest@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?empty@btDbvt@@QBE_NXZ			; btDbvt::empty
	movzx	ecx, al
	test	ecx, ecx
	je	$LN17@rayTest@2
$LN16@rayTest@2:
; Line 4390
	mov	DWORD PTR _i$55306[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$55307[ebp], eax
	jmp	SHORT $LN15@rayTest@2
$LN14@rayTest@2:
	mov	edx, DWORD PTR _i$55306[ebp]
	add	edx, 1
	mov	DWORD PTR _i$55306[ebp], edx
$LN15@rayTest@2:
	mov	eax, DWORD PTR _i$55306[ebp]
	cmp	eax, DWORD PTR _ni$55307[ebp]
	jge	$LN13@rayTest@2
; Line 4392
	mov	ecx, DWORD PTR _i$55306[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$55311[ebp], eax
; Line 4398
	mov	edx, DWORD PTR _mint$[ebx]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _f$55311[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _f$55311[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _f$55311[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR _dir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rayTo$[ebx]
	push	ecx
	mov	edx, DWORD PTR _rayFrom$[ebx]
	push	edx
	call	?rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z ; btSoftBody::RayFromToCaster::rayFromToTriangle
	add	esp, 28					; 0000001cH
	fstp	DWORD PTR _t$55312[ebp]
; Line 4399
	fldz
	fcomp	DWORD PTR _t$55312[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@rayTest@2
; Line 4401
	mov	eax, DWORD PTR _cnt$[ebp]
	add	eax, 1
	mov	DWORD PTR _cnt$[ebp], eax
; Line 4402
	movzx	ecx, BYTE PTR _bcountonly$[ebx]
	test	ecx, ecx
	jne	SHORT $LN11@rayTest@2
; Line 4404
	mov	edx, DWORD PTR _feature$[ebx]
	mov	DWORD PTR [edx], 3
; Line 4405
	mov	eax, DWORD PTR _index$[ebx]
	mov	ecx, DWORD PTR _i$55306[ebp]
	mov	DWORD PTR [eax], ecx
; Line 4406
	mov	edx, DWORD PTR _mint$[ebx]
	fld	DWORD PTR _t$55312[ebp]
	fstp	DWORD PTR [edx]
$LN11@rayTest@2:
; Line 4409
	jmp	$LN14@rayTest@2
$LN13@rayTest@2:
; Line 4411
	jmp	SHORT $LN9@rayTest@2
$LN17@rayTest@2:
; Line 4414
	mov	eax, DWORD PTR _mint$[ebx]
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _rayTo$[ebx]
	push	ecx
	mov	edx, DWORD PTR _rayFrom$[ebx]
	push	edx
	lea	ecx, DWORD PTR _collider$55316[ebp]
	call	??0RayFromToCaster@btSoftBody@@QAE@ABVbtVector3@@0M@Z ; btSoftBody::RayFromToCaster::RayFromToCaster
; Line 4416
	lea	eax, DWORD PTR _collider$55316[ebp]
	push	eax
	mov	ecx, DWORD PTR _rayTo$[ebx]
	push	ecx
	mov	edx, DWORD PTR _rayFrom$[ebx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1024]
	push	ecx
	call	??$rayTest@URayFromToCaster@btSoftBody@@@btDbvt@@SAXPBUbtDbvtNode@@ABVbtVector3@@1AAURayFromToCaster@btSoftBody@@@Z ; btDbvt::rayTest<btSoftBody::RayFromToCaster>
	add	esp, 16					; 00000010H
; Line 4418
	cmp	DWORD PTR _collider$55316[ebp+52], 0
	je	SHORT $LN9@rayTest@2
; Line 4420
	mov	edx, DWORD PTR _mint$[ebx]
	fld	DWORD PTR _collider$55316[ebp+48]
	fstp	DWORD PTR [edx]
; Line 4422
	mov	eax, DWORD PTR _feature$[ebx]
	mov	DWORD PTR [eax], 3
; Line 4423
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _collider$55316[ebp+52]
	sub	ecx, eax
	sar	ecx, 6
	mov	edx, DWORD PTR _index$[ebx]
	mov	DWORD PTR [edx], ecx
; Line 4424
	mov	DWORD PTR _cnt$[ebp], 1
$LN9@rayTest@2:
; Line 4430
	mov	DWORD PTR _i$55325[ebp], 0
	jmp	SHORT $LN8@rayTest@2
$LN7@rayTest@2:
	mov	eax, DWORD PTR _i$55325[ebp]
	add	eax, 1
	mov	DWORD PTR _i$55325[ebp], eax
$LN8@rayTest@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	cmp	DWORD PTR _i$55325[ebp], eax
	jge	$LN6@rayTest@2
; Line 4432
	mov	ecx, DWORD PTR _i$55325[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	DWORD PTR _tet$55329[ebp], eax
; Line 4433
	mov	DWORD PTR _tetfaces$55330[ebp], 0
	mov	DWORD PTR _tetfaces$55330[ebp+4], 1
	mov	DWORD PTR _tetfaces$55330[ebp+8], 2
	mov	DWORD PTR _tetfaces$55330[ebp+12], 0
	mov	DWORD PTR _tetfaces$55330[ebp+16], 1
	mov	DWORD PTR _tetfaces$55330[ebp+20], 3
	mov	DWORD PTR _tetfaces$55330[ebp+24], 1
	mov	DWORD PTR _tetfaces$55330[ebp+28], 2
	mov	DWORD PTR _tetfaces$55330[ebp+32], 3
	mov	DWORD PTR _tetfaces$55330[ebp+36], 0
	mov	DWORD PTR _tetfaces$55330[ebp+40], 2
	mov	DWORD PTR _tetfaces$55330[ebp+44], 3
; Line 4434
	mov	DWORD PTR _f$55331[ebp], 0
	jmp	SHORT $LN5@rayTest@2
$LN4@rayTest@2:
	mov	edx, DWORD PTR _f$55331[ebp]
	add	edx, 1
	mov	DWORD PTR _f$55331[ebp], edx
$LN5@rayTest@2:
	cmp	DWORD PTR _f$55331[ebp], 4
	jge	$LN3@rayTest@2
; Line 4437
	mov	eax, DWORD PTR _f$55331[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _tetfaces$55330[ebp+eax]
	mov	DWORD PTR _index0$55335[ebp], ecx
; Line 4438
	mov	edx, DWORD PTR _f$55331[ebp]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _tetfaces$55330[ebp+edx+4]
	mov	DWORD PTR _index1$55336[ebp], eax
; Line 4439
	mov	ecx, DWORD PTR _f$55331[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _tetfaces$55330[ebp+ecx+8]
	mov	DWORD PTR _index2$55337[ebp], edx
; Line 4440
	mov	eax, DWORD PTR _index0$55335[ebp]
	mov	ecx, DWORD PTR _tet$55329[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _v0$55338[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _v0$55338[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _v0$55338[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _v0$55338[ebp+12], ecx
; Line 4441
	mov	edx, DWORD PTR _index1$55336[ebp]
	mov	eax, DWORD PTR _tet$55329[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+8]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _v1$55339[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _v1$55339[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _v1$55339[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _v1$55339[ebp+12], eax
; Line 4442
	mov	ecx, DWORD PTR _index2$55337[ebp]
	mov	edx, DWORD PTR _tet$55329[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v2$55340[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v2$55340[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _v2$55340[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _v2$55340[ebp+12], edx
; Line 4447
	mov	eax, DWORD PTR _mint$[ebx]
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _v2$55340[ebp]
	push	ecx
	lea	edx, DWORD PTR _v1$55339[ebp]
	push	edx
	lea	eax, DWORD PTR _v0$55338[ebp]
	push	eax
	lea	ecx, DWORD PTR _dir$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rayTo$[ebx]
	push	edx
	mov	eax, DWORD PTR _rayFrom$[ebx]
	push	eax
	call	?rayFromToTriangle@RayFromToCaster@btSoftBody@@SAMABVbtVector3@@00000M@Z ; btSoftBody::RayFromToCaster::rayFromToTriangle
	add	esp, 28					; 0000001cH
	fstp	DWORD PTR _t$55341[ebp]
; Line 4448
	fldz
	fcomp	DWORD PTR _t$55341[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@rayTest@2
; Line 4450
	mov	ecx, DWORD PTR _cnt$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cnt$[ebp], ecx
; Line 4451
	movzx	edx, BYTE PTR _bcountonly$[ebx]
	test	edx, edx
	jne	SHORT $LN1@rayTest@2
; Line 4453
	mov	eax, DWORD PTR _feature$[ebx]
	mov	DWORD PTR [eax], 4
; Line 4454
	mov	ecx, DWORD PTR _index$[ebx]
	mov	edx, DWORD PTR _i$55325[ebp]
	mov	DWORD PTR [ecx], edx
; Line 4455
	mov	eax, DWORD PTR _mint$[ebx]
	fld	DWORD PTR _t$55341[ebp]
	fstp	DWORD PTR [eax]
$LN1@rayTest@2:
; Line 4458
	jmp	$LN4@rayTest@2
$LN3@rayTest@2:
; Line 4459
	jmp	$LN7@rayTest@2
$LN6@rayTest@2:
; Line 4461
	mov	eax, DWORD PTR _cnt$[ebp]
; Line 4462
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@rayTest@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	24					; 00000018H
$LN27@rayTest@2:
	DD	6
	DD	$LN26@rayTest@2
$LN26@rayTest@2:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN20@rayTest@2
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN21@rayTest@2
	DD	-192					; ffffff40H
	DD	48					; 00000030H
	DD	$LN22@rayTest@2
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN23@rayTest@2
	DD	-272					; fffffef0H
	DD	16					; 00000010H
	DD	$LN24@rayTest@2
	DD	-304					; fffffed0H
	DD	16					; 00000010H
	DD	$LN25@rayTest@2
$LN25@rayTest@2:
	DB	118					; 00000076H
	DB	50					; 00000032H
	DB	0
$LN24@rayTest@2:
	DB	118					; 00000076H
	DB	49					; 00000031H
	DB	0
$LN23@rayTest@2:
	DB	118					; 00000076H
	DB	48					; 00000030H
	DB	0
$LN22@rayTest@2:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN21@rayTest@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN20@rayTest@2:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
?rayTest@btSoftBody@@QBEHABVbtVector3@@0AAMAAW4_@eFeature@1@AAH_N@Z ENDP ; btSoftBody::rayTest
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?initializeFaceTree@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
$T55352 = -48						; size = 32
_f$55351 = -12						; size = 4
_i$55347 = -8						; size = 4
_this$ = -4						; size = 4
?initializeFaceTree@btSoftBody@@QAEXXZ PROC		; btSoftBody::initializeFaceTree, COMDAT
; _this$ = ecx
; Line 4466
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4467
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?clear@btDbvt@@QAEXXZ			; btDbvt::clear
; Line 4468
	mov	DWORD PTR _i$55347[ebp], 0
	jmp	SHORT $LN3@initialize
$LN2@initialize:
	mov	eax, DWORD PTR _i$55347[ebp]
	add	eax, 1
	mov	DWORD PTR _i$55347[ebp], eax
$LN3@initialize:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$55347[ebp], eax
	jge	SHORT $LN1@initialize
; Line 4470
	mov	ecx, DWORD PTR _i$55347[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$55351[ebp], eax
; Line 4471
	mov	edx, DWORD PTR _f$55351[ebp]
	push	edx
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _f$55351[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55352[ebp]
	push	ecx
	call	?VolumeOf@@YA?AUbtDbvtAabbMm@@ABUFace@btSoftBody@@M@Z ; VolumeOf
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1024				; 00000400H
	call	?insert@btDbvt@@QAEPAUbtDbvtNode@@ABUbtDbvtAabbMm@@PAX@Z ; btDbvt::insert
	mov	edx, DWORD PTR _f$55351[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 4472
	jmp	SHORT $LN2@initialize
$LN1@initialize:
; Line 4473
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?initializeFaceTree@btSoftBody@@QAEXXZ ENDP		; btSoftBody::initializeFaceTree
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?evaluateCom@btSoftBody@@QBE?AVbtVector3@@XZ
_TEXT	SEGMENT
$T66929 = -76						; size = 4
$T66928 = -72						; size = 4
$T66927 = -68						; size = 4
$T55367 = -64						; size = 16
_ni$55363 = -44						; size = 4
_i$55362 = -40						; size = 4
_com$ = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?evaluateCom@btSoftBody@@QBE?AVbtVector3@@XZ PROC	; btSoftBody::evaluateCom, COMDAT
; _this$ = ecx
; Line 4477
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4478
	fldz
	fstp	DWORD PTR $T66927[ebp]
	fldz
	fstp	DWORD PTR $T66928[ebp]
	fldz
	fstp	DWORD PTR $T66929[ebp]
	lea	eax, DWORD PTR $T66927[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66928[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66929[ebp]
	push	edx
	lea	ecx, DWORD PTR _com$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 4479
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+497]
	test	ecx, ecx
	je	SHORT $LN1@evaluateCo
; Line 4481
	mov	DWORD PTR _i$55362[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$55363[ebp], eax
	jmp	SHORT $LN3@evaluateCo
$LN2@evaluateCo:
	mov	edx, DWORD PTR _i$55362[ebp]
	add	edx, 1
	mov	DWORD PTR _i$55362[ebp], edx
$LN3@evaluateCo:
	mov	eax, DWORD PTR _i$55362[ebp]
	cmp	eax, DWORD PTR _ni$55363[ebp]
	jge	SHORT $LN1@evaluateCo
; Line 4483
	mov	ecx, DWORD PTR _i$55362[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	??A?$btAlignedObjectArray@M@@QBEABMH@Z	; btAlignedObjectArray<float>::operator[]
	push	eax
	mov	edx, DWORD PTR _i$55362[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	eax, DWORD PTR $T55367[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _com$[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4484
	jmp	SHORT $LN2@evaluateCo
$LN1@evaluateCo:
; Line 4486
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	mov	edx, DWORD PTR _com$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _com$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _com$[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _com$[ebp+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 4487
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@evaluateCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	2
$LN9@evaluateCo:
	DD	1
	DD	$LN8@evaluateCo
$LN8@evaluateCo:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN7@evaluateCo
$LN7@evaluateCo:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
?evaluateCom@btSoftBody@@QBE?AVbtVector3@@XZ ENDP	; btSoftBody::evaluateCom
_TEXT	ENDS
PUBLIC	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
PUBLIC	?Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV2@M@Z ; btSparseSdf<3>::Evaluate
PUBLIC	?invXform@btTransform@@QBE?AVbtVector3@@ABV2@@Z	; btTransform::invXform
PUBLIC	?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ; btCollisionObjectWrapper::getWorldTransform
PUBLIC	?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ; btCollisionObjectWrapper::getCollisionShape
PUBLIC	?checkContact@btSoftBody@@QBE_NPBUbtCollisionObjectWrapper@@ABVbtVector3@@MAAUsCti@1@@Z ; btSoftBody::checkContact
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?checkContact@btSoftBody@@QBE_NPBUbtCollisionObjectWrapper@@ABVbtVector3@@MAAUsCti@1@@Z
_TEXT	SEGMENT
$T55383 = -128						; size = 16
$T55382 = -112						; size = 16
$T55381 = -96						; size = 16
$T55379 = -80						; size = 16
_dst$ = -52						; size = 4
_wtr$ = -44						; size = 4
_shp$ = -40						; size = 4
_nrm$ = -32						; size = 16
_this$ = -4						; size = 4
_colObjWrap$ = 8					; size = 4
_x$ = 12						; size = 4
_margin$ = 16						; size = 4
_cti$ = 20						; size = 4
?checkContact@btSoftBody@@QBE_NPBUbtCollisionObjectWrapper@@ABVbtVector3@@MAAUsCti@1@@Z PROC ; btSoftBody::checkContact, COMDAT
; _this$ = ecx
; Line 4494
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4495
	lea	ecx, DWORD PTR _nrm$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 4496
	mov	ecx, DWORD PTR _colObjWrap$[ebx]
	call	?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ; btCollisionObjectWrapper::getCollisionShape
	mov	DWORD PTR _shp$[ebp], eax
; Line 4499
	mov	ecx, DWORD PTR _colObjWrap$[ebx]
	call	?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ; btCollisionObjectWrapper::getWorldTransform
	mov	DWORD PTR _wtr$[ebp], eax
; Line 4507
	push	ecx
	fld	DWORD PTR _margin$[ebx]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _nrm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebx]
	push	edx
	lea	eax, DWORD PTR $T55379[ebp]
	push	eax
	mov	ecx, DWORD PTR _wtr$[ebp]
	call	?invXform@btTransform@@QBE?AVbtVector3@@ABV2@@Z ; btTransform::invXform
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+708]
	add	ecx, 64					; 00000040H
	call	?Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV2@M@Z ; btSparseSdf<3>::Evaluate
	fstp	DWORD PTR _dst$[ebp]
; Line 4508
	fldz
	fcomp	DWORD PTR _dst$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1@checkConta
; Line 4510
	mov	ecx, DWORD PTR _colObjWrap$[ebx]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	edx, DWORD PTR _cti$[ebx]
	mov	DWORD PTR [edx], eax
; Line 4511
	lea	eax, DWORD PTR _nrm$[ebp]
	push	eax
	mov	ecx, DWORD PTR _wtr$[ebp]
	call	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	ecx, DWORD PTR $T55381[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _cti$[ebx]
	add	edx, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 4512
	lea	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cti$[ebx]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T55382[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _x$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T55383[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _cti$[ebx]
	add	eax, 16					; 00000010H
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fchs
	mov	ecx, DWORD PTR _cti$[ebx]
	fstp	DWORD PTR [ecx+32]
; Line 4513
	mov	al, 1
	jmp	SHORT $LN2@checkConta
$LN1@checkConta:
; Line 4515
	xor	al, al
$LN2@checkConta:
; Line 4516
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@checkConta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	2
$LN7@checkConta:
	DD	2
	DD	$LN6@checkConta
$LN6@checkConta:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN4@checkConta
	DD	-52					; ffffffccH
	DD	4
	DD	$LN5@checkConta
$LN5@checkConta:
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN4@checkConta:
	DB	110					; 0000006eH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
?checkContact@btSoftBody@@QBE_NPBUbtCollisionObjectWrapper@@ABVbtVector3@@MAAUsCti@1@@Z ENDP ; btSoftBody::checkContact
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?invXform@btTransform@@QBE?AVbtVector3@@ABV2@@Z
_TEXT	SEGMENT
$T9489 = -96						; size = 48
_v$ = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_inVec$ = 12						; size = 4
?invXform@btTransform@@QBE?AVbtVector3@@ABV2@@Z PROC	; btTransform::invXform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 224
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _inVec$[ebx]
	push	ecx
	lea	edx, DWORD PTR _v$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 226
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T9489[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?transpose@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::transpose
	push	eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebx]
	push	edx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 227
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@invXform
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN5@invXform:
	DD	1
	DD	$LN4@invXform
$LN4@invXform:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@invXform
$LN3@invXform:
	DB	118					; 00000076H
	DB	0
?invXform@btTransform@@QBE?AVbtVector3@@ABV2@@Z ENDP	; btTransform::invXform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ PROC ; btCollisionObjectWrapper::getWorldTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobjectwrapper.h
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ENDP ; btCollisionObjectWrapper::getWorldTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ PROC ; btCollisionObjectWrapper::getCollisionObject, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ENDP ; btCollisionObjectWrapper::getCollisionObject
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ PROC ; btCollisionObjectWrapper::getCollisionShape, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ENDP ; btCollisionObjectWrapper::getCollisionShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?updateNormals@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
$T66955 = -168						; size = 4
$T66954 = -164						; size = 4
$T66953 = -160						; size = 4
_len$55408 = -152					; size = 4
$T55404 = -144						; size = 16
$T55402 = -128						; size = 16
$T55401 = -112						; size = 16
_n$55400 = -80						; size = 16
_f$55399 = -48						; size = 4
_ni$ = -44						; size = 4
_i$ = -40						; size = 4
_zv$ = -32						; size = 16
_this$ = -4						; size = 4
?updateNormals@btSoftBody@@QAEXXZ PROC			; btSoftBody::updateNormals, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 4520
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4522
	fldz
	fstp	DWORD PTR $T66953[ebp]
	fldz
	fstp	DWORD PTR $T66954[ebp]
	fldz
	fstp	DWORD PTR $T66955[ebp]
	lea	eax, DWORD PTR $T66953[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66954[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66955[ebp]
	push	edx
	lea	ecx, DWORD PTR _zv$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 4525
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN10@updateNorm
$LN9@updateNorm:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@updateNorm:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN8@updateNorm
; Line 4527
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _zv$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _zv$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _zv$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _zv$[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 4528
	jmp	SHORT $LN9@updateNorm
$LN8@updateNorm:
; Line 4529
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN7@updateNorm
$LN6@updateNorm:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@updateNorm:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	$LN5@updateNorm
; Line 4531
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$55399[ebp], eax
; Line 4533
	mov	eax, DWORD PTR _f$55399[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _f$55399[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T55402[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _f$55399[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _f$55399[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T55401[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _n$55400[ebp]
	push	ecx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
; Line 4534
	lea	edx, DWORD PTR $T55404[ebp]
	push	edx
	lea	ecx, DWORD PTR _n$55400[ebp]
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
	mov	ecx, DWORD PTR _f$55399[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4535
	lea	ecx, DWORD PTR _n$55400[ebp]
	push	ecx
	mov	edx, DWORD PTR _f$55399[ebp]
	mov	ecx, DWORD PTR [edx+8]
	add	ecx, 80					; 00000050H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4536
	lea	eax, DWORD PTR _n$55400[ebp]
	push	eax
	mov	ecx, DWORD PTR _f$55399[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	add	ecx, 80					; 00000050H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4537
	lea	edx, DWORD PTR _n$55400[ebp]
	push	edx
	mov	eax, DWORD PTR _f$55399[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 80					; 00000050H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4538
	jmp	$LN6@updateNorm
$LN5@updateNorm:
; Line 4539
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN4@updateNorm
$LN3@updateNorm:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@updateNorm:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN2@updateNorm
; Line 4541
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 80					; 00000050H
	mov	ecx, eax
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _len$55408[ebp]
; Line 4542
	fld	DWORD PTR __real@34000000
	fcomp	DWORD PTR _len$55408[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@updateNorm
; Line 4543
	lea	ecx, DWORD PTR _len$55408[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 80					; 00000050H
	mov	ecx, eax
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
$LN1@updateNorm:
; Line 4544
	jmp	SHORT $LN3@updateNorm
$LN2@updateNorm:
; Line 4545
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@updateNorm
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN17@updateNorm:
	DD	3
	DD	$LN16@updateNorm
$LN16@updateNorm:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN13@updateNorm
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN14@updateNorm
	DD	-152					; ffffff68H
	DD	4
	DD	$LN15@updateNorm
$LN15@updateNorm:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN14@updateNorm:
	DB	110					; 0000006eH
	DB	0
$LN13@updateNorm:
	DB	122					; 0000007aH
	DB	118					; 00000076H
	DB	0
?updateNormals@btSoftBody@@QAEXXZ ENDP			; btSoftBody::updateNormals
_TEXT	ENDS
PUBLIC	?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ ; btCollisionObject::getBroadphaseHandle
PUBLIC	?Maxs@btDbvtAabbMm@@QBEABVbtVector3@@XZ		; btDbvtAabbMm::Maxs
PUBLIC	?Mins@btDbvtAabbMm@@QBEABVbtVector3@@XZ		; btDbvtAabbMm::Mins
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?updateBounds@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
tv82 = -148						; size = 4
$T66966 = -144						; size = 4
$T66965 = -140						; size = 4
$T66964 = -136						; size = 4
$T66963 = -132						; size = 4
$T55425 = -128						; size = 16
$T55422 = -112						; size = 16
$T55421 = -96						; size = 16
$T55418 = -80						; size = 16
_mrg$55417 = -48					; size = 16
_csm$55416 = -20					; size = 4
_maxs$55415 = -12					; size = 4
_mins$55414 = -8					; size = 4
_this$ = -4						; size = 4
?updateBounds@btSoftBody@@QAEXXZ PROC			; btSoftBody::updateBounds, COMDAT
; _this$ = ecx
; Line 4549
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4562
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+964], 0
	je	$LN3@updateBoun
; Line 4564
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+964]
	call	?Mins@btDbvtAabbMm@@QBEABVbtVector3@@XZ	; btDbvtAabbMm::Mins
	mov	DWORD PTR _mins$55414[ebp], eax
; Line 4565
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+964]
	call	?Maxs@btDbvtAabbMm@@QBEABVbtVector3@@XZ	; btDbvtAabbMm::Maxs
	mov	DWORD PTR _maxs$55415[ebp], eax
; Line 4566
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv82[ebp], eax
	mov	eax, DWORD PTR tv82[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv82[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _csm$55416[ebp]
; Line 4569
	fld1
	fstp	DWORD PTR $T66963[ebp]
	lea	ecx, DWORD PTR $T66963[ebp]
	push	ecx
	lea	edx, DWORD PTR _csm$55416[ebp]
	push	edx
	lea	eax, DWORD PTR _csm$55416[ebp]
	push	eax
	lea	ecx, DWORD PTR _csm$55416[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T55418[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	edx, DWORD PTR _mrg$55417[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 4570
	lea	eax, DWORD PTR _mrg$55417[ebp]
	push	eax
	mov	ecx, DWORD PTR _mins$55414[ebp]
	push	ecx
	lea	edx, DWORD PTR $T55421[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 928				; 000003a0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4571
	lea	ecx, DWORD PTR _mrg$55417[ebp]
	push	ecx
	mov	edx, DWORD PTR _maxs$55415[ebp]
	push	edx
	lea	eax, DWORD PTR $T55422[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 944				; 000003b0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4572
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ ; btCollisionObject::getBroadphaseHandle
	test	eax, eax
	je	SHORT $LN2@updateBoun
; Line 4577
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+708]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 944				; 000003b0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 928				; 000003a0H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ ; btCollisionObject::getBroadphaseHandle
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+708]
	mov	ecx, DWORD PTR [ecx+32]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@updateBoun:
; Line 4580
	jmp	SHORT $LN1@updateBoun
$LN3@updateBoun:
; Line 4583
	fldz
	fstp	DWORD PTR $T66964[ebp]
	fldz
	fstp	DWORD PTR $T66965[ebp]
	fldz
	fstp	DWORD PTR $T66966[ebp]
	lea	ecx, DWORD PTR $T66964[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66965[ebp]
	push	edx
	lea	eax, DWORD PTR $T66966[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55425[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 944				; 000003b0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 944				; 000003b0H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 928				; 000003a0H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
$LN1@updateBoun:
; Line 4586
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@updateBoun
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN9@updateBoun:
	DD	2
	DD	$LN8@updateBoun
$LN8@updateBoun:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@updateBoun
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN7@updateBoun
$LN7@updateBoun:
	DB	109					; 0000006dH
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	0
$LN6@updateBoun:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	109					; 0000006dH
	DB	0
?updateBounds@btSoftBody@@QAEXXZ ENDP			; btSoftBody::updateBounds
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ PROC ; btCollisionObject::getBroadphaseHandle, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 321
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 322
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+200]
; Line 323
	mov	esp, ebp
	pop	ebp
	ret	0
?getBroadphaseHandle@btCollisionObject@@QAEPAUbtBroadphaseProxy@@XZ ENDP ; btCollisionObject::getBroadphaseHandle
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Mins@btDbvtAabbMm@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Mins@btDbvtAabbMm@@QBEABVbtVector3@@XZ PROC		; btDbvtAabbMm::Mins, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 135
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Mins@btDbvtAabbMm@@QBEABVbtVector3@@XZ ENDP		; btDbvtAabbMm::Mins
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Maxs@btDbvtAabbMm@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Maxs@btDbvtAabbMm@@QBEABVbtVector3@@XZ PROC		; btDbvtAabbMm::Maxs, COMDAT
; _this$ = ecx
; Line 136
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esp, ebp
	pop	ebp
	ret	0
?Maxs@btDbvtAabbMm@@QBEABVbtVector3@@XZ ENDP		; btDbvtAabbMm::Maxs
_TEXT	ENDS
PUBLIC	?determinant@btMatrix3x3@@QBEMXZ		; btMatrix3x3::determinant
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?updatePose@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
$T66986 = -636						; size = 4
$T66985 = -632						; size = 4
$T66984 = -628						; size = 4
$T66983 = -624						; size = 4
$T66982 = -620						; size = 4
$T66981 = -616						; size = 4
$T66980 = -612						; size = 4
$T55468 = -608						; size = 48
_idet$55464 = -548					; size = 4
$T55462 = -544						; size = 48
$T55461 = -496						; size = 48
$T55460 = -448						; size = 48
_s$55459 = -384						; size = 48
_r$55458 = -320						; size = 48
$T55457 = -256						; size = 16
$T55456 = -240						; size = 16
$T55455 = -224						; size = 16
_b$55454 = -196						; size = 4
$T55452 = -192						; size = 16
_a$55451 = -160						; size = 16
_ni$55447 = -136					; size = 4
_i$55446 = -132						; size = 4
$T55438 = -128						; size = 16
_eps$55437 = -104					; size = 4
_Apq$55436 = -96					; size = 48
_com$55434 = -32					; size = 16
_pose$55433 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?updatePose@btSoftBody@@QAEXXZ PROC			; btSoftBody::updatePose, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 4591
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 636				; 0000027cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-636]
	mov	ecx, 159				; 0000009fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4592
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+497]
	test	ecx, ecx
	je	$LN1@updatePose
; Line 4594
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 496				; 000001f0H
	mov	DWORD PTR _pose$55433[ebp], edx
; Line 4595
	lea	eax, DWORD PTR _com$55434[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?evaluateCom@btSoftBody@@QBE?AVbtVector3@@XZ ; btSoftBody::evaluateCom
; Line 4597
	mov	ecx, DWORD PTR _pose$55433[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _com$55434[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _com$55434[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _com$55434[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _com$55434[ebp+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4599
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
; Line 4600
	fld	DWORD PTR __real@34000000
	fstp	DWORD PTR _eps$55437[ebp]
; Line 4601
	fldz
	fstp	DWORD PTR $T66982[ebp]
	fldz
	fstp	DWORD PTR $T66983[ebp]
	fldz
	fstp	DWORD PTR $T66984[ebp]
	push	2
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	DWORD PTR $T66981[ebp], eax
	lea	ecx, DWORD PTR $T66982[ebp]
	push	ecx
	lea	edx, DWORD PTR $T66983[ebp]
	push	edx
	lea	eax, DWORD PTR $T66984[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55438[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR $T66981[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	1
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	DWORD PTR $T66980[ebp], eax
	mov	ecx, DWORD PTR $T66981[ebp]
	mov	edx, DWORD PTR $T66980[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	esi, DWORD PTR $T66980[ebp]
	push	0
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
; Line 4602
	push	ecx
	fld	DWORD PTR _eps$55437[ebp]
	fstp	DWORD PTR [esp]
	push	0
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
	fld	DWORD PTR _eps$55437[ebp]
	fadd	ST(0), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	push	1
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?setY@btVector3@@QAEXM@Z		; btVector3::setY
	fld	DWORD PTR _eps$55437[ebp]
	fmul	DWORD PTR __real@40400000
	push	ecx
	fstp	DWORD PTR [esp]
	push	2
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?setZ@btVector3@@QAEXM@Z		; btVector3::setZ
; Line 4603
	mov	DWORD PTR _i$55446[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$55447[ebp], eax
	jmp	SHORT $LN4@updatePose
$LN3@updatePose:
	mov	edx, DWORD PTR _i$55446[ebp]
	add	edx, 1
	mov	DWORD PTR _i$55446[ebp], edx
$LN4@updatePose:
	mov	eax, DWORD PTR _i$55446[ebp]
	cmp	eax, DWORD PTR _ni$55447[ebp]
	jge	$LN2@updatePose
; Line 4605
	lea	ecx, DWORD PTR _com$55434[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$55446[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	lea	eax, DWORD PTR $T55452[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _i$55446[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pose$55433[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	push	eax
	lea	edx, DWORD PTR _a$55451[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 4606
	mov	eax, DWORD PTR _i$55446[ebp]
	push	eax
	mov	ecx, DWORD PTR _pose$55433[ebp]
	add	ecx, 8
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	DWORD PTR _b$55454[ebp], eax
; Line 4607
	mov	ecx, DWORD PTR _b$55454[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$55451[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	edx, DWORD PTR $T55455[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4608
	mov	eax, DWORD PTR _b$55454[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$55451[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	lea	ecx, DWORD PTR $T55456[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4609
	mov	edx, DWORD PTR _b$55454[ebp]
	push	edx
	lea	ecx, DWORD PTR _a$55451[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	lea	eax, DWORD PTR $T55457[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	lea	ecx, DWORD PTR _Apq$55436[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4610
	jmp	$LN3@updatePose
$LN2@updatePose:
; Line 4611
	lea	ecx, DWORD PTR _r$55458[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	lea	ecx, DWORD PTR _s$55459[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
; Line 4612
	lea	ecx, DWORD PTR _s$55459[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$55458[ebp]
	push	edx
	lea	eax, DWORD PTR _Apq$55436[ebp]
	push	eax
	call	?PolarDecompose@@YAHABVbtMatrix3x3@@AAV1@1@Z ; PolarDecompose
	add	esp, 12					; 0000000cH
; Line 4613
	lea	ecx, DWORD PTR _r$55458[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pose$55433[ebp]
	add	ecx, 64					; 00000040H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 4614
	lea	edx, DWORD PTR _Apq$55436[ebp]
	push	edx
	lea	eax, DWORD PTR $T55460[ebp]
	push	eax
	lea	ecx, DWORD PTR _r$55458[ebp]
	call	?transpose@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::transpose
	push	eax
	mov	ecx, DWORD PTR _pose$55433[ebp]
	add	ecx, 160				; 000000a0H
	push	ecx
	lea	edx, DWORD PTR $T55461[ebp]
	push	edx
	call	??D@YA?AVbtMatrix3x3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T55462[ebp]
	push	eax
	call	??D@YA?AVbtMatrix3x3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _pose$55433[ebp]
	add	ecx, 112				; 00000070H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 4615
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fcomp	DWORD PTR [ecx+388]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@updatePose
; Line 4618
	fld1
	fstp	DWORD PTR $T66985[ebp]
	mov	ecx, DWORD PTR _pose$55433[ebp]
	add	ecx, 112				; 00000070H
	call	?determinant@btMatrix3x3@@QBEMXZ	; btMatrix3x3::determinant
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR $T66986[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 388				; 00000184H
	push	edx
	lea	eax, DWORD PTR $T66985[ebp]
	push	eax
	lea	ecx, DWORD PTR $T66986[ebp]
	push	ecx
	call	??$Clamp@M@@YAMABM00@Z			; Clamp<float>
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _idet$55464[ebp]
; Line 4619
	push	ecx
	fld	DWORD PTR _idet$55464[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _pose$55433[ebp]
	add	edx, 112				; 00000070H
	push	edx
	lea	eax, DWORD PTR $T55468[ebp]
	push	eax
	call	?Mul@@YA?AVbtMatrix3x3@@ABV1@M@Z	; Mul
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _pose$55433[ebp]
	add	ecx, 112				; 00000070H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
$LN1@updatePose:
; Line 4623
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@updatePose
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN14@updatePose:
	DD	5
	DD	$LN13@updatePose
$LN13@updatePose:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN8@updatePose
	DD	-96					; ffffffa0H
	DD	48					; 00000030H
	DD	$LN9@updatePose
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN10@updatePose
	DD	-320					; fffffec0H
	DD	48					; 00000030H
	DD	$LN11@updatePose
	DD	-384					; fffffe80H
	DD	48					; 00000030H
	DD	$LN12@updatePose
$LN12@updatePose:
	DB	115					; 00000073H
	DB	0
$LN11@updatePose:
	DB	114					; 00000072H
	DB	0
$LN10@updatePose:
	DB	97					; 00000061H
	DB	0
$LN9@updatePose:
	DB	65					; 00000041H
	DB	112					; 00000070H
	DB	113					; 00000071H
	DB	0
$LN8@updatePose:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
?updatePose@btSoftBody@@QAEXXZ ENDP			; btSoftBody::updatePose
_TEXT	ENDS
PUBLIC	?btTriple@@YAMABVbtVector3@@00@Z		; btTriple
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?determinant@btMatrix3x3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?determinant@btMatrix3x3@@QBEMXZ PROC			; btMatrix3x3::determinant, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 953
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 954
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	call	?btTriple@@YAMABVbtVector3@@00@Z	; btTriple
	add	esp, 12					; 0000000cH
; Line 955
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?determinant@btMatrix3x3@@QBEMXZ ENDP			; btMatrix3x3::determinant
_TEXT	ENDS
PUBLIC	?triple@btVector3@@QBEMABV1@0@Z			; btVector3::triple
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btTriple@@YAMABVbtVector3@@00@Z
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
_v3$ = 16						; size = 4
?btTriple@@YAMABVbtVector3@@00@Z PROC			; btTriple, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 925
	push	ebp
	mov	ebp, esp
; Line 926
	mov	eax, DWORD PTR _v3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v1$[ebp]
	call	?triple@btVector3@@QBEMABV1@0@Z		; btVector3::triple
; Line 927
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btTriple@@YAMABVbtVector3@@00@Z ENDP			; btTriple
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?triple@btVector3@@QBEMABV1@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?triple@btVector3@@QBEMABV1@0@Z PROC			; btVector3::triple, COMDAT
; _this$ = ecx
; Line 417
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 462
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR [eax+4]
	fsubp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+8]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx+8]
	fsubp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx]
	fsubp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
; Line 464
	mov	esp, ebp
	pop	ebp
	ret	8
?triple@btVector3@@QBEMABV1@0@Z ENDP			; btVector3::triple
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Mul@@YA?AVbtMatrix3x3@@ABV1@M@Z
_TEXT	SEGMENT
$T19409 = -96						; size = 16
_i$19405 = -72						; size = 4
_r$ = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
?Mul@@YA?AVbtMatrix3x3@@ABV1@M@Z PROC			; Mul, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 292
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 293
	lea	ecx, DWORD PTR _r$[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
; Line 294
	mov	DWORD PTR _i$19405[ebp], 0
	jmp	SHORT $LN3@Mul
$LN2@Mul:
	mov	eax, DWORD PTR _i$19405[ebp]
	add	eax, 1
	mov	DWORD PTR _i$19405[ebp], eax
$LN3@Mul:
	cmp	DWORD PTR _i$19405[ebp], 3
	jge	SHORT $LN1@Mul
	lea	ecx, DWORD PTR _b$[ebx]
	push	ecx
	mov	edx, DWORD PTR _i$19405[ebp]
	push	edx
	mov	ecx, DWORD PTR _a$[ebx]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	lea	eax, DWORD PTR $T19409[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	ecx, DWORD PTR _i$19405[ebp]
	push	ecx
	lea	ecx, DWORD PTR _r$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
	jmp	SHORT $LN2@Mul
$LN1@Mul:
; Line 295
	lea	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 296
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Mul
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN8@Mul:
	DD	1
	DD	$LN7@Mul
$LN7@Mul:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN6@Mul
$LN6@Mul:
	DB	114					; 00000072H
	DB	0
?Mul@@YA?AVbtMatrix3x3@@ABV1@M@Z ENDP			; Mul
_TEXT	ENDS
EXTRN	?decompose@btPolarDecomposition@@QBEIABVbtMatrix3x3@@AAV2@1@Z:PROC ; btPolarDecomposition::decompose
EXTRN	??0btPolarDecomposition@@QAE@MI@Z:PROC		; btPolarDecomposition::btPolarDecomposition
EXTRN	?DEFAULT_TOLERANCE@btPolarDecomposition@@2MB:DWORD ; btPolarDecomposition::DEFAULT_TOLERANCE
EXTRN	?DEFAULT_MAX_ITERATIONS@btPolarDecomposition@@2IB:DWORD ; btPolarDecomposition::DEFAULT_MAX_ITERATIONS
;	COMDAT ?polar@?1??PolarDecompose@@YAHABVbtMatrix3x3@@AAV2@1@Z@4VbtPolarDecomposition@@B
_BSS	SEGMENT
?polar@?1??PolarDecompose@@YAHABVbtMatrix3x3@@AAV2@1@Z@4VbtPolarDecomposition@@B DQ 01H DUP (?) ; `PolarDecompose'::`2'::polar
_BSS	ENDS
;	COMDAT ?$S2@?1??PolarDecompose@@YAHABVbtMatrix3x3@@AAV2@1@Z@4IA
_BSS	SEGMENT
?$S2@?1??PolarDecompose@@YAHABVbtMatrix3x3@@AAV2@1@Z@4IA DD 01H DUP (?) ; `PolarDecompose'::`2'::$S2
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?PolarDecompose@@YAHABVbtMatrix3x3@@AAV1@1@Z
_TEXT	SEGMENT
_m$ = 8							; size = 4
_q$ = 12						; size = 4
_s$ = 16						; size = 4
?PolarDecompose@@YAHABVbtMatrix3x3@@AAV1@1@Z PROC	; PolarDecompose, COMDAT
; Line 658
	push	ebp
	mov	ebp, esp
; Line 659
	mov	eax, DWORD PTR ?$S2@?1??PolarDecompose@@YAHABVbtMatrix3x3@@AAV2@1@Z@4IA
	and	eax, 1
	jne	SHORT $LN1@PolarDecom
	mov	ecx, DWORD PTR ?$S2@?1??PolarDecompose@@YAHABVbtMatrix3x3@@AAV2@1@Z@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S2@?1??PolarDecompose@@YAHABVbtMatrix3x3@@AAV2@1@Z@4IA, ecx
	mov	edx, DWORD PTR ?DEFAULT_MAX_ITERATIONS@btPolarDecomposition@@2IB ; btPolarDecomposition::DEFAULT_MAX_ITERATIONS
	push	edx
	push	ecx
	fld	DWORD PTR ?DEFAULT_TOLERANCE@btPolarDecomposition@@2MB ; btPolarDecomposition::DEFAULT_TOLERANCE
	fstp	DWORD PTR [esp]
	mov	ecx, OFFSET ?polar@?1??PolarDecompose@@YAHABVbtMatrix3x3@@AAV2@1@Z@4VbtPolarDecomposition@@B
	call	??0btPolarDecomposition@@QAE@MI@Z	; btPolarDecomposition::btPolarDecomposition
$LN1@PolarDecom:
; Line 660
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	mov	edx, DWORD PTR _m$[ebp]
	push	edx
	mov	ecx, OFFSET ?polar@?1??PolarDecompose@@YAHABVbtMatrix3x3@@AAV2@1@Z@4VbtPolarDecomposition@@B
	call	?decompose@btPolarDecomposition@@QBEIABVbtMatrix3x3@@AAV2@1@Z ; btPolarDecomposition::decompose
; Line 661
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?PolarDecompose@@YAHABVbtMatrix3x3@@AAV1@1@Z ENDP	; PolarDecompose
_TEXT	ENDS
PUBLIC	__real@3eaaaaaa
PUBLIC	?updateArea@btSoftBody@@QAEX_N@Z		; btSoftBody::updateArea
;	COMDAT __real@3eaaaaaa
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
CONST	SEGMENT
__real@3eaaaaaa DD 03eaaaaaar			; 0.333333
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?updateArea@btSoftBody@@QAEX_N@Z
_TEXT	SEGMENT
tv243 = -80						; size = 4
tv195 = -76						; size = 4
tv163 = -72						; size = 4
$T67010 = -68						; size = 4
_j$55510 = -64						; size = 4
_f$55509 = -60						; size = 4
_index$55494 = -56					; size = 4
_j$55490 = -52						; size = 4
_f$55489 = -48						; size = 4
_counts$55481 = -40					; size = 20
_f$55478 = -16						; size = 4
_ni$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_averageArea$ = 8					; size = 1
?updateArea@btSoftBody@@QAEX_N@Z PROC			; btSoftBody::updateArea, COMDAT
; _this$ = ecx
; Line 4627
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4631
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN31@updateArea
$LN30@updateArea:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN31@updateArea:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN29@updateArea
; Line 4633
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$55478[ebp], eax
; Line 4634
	mov	eax, DWORD PTR _f$55478[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _f$55478[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _f$55478[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 16					; 00000010H
	push	edx
	call	?AreaOf@@YAMABVbtVector3@@00@Z		; AreaOf
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _f$55478[ebp]
	fstp	DWORD PTR [eax+48]
; Line 4635
	jmp	SHORT $LN30@updateArea
$LN29@updateArea:
; Line 4639
	movzx	ecx, BYTE PTR _averageArea$[ebp]
	test	ecx, ecx
	je	$LN28@updateArea
; Line 4641
	lea	ecx, DWORD PTR _counts$55481[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
; Line 4642
	mov	DWORD PTR $T67010[ebp], 0
	lea	edx, DWORD PTR $T67010[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	lea	ecx, DWORD PTR _counts$55481[ebp]
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
; Line 4643
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN27@updateArea
$LN26@updateArea:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN27@updateArea:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN25@updateArea
; Line 4645
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+100]
; Line 4646
	jmp	SHORT $LN26@updateArea
$LN25@updateArea:
; Line 4647
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN24@updateArea
$LN23@updateArea:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN24@updateArea:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	$LN22@updateArea
; Line 4649
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$55489[ebp], eax
; Line 4650
	mov	DWORD PTR _j$55490[ebp], 0
	jmp	SHORT $LN21@updateArea
$LN20@updateArea:
	mov	eax, DWORD PTR _j$55490[ebp]
	add	eax, 1
	mov	DWORD PTR _j$55490[ebp], eax
$LN21@updateArea:
	cmp	DWORD PTR _j$55490[ebp], 3
	jge	SHORT $LN19@updateArea
; Line 4652
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _j$55490[ebp]
	mov	edx, DWORD PTR _f$55489[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+8]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR _index$55494[ebp], ecx
; Line 4653
	mov	edx, DWORD PTR _index$55494[ebp]
	push	edx
	lea	ecx, DWORD PTR _counts$55481[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR tv163[ebp], eax
	mov	eax, DWORD PTR tv163[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR tv163[ebp]
	mov	DWORD PTR [edx], ecx
; Line 4654
	mov	eax, DWORD PTR _j$55490[ebp]
	mov	ecx, DWORD PTR _f$55489[ebp]
	mov	esi, DWORD PTR [ecx+eax*4+8]
	mov	edx, DWORD PTR _f$55489[ebp]
	push	ecx
	fld	DWORD PTR [edx+48]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fadd	DWORD PTR [esi+100]
	mov	eax, DWORD PTR _j$55490[ebp]
	mov	ecx, DWORD PTR _f$55489[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	fstp	DWORD PTR [edx+100]
; Line 4655
	jmp	SHORT $LN20@updateArea
$LN19@updateArea:
; Line 4656
	jmp	$LN23@updateArea
$LN22@updateArea:
; Line 4657
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN18@updateArea
$LN17@updateArea:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@updateArea:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN16@updateArea
; Line 4659
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _counts$55481[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN15@updateArea
; Line 4660
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 100				; 00000064H
	mov	DWORD PTR tv195[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _counts$55481[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	fild	DWORD PTR [eax]
	mov	edx, DWORD PTR tv195[ebp]
	fdivr	DWORD PTR [edx]
	mov	eax, DWORD PTR tv195[ebp]
	fstp	DWORD PTR [eax]
; Line 4661
	jmp	SHORT $LN14@updateArea
$LN15@updateArea:
; Line 4662
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+100]
$LN14@updateArea:
; Line 4663
	jmp	SHORT $LN17@updateArea
$LN16@updateArea:
; Line 4664
	lea	ecx, DWORD PTR _counts$55481[ebp]
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
; Line 4665
	jmp	$LN1@updateArea
$LN28@updateArea:
; Line 4668
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN12@updateArea
$LN11@updateArea:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN12@updateArea:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	SHORT $LN10@updateArea
; Line 4670
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	fldz
	fstp	DWORD PTR [eax+100]
; Line 4671
	jmp	SHORT $LN11@updateArea
$LN10@updateArea:
; Line 4673
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN9@updateArea
$LN8@updateArea:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@updateArea:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	SHORT $LN7@updateArea
; Line 4675
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$55509[ebp], eax
; Line 4677
	mov	DWORD PTR _j$55510[ebp], 0
	jmp	SHORT $LN6@updateArea
$LN5@updateArea:
	mov	edx, DWORD PTR _j$55510[ebp]
	add	edx, 1
	mov	DWORD PTR _j$55510[ebp], edx
$LN6@updateArea:
	cmp	DWORD PTR _j$55510[ebp], 3
	jge	SHORT $LN4@updateArea
; Line 4679
	mov	eax, DWORD PTR _j$55510[ebp]
	mov	ecx, DWORD PTR _f$55509[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+8]
	mov	eax, DWORD PTR _f$55509[ebp]
	fld	DWORD PTR [edx+100]
	fadd	DWORD PTR [eax+48]
	mov	ecx, DWORD PTR _j$55510[ebp]
	mov	edx, DWORD PTR _f$55509[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	fstp	DWORD PTR [eax+100]
; Line 4680
	jmp	SHORT $LN5@updateArea
$LN4@updateArea:
; Line 4681
	jmp	SHORT $LN8@updateArea
$LN7@updateArea:
; Line 4683
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN3@updateArea
$LN2@updateArea:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@updateArea:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN1@updateArea
; Line 4685
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 100				; 00000064H
	mov	DWORD PTR tv243[ebp], eax
	mov	ecx, DWORD PTR tv243[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR __real@3eaaaaaa
	mov	edx, DWORD PTR tv243[ebp]
	fstp	DWORD PTR [edx]
; Line 4686
	jmp	SHORT $LN2@updateArea
$LN1@updateArea:
; Line 4688
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@updateArea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN36@updateArea:
	DD	1
	DD	$LN35@updateArea
$LN35@updateArea:
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$LN34@updateArea
$LN34@updateArea:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?updateArea@btSoftBody@@QAEX_N@Z ENDP			; btSoftBody::updateArea
_TEXT	ENDS
PUBLIC	?updateLinkConstants@btSoftBody@@QAEXXZ		; btSoftBody::updateLinkConstants
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?updateLinkConstants@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
_m$55526 = -20						; size = 4
_l$55525 = -16						; size = 4
_ni$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?updateLinkConstants@btSoftBody@@QAEXXZ PROC		; btSoftBody::updateLinkConstants, COMDAT
; _this$ = ecx
; Line 4692
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4696
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN3@updateLink
$LN2@updateLink:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@updateLink:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN1@updateLink
; Line 4698
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$55525[ebp], eax
; Line 4699
	mov	eax, DWORD PTR _l$55525[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _m$55526[ebp], ecx
; Line 4700
	mov	edx, DWORD PTR _l$55525[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _l$55525[ebp]
	mov	edx, DWORD PTR [ecx+12]
	fld	DWORD PTR [eax+96]
	fadd	DWORD PTR [edx+96]
	mov	eax, DWORD PTR _m$55526[ebp]
	fdiv	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _l$55525[ebp]
	fstp	DWORD PTR [ecx+24]
; Line 4701
	jmp	SHORT $LN2@updateLink
$LN1@updateLink:
; Line 4702
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?updateLinkConstants@btSoftBody@@QAEXXZ ENDP		; btSoftBody::updateLinkConstants
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?updateConstants@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?updateConstants@btSoftBody@@QAEXXZ PROC		; btSoftBody::updateConstants, COMDAT
; _this$ = ecx
; Line 4705
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4706
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resetLinkRestLengths@btSoftBody@@QAEXXZ ; btSoftBody::resetLinkRestLengths
; Line 4707
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateLinkConstants@btSoftBody@@QAEXXZ	; btSoftBody::updateLinkConstants
; Line 4708
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?updateArea@btSoftBody@@QAEX_N@Z	; btSoftBody::updateArea
; Line 4709
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?updateConstants@btSoftBody@@QAEXXZ ENDP		; btSoftBody::updateConstants
_TEXT	ENDS
PUBLIC	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
PUBLIC	??D@YA?AVbtVector3@@ABV0@0@Z			; operator*
PUBLIC	__real@5d5e0b6b
PUBLIC	__$ArrayPad$
;	COMDAT __real@5d5e0b6b
CONST	SEGMENT
__real@5d5e0b6b DD 05d5e0b6br			; 1e+018
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?initializeClusters@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
tv654 = -392						; size = 4
tv295 = -388						; size = 4
tv652 = -384						; size = 4
tv279 = -380						; size = 4
tv650 = -376						; size = 4
tv264 = -372						; size = 4
tv249 = -368						; size = 4
tv233 = -364						; size = 4
tv217 = -360						; size = 4
tv648 = -356						; size = 4
$T67035 = -352						; size = 16
$T67034 = -336						; size = 4
$T67033 = -332						; size = 4
$T67032 = -328						; size = 4
$T67031 = -324						; size = 4
$T67030 = -320						; size = 4
$T67029 = -316						; size = 4
$T67028 = -312						; size = 4
$T67027 = -308						; size = 4
$T67026 = -304						; size = 4
$T67025 = -300						; size = 4
$T67024 = -296						; size = 4
$T67023 = -292						; size = 4
$T55579 = -288						; size = 16
_i$55575 = -260						; size = 4
$T55573 = -256						; size = 48
_m$55572 = -200						; size = 4
_q$55570 = -192						; size = 16
_k$55568 = -160						; size = 16
_ni$55564 = -136					; size = 4
_i$55563 = -132						; size = 4
$T55555 = -128						; size = 16
_ii$55554 = -100					; size = 4
$T55550 = -96						; size = 16
$T55546 = -80						; size = 16
$T55545 = -64						; size = 16
_j$55539 = -48						; size = 4
_c$55537 = -44						; size = 4
_i$ = -40						; size = 4
_this$ = -36						; size = 4
__$ArrayPad$ = -4					; size = 4
?initializeClusters@btSoftBody@@QAEXXZ PROC		; btSoftBody::initializeClusters, COMDAT
; _this$ = ecx
; Line 4715
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 396				; 0000018cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4718
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@initialize@2
$LN13@initialize@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN14@initialize@2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN12@initialize@2
; Line 4720
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _c$55537[ebp], edx
; Line 4721
	mov	eax, DWORD PTR _c$55537[ebp]
	fldz
	fstp	DWORD PTR [eax+132]
; Line 4722
	fldz
	fstp	DWORD PTR $T67023[ebp]
	lea	ecx, DWORD PTR $T67023[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	push	eax
	mov	ecx, DWORD PTR _c$55537[ebp]
	call	?resize@?$btAlignedObjectArray@M@@QAEXHABM@Z ; btAlignedObjectArray<float>::resize
; Line 4723
	mov	DWORD PTR _j$55539[ebp], 0
	jmp	SHORT $LN11@initialize@2
$LN10@initialize@2:
	mov	edx, DWORD PTR _j$55539[ebp]
	add	edx, 1
	mov	DWORD PTR _j$55539[ebp], edx
$LN11@initialize@2:
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _j$55539[ebp], eax
	jge	$LN9@initialize@2
; Line 4725
	mov	eax, DWORD PTR _j$55539[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR [ecx+96]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN8@initialize@2
; Line 4727
	mov	edx, DWORD PTR _c$55537[ebp]
	mov	BYTE PTR [edx+396], 1
; Line 4728
	mov	eax, DWORD PTR _j$55539[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55537[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	fld	DWORD PTR __real@5d5e0b6b
	fstp	DWORD PTR [eax]
; Line 4730
	jmp	SHORT $LN7@initialize@2
$LN8@initialize@2:
; Line 4732
	mov	ecx, DWORD PTR _j$55539[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	edx, DWORD PTR [eax]
	fld1
	fdiv	DWORD PTR [edx+96]
	mov	eax, DWORD PTR _j$55539[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55537[ebp]
	fstp	DWORD PTR tv648[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	fld	DWORD PTR tv648[ebp]
	fstp	DWORD PTR [eax]
$LN7@initialize@2:
; Line 4734
	mov	ecx, DWORD PTR _j$55539[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55537[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	edx, DWORD PTR _c$55537[ebp]
	fld	DWORD PTR [edx+132]
	fadd	DWORD PTR [eax]
	mov	eax, DWORD PTR _c$55537[ebp]
	fstp	DWORD PTR [eax+132]
; Line 4735
	jmp	$LN10@initialize@2
$LN9@initialize@2:
; Line 4736
	mov	ecx, DWORD PTR _c$55537[ebp]
	fld1
	fdiv	DWORD PTR [ecx+132]
	mov	edx, DWORD PTR _c$55537[ebp]
	fstp	DWORD PTR [edx+132]
; Line 4737
	mov	eax, DWORD PTR _c$55537[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55545[ebp]
	push	ecx
	call	?clusterCom@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@@Z ; btSoftBody::clusterCom
	add	esp, 8
	mov	edx, DWORD PTR _c$55537[ebp]
	add	edx, 240				; 000000f0H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 4738
	fldz
	fstp	DWORD PTR $T67024[ebp]
	fldz
	fstp	DWORD PTR $T67025[ebp]
	fldz
	fstp	DWORD PTR $T67026[ebp]
	lea	ecx, DWORD PTR $T67024[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67025[ebp]
	push	edx
	lea	eax, DWORD PTR $T67026[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55546[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 336				; 00000150H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4739
	fldz
	fstp	DWORD PTR $T67027[ebp]
	fldz
	fstp	DWORD PTR $T67028[ebp]
	fldz
	fstp	DWORD PTR $T67029[ebp]
	lea	ecx, DWORD PTR $T67027[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67028[ebp]
	push	edx
	lea	eax, DWORD PTR $T67029[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55550[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 352				; 00000160H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4740
	mov	ecx, DWORD PTR _c$55537[ebp]
	mov	DWORD PTR [ecx+368], 0
; Line 4742
	mov	edx, DWORD PTR _c$55537[ebp]
	add	edx, 144				; 00000090H
	mov	DWORD PTR _ii$55554[ebp], edx
; Line 4743
	fldz
	fstp	DWORD PTR $T67032[ebp]
	fldz
	fstp	DWORD PTR $T67033[ebp]
	fldz
	fstp	DWORD PTR $T67034[ebp]
	push	2
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	DWORD PTR $T67031[ebp], eax
	lea	eax, DWORD PTR $T67032[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67033[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67034[ebp]
	push	edx
	lea	ecx, DWORD PTR $T55555[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR $T67031[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	1
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	DWORD PTR $T67030[ebp], eax
	mov	ecx, DWORD PTR $T67031[ebp]
	mov	edx, DWORD PTR $T67030[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	esi, DWORD PTR $T67030[ebp]
	push	0
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
; Line 4747
	mov	DWORD PTR _i$55563[ebp], 0
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	mov	DWORD PTR _ni$55564[ebp], eax
	jmp	SHORT $LN6@initialize@2
$LN5@initialize@2:
	mov	edx, DWORD PTR _i$55563[ebp]
	add	edx, 1
	mov	DWORD PTR _i$55563[ebp], edx
$LN6@initialize@2:
	mov	eax, DWORD PTR _i$55563[ebp]
	cmp	eax, DWORD PTR _ni$55564[ebp]
	jge	$LN4@initialize@2
; Line 4749
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 240				; 000000f0H
	push	ecx
	mov	edx, DWORD PTR _i$55563[ebp]
	push	edx
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _k$55568[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 4750
	lea	edx, DWORD PTR _k$55568[ebp]
	push	edx
	lea	eax, DWORD PTR _k$55568[ebp]
	push	eax
	lea	ecx, DWORD PTR _q$55570[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 4751
	mov	edx, DWORD PTR _i$55563[ebp]
	push	edx
	mov	ecx, DWORD PTR _c$55537[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _m$55572[ebp]
; Line 4752
	push	0
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	mov	DWORD PTR tv217[ebp], eax
	lea	ecx, DWORD PTR _q$55570[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	mov	esi, eax
	lea	ecx, DWORD PTR _q$55570[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	fld	DWORD PTR [esi+4]
	fadd	DWORD PTR [eax+8]
	fmul	DWORD PTR _m$55572[ebp]
	mov	eax, DWORD PTR tv217[ebp]
	fadd	DWORD PTR [eax]
	mov	ecx, DWORD PTR tv217[ebp]
	fstp	DWORD PTR [ecx]
; Line 4753
	push	1
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	add	eax, 4
	mov	DWORD PTR tv233[ebp], eax
	lea	ecx, DWORD PTR _q$55570[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	mov	esi, eax
	lea	ecx, DWORD PTR _q$55570[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	fld	DWORD PTR [esi]
	fadd	DWORD PTR [eax+8]
	fmul	DWORD PTR _m$55572[ebp]
	mov	edx, DWORD PTR tv233[ebp]
	fadd	DWORD PTR [edx]
	mov	eax, DWORD PTR tv233[ebp]
	fstp	DWORD PTR [eax]
; Line 4754
	push	2
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	add	eax, 8
	mov	DWORD PTR tv249[ebp], eax
	lea	ecx, DWORD PTR _q$55570[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	mov	esi, eax
	lea	ecx, DWORD PTR _q$55570[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	fld	DWORD PTR [esi]
	fadd	DWORD PTR [eax+4]
	fmul	DWORD PTR _m$55572[ebp]
	mov	ecx, DWORD PTR tv249[ebp]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR tv249[ebp]
	fstp	DWORD PTR [edx]
; Line 4755
	push	0
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	add	eax, 4
	mov	DWORD PTR tv264[ebp], eax
	lea	ecx, DWORD PTR _k$55568[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	fld	DWORD PTR _m$55572[ebp]
	fmul	DWORD PTR [eax]
	lea	ecx, DWORD PTR _k$55568[ebp]
	fstp	DWORD PTR tv650[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	fld	DWORD PTR tv650[ebp]
	fmul	DWORD PTR [eax+4]
	mov	eax, DWORD PTR tv264[ebp]
	fsubr	DWORD PTR [eax]
	mov	ecx, DWORD PTR tv264[ebp]
	fstp	DWORD PTR [ecx]
; Line 4756
	push	0
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	add	eax, 8
	mov	DWORD PTR tv279[ebp], eax
	lea	ecx, DWORD PTR _k$55568[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	fld	DWORD PTR _m$55572[ebp]
	fmul	DWORD PTR [eax]
	lea	ecx, DWORD PTR _k$55568[ebp]
	fstp	DWORD PTR tv652[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	fld	DWORD PTR tv652[ebp]
	fmul	DWORD PTR [eax+8]
	mov	edx, DWORD PTR tv279[ebp]
	fsubr	DWORD PTR [edx]
	mov	eax, DWORD PTR tv279[ebp]
	fstp	DWORD PTR [eax]
; Line 4757
	push	1
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	add	eax, 8
	mov	DWORD PTR tv295[ebp], eax
	lea	ecx, DWORD PTR _k$55568[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	fld	DWORD PTR _m$55572[ebp]
	fmul	DWORD PTR [eax+4]
	lea	ecx, DWORD PTR _k$55568[ebp]
	fstp	DWORD PTR tv654[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	fld	DWORD PTR tv654[ebp]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR tv295[ebp]
	fsubr	DWORD PTR [ecx]
	mov	edx, DWORD PTR tv295[ebp]
	fstp	DWORD PTR [edx]
; Line 4758
	jmp	$LN5@initialize@2
$LN4@initialize@2:
; Line 4760
	push	0
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	mov	esi, eax
	push	1
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [esi+4]
	fstp	DWORD PTR [eax]
; Line 4761
	push	0
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [esi+8]
	fstp	DWORD PTR [eax]
; Line 4762
	push	1
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	mov	esi, eax
	push	2
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [esi+8]
	fstp	DWORD PTR [eax+4]
; Line 4764
	lea	eax, DWORD PTR $T55573[ebp]
	push	eax
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	?inverse@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::inverse
	push	eax
	mov	ecx, DWORD PTR _ii$55554[ebp]
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 4767
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 64					; 00000040H
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 4768
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 240				; 000000f0H
	push	ecx
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 64					; 00000040H
	call	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ; btTransform::setOrigin
; Line 4769
	lea	ecx, DWORD PTR $T67035[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	push	eax
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	push	eax
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 40					; 00000028H
	call	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
; Line 4772
	mov	DWORD PTR _i$55575[ebp], 0
	jmp	SHORT $LN3@initialize@2
$LN2@initialize@2:
	mov	edx, DWORD PTR _i$55575[ebp]
	add	edx, 1
	mov	DWORD PTR _i$55575[ebp], edx
$LN3@initialize@2:
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 40					; 00000028H
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	cmp	DWORD PTR _i$55575[ebp], eax
	jge	SHORT $LN1@initialize@2
; Line 4774
	mov	eax, DWORD PTR _c$55537[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	mov	ecx, DWORD PTR _i$55575[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	edx, DWORD PTR [eax]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T55579[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	ecx, DWORD PTR _i$55575[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55537[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
; Line 4775
	jmp	SHORT $LN2@initialize@2
$LN1@initialize@2:
; Line 4777
	jmp	$LN13@initialize@2
$LN12@initialize@2:
; Line 4778
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@initialize@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN20@initialize@2:
	DD	2
	DD	$LN19@initialize@2
$LN19@initialize@2:
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN17@initialize@2
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN18@initialize@2
$LN18@initialize@2:
	DB	113					; 00000071H
	DB	0
$LN17@initialize@2:
	DB	107					; 0000006bH
	DB	0
?initializeClusters@btSoftBody@@QAEXXZ ENDP		; btSoftBody::initializeClusters
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??D@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T67046 = -12						; size = 4
$T67045 = -8						; size = 4
$T67044 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??D@YA?AVbtVector3@@ABV0@0@Z PROC			; operator*, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 769
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 778
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T67044[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+4]
	fstp	DWORD PTR $T67045[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx]
	fstp	DWORD PTR $T67046[ebp]
	lea	eax, DWORD PTR $T67044[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67045[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67046[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 780
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	??1CProfileSample@@QAE@XZ			; CProfileSample::~CProfileSample
PUBLIC	?FromMM@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z	; btDbvtAabbMm::FromMM
PUBLIC	?setBasis@btTransform@@QAEXABVbtMatrix3x3@@@Z	; btTransform::setBasis
PUBLIC	__real@38d1b717
PUBLIC	??0CProfileSample@@QAE@PBD@Z			; CProfileSample::CProfileSample
PUBLIC	__$ArrayPad$
;	COMDAT __real@38d1b717
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?updateClusters@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
tv911 = -1036						; size = 4
tv909 = -1032						; size = 4
tv907 = -1028						; size = 4
$T67069 = -1024						; size = 4
$T67068 = -1020						; size = 4
$T67067 = -1016						; size = 4
$T67066 = -1012						; size = 4
$T67065 = -1008						; size = 4
$T67064 = -1004						; size = 4
$T67063 = -1000						; size = 4
$T67062 = -996						; size = 4
$T67061 = -992						; size = 4
$T67060 = -988						; size = 4
$T67059 = -984						; size = 4
$T67058 = -980						; size = 4
$T67057 = -976						; size = 4
$T67056 = -972						; size = 4
$T67055 = -968						; size = 4
$T67054 = -964						; size = 4
$T67053 = -960						; size = 4
$T67052 = -956						; size = 4
$T67051 = -952						; size = 4
$T67050 = -948						; size = 4
$T55669 = -944						; size = 16
$T55667 = -928						; size = 16
_bounds$55664 = -896					; size = 32
_j$55660 = -856						; size = 4
_mx$55659 = -848					; size = 16
_mi$55658 = -816					; size = 16
$T55656 = -784						; size = 16
_x$55654 = -752						; size = 16
_n$55653 = -728						; size = 4
_j$55649 = -724						; size = 4
$T55644 = -720						; size = 16
$T55640 = -704						; size = 16
$T55639 = -688						; size = 16
$T55637 = -672						; size = 16
$T55636 = -656						; size = 16
$T55634 = -640						; size = 16
$T55633 = -624						; size = 16
$T55632 = -608						; size = 16
_v$55630 = -576						; size = 16
_i$55626 = -548						; size = 4
$T55622 = -544						; size = 16
$T55618 = -528						; size = 16
$T55617 = -512						; size = 48
$T55616 = -464						; size = 48
$T55615 = -416						; size = 48
$T55614 = -368						; size = 16
$T55613 = -352						; size = 16
$T55612 = -336						; size = 16
_b$55611 = -312						; size = 4
_a$55609 = -304						; size = 16
_i$55605 = -276						; size = 4
$T55604 = -272						; size = 16
$T55596 = -256						; size = 16
_s$55595 = -224						; size = 48
_r$55594 = -160						; size = 48
_m$55593 = -96						; size = 48
_eps$55592 = -36					; size = 4
_n$55590 = -32						; size = 4
_c$55589 = -28						; size = 4
_i$ = -24						; size = 4
___profile$ = -13					; size = 1
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?updateClusters@btSoftBody@@QAEXXZ PROC			; btSoftBody::updateClusters, COMDAT
; _this$ = ecx
; Line 4782
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 1036				; 0000040cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1036]
	mov	ecx, 259				; 00000103H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4783
	push	OFFSET $SG55584
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??0CProfileSample@@QAE@PBD@Z		; CProfileSample::CProfileSample
; Line 4786
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN20@updateClus
$LN19@updateClus:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN20@updateClus:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN18@updateClus
; Line 4788
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _c$55589[ebp], edx
; Line 4789
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	mov	DWORD PTR _n$55590[ebp], eax
; Line 4791
	cmp	DWORD PTR _n$55590[ebp], 0
	je	$LN1@updateClus
; Line 4794
	fld	DWORD PTR __real@38d1b717
	fstp	DWORD PTR _eps$55592[ebp]
; Line 4795
	lea	ecx, DWORD PTR _m$55593[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	lea	ecx, DWORD PTR _r$55594[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	lea	ecx, DWORD PTR _s$55595[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
; Line 4796
	fldz
	fstp	DWORD PTR $T67052[ebp]
	fldz
	fstp	DWORD PTR $T67053[ebp]
	fldz
	fstp	DWORD PTR $T67054[ebp]
	push	2
	lea	ecx, DWORD PTR _m$55593[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	DWORD PTR $T67051[ebp], eax
	lea	eax, DWORD PTR $T67052[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67053[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67054[ebp]
	push	edx
	lea	ecx, DWORD PTR $T55596[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR $T67051[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	push	1
	lea	ecx, DWORD PTR _m$55593[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	DWORD PTR $T67050[ebp], eax
	mov	ecx, DWORD PTR $T67051[ebp]
	mov	edx, DWORD PTR $T67050[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	esi, DWORD PTR $T67050[ebp]
	push	0
	lea	ecx, DWORD PTR _m$55593[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
; Line 4797
	fld	DWORD PTR _eps$55592[ebp]
	fmul	DWORD PTR __real@3f800000
	push	0
	lea	ecx, DWORD PTR _m$55593[ebp]
	fstp	DWORD PTR tv907[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR tv907[ebp]
	fstp	DWORD PTR [eax]
; Line 4798
	fld	DWORD PTR _eps$55592[ebp]
	fadd	ST(0), ST(0)
	push	1
	lea	ecx, DWORD PTR _m$55593[ebp]
	fstp	DWORD PTR tv909[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR tv909[ebp]
	fstp	DWORD PTR [eax+4]
; Line 4799
	fld	DWORD PTR _eps$55592[ebp]
	fmul	DWORD PTR __real@40400000
	push	2
	lea	ecx, DWORD PTR _m$55593[ebp]
	fstp	DWORD PTR tv911[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR tv911[ebp]
	fstp	DWORD PTR [eax+8]
; Line 4800
	mov	edx, DWORD PTR _c$55589[ebp]
	push	edx
	lea	eax, DWORD PTR $T55604[ebp]
	push	eax
	call	?clusterCom@btSoftBody@@SA?AVbtVector3@@PBUCluster@1@@Z ; btSoftBody::clusterCom
	add	esp, 8
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 240				; 000000f0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4801
	mov	DWORD PTR _i$55605[ebp], 0
	jmp	SHORT $LN16@updateClus
$LN15@updateClus:
	mov	ecx, DWORD PTR _i$55605[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$55605[ebp], ecx
$LN16@updateClus:
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _i$55605[ebp], eax
	jge	$LN14@updateClus
; Line 4803
	mov	edx, DWORD PTR _c$55589[ebp]
	add	edx, 240				; 000000f0H
	push	edx
	mov	eax, DWORD PTR _i$55605[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _a$55609[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 4804
	mov	eax, DWORD PTR _i$55605[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	DWORD PTR _b$55611[ebp], eax
; Line 4805
	mov	ecx, DWORD PTR _b$55611[ebp]
	push	ecx
	lea	ecx, DWORD PTR _a$55609[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	push	eax
	lea	edx, DWORD PTR $T55612[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	lea	ecx, DWORD PTR _m$55593[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
	mov	eax, DWORD PTR _b$55611[ebp]
	push	eax
	lea	ecx, DWORD PTR _a$55609[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR $T55613[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	1
	lea	ecx, DWORD PTR _m$55593[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
	mov	edx, DWORD PTR _b$55611[ebp]
	push	edx
	lea	ecx, DWORD PTR _a$55609[ebp]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	add	eax, 8
	push	eax
	lea	eax, DWORD PTR $T55614[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	push	2
	lea	ecx, DWORD PTR _m$55593[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4806
	jmp	$LN15@updateClus
$LN14@updateClus:
; Line 4807
	lea	ecx, DWORD PTR _s$55595[ebp]
	push	ecx
	lea	edx, DWORD PTR _r$55594[ebp]
	push	edx
	lea	eax, DWORD PTR _m$55593[ebp]
	push	eax
	call	?PolarDecompose@@YAHABVbtMatrix3x3@@AAV1@1@Z ; PolarDecompose
	add	esp, 12					; 0000000cH
; Line 4808
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 240				; 000000f0H
	push	ecx
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 64					; 00000040H
	call	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ; btTransform::setOrigin
; Line 4809
	lea	edx, DWORD PTR _r$55594[ebp]
	push	edx
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 64					; 00000040H
	call	?setBasis@btTransform@@QAEXABVbtMatrix3x3@@@Z ; btTransform::setBasis
; Line 4812
	lea	eax, DWORD PTR $T55616[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 64					; 00000040H
	call	?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ; btTransform::getBasis
	mov	ecx, eax
	call	?transpose@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::transpose
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 64					; 00000040H
	call	?getBasis@btTransform@@QAEAAVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	edx, DWORD PTR $T55615[ebp]
	push	edx
	call	??D@YA?AVbtMatrix3x3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T55617[ebp]
	push	eax
	call	??D@YA?AVbtMatrix3x3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 192				; 000000c0H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 4843
	fldz
	fstp	DWORD PTR $T67055[ebp]
	fldz
	fstp	DWORD PTR $T67056[ebp]
	fldz
	fstp	DWORD PTR $T67057[ebp]
	lea	ecx, DWORD PTR $T67055[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67056[ebp]
	push	edx
	lea	eax, DWORD PTR $T67057[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55618[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 336				; 00000150H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4844
	fldz
	fstp	DWORD PTR $T67058[ebp]
	fldz
	fstp	DWORD PTR $T67059[ebp]
	fldz
	fstp	DWORD PTR $T67060[ebp]
	lea	ecx, DWORD PTR $T67058[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67059[ebp]
	push	edx
	lea	eax, DWORD PTR $T67060[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55622[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 352				; 00000160H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4848
	mov	DWORD PTR _i$55626[ebp], 0
	jmp	SHORT $LN13@updateClus
$LN12@updateClus:
	mov	ecx, DWORD PTR _i$55626[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$55626[ebp], ecx
$LN13@updateClus:
	mov	edx, DWORD PTR _i$55626[ebp]
	cmp	edx, DWORD PTR _n$55590[ebp]
	jge	$LN11@updateClus
; Line 4850
	mov	eax, DWORD PTR _i$55626[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$55626[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	edx, DWORD PTR [eax]
	add	edx, 48					; 00000030H
	push	edx
	lea	eax, DWORD PTR _v$55630[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 4851
	lea	ecx, DWORD PTR _v$55630[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 336				; 00000150H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4852
	lea	edx, DWORD PTR _v$55630[ebp]
	push	edx
	mov	eax, DWORD PTR _c$55589[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	mov	ecx, DWORD PTR _i$55626[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	edx, DWORD PTR [eax]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T55632[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55633[ebp]
	push	ecx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 352				; 00000160H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4853
	jmp	$LN12@updateClus
$LN11@updateClus:
; Line 4855
	mov	edx, DWORD PTR _c$55589[ebp]
	fld1
	fsub	DWORD PTR [edx+376]
	fstp	DWORD PTR $T67061[ebp]
	lea	eax, DWORD PTR $T67061[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 336				; 00000150H
	push	ecx
	mov	edx, DWORD PTR _c$55589[ebp]
	add	edx, 132				; 00000084H
	push	edx
	lea	eax, DWORD PTR $T55634[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55636[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _c$55589[ebp]
	add	edx, 336				; 00000150H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 4856
	mov	ecx, DWORD PTR _c$55589[ebp]
	fld1
	fsub	DWORD PTR [ecx+380]
	fstp	DWORD PTR $T67062[ebp]
	lea	edx, DWORD PTR $T67062[ebp]
	push	edx
	mov	eax, DWORD PTR _c$55589[ebp]
	add	eax, 352				; 00000160H
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	lea	edx, DWORD PTR $T55637[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T55639[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 352				; 00000160H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 4858
	fldz
	fstp	DWORD PTR $T67063[ebp]
	fldz
	fstp	DWORD PTR $T67064[ebp]
	fldz
	fstp	DWORD PTR $T67065[ebp]
	lea	ecx, DWORD PTR $T67063[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67064[ebp]
	push	edx
	lea	eax, DWORD PTR $T67065[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55640[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 272				; 00000110H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 272				; 00000110H
	mov	edx, DWORD PTR _c$55589[ebp]
	add	edx, 256				; 00000100H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 4860
	fldz
	fstp	DWORD PTR $T67066[ebp]
	fldz
	fstp	DWORD PTR $T67067[ebp]
	fldz
	fstp	DWORD PTR $T67068[ebp]
	lea	edx, DWORD PTR $T67066[ebp]
	push	edx
	lea	eax, DWORD PTR $T67067[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67068[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T55644[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	edx, DWORD PTR _c$55589[ebp]
	add	edx, 304				; 00000130H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 304				; 00000130H
	mov	edx, DWORD PTR _c$55589[ebp]
	add	edx, 288				; 00000120H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 4861
	mov	edx, DWORD PTR _c$55589[ebp]
	mov	DWORD PTR [edx+320], 0
; Line 4862
	mov	eax, DWORD PTR _c$55589[ebp]
	mov	DWORD PTR [eax+324], 0
; Line 4864
	mov	ecx, DWORD PTR _c$55589[ebp]
	fldz
	fcomp	DWORD PTR [ecx+384]
	fnstsw	ax
	test	ah, 5
	jp	$LN7@updateClus
; Line 4866
	mov	DWORD PTR _j$55649[ebp], 0
	jmp	SHORT $LN9@updateClus
$LN8@updateClus:
	mov	edx, DWORD PTR _j$55649[ebp]
	add	edx, 1
	mov	DWORD PTR _j$55649[ebp], edx
$LN9@updateClus:
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _j$55649[ebp], eax
	jge	$LN7@updateClus
; Line 4868
	mov	eax, DWORD PTR _j$55649[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _n$55653[ebp], ecx
; Line 4869
	mov	edx, DWORD PTR _j$55649[ebp]
	push	edx
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	lea	eax, DWORD PTR _x$55654[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 64					; 00000040H
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 4870
	mov	ecx, DWORD PTR _c$55589[ebp]
	push	ecx
	fld	DWORD PTR [ecx+384]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _x$55654[ebp]
	push	edx
	mov	eax, DWORD PTR _n$55653[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T55656[ebp]
	push	ecx
	call	??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ; Lerp<btVector3>
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _n$55653[ebp]
	add	edx, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 4871
	jmp	$LN8@updateClus
$LN7@updateClus:
; Line 4874
	mov	ecx, DWORD PTR _c$55589[ebp]
	movzx	edx, BYTE PTR [ecx+397]
	test	edx, edx
	je	$LN1@updateClus
; Line 4876
	push	0
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _mi$55658[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _mi$55658[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _mi$55658[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _mi$55658[ebp+12], edx
; Line 4877
	mov	eax, DWORD PTR _mi$55658[ebp]
	mov	DWORD PTR _mx$55659[ebp], eax
	mov	ecx, DWORD PTR _mi$55658[ebp+4]
	mov	DWORD PTR _mx$55659[ebp+4], ecx
	mov	edx, DWORD PTR _mi$55658[ebp+8]
	mov	DWORD PTR _mx$55659[ebp+8], edx
	mov	eax, DWORD PTR _mi$55658[ebp+12]
	mov	DWORD PTR _mx$55659[ebp+12], eax
; Line 4878
	mov	DWORD PTR _j$55660[ebp], 1
	jmp	SHORT $LN5@updateClus
$LN4@updateClus:
	mov	ecx, DWORD PTR _j$55660[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$55660[ebp], ecx
$LN5@updateClus:
	mov	edx, DWORD PTR _j$55660[ebp]
	cmp	edx, DWORD PTR _n$55590[ebp]
	jge	SHORT $LN3@updateClus
; Line 4880
	mov	eax, DWORD PTR _j$55660[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	ecx, DWORD PTR _mi$55658[ebp]
	call	?setMin@btVector3@@QAEXABV1@@Z		; btVector3::setMin
; Line 4881
	mov	edx, DWORD PTR _j$55660[ebp]
	push	edx
	mov	ecx, DWORD PTR _c$55589[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _mx$55659[ebp]
	call	?setMax@btVector3@@QAEXABV1@@Z		; btVector3::setMax
; Line 4882
	jmp	SHORT $LN4@updateClus
$LN3@updateClus:
; Line 4883
	lea	ecx, DWORD PTR _mx$55659[ebp]
	push	ecx
	lea	edx, DWORD PTR _mi$55658[ebp]
	push	edx
	lea	eax, DWORD PTR _bounds$55664[ebp]
	push	eax
	call	?FromMM@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z ; btDbvtAabbMm::FromMM
	add	esp, 12					; 0000000cH
; Line 4884
	mov	ecx, DWORD PTR _c$55589[ebp]
	cmp	DWORD PTR [ecx+368], 0
	je	SHORT $LN2@updateClus
; Line 4885
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T67069[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+488]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T67069[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 476				; 000001dcH
	push	ecx
	mov	edx, DWORD PTR _c$55589[ebp]
	add	edx, 336				; 00000150H
	push	edx
	lea	eax, DWORD PTR $T55667[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55669[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _bounds$55664[ebp]
	push	edx
	mov	eax, DWORD PTR _c$55589[ebp]
	mov	ecx, DWORD PTR [eax+368]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1084				; 0000043cH
	call	?update@btDbvt@@QAE_NPAUbtDbvtNode@@AAUbtDbvtAabbMm@@ABVbtVector3@@M@Z ; btDbvt::update
; Line 4886
	jmp	SHORT $LN1@updateClus
$LN2@updateClus:
; Line 4887
	mov	edx, DWORD PTR _c$55589[ebp]
	push	edx
	lea	eax, DWORD PTR _bounds$55664[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1084				; 0000043cH
	call	?insert@btDbvt@@QAEPAUbtDbvtNode@@ABUbtDbvtAabbMm@@PAX@Z ; btDbvt::insert
	mov	ecx, DWORD PTR _c$55589[ebp]
	mov	DWORD PTR [ecx+368], eax
$LN1@updateClus:
; Line 4890
	jmp	$LN19@updateClus
$LN18@updateClus:
; Line 4893
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??1CProfileSample@@QAE@XZ		; CProfileSample::~CProfileSample
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@updateClus
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN34@updateClus:
	DD	10					; 0000000aH
	DD	$LN33@updateClus
$LN33@updateClus:
	DD	-13					; fffffff3H
	DD	1
	DD	$LN23@updateClus
	DD	-96					; ffffffa0H
	DD	48					; 00000030H
	DD	$LN24@updateClus
	DD	-160					; ffffff60H
	DD	48					; 00000030H
	DD	$LN25@updateClus
	DD	-224					; ffffff20H
	DD	48					; 00000030H
	DD	$LN26@updateClus
	DD	-304					; fffffed0H
	DD	16					; 00000010H
	DD	$LN27@updateClus
	DD	-576					; fffffdc0H
	DD	16					; 00000010H
	DD	$LN28@updateClus
	DD	-752					; fffffd10H
	DD	16					; 00000010H
	DD	$LN29@updateClus
	DD	-816					; fffffcd0H
	DD	16					; 00000010H
	DD	$LN30@updateClus
	DD	-848					; fffffcb0H
	DD	16					; 00000010H
	DD	$LN31@updateClus
	DD	-896					; fffffc80H
	DD	32					; 00000020H
	DD	$LN32@updateClus
$LN32@updateClus:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN31@updateClus:
	DB	109					; 0000006dH
	DB	120					; 00000078H
	DB	0
$LN30@updateClus:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
$LN29@updateClus:
	DB	120					; 00000078H
	DB	0
$LN28@updateClus:
	DB	118					; 00000076H
	DB	0
$LN27@updateClus:
	DB	97					; 00000061H
	DB	0
$LN26@updateClus:
	DB	115					; 00000073H
	DB	0
$LN25@updateClus:
	DB	114					; 00000072H
	DB	0
$LN24@updateClus:
	DB	109					; 0000006dH
	DB	0
$LN23@updateClus:
	DB	95					; 0000005fH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?updateClusters@btSoftBody@@QAEXXZ ENDP			; btSoftBody::updateClusters
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setBasis@btTransform@@QAEXABVbtMatrix3x3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_basis$ = 8						; size = 4
?setBasis@btTransform@@QAEXABVbtMatrix3x3@@@Z PROC	; btTransform::setBasis, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 160
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 161
	mov	eax, DWORD PTR _basis$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 162
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setBasis@btTransform@@QAEXABVbtMatrix3x3@@@Z ENDP	; btTransform::setBasis
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?FromMM@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z
_TEXT	SEGMENT
_box$ = -48						; size = 32
___$ReturnUdt$ = 8					; size = 4
_mi$ = 12						; size = 4
_mx$ = 16						; size = 4
?FromMM@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z PROC	; btDbvtAabbMm::FromMM, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 412
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 413
	lea	ecx, DWORD PTR _box$[ebp]
	call	??0btDbvtAabbMm@@QAE@XZ
; Line 414
	mov	eax, DWORD PTR _mi$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _box$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _box$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _box$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _box$[ebp+12], edx
	mov	eax, DWORD PTR _mx$[ebx]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _box$[ebp+16], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _box$[ebp+20], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _box$[ebp+24], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _box$[ebp+28], edx
; Line 415
	mov	ecx, 8
	lea	esi, DWORD PTR _box$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 416
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@FromMM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN5@FromMM:
	DD	1
	DD	$LN4@FromMM
$LN4@FromMM:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN3@FromMM
$LN3@FromMM:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	0
?FromMM@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z ENDP	; btDbvtAabbMm::FromMM
_TEXT	ENDS
EXTRN	?Start_Profile@CProfileManager@@SAXPBD@Z:PROC	; CProfileManager::Start_Profile
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProfileSample@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_name$ = 8						; size = 4
??0CProfileSample@@QAE@PBD@Z PROC			; CProfileSample::CProfileSample, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btquickprof.h
; Line 179
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 181
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?Start_Profile@CProfileManager@@SAXPBD@Z ; CProfileManager::Start_Profile
	add	esp, 4
; Line 182
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProfileSample@@QAE@PBD@Z ENDP			; CProfileSample::CProfileSample
_TEXT	ENDS
EXTRN	?Stop_Profile@CProfileManager@@SAXXZ:PROC	; CProfileManager::Stop_Profile
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProfileSample@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProfileSample@@QAE@XZ PROC				; CProfileSample::~CProfileSample, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	call	?Stop_Profile@CProfileManager@@SAXXZ	; CProfileManager::Stop_Profile
; Line 187
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProfileSample@@QAE@XZ ENDP				; CProfileSample::~CProfileSample
_TEXT	ENDS
PUBLIC	?remove@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::remove
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?cleanupClusters@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
tv131 = -16						; size = 4
tv75 = -12						; size = 4
_i$55674 = -8						; size = 4
_this$ = -4						; size = 4
?cleanupClusters@btSoftBody@@QAEXXZ PROC		; btSoftBody::cleanupClusters, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 4900
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4901
	mov	DWORD PTR _i$55674[ebp], 0
	jmp	SHORT $LN4@cleanupClu
$LN3@cleanupClu:
	mov	eax, DWORD PTR _i$55674[ebp]
	add	eax, 1
	mov	DWORD PTR _i$55674[ebp], eax
$LN4@cleanupClu:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	cmp	DWORD PTR _i$55674[ebp], eax
	jge	$LN2@cleanupClu
; Line 4903
	mov	ecx, DWORD PTR _i$55674[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv75[ebp], edx
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+476]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4904
	mov	ecx, DWORD PTR _i$55674[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	edx, DWORD PTR [eax]
	movzx	eax, BYTE PTR [edx+176]
	test	eax, eax
	je	SHORT $LN1@cleanupClu
; Line 4906
	mov	ecx, DWORD PTR _i$55674[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 4907
	mov	eax, DWORD PTR _i$55674[ebp]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR _i$55674[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$55674[ebp], ecx
	mov	edx, DWORD PTR tv131[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?remove@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::remove
$LN1@cleanupClu:
; Line 4909
	jmp	$LN3@cleanupClu
$LN2@cleanupClu:
; Line 4910
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?cleanupClusters@btSoftBody@@QAEXXZ ENDP		; btSoftBody::cleanupClusters
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?prepareClusters@btSoftBody@@QAEXH@Z
_TEXT	SEGMENT
tv75 = -12						; size = 4
_i$55683 = -8						; size = 4
_this$ = -4						; size = 4
_iterations$ = 8					; size = 4
?prepareClusters@btSoftBody@@QAEXH@Z PROC		; btSoftBody::prepareClusters, COMDAT
; _this$ = ecx
; Line 4914
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 4915
	mov	DWORD PTR _i$55683[ebp], 0
	jmp	SHORT $LN3@prepareClu
$LN2@prepareClu:
	mov	eax, DWORD PTR _i$55683[ebp]
	add	eax, 1
	mov	DWORD PTR _i$55683[ebp], eax
$LN3@prepareClu:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	cmp	DWORD PTR _i$55683[ebp], eax
	jge	SHORT $LN1@prepareClu
; Line 4917
	mov	ecx, DWORD PTR _i$55683[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR tv75[ebp], edx
	mov	esi, esp
	mov	eax, DWORD PTR _iterations$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+476]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4918
	jmp	SHORT $LN2@prepareClu
$LN1@prepareClu:
; Line 4919
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?prepareClusters@btSoftBody@@QAEXH@Z ENDP		; btSoftBody::prepareClusters
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?solveClusters@btSoftBody@@QAEXM@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
_ni$55692 = -12						; size = 4
_i$55691 = -8						; size = 4
_this$ = -4						; size = 4
_sor$ = 8						; size = 4
?solveClusters@btSoftBody@@QAEXM@Z PROC			; btSoftBody::solveClusters, COMDAT
; _this$ = ecx
; Line 4924
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 4925
	mov	DWORD PTR _i$55691[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	mov	DWORD PTR _ni$55692[ebp], eax
	jmp	SHORT $LN3@solveClust@2
$LN2@solveClust@2:
	mov	eax, DWORD PTR _i$55691[ebp]
	add	eax, 1
	mov	DWORD PTR _i$55691[ebp], eax
$LN3@solveClust@2:
	mov	ecx, DWORD PTR _i$55691[ebp]
	cmp	ecx, DWORD PTR _ni$55692[ebp]
	jge	SHORT $LN1@solveClust@2
; Line 4927
	mov	edx, DWORD PTR _i$55691[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv75[ebp], eax
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _sor$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+476]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR tv75[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv75[ebp]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 4928
	jmp	SHORT $LN2@solveClust@2
$LN1@solveClust@2:
; Line 4929
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?solveClusters@btSoftBody@@QAEXM@Z ENDP			; btSoftBody::solveClusters
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?applyClusters@btSoftBody@@QAEX_N@Z
_TEXT	SEGMENT
tv235 = -320						; size = 4
tv185 = -316						; size = 4
tv173 = -312						; size = 4
tv161 = -308						; size = 4
$T67114 = -304						; size = 4
$T67111 = -300						; size = 4
$T67108 = -296						; size = 4
$T67107 = -292						; size = 4
$T67106 = -288						; size = 4
$T67105 = -284						; size = 4
$T67104 = -280						; size = 4
$T67103 = -276						; size = 4
$T55792 = -272						; size = 16
$T55787 = -256						; size = 16
$T55786 = -240						; size = 16
$T55785 = -224						; size = 16
$T55784 = -208						; size = 16
_q$55783 = -184						; size = 4
_x$55782 = -176						; size = 4
_idx$55781 = -172					; size = 4
_j$55777 = -168						; size = 4
_w$55752 = -160						; size = 16
_v$55727 = -128						; size = 16
_c$55725 = -108						; size = 4
_c$55716 = -104						; size = 4
_i$ = -100						; size = 4
$T55706 = -96						; size = 16
_weights$ = -68						; size = 20
_deltas$ = -40						; size = 20
___profile$ = -9					; size = 1
_this$ = -4						; size = 4
_drift$ = 8						; size = 1
?applyClusters@btSoftBody@@QAEX_N@Z PROC		; btSoftBody::applyClusters, COMDAT
; _this$ = ecx
; Line 4933
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4934
	push	OFFSET $SG55701
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??0CProfileSample@@QAE@PBD@Z		; CProfileSample::CProfileSample
; Line 4937
	lea	ecx, DWORD PTR _deltas$[ebp]
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
; Line 4938
	lea	ecx, DWORD PTR _weights$[ebp]
	call	??0?$btAlignedObjectArray@M@@QAE@XZ	; btAlignedObjectArray<float>::btAlignedObjectArray<float>
; Line 4939
	fldz
	fstp	DWORD PTR $T67103[ebp]
	fldz
	fstp	DWORD PTR $T67104[ebp]
	fldz
	fstp	DWORD PTR $T67105[ebp]
	lea	eax, DWORD PTR $T67103[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67104[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67105[ebp]
	push	edx
	lea	ecx, DWORD PTR $T55706[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	lea	ecx, DWORD PTR _deltas$[ebp]
	call	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
; Line 4940
	fldz
	fstp	DWORD PTR $T67106[ebp]
	lea	eax, DWORD PTR $T67106[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	lea	ecx, DWORD PTR _weights$[ebp]
	call	?resize@?$btAlignedObjectArray@M@@QAEXHABM@Z ; btAlignedObjectArray<float>::resize
; Line 4943
	movzx	ecx, BYTE PTR _drift$[ebx]
	test	ecx, ecx
	je	$LN13@applyClust
; Line 4945
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@applyClust
$LN14@applyClust:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN15@applyClust:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN13@applyClust
; Line 4947
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _c$55716[ebp], ecx
; Line 4948
	mov	edx, DWORD PTR _c$55716[ebp]
	cmp	DWORD PTR [edx+324], 0
	je	SHORT $LN12@applyClust
; Line 4950
	mov	eax, DWORD PTR _c$55716[ebp]
	fild	DWORD PTR [eax+324]
	fstp	DWORD PTR $T67107[ebp]
	lea	ecx, DWORD PTR $T67107[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55716[ebp]
	add	ecx, 288				; 00000120H
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 4951
	mov	edx, DWORD PTR _c$55716[ebp]
	fild	DWORD PTR [edx+324]
	fstp	DWORD PTR $T67108[ebp]
	lea	eax, DWORD PTR $T67108[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55716[ebp]
	add	ecx, 304				; 00000130H
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
$LN12@applyClust:
; Line 4953
	jmp	$LN14@applyClust
$LN13@applyClust:
; Line 4956
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@applyClust
$LN10@applyClust:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN11@applyClust:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN9@applyClust
; Line 4958
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _c$55725[ebp], eax
; Line 4959
	movzx	ecx, BYTE PTR _drift$[ebx]
	test	ecx, ecx
	je	SHORT $LN19@applyClust
	mov	edx, DWORD PTR _c$55725[ebp]
	mov	eax, DWORD PTR [edx+324]
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN20@applyClust
$LN19@applyClust:
	mov	ecx, DWORD PTR _c$55725[ebp]
	mov	edx, DWORD PTR [ecx+320]
	mov	DWORD PTR tv161[ebp], edx
$LN20@applyClust:
	cmp	DWORD PTR tv161[ebp], 0
	jle	$LN5@applyClust
; Line 4961
	movzx	eax, BYTE PTR _drift$[ebx]
	test	eax, eax
	je	SHORT $LN21@applyClust
	mov	ecx, DWORD PTR _c$55725[ebp]
	add	ecx, 288				; 00000120H
	mov	DWORD PTR tv173[ebp], ecx
	jmp	SHORT $LN22@applyClust
$LN21@applyClust:
	mov	edx, DWORD PTR _c$55725[ebp]
	add	edx, 256				; 00000100H
	mov	DWORD PTR tv173[ebp], edx
$LN22@applyClust:
	mov	eax, DWORD PTR tv173[ebp]
	mov	DWORD PTR $T67111[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 476				; 000001dcH
	push	ecx
	mov	edx, DWORD PTR $T67111[ebp]
	push	edx
	lea	eax, DWORD PTR _v$55727[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 4962
	movzx	ecx, BYTE PTR _drift$[ebx]
	test	ecx, ecx
	je	SHORT $LN23@applyClust
	mov	edx, DWORD PTR _c$55725[ebp]
	add	edx, 304				; 00000130H
	mov	DWORD PTR tv185[ebp], edx
	jmp	SHORT $LN24@applyClust
$LN23@applyClust:
	mov	eax, DWORD PTR _c$55725[ebp]
	add	eax, 272				; 00000110H
	mov	DWORD PTR tv185[ebp], eax
$LN24@applyClust:
	mov	ecx, DWORD PTR tv185[ebp]
	mov	DWORD PTR $T67114[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 476				; 000001dcH
	push	edx
	mov	eax, DWORD PTR $T67114[ebp]
	push	eax
	lea	ecx, DWORD PTR _w$55752[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 4963
	mov	DWORD PTR _j$55777[ebp], 0
	jmp	SHORT $LN7@applyClust
$LN6@applyClust:
	mov	edx, DWORD PTR _j$55777[ebp]
	add	edx, 1
	mov	DWORD PTR _j$55777[ebp], edx
$LN7@applyClust:
	mov	ecx, DWORD PTR _c$55725[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _j$55777[ebp], eax
	jge	$LN5@applyClust
; Line 4965
	mov	eax, DWORD PTR _j$55777[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55725[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR _idx$55781[ebp], ecx
; Line 4966
	mov	edx, DWORD PTR _j$55777[ebp]
	push	edx
	mov	ecx, DWORD PTR _c$55725[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _x$55782[ebp], eax
; Line 4967
	mov	ecx, DWORD PTR _j$55777[ebp]
	push	ecx
	mov	ecx, DWORD PTR _c$55725[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _q$55783[ebp]
; Line 4968
	lea	edx, DWORD PTR _q$55783[ebp]
	push	edx
	mov	eax, DWORD PTR _c$55725[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	mov	ecx, DWORD PTR _x$55782[ebp]
	push	ecx
	lea	edx, DWORD PTR $T55784[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _w$55752[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55785[ebp]
	push	ecx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _v$55727[ebp]
	push	edx
	lea	eax, DWORD PTR $T55786[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55787[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _idx$55781[ebp]
	push	edx
	lea	ecx, DWORD PTR _deltas$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 4969
	mov	eax, DWORD PTR _idx$55781[ebp]
	push	eax
	lea	ecx, DWORD PTR _weights$[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	DWORD PTR tv235[ebp], eax
	mov	ecx, DWORD PTR tv235[ebp]
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR _q$55783[ebp]
	mov	edx, DWORD PTR tv235[ebp]
	fstp	DWORD PTR [edx]
; Line 4970
	jmp	$LN6@applyClust
$LN5@applyClust:
; Line 4972
	jmp	$LN10@applyClust
$LN9@applyClust:
; Line 4973
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@applyClust
$LN3@applyClust:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@applyClust:
	lea	ecx, DWORD PTR _deltas$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@applyClust
; Line 4975
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _weights$[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	fldz
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@applyClust
; Line 4977
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	ecx, DWORD PTR _weights$[ebp]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _deltas$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	lea	ecx, DWORD PTR $T55792[ebp]
	push	ecx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN1@applyClust:
; Line 4979
	jmp	SHORT $LN3@applyClust
$LN2@applyClust:
; Line 4980
	lea	ecx, DWORD PTR _weights$[ebp]
	call	??1?$btAlignedObjectArray@M@@QAE@XZ	; btAlignedObjectArray<float>::~btAlignedObjectArray<float>
	lea	ecx, DWORD PTR _deltas$[ebp]
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??1CProfileSample@@QAE@XZ		; CProfileSample::~CProfileSample
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN32@applyClust
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	3
$LN32@applyClust:
	DD	6
	DD	$LN31@applyClust
$LN31@applyClust:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN25@applyClust
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$LN26@applyClust
	DD	-68					; ffffffbcH
	DD	20					; 00000014H
	DD	$LN27@applyClust
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN28@applyClust
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN29@applyClust
	DD	-184					; ffffff48H
	DD	4
	DD	$LN30@applyClust
$LN30@applyClust:
	DB	113					; 00000071H
	DB	0
$LN29@applyClust:
	DB	119					; 00000077H
	DB	0
$LN28@applyClust:
	DB	118					; 00000076H
	DB	0
$LN27@applyClust:
	DB	119					; 00000077H
	DB	101					; 00000065H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	104					; 00000068H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN26@applyClust:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	0
$LN25@applyClust:
	DB	95					; 0000005fH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?applyClusters@btSoftBody@@QAEX_N@Z ENDP		; btSoftBody::applyClusters
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?dampClusters@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
tv209 = -132						; size = 4
$T55814 = -128						; size = 16
$T55813 = -112						; size = 16
$T55810 = -96						; size = 16
$T55809 = -80						; size = 16
_vx$55808 = -48						; size = 16
_n$55806 = -20						; size = 4
_j$55802 = -16						; size = 4
_c$55800 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?dampClusters@btSoftBody@@QAEXXZ PROC			; btSoftBody::dampClusters, COMDAT
; _this$ = ecx
; Line 4984
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 4987
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@dampCluste
$LN8@dampCluste:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@dampCluste:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN7@dampCluste
; Line 4989
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _c$55800[ebp], edx
; Line 4990
	mov	eax, DWORD PTR _c$55800[ebp]
	fldz
	fcomp	DWORD PTR [eax+372]
	fnstsw	ax
	test	ah, 5
	jp	$LN3@dampCluste
; Line 4992
	mov	DWORD PTR _j$55802[ebp], 0
	jmp	SHORT $LN5@dampCluste
$LN4@dampCluste:
	mov	ecx, DWORD PTR _j$55802[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$55802[ebp], ecx
$LN5@dampCluste:
	mov	ecx, DWORD PTR _c$55800[ebp]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _j$55802[ebp], eax
	jge	$LN3@dampCluste
; Line 4994
	mov	edx, DWORD PTR _j$55802[ebp]
	push	edx
	mov	ecx, DWORD PTR _c$55800[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _n$55806[ebp], eax
; Line 4995
	mov	ecx, DWORD PTR _n$55806[ebp]
	fldz
	fcomp	DWORD PTR [ecx+96]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@dampCluste
; Line 4997
	mov	edx, DWORD PTR _c$55800[ebp]
	add	edx, 240				; 000000f0H
	push	edx
	mov	eax, DWORD PTR _j$55802[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$55800[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	edx, DWORD PTR $T55809[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _c$55800[ebp]
	add	eax, 352				; 00000160H
	push	eax
	lea	ecx, DWORD PTR $T55810[ebp]
	push	ecx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _c$55800[ebp]
	add	edx, 336				; 00000150H
	push	edx
	lea	eax, DWORD PTR _vx$55808[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 4998
	lea	ecx, DWORD PTR _vx$55808[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	mov	ecx, DWORD PTR _n$55806[ebp]
	add	ecx, 48					; 00000030H
	fstp	DWORD PTR tv209[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fcomp	DWORD PTR tv209[ebp]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN1@dampCluste
; Line 5000
	mov	ecx, DWORD PTR _n$55806[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR _vx$55808[ebp]
	push	edx
	lea	eax, DWORD PTR $T55813[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _c$55800[ebp]
	add	ecx, 372				; 00000174H
	push	ecx
	lea	edx, DWORD PTR $T55814[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$55806[ebp]
	add	ecx, 48					; 00000030H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN1@dampCluste:
; Line 5003
	jmp	$LN4@dampCluste
$LN3@dampCluste:
; Line 5005
	jmp	$LN8@dampCluste
$LN7@dampCluste:
; Line 5006
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@dampCluste
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN14@dampCluste:
	DD	1
	DD	$LN13@dampCluste
$LN13@dampCluste:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN12@dampCluste
$LN12@dampCluste:
	DB	118					; 00000076H
	DB	120					; 00000078H
	DB	0
?dampClusters@btSoftBody@@QAEXXZ ENDP			; btSoftBody::dampClusters
_TEXT	ENDS
PUBLIC	?activate@Body@btSoftBody@@QBEXXZ		; btSoftBody::Body::activate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Prepare@Joint@btSoftBody@@UAEXMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
___formal$ = 12						; size = 4
?Prepare@Joint@btSoftBody@@UAEXMH@Z PROC		; btSoftBody::Joint::Prepare, COMDAT
; _this$ = ecx
; Line 5010
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 5011
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?activate@Body@btSoftBody@@QBEXXZ	; btSoftBody::Body::activate
; Line 5012
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?activate@Body@btSoftBody@@QBEXXZ	; btSoftBody::Body::activate
; Line 5013
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Prepare@Joint@btSoftBody@@UAEXMH@Z ENDP		; btSoftBody::Joint::Prepare
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?activate@Body@btSoftBody@@QBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?activate@Body@btSoftBody@@QBEXXZ PROC			; btSoftBody::Body::activate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 392
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 393
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@activate
; Line 394
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?activate@btCollisionObject@@QBEX_N@Z	; btCollisionObject::activate
$LN2@activate:
; Line 395
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN3@activate
; Line 396
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?activate@btCollisionObject@@QBEX_N@Z	; btCollisionObject::activate
$LN3@activate:
; Line 398
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?activate@Body@btSoftBody@@QBEXXZ ENDP			; btSoftBody::Body::activate
_TEXT	ENDS
PUBLIC	?invMass@Body@btSoftBody@@QBEMXZ		; btSoftBody::Body::invMass
PUBLIC	?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ ; btSoftBody::Body::invWorldInertia
PUBLIC	?getOrigin@btTransform@@QBEABVbtVector3@@XZ	; btTransform::getOrigin
PUBLIC	__$ArrayPad$
;	COMDAT ?maxdrift@?1??Prepare@LJoint@btSoftBody@@UAEXMH@Z@4MB
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
CONST	SEGMENT
?maxdrift@?1??Prepare@LJoint@btSoftBody@@UAEXMH@Z@4MB DD 040800000r ; 4 ; `btSoftBody::LJoint::Prepare'::`2'::maxdrift
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Prepare@LJoint@btSoftBody@@UAEXMH@Z
_TEXT	SEGMENT
$T67138 = -200						; size = 4
$T67137 = -196						; size = 4
$T55836 = -192						; size = 16
$T55835 = -176						; size = 16
$T55833 = -160						; size = 48
$T55832 = -112						; size = 16
$T55831 = -96						; size = 16
$T55830 = -80						; size = 16
$T55829 = -64						; size = 16
$T55828 = -48						; size = 16
$T55827 = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dt$ = 8						; size = 4
_iterations$ = 12					; size = 4
?Prepare@LJoint@btSoftBody@@UAEXMH@Z PROC		; btSoftBody::LJoint::Prepare, COMDAT
; _this$ = ecx
; Line 5017
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 5019
	mov	eax, DWORD PTR _iterations$[ebx]
	push	eax
	push	ecx
	fld	DWORD PTR _dt$[ebx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Prepare@Joint@btSoftBody@@UAEXMH@Z	; btSoftBody::Joint::Prepare
; Line 5020
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR $T55827[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 5021
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	lea	edx, DWORD PTR $T55828[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 5022
	lea	ecx, DWORD PTR _dt$[ebx]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 84					; 00000054H
	push	edx
	push	ecx
	fld	DWORD PTR ?maxdrift@?1??Prepare@LJoint@btSoftBody@@UAEXMH@Z@4MB
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 208				; 000000d0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	lea	edx, DWORD PTR $T55829[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T55830[ebp]
	push	eax
	call	?Clamp@@YA?AVbtVector3@@ABV1@M@Z	; Clamp
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55831[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T55832[ebp]
	push	edx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 5023
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 5024
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 5026
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ ; btSoftBody::Body::invWorldInertia
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?invMass@Body@btSoftBody@@QBEMXZ	; btSoftBody::Body::invMass
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 192				; 000000c0H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ ; btSoftBody::Body::invWorldInertia
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?invMass@Body@btSoftBody@@QBEMXZ	; btSoftBody::Body::invMass
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T55833[ebp]
	push	eax
	call	?ImpulseMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@M01@Z ; ImpulseMatrix
	add	esp, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 5027
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fcomp	DWORD PTR [ecx+88]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@Prepare
; Line 5029
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 88					; 00000058H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	lea	ecx, DWORD PTR $T55835[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 128				; 00000080H
	push	edx
	lea	eax, DWORD PTR $T55836[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 5030
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fsub	DWORD PTR [ecx+88]
	fstp	DWORD PTR $T67137[ebp]
	lea	edx, DWORD PTR $T67137[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
$LN1@Prepare:
; Line 5032
	fild	DWORD PTR _iterations$[ebx]
	fstp	DWORD PTR $T67138[ebp]
	lea	eax, DWORD PTR $T67138[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 5033
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?Prepare@LJoint@btSoftBody@@UAEXMH@Z ENDP		; btSoftBody::LJoint::Prepare
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getOrigin@btTransform@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOrigin@btTransform@@QBEABVbtVector3@@XZ PROC	; btTransform::getOrigin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esp, ebp
	pop	ebp
	ret	0
?getOrigin@btTransform@@QBEABVbtVector3@@XZ ENDP	; btTransform::getOrigin
_TEXT	ENDS
PUBLIC	?iwi@?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@4V4@B ; `btSoftBody::Body::invWorldInertia'::`2'::iwi
PUBLIC	??_B?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@51 ; `btSoftBody::Body::invWorldInertia'::`2'::`local static guard'
;	COMDAT ?iwi@?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@4V4@B
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
_BSS	SEGMENT
?iwi@?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@4V4@B DB 030H DUP (?) ; `btSoftBody::Body::invWorldInertia'::`2'::iwi
_BSS	ENDS
;	COMDAT ??_B?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@51
_BSS	SEGMENT
??_B?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@51 DD 01H DUP (?) ; `btSoftBody::Body::invWorldInertia'::`2'::`local static guard'
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ
_TEXT	SEGMENT
$T67151 = -40						; size = 4
$T67150 = -36						; size = 4
$T67149 = -32						; size = 4
$T67148 = -28						; size = 4
$T67147 = -24						; size = 4
$T67146 = -20						; size = 4
$T67145 = -16						; size = 4
$T67144 = -12						; size = 4
$T67143 = -8						; size = 4
_this$ = -4						; size = 4
?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ PROC ; btSoftBody::Body::invWorldInertia, COMDAT
; _this$ = ecx
; Line 400
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 401
	mov	eax, DWORD PTR ??_B?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@51
	and	eax, 1
	jne	SHORT $LN3@invWorldIn
	mov	ecx, DWORD PTR ??_B?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@51
	or	ecx, 1
	mov	DWORD PTR ??_B?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@51, ecx
	fldz
	fstp	DWORD PTR $T67143[ebp]
	fldz
	fstp	DWORD PTR $T67144[ebp]
	fldz
	fstp	DWORD PTR $T67145[ebp]
	fldz
	fstp	DWORD PTR $T67146[ebp]
	fldz
	fstp	DWORD PTR $T67147[ebp]
	fldz
	fstp	DWORD PTR $T67148[ebp]
	fldz
	fstp	DWORD PTR $T67149[ebp]
	fldz
	fstp	DWORD PTR $T67150[ebp]
	fldz
	fstp	DWORD PTR $T67151[ebp]
	lea	edx, DWORD PTR $T67143[ebp]
	push	edx
	lea	eax, DWORD PTR $T67144[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67145[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67146[ebp]
	push	edx
	lea	eax, DWORD PTR $T67147[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67148[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67149[ebp]
	push	edx
	lea	eax, DWORD PTR $T67150[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67151[ebp]
	push	ecx
	mov	ecx, OFFSET ?iwi@?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@4V4@B ; `btSoftBody::Body::invWorldInertia'::`2'::iwi
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
$LN3@invWorldIn:
; Line 402
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN2@invWorldIn
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?getInvInertiaTensorWorld@btRigidBody@@QBEABVbtMatrix3x3@@XZ ; btRigidBody::getInvInertiaTensorWorld
	jmp	SHORT $LN4@invWorldIn
$LN2@invWorldIn:
; Line 403
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@invWorldIn
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 192				; 000000c0H
	jmp	SHORT $LN4@invWorldIn
$LN1@invWorldIn:
; Line 404
	mov	eax, OFFSET ?iwi@?1??invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ@4V4@B ; `btSoftBody::Body::invWorldInertia'::`2'::iwi
$LN4@invWorldIn:
; Line 405
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ ENDP ; btSoftBody::Body::invWorldInertia
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?invMass@Body@btSoftBody@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?invMass@Body@btSoftBody@@QBEMXZ PROC			; btSoftBody::Body::invMass, COMDAT
; _this$ = ecx
; Line 407
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 408
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@invMass
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getInvMass@btRigidBody@@QBEMXZ		; btRigidBody::getInvMass
	jmp	SHORT $LN3@invMass
$LN2@invMass:
; Line 409
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN1@invMass
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR [ecx+132]
	jmp	SHORT $LN3@invMass
$LN1@invMass:
; Line 410
	fldz
$LN3@invMass:
; Line 411
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?invMass@Body@btSoftBody@@QBEMXZ ENDP			; btSoftBody::Body::invMass
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clamp@@YA?AVbtVector3@@ABV1@M@Z
_TEXT	SEGMENT
$T67156 = -36						; size = 4
$T19298 = -32						; size = 16
_sql$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_maxlength$ = 16					; size = 4
?Clamp@@YA?AVbtVector3@@ABV1@M@Z PROC			; Clamp, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 207
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 208
	mov	ecx, DWORD PTR _v$[ebx]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _sql$[ebp]
; Line 209
	fld	DWORD PTR _maxlength$[ebx]
	fmul	DWORD PTR _maxlength$[ebx]
	fcomp	DWORD PTR _sql$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@Clamp
; Line 210
	push	ecx
	fld	DWORD PTR _sql$[ebp]
	fstp	DWORD PTR [esp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
	fstp	DWORD PTR $T67156[ebp]
	lea	eax, DWORD PTR $T67156[ebp]
	push	eax
	lea	ecx, DWORD PTR _maxlength$[ebx]
	push	ecx
	mov	edx, DWORD PTR _v$[ebx]
	push	edx
	lea	eax, DWORD PTR $T19298[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	push	ecx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	jmp	SHORT $LN1@Clamp
; Line 211
	jmp	SHORT $LN1@Clamp
$LN2@Clamp:
; Line 212
	mov	edx, DWORD PTR _v$[ebx]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
$LN1@Clamp:
; Line 213
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Clamp@@YA?AVbtVector3@@ABV1@M@Z ENDP			; Clamp
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ImpulseMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@M01@Z
_TEXT	SEGMENT
$T19457 = -160						; size = 48
$T19456 = -112						; size = 48
$T19455 = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_ima$ = 12						; size = 4
_iia$ = 16						; size = 4
_ra$ = 20						; size = 4
_imb$ = 24						; size = 4
_iib$ = 28						; size = 4
_rb$ = 32						; size = 4
?ImpulseMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@M01@Z PROC ; ImpulseMatrix, COMDAT
; Line 324
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 325
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rb$[ebx]
	push	ecx
	mov	edx, DWORD PTR _iib$[ebx]
	push	edx
	push	ecx
	fld	DWORD PTR _imb$[ebx]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T19456[ebp]
	push	eax
	call	?MassMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@@Z ; MassMatrix
	add	esp, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _ra$[ebx]
	push	ecx
	mov	edx, DWORD PTR _iia$[ebx]
	push	edx
	push	ecx
	fld	DWORD PTR _ima$[ebx]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T19455[ebp]
	push	eax
	call	?MassMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@@Z ; MassMatrix
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T19457[ebp]
	push	ecx
	call	?Add@@YA?AVbtMatrix3x3@@ABV1@0@Z	; Add
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?inverse@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::inverse
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 326
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?ImpulseMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@M01@Z ENDP ; ImpulseMatrix
_TEXT	ENDS
PUBLIC	?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z ; btSoftBody::Body::applyImpulse
PUBLIC	??GImpulse@btSoftBody@@QBE?AU01@XZ		; btSoftBody::Impulse::operator-
PUBLIC	??0Impulse@btSoftBody@@QAE@XZ			; btSoftBody::Impulse::Impulse
PUBLIC	?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ; btSoftBody::Body::velocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Solve@LJoint@btSoftBody@@UAEXMM@Z
_TEXT	SEGMENT
$T55856 = -288						; size = 48
$T55855 = -240						; size = 16
$T55854 = -224						; size = 16
$T55853 = -208						; size = 16
$T55852 = -192						; size = 16
_impulse$ = -160					; size = 48
_vr$ = -96						; size = 16
_vb$ = -64						; size = 16
_va$ = -32						; size = 16
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
_sor$ = 12						; size = 4
?Solve@LJoint@btSoftBody@@UAEXMM@Z PROC			; btSoftBody::LJoint::Solve, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5037
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 5038
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 192				; 000000c0H
	push	eax
	lea	ecx, DWORD PTR _va$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ; btSoftBody::Body::velocity
; Line 5039
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 208				; 000000d0H
	push	edx
	lea	eax, DWORD PTR _vb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ; btSoftBody::Body::velocity
; Line 5040
	lea	ecx, DWORD PTR _vb$[ebp]
	push	ecx
	lea	edx, DWORD PTR _va$[ebp]
	push	edx
	lea	eax, DWORD PTR _vr$[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5041
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	??0Impulse@btSoftBody@@QAE@XZ		; btSoftBody::Impulse::Impulse
; Line 5042
	mov	ecx, DWORD PTR _impulse$[ebp+32]
	or	ecx, 1
	mov	DWORD PTR _impulse$[ebp+32], ecx
; Line 5043
	lea	edx, DWORD PTR _sor$[ebx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	lea	ecx, DWORD PTR _vr$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T55852[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	lea	ecx, DWORD PTR $T55853[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 128				; 00000080H
	push	edx
	lea	eax, DWORD PTR $T55854[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55855[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _impulse$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _impulse$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _impulse$[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _impulse$[ebp+12], eax
; Line 5044
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	lea	edx, DWORD PTR $T55856[ebp]
	push	edx
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	??GImpulse@btSoftBody@@QBE?AU01@XZ	; btSoftBody::Impulse::operator-
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z ; btSoftBody::Body::applyImpulse
; Line 5045
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 208				; 000000d0H
	push	eax
	lea	ecx, DWORD PTR _impulse$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z ; btSoftBody::Body::applyImpulse
; Line 5046
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Solve@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	3
$LN8@Solve@2:
	DD	4
	DD	$LN7@Solve@2
$LN7@Solve@2:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@Solve@2
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN4@Solve@2
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN5@Solve@2
	DD	-160					; ffffff60H
	DD	48					; 00000030H
	DD	$LN6@Solve@2
$LN6@Solve@2:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN5@Solve@2:
	DB	118					; 00000076H
	DB	114					; 00000072H
	DB	0
$LN4@Solve@2:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	0
$LN3@Solve@2:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	0
?Solve@LJoint@btSoftBody@@UAEXMM@Z ENDP			; btSoftBody::LJoint::Solve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Impulse@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
$T67175 = -28						; size = 4
$T67174 = -24						; size = 4
$T67173 = -20						; size = 4
$T67172 = -16						; size = 4
$T67171 = -12						; size = 4
$T67170 = -8						; size = 4
_this$ = -4						; size = 4
??0Impulse@btSoftBody@@QAE@XZ PROC			; btSoftBody::Impulse::Impulse, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 361
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	fldz
	fstp	DWORD PTR $T67170[ebp]
	fldz
	fstp	DWORD PTR $T67171[ebp]
	fldz
	fstp	DWORD PTR $T67172[ebp]
	lea	eax, DWORD PTR $T67170[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67171[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67172[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	fldz
	fstp	DWORD PTR $T67173[ebp]
	fldz
	fstp	DWORD PTR $T67174[ebp]
	fldz
	fstp	DWORD PTR $T67175[ebp]
	lea	eax, DWORD PTR $T67173[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67174[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67175[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, -2					; fffffffeH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	and	ecx, -3					; fffffffdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0Impulse@btSoftBody@@QAE@XZ ENDP			; btSoftBody::Impulse::Impulse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??GImpulse@btSoftBody@@QBE?AU01@XZ
_TEXT	SEGMENT
$T17432 = -112						; size = 16
$T17431 = -96						; size = 16
_i$ = -64						; size = 48
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
??GImpulse@btSoftBody@@QBE?AU01@XZ PROC			; btSoftBody::Impulse::operator-, COMDAT
; _this$ = ecx
; Line 363
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 364
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, 12					; 0000000cH
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd
; Line 365
	lea	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T17431[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _i$[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _i$[ebp+12], eax
; Line 366
	lea	ecx, DWORD PTR _i$[ebp+16]
	push	ecx
	lea	edx, DWORD PTR $T17432[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i$[ebp+16], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _i$[ebp+20], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _i$[ebp+24], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _i$[ebp+28], edx
; Line 367
	mov	ecx, 12					; 0000000cH
	lea	esi, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 368
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	2
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN3@operator
$LN3@operator:
	DB	105					; 00000069H
	DB	0
??GImpulse@btSoftBody@@QBE?AU01@XZ ENDP			; btSoftBody::Impulse::operator-
_TEXT	ENDS
PUBLIC	?linearVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ ; btSoftBody::Body::linearVelocity
PUBLIC	?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ; btSoftBody::Body::angularVelocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z
_TEXT	SEGMENT
$T17512 = -48						; size = 16
$T17511 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_rpos$ = 12						; size = 4
?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z PROC ; btSoftBody::Body::velocity, COMDAT
; _this$ = ecx
; Line 438
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 439
	mov	eax, DWORD PTR _rpos$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T17512[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ; btSoftBody::Body::angularVelocity
	push	eax
	lea	edx, DWORD PTR $T17511[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?linearVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ ; btSoftBody::Body::linearVelocity
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 440
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ENDP ; btSoftBody::Body::velocity
_TEXT	ENDS
PUBLIC	?getLinearVelocity@btRigidBody@@QBEABVbtVector3@@XZ ; btRigidBody::getLinearVelocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?linearVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ
_TEXT	SEGMENT
$T67187 = -16						; size = 4
$T67186 = -12						; size = 4
$T67185 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?linearVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ PROC ; btSoftBody::Body::linearVelocity, COMDAT
; _this$ = ecx
; Line 420
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 421
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@linearVelo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getLinearVelocity@btRigidBody@@QBEABVbtVector3@@XZ ; btRigidBody::getLinearVelocity
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@linearVelo
$LN2@linearVelo:
; Line 422
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@linearVelo
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 336				; 00000150H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@linearVelo
$LN1@linearVelo:
; Line 423
	fldz
	fstp	DWORD PTR $T67185[ebp]
	fldz
	fstp	DWORD PTR $T67186[ebp]
	fldz
	fstp	DWORD PTR $T67187[ebp]
	lea	ecx, DWORD PTR $T67185[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67186[ebp]
	push	edx
	lea	eax, DWORD PTR $T67187[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@linearVelo:
; Line 424
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?linearVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ ENDP ; btSoftBody::Body::linearVelocity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getLinearVelocity@btRigidBody@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLinearVelocity@btRigidBody@@QBEABVbtVector3@@XZ PROC ; btRigidBody::getLinearVelocity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletdynamics\dynamics\btrigidbody.h
; Line 356
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 357
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 336				; 00000150H
; Line 358
	mov	esp, ebp
	pop	ebp
	ret	0
?getLinearVelocity@btRigidBody@@QBEABVbtVector3@@XZ ENDP ; btRigidBody::getLinearVelocity
_TEXT	ENDS
PUBLIC	?getAngularVelocity@btRigidBody@@QBEABVbtVector3@@XZ ; btRigidBody::getAngularVelocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z
_TEXT	SEGMENT
$T67194 = -16						; size = 4
$T67193 = -12						; size = 4
$T67192 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_rpos$ = 12						; size = 4
?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z PROC ; btSoftBody::Body::angularVelocity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 426
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 427
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@angularVel
	mov	ecx, DWORD PTR _rpos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?getAngularVelocity@btRigidBody@@QBEABVbtVector3@@XZ ; btRigidBody::getAngularVelocity
	push	eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@angularVel
$LN2@angularVel:
; Line 428
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@angularVel
	mov	edx, DWORD PTR _rpos$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 352				; 00000160H
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@angularVel
$LN1@angularVel:
; Line 429
	fldz
	fstp	DWORD PTR $T67192[ebp]
	fldz
	fstp	DWORD PTR $T67193[ebp]
	fldz
	fstp	DWORD PTR $T67194[ebp]
	lea	eax, DWORD PTR $T67192[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67193[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67194[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@angularVel:
; Line 430
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ENDP ; btSoftBody::Body::angularVelocity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAngularVelocity@btRigidBody@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAngularVelocity@btRigidBody@@QBEABVbtVector3@@XZ PROC ; btRigidBody::getAngularVelocity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletdynamics\dynamics\btrigidbody.h
; Line 359
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 360
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 352				; 00000160H
; Line 361
	mov	esp, ebp
	pop	ebp
	ret	0
?getAngularVelocity@btRigidBody@@QBEABVbtVector3@@XZ ENDP ; btRigidBody::getAngularVelocity
_TEXT	ENDS
PUBLIC	?applyDImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ; btSoftBody::Body::applyDImpulse
PUBLIC	?applyVImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ; btSoftBody::Body::applyVImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_impulse$ = 8						; size = 4
_rpos$ = 12						; size = 4
?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z PROC ; btSoftBody::Body::applyImpulse, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 452
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 453
	mov	eax, DWORD PTR _impulse$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	je	SHORT $LN2@applyImpul
; Line 456
	mov	edx, DWORD PTR _rpos$[ebp]
	push	edx
	mov	eax, DWORD PTR _impulse$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyVImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ; btSoftBody::Body::applyVImpulse
$LN2@applyImpul:
; Line 458
	mov	ecx, DWORD PTR _impulse$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	shl	edx, 30					; 0000001eH
	sar	edx, 31					; 0000001fH
	test	edx, edx
	je	SHORT $LN3@applyImpul
; Line 461
	mov	eax, DWORD PTR _rpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _impulse$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyDImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ; btSoftBody::Body::applyDImpulse
$LN3@applyImpul:
; Line 463
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z ENDP ; btSoftBody::Body::applyImpulse
_TEXT	ENDS
PUBLIC	?applyImpulse@btRigidBody@@QAEXABVbtVector3@@0@Z ; btRigidBody::applyImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?applyVImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_impulse$ = 8						; size = 4
_rpos$ = 12						; size = 4
?applyVImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z PROC ; btSoftBody::Body::applyVImpulse, COMDAT
; _this$ = ecx
; Line 442
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 443
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@applyVImpu
	mov	ecx, DWORD PTR _rpos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _impulse$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?applyImpulse@btRigidBody@@QAEXABVbtVector3@@0@Z ; btRigidBody::applyImpulse
$LN2@applyVImpu:
; Line 444
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@applyVImpu
	mov	edx, DWORD PTR _impulse$[ebp]
	push	edx
	mov	eax, DWORD PTR _rpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?clusterVImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z ; btSoftBody::clusterVImpulse
	add	esp, 12					; 0000000cH
$LN3@applyVImpu:
; Line 445
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?applyVImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ENDP ; btSoftBody::Body::applyVImpulse
_TEXT	ENDS
PUBLIC	?applyTorqueImpulse@btRigidBody@@QAEXABVbtVector3@@@Z ; btRigidBody::applyTorqueImpulse
PUBLIC	?applyCentralImpulse@btRigidBody@@QAEXABVbtVector3@@@Z ; btRigidBody::applyCentralImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?applyImpulse@btRigidBody@@QAEXABVbtVector3@@0@Z
_TEXT	SEGMENT
$T11179 = -48						; size = 16
$T11178 = -32						; size = 16
_this$ = -4						; size = 4
_impulse$ = 8						; size = 4
_rel_pos$ = 12						; size = 4
?applyImpulse@btRigidBody@@QAEXABVbtVector3@@0@Z PROC	; btRigidBody::applyImpulse, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletdynamics\dynamics\btrigidbody.h
; Line 329
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 330
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+368]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@applyImpul@2
; Line 332
	mov	ecx, DWORD PTR _impulse$[ebx]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyCentralImpulse@btRigidBody@@QAEXABVbtVector3@@@Z ; btRigidBody::applyCentralImpulse
; Line 333
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 592				; 00000250H
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	test	eax, eax
	je	SHORT $LN1@applyImpul@2
; Line 335
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 384				; 00000180H
	push	edx
	mov	eax, DWORD PTR _impulse$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T11178[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T11179[ebp]
	push	edx
	mov	ecx, DWORD PTR _rel_pos$[ebx]
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyTorqueImpulse@btRigidBody@@QAEXABVbtVector3@@@Z ; btRigidBody::applyTorqueImpulse
$LN1@applyImpul@2:
; Line 338
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?applyImpulse@btRigidBody@@QAEXABVbtVector3@@0@Z ENDP	; btRigidBody::applyImpulse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?applyCentralImpulse@btRigidBody@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
$T11169 = -48						; size = 16
$T11168 = -32						; size = 16
_this$ = -4						; size = 4
_impulse$ = 8						; size = 4
?applyCentralImpulse@btRigidBody@@QAEXABVbtVector3@@@Z PROC ; btRigidBody::applyCentralImpulse, COMDAT
; _this$ = ecx
; Line 319
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 320
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 368				; 00000170H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 384				; 00000180H
	push	ecx
	mov	edx, DWORD PTR _impulse$[ebx]
	push	edx
	lea	eax, DWORD PTR $T11168[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T11169[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 321
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?applyCentralImpulse@btRigidBody@@QAEXABVbtVector3@@@Z ENDP ; btRigidBody::applyCentralImpulse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?applyTorqueImpulse@btRigidBody@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
$T11173 = -48						; size = 16
$T11172 = -32						; size = 16
_this$ = -4						; size = 4
_torque$ = 8						; size = 4
?applyTorqueImpulse@btRigidBody@@QAEXABVbtVector3@@@Z PROC ; btRigidBody::applyTorqueImpulse, COMDAT
; _this$ = ecx
; Line 324
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 325
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 592				; 00000250H
	push	eax
	mov	ecx, DWORD PTR _torque$[ebx]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 288				; 00000120H
	push	edx
	lea	eax, DWORD PTR $T11172[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T11173[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 326
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?applyTorqueImpulse@btRigidBody@@QAEXABVbtVector3@@@Z ENDP ; btRigidBody::applyTorqueImpulse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?applyDImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_impulse$ = 8						; size = 4
_rpos$ = 12						; size = 4
?applyDImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z PROC ; btSoftBody::Body::applyDImpulse, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 447
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 448
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@applyDImpu
	mov	ecx, DWORD PTR _rpos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _impulse$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	?applyImpulse@btRigidBody@@QAEXABVbtVector3@@0@Z ; btRigidBody::applyImpulse
$LN2@applyDImpu:
; Line 449
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@applyDImpu
	mov	edx, DWORD PTR _impulse$[ebp]
	push	edx
	mov	eax, DWORD PTR _rpos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?clusterDImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@1@Z ; btSoftBody::clusterDImpulse
	add	esp, 12					; 0000000cH
$LN3@applyDImpu:
; Line 450
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?applyDImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ENDP ; btSoftBody::Body::applyDImpulse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Terminate@LJoint@btSoftBody@@UAEXM@Z
_TEXT	SEGMENT
$T55862 = -32						; size = 16
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
?Terminate@LJoint@btSoftBody@@UAEXM@Z PROC		; btSoftBody::LJoint::Terminate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5050
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 5051
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fcomp	DWORD PTR [eax+88]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@Terminate
; Line 5053
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	lea	eax, DWORD PTR $T55862[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?applyDImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ; btSoftBody::Body::applyDImpulse
; Line 5054
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?applyDImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ; btSoftBody::Body::applyDImpulse
$LN1@Terminate:
; Line 5056
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?Terminate@LJoint@btSoftBody@@UAEXM@Z ENDP		; btSoftBody::LJoint::Terminate
_TEXT	ENDS
PUBLIC	?btAcos@@YAMM@Z					; btAcos
PUBLIC	__$ArrayPad$
;	COMDAT ?maxdrift@?1??Prepare@AJoint@btSoftBody@@UAEXMH@Z@4MB
CONST	SEGMENT
?maxdrift@?1??Prepare@AJoint@btSoftBody@@UAEXMH@Z@4MB DD 03e490fdbr ; 0.19635 ; `btSoftBody::AJoint::Prepare'::`2'::maxdrift
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Prepare@AJoint@btSoftBody@@UAEXMH@Z
_TEXT	SEGMENT
$T67220 = -188						; size = 4
$T67219 = -184						; size = 4
$T67218 = -180						; size = 4
$T67217 = -176						; size = 4
$T67216 = -172						; size = 4
$T67215 = -168						; size = 4
$T67214 = -164						; size = 4
$T55883 = -160						; size = 16
$T55882 = -144						; size = 16
$T55880 = -128						; size = 48
$T55873 = -80						; size = 16
$T55872 = -64						; size = 16
$T55871 = -48						; size = 16
$T55870 = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dt$ = 8						; size = 4
_iterations$ = 12					; size = 4
?Prepare@AJoint@btSoftBody@@UAEXMH@Z PROC		; btSoftBody::AJoint::Prepare, COMDAT
; _this$ = ecx
; Line 5060
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-188]
	mov	ecx, 47					; 0000002fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 5062
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+224]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5063
	mov	ecx, DWORD PTR _iterations$[ebx]
	push	ecx
	push	ecx
	fld	DWORD PTR _dt$[ebx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Prepare@Joint@btSoftBody@@UAEXMH@Z	; btSoftBody::Joint::Prepare
; Line 5064
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	eax, DWORD PTR $T55870[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 5065
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	edx, DWORD PTR $T55871[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 5066
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 208				; 000000d0H
	push	edx
	lea	eax, DWORD PTR $T55872[ebp]
	push	eax
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55873[ebp]
	push	ecx
	call	?NormalizeAny@@YA?AVbtVector3@@ABV1@@Z	; NormalizeAny
	add	esp, 8
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 5067
	fld1
	fstp	DWORD PTR $T67215[ebp]
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR $T67216[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 192				; 000000c0H
	push	edx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR $T67217[ebp]
	lea	eax, DWORD PTR $T67215[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67216[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67217[ebp]
	push	edx
	call	??$Clamp@M@@YAMABM00@Z			; Clamp<float>
	add	esp, 8
	fstp	DWORD PTR [esp]
	call	?btAcos@@YAMM@Z				; btAcos
	add	esp, 4
	fstp	DWORD PTR $T67214[ebp]
	lea	eax, DWORD PTR $T67214[ebp]
	push	eax
	push	OFFSET ?maxdrift@?1??Prepare@AJoint@btSoftBody@@UAEXMH@Z@4MB
	call	??$btMin@M@@YAABMABM0@Z			; btMin<float>
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 5068
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+84]
	fdiv	DWORD PTR _dt$[ebx]
	fstp	DWORD PTR $T67218[ebp]
	lea	edx, DWORD PTR $T67218[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 5069
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ ; btSoftBody::Body::invWorldInertia
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ ; btSoftBody::Body::invWorldInertia
	push	eax
	lea	eax, DWORD PTR $T55880[ebp]
	push	eax
	call	?AngularImpulseMatrix@@YA?AVbtMatrix3x3@@ABV1@0@Z ; AngularImpulseMatrix
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 5070
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fcomp	DWORD PTR [ecx+88]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@Prepare@2
; Line 5072
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 88					; 00000058H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	lea	ecx, DWORD PTR $T55882[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 128				; 00000080H
	push	edx
	lea	eax, DWORD PTR $T55883[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 5073
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fsub	DWORD PTR [ecx+88]
	fstp	DWORD PTR $T67219[ebp]
	lea	edx, DWORD PTR $T67219[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
$LN1@Prepare@2:
; Line 5075
	fild	DWORD PTR _iterations$[ebx]
	fstp	DWORD PTR $T67220[ebp]
	lea	eax, DWORD PTR $T67220[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 5076
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?Prepare@AJoint@btSoftBody@@UAEXMH@Z ENDP		; btSoftBody::AJoint::Prepare
_TEXT	ENDS
PUBLIC	_acosf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btAcos@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?btAcos@@YAMM@Z PROC					; btAcos, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 411
	push	ebp
	mov	ebp, esp
; Line 412
	fld	DWORD PTR __real@bf800000
	fcomp	DWORD PTR _x$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@btAcos
; Line 413
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR _x$[ebp]
$LN2@btAcos:
; Line 414
	fld1
	fcomp	DWORD PTR _x$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@btAcos
; Line 415
	fld1
	fstp	DWORD PTR _x$[ebp]
$LN1@btAcos:
; Line 416
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	_acosf
	add	esp, 4
; Line 417
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btAcos@@YAMM@Z ENDP					; btAcos
_TEXT	ENDS
EXTRN	_acos:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _acosf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_acosf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 400
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_acos
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_acosf	ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AngularImpulseMatrix@@YA?AVbtMatrix3x3@@ABV1@0@Z
_TEXT	SEGMENT
$T19464 = -64						; size = 48
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_iia$ = 12						; size = 4
_iib$ = 16						; size = 4
?AngularImpulseMatrix@@YA?AVbtMatrix3x3@@ABV1@0@Z PROC	; AngularImpulseMatrix, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 331
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 332
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	push	eax
	mov	ecx, DWORD PTR _iib$[ebx]
	push	ecx
	mov	edx, DWORD PTR _iia$[ebx]
	push	edx
	lea	eax, DWORD PTR $T19464[ebp]
	push	eax
	call	?Add@@YA?AVbtMatrix3x3@@ABV1@0@Z	; Add
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?inverse@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::inverse
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 333
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?AngularImpulseMatrix@@YA?AVbtMatrix3x3@@ABV1@0@Z ENDP	; AngularImpulseMatrix
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?NormalizeAny@@YA?AVbtVector3@@ABV1@@Z
_TEXT	SEGMENT
$T67232 = -24						; size = 4
$T67231 = -20						; size = 4
$T67230 = -16						; size = 4
_l$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?NormalizeAny@@YA?AVbtVector3@@ABV1@@Z PROC		; NormalizeAny, COMDAT
; Line 497
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 498
	mov	ecx, DWORD PTR _v$[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _l$[ebp]
; Line 499
	fld	DWORD PTR __real@34000000
	fcomp	DWORD PTR _l$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@NormalizeA
; Line 500
	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN1@NormalizeA
; Line 501
	jmp	SHORT $LN1@NormalizeA
$LN2@NormalizeA:
; Line 502
	fldz
	fstp	DWORD PTR $T67230[ebp]
	fldz
	fstp	DWORD PTR $T67231[ebp]
	fldz
	fstp	DWORD PTR $T67232[ebp]
	lea	eax, DWORD PTR $T67230[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67231[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67232[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@NormalizeA:
; Line 503
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@NormalizeA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@NormalizeA:
	DD	1
	DD	$LN6@NormalizeA
$LN6@NormalizeA:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN5@NormalizeA
$LN5@NormalizeA:
	DB	108					; 0000006cH
	DB	0
?NormalizeAny@@YA?AVbtVector3@@ABV1@@Z ENDP		; NormalizeAny
_TEXT	ENDS
PUBLIC	?applyAImpulse@Body@btSoftBody@@QBEXABUImpulse@2@@Z ; btSoftBody::Body::applyAImpulse
PUBLIC	?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ ; btSoftBody::Body::angularVelocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Solve@AJoint@btSoftBody@@UAEXMM@Z
_TEXT	SEGMENT
$T67238 = -356						; size = 4
$T55908 = -352						; size = 48
$T55907 = -304						; size = 16
$T55906 = -288						; size = 16
$T55905 = -272						; size = 16
$T55904 = -256						; size = 16
_impulse$ = -224					; size = 48
$T55901 = -160						; size = 16
_vc$ = -128						; size = 16
_sp$ = -104						; size = 4
_vr$ = -96						; size = 16
_vb$ = -64						; size = 16
_va$ = -32						; size = 16
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
_sor$ = 12						; size = 4
?Solve@AJoint@btSoftBody@@UAEXMM@Z PROC			; btSoftBody::AJoint::Solve, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5080
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 364				; 0000016cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 5081
	lea	eax, DWORD PTR _va$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ ; btSoftBody::Body::angularVelocity
; Line 5082
	lea	ecx, DWORD PTR _vb$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ ; btSoftBody::Body::angularVelocity
; Line 5083
	lea	edx, DWORD PTR _vb$[ebp]
	push	edx
	lea	eax, DWORD PTR _va$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vr$[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5084
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 192				; 000000c0H
	push	edx
	lea	eax, DWORD PTR _vr$[ebp]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _sp$[ebp]
; Line 5085
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _sp$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+224]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+224]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR $T67238[ebp]
	lea	ecx, DWORD PTR $T67238[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 192				; 000000c0H
	push	edx
	lea	eax, DWORD PTR $T55901[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _vr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vc$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5086
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	??0Impulse@btSoftBody@@QAE@XZ		; btSoftBody::Impulse::Impulse
; Line 5087
	mov	eax, DWORD PTR _impulse$[ebp+32]
	or	eax, 1
	mov	DWORD PTR _impulse$[ebp+32], eax
; Line 5088
	lea	ecx, DWORD PTR _sor$[ebx]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	lea	eax, DWORD PTR _vc$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55904[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	lea	eax, DWORD PTR $T55905[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	lea	edx, DWORD PTR $T55906[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T55907[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _impulse$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _impulse$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _impulse$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _impulse$[ebp+12], edx
; Line 5089
	lea	eax, DWORD PTR $T55908[ebp]
	push	eax
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	??GImpulse@btSoftBody@@QBE?AU01@XZ	; btSoftBody::Impulse::operator-
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?applyAImpulse@Body@btSoftBody@@QBEXABUImpulse@2@@Z ; btSoftBody::Body::applyAImpulse
; Line 5090
	lea	ecx, DWORD PTR _impulse$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?applyAImpulse@Body@btSoftBody@@QBEXABUImpulse@2@@Z ; btSoftBody::Body::applyAImpulse
; Line 5091
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Solve@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN9@Solve@3:
	DD	5
	DD	$LN8@Solve@3
$LN8@Solve@3:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@Solve@3
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN4@Solve@3
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN5@Solve@3
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN6@Solve@3
	DD	-224					; ffffff20H
	DD	48					; 00000030H
	DD	$LN7@Solve@3
$LN7@Solve@3:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN6@Solve@3:
	DB	118					; 00000076H
	DB	99					; 00000063H
	DB	0
$LN5@Solve@3:
	DB	118					; 00000076H
	DB	114					; 00000072H
	DB	0
$LN4@Solve@3:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	0
$LN3@Solve@3:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	0
?Solve@AJoint@btSoftBody@@UAEXMM@Z ENDP			; btSoftBody::AJoint::Solve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ
_TEXT	SEGMENT
$T67250 = -16						; size = 4
$T67249 = -12						; size = 4
$T67248 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ PROC ; btSoftBody::Body::angularVelocity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 432
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 433
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@angularVel@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getAngularVelocity@btRigidBody@@QBEABVbtVector3@@XZ ; btRigidBody::getAngularVelocity
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@angularVel@2
$LN2@angularVel@2:
; Line 434
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@angularVel@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 352				; 00000160H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN3@angularVel@2
$LN1@angularVel@2:
; Line 435
	fldz
	fstp	DWORD PTR $T67248[ebp]
	fldz
	fstp	DWORD PTR $T67249[ebp]
	fldz
	fstp	DWORD PTR $T67250[ebp]
	lea	ecx, DWORD PTR $T67248[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67249[ebp]
	push	edx
	lea	eax, DWORD PTR $T67250[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@angularVel@2:
; Line 436
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?angularVelocity@Body@btSoftBody@@QBE?AVbtVector3@@XZ ENDP ; btSoftBody::Body::angularVelocity
_TEXT	ENDS
PUBLIC	?applyDAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z ; btSoftBody::Body::applyDAImpulse
PUBLIC	?applyVAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z ; btSoftBody::Body::applyVAImpulse
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?applyAImpulse@Body@btSoftBody@@QBEXABUImpulse@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_impulse$ = 8						; size = 4
?applyAImpulse@Body@btSoftBody@@QBEXABUImpulse@2@@Z PROC ; btSoftBody::Body::applyAImpulse, COMDAT
; _this$ = ecx
; Line 475
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 476
	mov	eax, DWORD PTR _impulse$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	je	SHORT $LN2@applyAImpu
	mov	edx, DWORD PTR _impulse$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyVAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z ; btSoftBody::Body::applyVAImpulse
$LN2@applyAImpu:
; Line 477
	mov	eax, DWORD PTR _impulse$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	shl	ecx, 30					; 0000001eH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	je	SHORT $LN3@applyAImpu
	mov	edx, DWORD PTR _impulse$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?applyDAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z ; btSoftBody::Body::applyDAImpulse
$LN3@applyAImpu:
; Line 478
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?applyAImpulse@Body@btSoftBody@@QBEXABUImpulse@2@@Z ENDP ; btSoftBody::Body::applyAImpulse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?applyVAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_impulse$ = 8						; size = 4
?applyVAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z PROC ; btSoftBody::Body::applyVAImpulse, COMDAT
; _this$ = ecx
; Line 465
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 466
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@applyVAImp
	mov	ecx, DWORD PTR _impulse$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?applyTorqueImpulse@btRigidBody@@QAEXABVbtVector3@@@Z ; btRigidBody::applyTorqueImpulse
$LN2@applyVAImp:
; Line 467
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@applyVAImp
	mov	ecx, DWORD PTR _impulse$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?clusterVAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ; btSoftBody::clusterVAImpulse
	add	esp, 8
$LN3@applyVAImp:
; Line 468
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?applyVAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z ENDP ; btSoftBody::Body::applyVAImpulse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?applyDAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_impulse$ = 8						; size = 4
?applyDAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z PROC ; btSoftBody::Body::applyDAImpulse, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 471
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@applyDAImp
	mov	ecx, DWORD PTR _impulse$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?applyTorqueImpulse@btRigidBody@@QAEXABVbtVector3@@@Z ; btRigidBody::applyTorqueImpulse
$LN2@applyDAImp:
; Line 472
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@applyDAImp
	mov	ecx, DWORD PTR _impulse$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?clusterDAImpulse@btSoftBody@@SAXPAUCluster@1@ABVbtVector3@@@Z ; btSoftBody::clusterDAImpulse
	add	esp, 8
$LN3@applyDAImp:
; Line 473
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?applyDAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z ENDP ; btSoftBody::Body::applyDAImpulse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Terminate@AJoint@btSoftBody@@UAEXM@Z
_TEXT	SEGMENT
$T55914 = -32						; size = 16
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
?Terminate@AJoint@btSoftBody@@UAEXM@Z PROC		; btSoftBody::AJoint::Terminate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5095
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 5096
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fcomp	DWORD PTR [eax+88]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@Terminate@2
; Line 5098
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	lea	edx, DWORD PTR $T55914[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?applyDAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z ; btSoftBody::Body::applyDAImpulse
; Line 5099
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?applyDAImpulse@Body@btSoftBody@@QBEXABVbtVector3@@@Z ; btSoftBody::Body::applyDAImpulse
$LN1@Terminate@2:
; Line 5101
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?Terminate@AJoint@btSoftBody@@UAEXM@Z ENDP		; btSoftBody::AJoint::Terminate
_TEXT	ENDS
PUBLIC	?Prepare@CJoint@btSoftBody@@UAEXMH@Z		; btSoftBody::CJoint::Prepare
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Prepare@CJoint@btSoftBody@@UAEXMH@Z
_TEXT	SEGMENT
tv81 = -120						; size = 4
$T67265 = -116						; size = 4
$T67264 = -112						; size = 4
$T67263 = -108						; size = 4
$T67262 = -104						; size = 4
$T67261 = -100						; size = 4
$T55931 = -96						; size = 16
$T55926 = -80						; size = 16
$T55925 = -64						; size = 16
$T55923 = -48						; size = 16
$T55922 = -32						; size = 16
_dodrift$ = -5						; size = 1
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
_iterations$ = 12					; size = 4
?Prepare@CJoint@btSoftBody@@UAEXMH@Z PROC		; btSoftBody::CJoint::Prepare, COMDAT
; _this$ = ecx
; Line 5105
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 5106
	mov	eax, DWORD PTR _iterations$[ebx]
	push	eax
	push	ecx
	fld	DWORD PTR _dt$[ebx]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Prepare@Joint@btSoftBody@@UAEXMH@Z	; btSoftBody::Joint::Prepare
; Line 5107
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	sete	dl
	mov	BYTE PTR _dodrift$[ebp], dl
; Line 5108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+192]
	add	ecx, 1
	mov	DWORD PTR tv81[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR [edx+192], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv81[ebp]
	xor	eax, eax
	cmp	edx, DWORD PTR [ecx+196]
	setg	al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+176], al
; Line 5109
	movzx	edx, BYTE PTR _dodrift$[ebp]
	test	edx, edx
	je	$LN3@Prepare@3
; Line 5111
	lea	eax, DWORD PTR _dt$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	lea	eax, DWORD PTR $T55922[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55923[ebp]
	push	ecx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 5112
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fcomp	DWORD PTR [ecx+88]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@Prepare@3
; Line 5114
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 88					; 00000058H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	lea	ecx, DWORD PTR $T55925[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 128				; 00000080H
	push	edx
	lea	eax, DWORD PTR $T55926[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 5115
	mov	ecx, DWORD PTR _this$[ebp]
	fld1
	fsub	DWORD PTR [ecx+88]
	fstp	DWORD PTR $T67261[ebp]
	lea	edx, DWORD PTR $T67261[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
$LN2@Prepare@3:
; Line 5117
	fild	DWORD PTR _iterations$[ebx]
	fstp	DWORD PTR $T67262[ebp]
	lea	eax, DWORD PTR $T67262[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 5119
	jmp	SHORT $LN1@Prepare@3
$LN3@Prepare@3:
; Line 5121
	fldz
	fstp	DWORD PTR $T67263[ebp]
	fldz
	fstp	DWORD PTR $T67264[ebp]
	fldz
	fstp	DWORD PTR $T67265[ebp]
	lea	ecx, DWORD PTR $T67263[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67264[ebp]
	push	edx
	lea	eax, DWORD PTR $T67265[ebp]
	push	eax
	lea	ecx, DWORD PTR $T55931[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
$LN1@Prepare@3:
; Line 5123
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?Prepare@CJoint@btSoftBody@@UAEXMH@Z ENDP		; btSoftBody::CJoint::Prepare
_TEXT	ENDS
PUBLIC	??DImpulse@btSoftBody@@QBE?AU01@M@Z		; btSoftBody::Impulse::operator*
PUBLIC	?Solve@CJoint@btSoftBody@@UAEXMM@Z		; btSoftBody::CJoint::Solve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Solve@CJoint@btSoftBody@@UAEXMM@Z
_TEXT	SEGMENT
$T55966 = -512						; size = 48
$T55964 = -464						; size = 48
$T55963 = -416						; size = 48
$T55962 = -368						; size = 48
$T55956 = -320						; size = 16
$T55955 = -304						; size = 16
$T55954 = -288						; size = 16
$T55953 = -272						; size = 16
_fv$55951 = -240					; size = 16
_iv$55949 = -208					; size = 16
_impulse$ = -176					; size = 48
_rvac$ = -108						; size = 4
_vrel$ = -96						; size = 16
_vb$ = -64						; size = 16
_va$ = -32						; size = 16
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
_sor$ = 12						; size = 4
?Solve@CJoint@btSoftBody@@UAEXMM@Z PROC			; btSoftBody::CJoint::Solve, COMDAT
; _this$ = ecx
; Line 5127
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 5128
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 208				; 000000d0H
	push	eax
	lea	ecx, DWORD PTR _va$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ; btSoftBody::Body::velocity
; Line 5129
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 224				; 000000e0H
	push	edx
	lea	eax, DWORD PTR _vb$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ; btSoftBody::Body::velocity
; Line 5130
	lea	ecx, DWORD PTR _vb$[ebp]
	push	ecx
	lea	edx, DWORD PTR _va$[ebp]
	push	edx
	lea	eax, DWORD PTR _vrel$[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5131
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	push	ecx
	lea	edx, DWORD PTR _vrel$[ebp]
	push	edx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _rvac$[ebp]
; Line 5132
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	??0Impulse@btSoftBody@@QAE@XZ		; btSoftBody::Impulse::Impulse
; Line 5133
	mov	eax, DWORD PTR _impulse$[ebp+32]
	or	eax, 1
	mov	DWORD PTR _impulse$[ebp+32], eax
; Line 5134
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _impulse$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _impulse$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _impulse$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _impulse$[ebp+12], eax
; Line 5135
	fldz
	fcomp	DWORD PTR _rvac$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@Solve@4
; Line 5137
	lea	ecx, DWORD PTR _rvac$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 240				; 000000f0H
	push	edx
	lea	eax, DWORD PTR _iv$55949[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 5138
	lea	ecx, DWORD PTR _iv$55949[ebp]
	push	ecx
	lea	edx, DWORD PTR _vrel$[ebp]
	push	edx
	lea	eax, DWORD PTR _fv$55951[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5139
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	push	ecx
	lea	edx, DWORD PTR _fv$55951[ebp]
	push	edx
	lea	eax, DWORD PTR $T55953[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _iv$55949[ebp]
	push	ecx
	lea	edx, DWORD PTR $T55954[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN7@Solve@4:
; Line 5141
	lea	eax, DWORD PTR _sor$[ebx]
	push	eax
	lea	ecx, DWORD PTR _impulse$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 128				; 00000080H
	push	edx
	lea	eax, DWORD PTR $T55955[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T55956[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _impulse$[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _impulse$[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _impulse$[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _impulse$[ebp+12], eax
; Line 5143
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [edx+28]
	jne	$LN6@Solve@4
; Line 5146
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fld	DWORD PTR [eax]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN2@Solve@4
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fld	DWORD PTR [eax]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN2@Solve@4
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	mov	esi, eax
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [esi]
	fld	DWORD PTR [eax]
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	$LN2@Solve@4
; Line 5148
	mov	ecx, DWORD PTR _impulse$[ebp+32]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	je	$LN2@Solve@4
; Line 5150
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fcomp	DWORD PTR [eax+388]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Solve@4
; Line 5154
	jmp	SHORT $LN2@Solve@4
$LN3@Solve@4:
; Line 5156
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	ecx
	fld	DWORD PTR [eax+392]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T55963[ebp]
	push	ecx
	lea	edx, DWORD PTR $T55962[ebp]
	push	edx
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	??GImpulse@btSoftBody@@QBE?AU01@XZ	; btSoftBody::Impulse::operator-
	mov	ecx, eax
	call	??DImpulse@btSoftBody@@QBE?AU01@M@Z	; btSoftBody::Impulse::operator*
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z ; btSoftBody::Body::applyImpulse
; Line 5157
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 224				; 000000e0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	ecx
	fld	DWORD PTR [edx+392]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T55964[ebp]
	push	eax
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	??DImpulse@btSoftBody@@QBE?AU01@M@Z	; btSoftBody::Impulse::operator*
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z ; btSoftBody::Body::applyImpulse
$LN2@Solve@4:
; Line 5162
	jmp	SHORT $LN1@Solve@4
$LN6@Solve@4:
; Line 5164
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	push	ecx
	lea	edx, DWORD PTR $T55966[ebp]
	push	edx
	lea	ecx, DWORD PTR _impulse$[ebp]
	call	??GImpulse@btSoftBody@@QBE?AU01@XZ	; btSoftBody::Impulse::operator-
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z ; btSoftBody::Body::applyImpulse
; Line 5165
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 224				; 000000e0H
	push	eax
	lea	ecx, DWORD PTR _impulse$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?applyImpulse@Body@btSoftBody@@QBEXABUImpulse@2@ABVbtVector3@@@Z ; btSoftBody::Body::applyImpulse
$LN1@Solve@4:
; Line 5167
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@Solve@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	2
$LN18@Solve@4:
	DD	7
	DD	$LN17@Solve@4
$LN17@Solve@4:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN10@Solve@4
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN11@Solve@4
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN12@Solve@4
	DD	-108					; ffffff94H
	DD	4
	DD	$LN13@Solve@4
	DD	-176					; ffffff50H
	DD	48					; 00000030H
	DD	$LN14@Solve@4
	DD	-208					; ffffff30H
	DD	16					; 00000010H
	DD	$LN15@Solve@4
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN16@Solve@4
$LN16@Solve@4:
	DB	102					; 00000066H
	DB	118					; 00000076H
	DB	0
$LN15@Solve@4:
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	0
$LN14@Solve@4:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN13@Solve@4:
	DB	114					; 00000072H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	0
$LN12@Solve@4:
	DB	118					; 00000076H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN11@Solve@4:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	0
$LN10@Solve@4:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	0
?Solve@CJoint@btSoftBody@@UAEXMM@Z ENDP			; btSoftBody::CJoint::Solve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??DImpulse@btSoftBody@@QBE?AU01@M@Z
_TEXT	SEGMENT
_i$ = -64						; size = 48
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??DImpulse@btSoftBody@@QBE?AU01@M@Z PROC		; btSoftBody::Impulse::operator*, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 370
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 371
	mov	esi, DWORD PTR _this$[ebp]
	mov	ecx, 12					; 0000000cH
	lea	edi, DWORD PTR _i$[ebp]
	rep movsd
; Line 372
	lea	eax, DWORD PTR _x$[ebx]
	push	eax
	lea	ecx, DWORD PTR _i$[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 373
	lea	ecx, DWORD PTR _x$[ebx]
	push	ecx
	lea	ecx, DWORD PTR _i$[ebp+16]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 374
	mov	ecx, 12					; 0000000cH
	lea	esi, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebx]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 375
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN5@operator@2:
	DD	1
	DD	$LN4@operator@2
$LN4@operator@2:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN3@operator@2
$LN3@operator@2:
	DB	105					; 00000069H
	DB	0
??DImpulse@btSoftBody@@QBE?AU01@M@Z ENDP		; btSoftBody::Impulse::operator*
_TEXT	ENDS
PUBLIC	?Terminate@CJoint@btSoftBody@@UAEXM@Z		; btSoftBody::CJoint::Terminate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Terminate@CJoint@btSoftBody@@UAEXM@Z
_TEXT	SEGMENT
$T55972 = -32						; size = 16
_this$ = -4						; size = 4
_dt$ = 8						; size = 4
?Terminate@CJoint@btSoftBody@@UAEXM@Z PROC		; btSoftBody::CJoint::Terminate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5171
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 5172
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fcomp	DWORD PTR [eax+88]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@Terminate@3
; Line 5174
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	lea	eax, DWORD PTR $T55972[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?applyDImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ; btSoftBody::Body::applyDImpulse
; Line 5175
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?applyDImpulse@Body@btSoftBody@@QBEXABVbtVector3@@0@Z ; btSoftBody::Body::applyDImpulse
$LN1@Terminate@3:
; Line 5177
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?Terminate@CJoint@btSoftBody@@UAEXM@Z ENDP		; btSoftBody::CJoint::Terminate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?applyForces@btSoftBody@@QAEXXZ
_TEXT	SEGMENT
tv93 = -158						; size = 1
tv88 = -157						; size = 1
tv83 = -156						; size = 1
tv81 = -155						; size = 1
tv79 = -154						; size = 1
tv77 = -153						; size = 1
$T67299 = -152						; size = 4
$T67298 = -148						; size = 4
$T56007 = -144						; size = 16
$T56004 = -128						; size = 16
_n$55999 = -112						; size = 4
_ni$ = -108						; size = 4
_i$ = -104						; size = 4
_medium$ = -96						; size = 32
_dvolumetv$ = -52					; size = 4
_ivolumetp$ = -48					; size = 4
_volume$ = -44						; size = 4
_use_volume$ = -39					; size = 1
_use_medium$ = -38					; size = 1
_as_aero$ = -37						; size = 1
_as_volume$ = -36					; size = 1
_as_pressure$ = -35					; size = 1
_as_drag$ = -34						; size = 1
_as_lift$ = -33						; size = 1
_kVC$ = -32						; size = 4
_kPR$ = -28						; size = 4
_kDG$ = -24						; size = 4
_kLF$ = -20						; size = 4
___profile$ = -9					; size = 1
_this$ = -4						; size = 4
?applyForces@btSoftBody@@QAEXXZ PROC			; btSoftBody::applyForces, COMDAT
; _this$ = ecx
; Line 5181
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 5183
	push	OFFSET $SG55977
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??0CProfileSample@@QAE@PBD@Z		; CProfileSample::CProfileSample
; Line 5185
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+328]
	fstp	DWORD PTR _kLF$[ebp]
; Line 5186
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+324]
	fstp	DWORD PTR _kDG$[ebp]
; Line 5187
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+332]
	fstp	DWORD PTR _kPR$[ebp]
; Line 5188
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+336]
	fstp	DWORD PTR _kVC$[ebp]
; Line 5189
	fldz
	fcomp	DWORD PTR _kLF$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN14@applyForce
	mov	BYTE PTR tv77[ebp], 1
	jmp	SHORT $LN15@applyForce
$LN14@applyForce:
	mov	BYTE PTR tv77[ebp], 0
$LN15@applyForce:
	mov	cl, BYTE PTR tv77[ebp]
	mov	BYTE PTR _as_lift$[ebp], cl
; Line 5190
	fldz
	fcomp	DWORD PTR _kDG$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN16@applyForce
	mov	BYTE PTR tv79[ebp], 1
	jmp	SHORT $LN17@applyForce
$LN16@applyForce:
	mov	BYTE PTR tv79[ebp], 0
$LN17@applyForce:
	mov	dl, BYTE PTR tv79[ebp]
	mov	BYTE PTR _as_drag$[ebp], dl
; Line 5191
	fld	DWORD PTR _kPR$[ebp]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN18@applyForce
	mov	BYTE PTR tv81[ebp], 1
	jmp	SHORT $LN19@applyForce
$LN18@applyForce:
	mov	BYTE PTR tv81[ebp], 0
$LN19@applyForce:
	mov	al, BYTE PTR tv81[ebp]
	mov	BYTE PTR _as_pressure$[ebp], al
; Line 5192
	fldz
	fcomp	DWORD PTR _kVC$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN20@applyForce
	mov	BYTE PTR tv83[ebp], 1
	jmp	SHORT $LN21@applyForce
$LN20@applyForce:
	mov	BYTE PTR tv83[ebp], 0
$LN21@applyForce:
	mov	cl, BYTE PTR tv83[ebp]
	mov	BYTE PTR _as_volume$[ebp], cl
; Line 5194
	movzx	edx, BYTE PTR _as_lift$[ebp]
	test	edx, edx
	jne	SHORT $LN22@applyForce
	movzx	eax, BYTE PTR _as_drag$[ebp]
	test	eax, eax
	jne	SHORT $LN22@applyForce
	mov	BYTE PTR tv88[ebp], 0
	jmp	SHORT $LN23@applyForce
$LN22@applyForce:
	mov	BYTE PTR tv88[ebp], 1
$LN23@applyForce:
	mov	cl, BYTE PTR tv88[ebp]
	mov	BYTE PTR _as_aero$[ebp], cl
; Line 5199
	mov	dl, BYTE PTR _as_aero$[ebp]
	mov	BYTE PTR _use_medium$[ebp], dl
; Line 5201
	movzx	eax, BYTE PTR _as_pressure$[ebp]
	test	eax, eax
	jne	SHORT $LN24@applyForce
	movzx	ecx, BYTE PTR _as_volume$[ebp]
	test	ecx, ecx
	jne	SHORT $LN24@applyForce
	mov	BYTE PTR tv93[ebp], 0
	jmp	SHORT $LN25@applyForce
$LN24@applyForce:
	mov	BYTE PTR tv93[ebp], 1
$LN25@applyForce:
	mov	dl, BYTE PTR tv93[ebp]
	mov	BYTE PTR _use_volume$[ebp], dl
; Line 5202
	fldz
	fstp	DWORD PTR _volume$[ebp]
; Line 5203
	fldz
	fstp	DWORD PTR _ivolumetp$[ebp]
; Line 5204
	fldz
	fstp	DWORD PTR _dvolumetv$[ebp]
; Line 5205
	lea	ecx, DWORD PTR _medium$[ebp]
	call	??0sMedium@btSoftBody@@QAE@XZ
; Line 5206
	movzx	eax, BYTE PTR _use_volume$[ebp]
	test	eax, eax
	je	SHORT $LN11@applyForce
; Line 5208
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getVolume@btSoftBody@@QBEMXZ		; btSoftBody::getVolume
	fstp	DWORD PTR _volume$[ebp]
; Line 5209
	push	ecx
	fld	DWORD PTR _volume$[ebp]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fld1
	fdivrp	ST(1), ST(0)
	fmul	DWORD PTR _kPR$[ebp]
	fstp	DWORD PTR _ivolumetp$[ebp]
; Line 5210
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+500]
	fsub	DWORD PTR _volume$[ebp]
	fmul	DWORD PTR _kVC$[ebp]
	fstp	DWORD PTR _dvolumetv$[ebp]
$LN11@applyForce:
; Line 5215
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN10@applyForce
$LN9@applyForce:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@applyForce:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	$LN8@applyForce
; Line 5217
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$55999[ebp], eax
; Line 5218
	mov	edx, DWORD PTR _n$55999[ebp]
	fldz
	fcomp	DWORD PTR [edx+96]
	fnstsw	ax
	test	ah, 5
	jp	$LN4@applyForce
; Line 5220
	movzx	eax, BYTE PTR _use_medium$[ebp]
	test	eax, eax
	je	SHORT $LN6@applyForce
; Line 5223
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 1248				; 000004e0H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addAeroForceToNode@btSoftBody@@QAEXABVbtVector3@@H@Z ; btSoftBody::addAeroForceToNode
$LN6@applyForce:
; Line 5226
	movzx	eax, BYTE PTR _as_pressure$[ebp]
	test	eax, eax
	je	SHORT $LN5@applyForce
; Line 5228
	mov	ecx, DWORD PTR _n$55999[ebp]
	fld	DWORD PTR [ecx+100]
	fmul	DWORD PTR _ivolumetp$[ebp]
	fstp	DWORD PTR $T67298[ebp]
	lea	edx, DWORD PTR $T67298[ebp]
	push	edx
	mov	eax, DWORD PTR _n$55999[ebp]
	add	eax, 80					; 00000050H
	push	eax
	lea	ecx, DWORD PTR $T56004[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$55999[ebp]
	add	ecx, 64					; 00000040H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN5@applyForce:
; Line 5231
	movzx	edx, BYTE PTR _as_volume$[ebp]
	test	edx, edx
	je	SHORT $LN4@applyForce
; Line 5233
	mov	eax, DWORD PTR _n$55999[ebp]
	fld	DWORD PTR [eax+100]
	fmul	DWORD PTR _dvolumetv$[ebp]
	fstp	DWORD PTR $T67299[ebp]
	lea	ecx, DWORD PTR $T67299[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$55999[ebp]
	add	edx, 80					; 00000050H
	push	edx
	lea	eax, DWORD PTR $T56007[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$55999[ebp]
	add	ecx, 64					; 00000040H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN4@applyForce:
; Line 5236
	jmp	$LN9@applyForce
$LN8@applyForce:
; Line 5239
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN3@applyForce
$LN2@applyForce:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@applyForce:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN1@applyForce
; Line 5244
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1248				; 000004e0H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?addAeroForceToFace@btSoftBody@@QAEXABVbtVector3@@H@Z ; btSoftBody::addAeroForceToFace
; Line 5245
	jmp	SHORT $LN2@applyForce
$LN1@applyForce:
; Line 5246
	lea	ecx, DWORD PTR ___profile$[ebp]
	call	??1CProfileSample@@QAE@XZ		; CProfileSample::~CProfileSample
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@applyForce
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN29@applyForce:
	DD	2
	DD	$LN28@applyForce
$LN28@applyForce:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN26@applyForce
	DD	-96					; ffffffa0H
	DD	32					; 00000020H
	DD	$LN27@applyForce
$LN27@applyForce:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
$LN26@applyForce:
	DB	95					; 0000005fH
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?applyForces@btSoftBody@@QAEXXZ ENDP			; btSoftBody::applyForces
_TEXT	ENDS
PUBLIC	?getVelocityInLocalPoint@btRigidBody@@QBE?AVbtVector3@@ABV2@@Z ; btRigidBody::getVelocityInLocalPoint
PUBLIC	?PSolve_Anchors@btSoftBody@@SAXPAV1@MM@Z	; btSoftBody::PSolve_Anchors
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?PSolve_Anchors@btSoftBody@@SAXPAV1@MM@Z
_TEXT	SEGMENT
$T56042 = -352						; size = 16
$T56041 = -336						; size = 16
$T56039 = -320						; size = 16
_impulse$56038 = -288					; size = 16
$T56036 = -256						; size = 16
$T56035 = -240						; size = 16
$T56034 = -224						; size = 16
_vr$56033 = -192					; size = 16
_vb$56031 = -160					; size = 16
$T56029 = -128						; size = 16
_va$56028 = -96						; size = 16
_wa$56026 = -64						; size = 16
_n$56025 = -44						; size = 4
_t$56024 = -40						; size = 4
_a$56023 = -36						; size = 4
_ni$56019 = -32						; size = 4
_i$56018 = -28						; size = 4
_dt$ = -20						; size = 4
_kAHR$ = -8						; size = 4
_psb$ = 8						; size = 4
_kst$ = 12						; size = 4
_ti$ = 16						; size = 4
?PSolve_Anchors@btSoftBody@@SAXPAV1@MM@Z PROC		; btSoftBody::PSolve_Anchors, COMDAT
; Line 5250
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 352				; 00000160H
	push	edi
	lea	edi, DWORD PTR [ebp-352]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 5251
	mov	eax, DWORD PTR _psb$[ebx]
	fld	DWORD PTR [eax+360]
	fmul	DWORD PTR _kst$[ebx]
	fstp	DWORD PTR _kAHR$[ebp]
; Line 5252
	mov	ecx, DWORD PTR _psb$[ebx]
	fld	DWORD PTR [ecx+476]
	fstp	DWORD PTR _dt$[ebp]
; Line 5253
	mov	DWORD PTR _i$56018[ebp], 0
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 812				; 0000032cH
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	mov	DWORD PTR _ni$56019[ebp], eax
	jmp	SHORT $LN3@PSolve_Anc
$LN2@PSolve_Anc:
	mov	edx, DWORD PTR _i$56018[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56018[ebp], edx
$LN3@PSolve_Anc:
	mov	eax, DWORD PTR _i$56018[ebp]
	cmp	eax, DWORD PTR _ni$56019[ebp]
	jge	$LN1@PSolve_Anc
; Line 5255
	mov	ecx, DWORD PTR _i$56018[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	DWORD PTR _a$56023[ebp], eax
; Line 5256
	mov	edx, DWORD PTR _a$56023[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	mov	DWORD PTR _t$56024[ebp], eax
; Line 5257
	mov	eax, DWORD PTR _a$56023[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _n$56025[ebp], ecx
; Line 5258
	mov	edx, DWORD PTR _a$56023[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR _wa$56026[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$56024[ebp]
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 5259
	lea	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$56023[ebp]
	add	edx, 96					; 00000060H
	push	edx
	lea	eax, DWORD PTR $T56029[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$56023[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?getVelocityInLocalPoint@btRigidBody@@QBE?AVbtVector3@@ABV2@@Z ; btRigidBody::getVelocityInLocalPoint
	push	eax
	lea	edx, DWORD PTR _va$56028[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 5260
	mov	eax, DWORD PTR _n$56025[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _n$56025[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _vb$56031[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5261
	lea	eax, DWORD PTR _kAHR$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$56025[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _wa$56026[ebp]
	push	edx
	lea	eax, DWORD PTR $T56035[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T56036[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _vb$56031[ebp]
	push	edx
	lea	eax, DWORD PTR _va$56028[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56034[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _vr$56033[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 5262
	mov	eax, DWORD PTR _a$56023[ebp]
	add	eax, 36					; 00000024H
	push	eax
	lea	ecx, DWORD PTR _vr$56033[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$56023[ebp]
	add	edx, 48					; 00000030H
	push	edx
	lea	eax, DWORD PTR $T56039[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _impulse$56038[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 5263
	mov	edx, DWORD PTR _a$56023[ebp]
	add	edx, 112				; 00000070H
	push	edx
	lea	eax, DWORD PTR _impulse$56038[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56041[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$56025[ebp]
	add	ecx, 16					; 00000010H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 5264
	mov	edx, DWORD PTR _a$56023[ebp]
	add	edx, 96					; 00000060H
	push	edx
	lea	eax, DWORD PTR _impulse$56038[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56042[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _a$56023[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	?applyImpulse@btRigidBody@@QAEXABVbtVector3@@0@Z ; btRigidBody::applyImpulse
; Line 5265
	jmp	$LN2@PSolve_Anc
$LN1@PSolve_Anc:
; Line 5266
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@PSolve_Anc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN14@PSolve_Anc:
	DD	7
	DD	$LN13@PSolve_Anc
$LN13@PSolve_Anc:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@PSolve_Anc
	DD	-20					; ffffffecH
	DD	4
	DD	$LN7@PSolve_Anc
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN8@PSolve_Anc
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN9@PSolve_Anc
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN10@PSolve_Anc
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN11@PSolve_Anc
	DD	-288					; fffffee0H
	DD	16					; 00000010H
	DD	$LN12@PSolve_Anc
$LN12@PSolve_Anc:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN11@PSolve_Anc:
	DB	118					; 00000076H
	DB	114					; 00000072H
	DB	0
$LN10@PSolve_Anc:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	0
$LN9@PSolve_Anc:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	0
$LN8@PSolve_Anc:
	DB	119					; 00000077H
	DB	97					; 00000061H
	DB	0
$LN7@PSolve_Anc:
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	0
$LN6@PSolve_Anc:
	DB	107					; 0000006bH
	DB	65					; 00000041H
	DB	72					; 00000048H
	DB	82					; 00000052H
	DB	0
?PSolve_Anchors@btSoftBody@@SAXPAV1@MM@Z ENDP		; btSoftBody::PSolve_Anchors
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getVelocityInLocalPoint@btRigidBody@@QBE?AVbtVector3@@ABV2@@Z
_TEXT	SEGMENT
$T11203 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_rel_pos$ = 12						; size = 4
?getVelocityInLocalPoint@btRigidBody@@QBE?AVbtVector3@@ABV2@@Z PROC ; btRigidBody::getVelocityInLocalPoint, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletdynamics\dynamics\btrigidbody.h
; Line 377
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 379
	mov	eax, DWORD PTR _rel_pos$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T11203[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 352				; 00000160H
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 336				; 00000150H
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 383
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?getVelocityInLocalPoint@btRigidBody@@QBE?AVbtVector3@@ABV2@@Z ENDP ; btRigidBody::getVelocityInLocalPoint
_TEXT	ENDS
PUBLIC	?upcast@btRigidBody@@SAPBV1@PBVbtCollisionObject@@@Z ; btRigidBody::upcast
PUBLIC	??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::RContact>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
PUBLIC	?PSolve_RContacts@btSoftBody@@SAXPAV1@MM@Z	; btSoftBody::PSolve_RContacts
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?PSolve_RContacts@btSoftBody@@SAXPAV1@MM@Z
_TEXT	SEGMENT
tv135 = -448						; size = 4
tv73 = -444						; size = 4
$T67326 = -440						; size = 4
$T67325 = -436						; size = 4
$T67322 = -432						; size = 4
$T67321 = -428						; size = 4
$T67320 = -424						; size = 4
$T67319 = -420						; size = 4
$T56086 = -416						; size = 16
$T56084 = -400						; size = 16
$T56083 = -384						; size = 16
$T56082 = -368						; size = 16
$T56080 = -352						; size = 16
$T56079 = -336						; size = 16
_impulse$56078 = -304					; size = 16
$T56076 = -272						; size = 16
_fv$56075 = -240					; size = 16
_dp$56073 = -212					; size = 4
_dn$56071 = -204					; size = 4
_vr$56069 = -192					; size = 16
_vb$56067 = -160					; size = 16
$T56062 = -128						; size = 16
$T56061 = -112						; size = 16
$T56060 = -96						; size = 16
_va$56059 = -64						; size = 16
_tmpRigid$56057 = -44					; size = 4
_cti$56056 = -40					; size = 4
_c$56055 = -36						; size = 4
_ni$56051 = -32						; size = 4
_i$56050 = -28						; size = 4
_mrg$ = -20						; size = 4
_dt$ = -8						; size = 4
_psb$ = 8						; size = 4
_kst$ = 12						; size = 4
_ti$ = 16						; size = 4
?PSolve_RContacts@btSoftBody@@SAXPAV1@MM@Z PROC		; btSoftBody::PSolve_RContacts, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5270
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 460				; 000001ccH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-460]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 5271
	mov	eax, DWORD PTR _psb$[ebx]
	fld	DWORD PTR [eax+476]
	fstp	DWORD PTR _dt$[ebp]
; Line 5272
	mov	ecx, DWORD PTR _psb$[ebx]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv73[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _mrg$[ebp]
; Line 5273
	mov	DWORD PTR _i$56050[ebp], 0
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 832				; 00000340H
	call	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
	mov	DWORD PTR _ni$56051[ebp], eax
	jmp	SHORT $LN5@PSolve_RCo
$LN4@PSolve_RCo:
	mov	ecx, DWORD PTR _i$56050[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$56050[ebp], ecx
$LN5@PSolve_RCo:
	mov	edx, DWORD PTR _i$56050[ebp]
	cmp	edx, DWORD PTR _ni$56051[ebp]
	jge	$LN3@PSolve_RCo
; Line 5275
	mov	eax, DWORD PTR _i$56050[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 832				; 00000340H
	call	??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::RContact>::operator[]
	mov	DWORD PTR _c$56055[ebp], eax
; Line 5276
	mov	ecx, DWORD PTR _c$56055[ebp]
	mov	DWORD PTR _cti$56056[ebp], ecx
; Line 5277
	mov	edx, DWORD PTR _cti$56056[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?upcast@btRigidBody@@SAPBV1@PBVbtCollisionObject@@@Z ; btRigidBody::upcast
	add	esp, 4
	mov	DWORD PTR _tmpRigid$56057[ebp], eax
; Line 5279
	cmp	DWORD PTR _tmpRigid$56057[ebp], 0
	je	SHORT $LN8@PSolve_RCo
	lea	ecx, DWORD PTR _dt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$56055[ebp]
	add	edx, 112				; 00000070H
	push	edx
	lea	eax, DWORD PTR $T56060[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmpRigid$56057[ebp]
	call	?getVelocityInLocalPoint@btRigidBody@@QBE?AVbtVector3@@ABV2@@Z ; btRigidBody::getVelocityInLocalPoint
	push	eax
	lea	ecx, DWORD PTR $T56061[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN9@PSolve_RCo
$LN8@PSolve_RCo:
	fldz
	fstp	DWORD PTR $T67320[ebp]
	fldz
	fstp	DWORD PTR $T67321[ebp]
	fldz
	fstp	DWORD PTR $T67322[ebp]
	lea	edx, DWORD PTR $T67320[ebp]
	push	edx
	lea	eax, DWORD PTR $T67321[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67322[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T56062[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	DWORD PTR tv135[ebp], eax
$LN9@PSolve_RCo:
	mov	edx, DWORD PTR tv135[ebp]
	mov	DWORD PTR $T67319[ebp], edx
	mov	eax, DWORD PTR $T67319[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _va$56059[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _va$56059[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _va$56059[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _va$56059[ebp+12], edx
; Line 5280
	mov	eax, DWORD PTR _c$56055[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _c$56055[ebp]
	mov	eax, DWORD PTR [edx+48]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _vb$56067[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5281
	lea	edx, DWORD PTR _va$56059[ebp]
	push	edx
	lea	eax, DWORD PTR _vb$56067[ebp]
	push	eax
	lea	ecx, DWORD PTR _vr$56069[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5282
	mov	edx, DWORD PTR _cti$56056[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR _vr$56069[ebp]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dn$56071[ebp]
; Line 5283
	fld	DWORD PTR __real@34000000
	fcomp	DWORD PTR _dn$56071[ebp]
	fnstsw	ax
	test	ah, 1
	jne	$LN1@PSolve_RCo
; Line 5285
	mov	ecx, DWORD PTR _cti$56056[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _c$56055[ebp]
	mov	eax, DWORD PTR [edx+48]
	add	eax, 16					; 00000010H
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	mov	ecx, DWORD PTR _cti$56056[ebp]
	fadd	DWORD PTR [ecx+32]
	fstp	DWORD PTR $T67325[ebp]
	lea	edx, DWORD PTR _mrg$[ebp]
	push	edx
	lea	eax, DWORD PTR $T67325[ebp]
	push	eax
	call	??$btMin@M@@YAABMABM0@Z			; btMin<float>
	add	esp, 8
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _dp$56073[ebp]
; Line 5286
	lea	ecx, DWORD PTR _dn$56071[ebp]
	push	ecx
	mov	edx, DWORD PTR _cti$56056[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T56076[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _vr$56069[ebp]
	push	ecx
	lea	edx, DWORD PTR _fv$56075[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5288
	mov	eax, DWORD PTR _c$56055[ebp]
	fld	DWORD PTR _dp$56073[ebp]
	fmul	DWORD PTR [eax+136]
	fstp	DWORD PTR $T67326[ebp]
	lea	ecx, DWORD PTR _kst$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T67326[ebp]
	push	edx
	mov	eax, DWORD PTR _cti$56056[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T56082[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _c$56055[ebp]
	add	edx, 132				; 00000084H
	push	edx
	lea	eax, DWORD PTR _fv$56075[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56079[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _vr$56069[ebp]
	push	edx
	lea	eax, DWORD PTR $T56080[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T56083[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T56084[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _c$56055[ebp]
	add	eax, 64					; 00000040H
	push	eax
	lea	ecx, DWORD PTR _impulse$56078[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
; Line 5289
	mov	edx, DWORD PTR _c$56055[ebp]
	add	edx, 128				; 00000080H
	push	edx
	lea	eax, DWORD PTR _impulse$56078[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56086[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _c$56055[ebp]
	mov	ecx, DWORD PTR [edx+48]
	add	ecx, 16					; 00000010H
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 5290
	cmp	DWORD PTR _tmpRigid$56057[ebp], 0
	je	SHORT $LN1@PSolve_RCo
; Line 5291
	mov	eax, DWORD PTR _c$56055[ebp]
	add	eax, 112				; 00000070H
	push	eax
	lea	ecx, DWORD PTR _impulse$56078[ebp]
	push	ecx
	mov	ecx, DWORD PTR _tmpRigid$56057[ebp]
	call	?applyImpulse@btRigidBody@@QAEXABVbtVector3@@0@Z ; btRigidBody::applyImpulse
$LN1@PSolve_RCo:
; Line 5293
	jmp	$LN4@PSolve_RCo
$LN3@PSolve_RCo:
; Line 5294
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@PSolve_RCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN19@PSolve_RCo:
	DD	8
	DD	$LN18@PSolve_RCo
$LN18@PSolve_RCo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN10@PSolve_RCo
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@PSolve_RCo
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN12@PSolve_RCo
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN13@PSolve_RCo
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN14@PSolve_RCo
	DD	-204					; ffffff34H
	DD	4
	DD	$LN15@PSolve_RCo
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN16@PSolve_RCo
	DD	-304					; fffffed0H
	DD	16					; 00000010H
	DD	$LN17@PSolve_RCo
$LN17@PSolve_RCo:
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN16@PSolve_RCo:
	DB	102					; 00000066H
	DB	118					; 00000076H
	DB	0
$LN15@PSolve_RCo:
	DB	100					; 00000064H
	DB	110					; 0000006eH
	DB	0
$LN14@PSolve_RCo:
	DB	118					; 00000076H
	DB	114					; 00000072H
	DB	0
$LN13@PSolve_RCo:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	0
$LN12@PSolve_RCo:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	0
$LN11@PSolve_RCo:
	DB	109					; 0000006dH
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	0
$LN10@PSolve_RCo:
	DB	100					; 00000064H
	DB	116					; 00000074H
	DB	0
?PSolve_RContacts@btSoftBody@@SAXPAV1@MM@Z ENDP		; btSoftBody::PSolve_RContacts
_TEXT	ENDS
PUBLIC	?getInternalType@btCollisionObject@@QBEHXZ	; btCollisionObject::getInternalType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?upcast@btRigidBody@@SAPBV1@PBVbtCollisionObject@@@Z
_TEXT	SEGMENT
_colObj$ = 8						; size = 4
?upcast@btRigidBody@@SAPBV1@PBVbtCollisionObject@@@Z PROC ; btRigidBody::upcast, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletdynamics\dynamics\btrigidbody.h
; Line 198
	push	ebp
	mov	ebp, esp
; Line 199
	mov	ecx, DWORD PTR _colObj$[ebp]
	call	?getInternalType@btCollisionObject@@QBEHXZ ; btCollisionObject::getInternalType
	and	eax, 2
	je	SHORT $LN1@upcast
; Line 200
	mov	eax, DWORD PTR _colObj$[ebp]
	jmp	SHORT $LN2@upcast
$LN1@upcast:
; Line 201
	xor	eax, eax
$LN2@upcast:
; Line 202
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?upcast@btRigidBody@@SAPBV1@PBVbtCollisionObject@@@Z ENDP ; btRigidBody::upcast
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getInternalType@btCollisionObject@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInternalType@btCollisionObject@@QBEHXZ PROC		; btCollisionObject::getInternalType, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 299
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 300
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+248]
; Line 301
	mov	esp, ebp
	pop	ebp
	ret	0
?getInternalType@btCollisionObject@@QBEHXZ ENDP		; btCollisionObject::getInternalType
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEAAUSContact@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::SContact>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::size
PUBLIC	?PSolve_SContacts@btSoftBody@@SAXPAV1@MM@Z	; btSoftBody::PSolve_SContacts
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?PSolve_SContacts@btSoftBody@@SAXPAV1@MM@Z
_TEXT	SEGMENT
tv355 = -364						; size = 4
$T67348 = -360						; size = 4
$T67347 = -356						; size = 4
$T67346 = -352						; size = 4
$T67345 = -348						; size = 4
$T67344 = -344						; size = 4
$T67343 = -340						; size = 4
$T56133 = -336						; size = 16
$T56131 = -320						; size = 16
$T56129 = -304						; size = 16
$T56127 = -288						; size = 16
$T56126 = -272						; size = 16
$T56125 = -256						; size = 16
$T56124 = -240						; size = 16
_j$56123 = -208						; size = 4
_dot$56121 = -200					; size = 4
_corr$56117 = -192					; size = 16
$T56115 = -160						; size = 16
$T56114 = -144						; size = 16
_vr$56113 = -112					; size = 16
_q$56111 = -80						; size = 16
_p$56102 = -48						; size = 16
_f$56101 = -24						; size = 4
_n$56100 = -20						; size = 4
_nr$56099 = -16						; size = 4
_c$56098 = -12						; size = 4
_ni$56094 = -8						; size = 4
_i$56093 = -4						; size = 4
_psb$ = 8						; size = 4
___formal$ = 12						; size = 4
_ti$ = 16						; size = 4
?PSolve_SContacts@btSoftBody@@SAXPAV1@MM@Z PROC		; btSoftBody::PSolve_SContacts, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5298
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 368				; 00000170H
	push	edi
	lea	edi, DWORD PTR [ebp-368]
	mov	ecx, 92					; 0000005cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 5299
	mov	DWORD PTR _i$56093[ebp], 0
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 852				; 00000354H
	call	?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::size
	mov	DWORD PTR _ni$56094[ebp], eax
	jmp	SHORT $LN4@PSolve_SCo
$LN3@PSolve_SCo:
	mov	eax, DWORD PTR _i$56093[ebp]
	add	eax, 1
	mov	DWORD PTR _i$56093[ebp], eax
$LN4@PSolve_SCo:
	mov	ecx, DWORD PTR _i$56093[ebp]
	cmp	ecx, DWORD PTR _ni$56094[ebp]
	jge	$LN2@PSolve_SCo
; Line 5301
	mov	edx, DWORD PTR _i$56093[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 852				; 00000354H
	call	??A?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEAAUSContact@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::SContact>::operator[]
	mov	DWORD PTR _c$56098[ebp], eax
; Line 5302
	mov	eax, DWORD PTR _c$56098[ebp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR _nr$56099[ebp], eax
; Line 5303
	mov	ecx, DWORD PTR _c$56098[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _n$56100[ebp], edx
; Line 5304
	mov	eax, DWORD PTR _c$56098[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _f$56101[ebp], ecx
; Line 5308
	mov	edx, DWORD PTR _c$56098[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _f$56101[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _f$56101[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _f$56101[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR _p$56102[ebp]
	push	eax
	call	??$BaryEval@VbtVector3@@@@YA?AVbtVector3@@ABV0@000@Z ; BaryEval<btVector3>
	add	esp, 20					; 00000014H
; Line 5312
	mov	ecx, DWORD PTR _c$56098[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _f$56101[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _f$56101[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _f$56101[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	edx, DWORD PTR _q$56111[ebp]
	push	edx
	call	??$BaryEval@VbtVector3@@@@YA?AVbtVector3@@ABV0@000@Z ; BaryEval<btVector3>
	add	esp, 20					; 00000014H
; Line 5313
	lea	eax, DWORD PTR _q$56111[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$56102[ebp]
	push	ecx
	lea	edx, DWORD PTR $T56115[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _n$56100[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _n$56100[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T56114[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _vr$56113[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5314
	fldz
	fstp	DWORD PTR $T67343[ebp]
	fldz
	fstp	DWORD PTR $T67344[ebp]
	fldz
	fstp	DWORD PTR $T67345[ebp]
	lea	ecx, DWORD PTR $T67343[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67344[ebp]
	push	edx
	lea	eax, DWORD PTR $T67345[ebp]
	push	eax
	lea	ecx, DWORD PTR _corr$56117[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 5315
	mov	ecx, DWORD PTR _nr$56099[ebp]
	push	ecx
	lea	edx, DWORD PTR _vr$56113[ebp]
	push	edx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dot$56121[ebp]
; Line 5316
	fldz
	fcomp	DWORD PTR _dot$56121[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@PSolve_SCo
; Line 5318
	mov	eax, DWORD PTR _n$56100[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _nr$56099[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	lea	edx, DWORD PTR _p$56102[ebp]
	push	edx
	mov	eax, DWORD PTR _nr$56099[ebp]
	push	eax
	fstp	DWORD PTR tv355[ebp]
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fsubr	DWORD PTR tv355[ebp]
	mov	ecx, DWORD PTR _c$56098[ebp]
	fsubr	DWORD PTR [ecx+48]
	fstp	DWORD PTR _j$56123[ebp]
; Line 5319
	lea	edx, DWORD PTR _j$56123[ebp]
	push	edx
	mov	eax, DWORD PTR _c$56098[ebp]
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR $T56124[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _corr$56117[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN1@PSolve_SCo:
; Line 5321
	mov	edx, DWORD PTR _c$56098[ebp]
	add	edx, 52					; 00000034H
	push	edx
	mov	eax, DWORD PTR _nr$56099[ebp]
	push	eax
	lea	ecx, DWORD PTR _vr$56113[ebp]
	push	ecx
	lea	edx, DWORD PTR $T56125[ebp]
	push	edx
	call	?ProjectOnPlane@@YA?AVbtVector3@@ABV1@0@Z ; ProjectOnPlane
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T56126[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _corr$56117[ebp]
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 5322
	mov	ecx, DWORD PTR _c$56098[ebp]
	add	ecx, 56					; 00000038H
	push	ecx
	lea	edx, DWORD PTR _corr$56117[ebp]
	push	edx
	lea	eax, DWORD PTR $T56127[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$56100[ebp]
	add	ecx, 16					; 00000010H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 5323
	mov	ecx, DWORD PTR _c$56098[ebp]
	add	ecx, 16					; 00000010H
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	ecx, DWORD PTR _c$56098[ebp]
	fld	DWORD PTR [ecx+60]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR $T67346[ebp]
	lea	edx, DWORD PTR $T67346[ebp]
	push	edx
	lea	eax, DWORD PTR _corr$56117[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56129[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _f$56101[ebp]
	mov	ecx, DWORD PTR [edx+8]
	add	ecx, 16					; 00000010H
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 5324
	mov	ecx, DWORD PTR _c$56098[ebp]
	add	ecx, 16					; 00000010H
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	ecx, DWORD PTR _c$56098[ebp]
	fld	DWORD PTR [ecx+60]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR $T67347[ebp]
	lea	edx, DWORD PTR $T67347[ebp]
	push	edx
	lea	eax, DWORD PTR _corr$56117[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56131[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _f$56101[ebp]
	mov	ecx, DWORD PTR [edx+12]
	add	ecx, 16					; 00000010H
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 5325
	mov	ecx, DWORD PTR _c$56098[ebp]
	add	ecx, 16					; 00000010H
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	ecx, DWORD PTR _c$56098[ebp]
	fld	DWORD PTR [ecx+60]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR $T67348[ebp]
	lea	edx, DWORD PTR $T67348[ebp]
	push	edx
	lea	eax, DWORD PTR _corr$56117[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56133[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _f$56101[ebp]
	mov	ecx, DWORD PTR [edx+16]
	add	ecx, 16					; 00000010H
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 5326
	jmp	$LN3@PSolve_SCo
$LN2@PSolve_SCo:
; Line 5327
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@PSolve_SCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN13@PSolve_SCo:
	DD	5
	DD	$LN12@PSolve_SCo
$LN12@PSolve_SCo:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN7@PSolve_SCo
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN8@PSolve_SCo
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN9@PSolve_SCo
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN10@PSolve_SCo
	DD	-208					; ffffff30H
	DD	4
	DD	$LN11@PSolve_SCo
$LN11@PSolve_SCo:
	DB	106					; 0000006aH
	DB	0
$LN10@PSolve_SCo:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
$LN9@PSolve_SCo:
	DB	118					; 00000076H
	DB	114					; 00000072H
	DB	0
$LN8@PSolve_SCo:
	DB	113					; 00000071H
	DB	0
$LN7@PSolve_SCo:
	DB	112					; 00000070H
	DB	0
?PSolve_SContacts@btSoftBody@@SAXPAV1@MM@Z ENDP		; btSoftBody::PSolve_SContacts
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ProjectOnPlane@@YA?AVbtVector3@@ABV1@0@Z
_TEXT	SEGMENT
$T19478 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_a$ = 16						; size = 4
?ProjectOnPlane@@YA?AVbtVector3@@ABV1@0@Z PROC		; ProjectOnPlane, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 344
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 345
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	mov	ecx, DWORD PTR _v$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19478[ebp]
	push	edx
	call	?ProjectOnAxis@@YA?AVbtVector3@@ABV1@0@Z ; ProjectOnAxis
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _v$[ebx]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 346
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?ProjectOnPlane@@YA?AVbtVector3@@ABV1@0@Z ENDP		; ProjectOnPlane
_TEXT	ENDS
PUBLIC	?PSolve_Links@btSoftBody@@SAXPAV1@MM@Z		; btSoftBody::PSolve_Links
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?PSolve_Links@btSoftBody@@SAXPAV1@MM@Z
_TEXT	SEGMENT
$T67361 = -104						; size = 4
$T67360 = -100						; size = 4
$T56156 = -96						; size = 16
$T56154 = -80						; size = 16
_k$56152 = -60						; size = 4
_len$56150 = -56					; size = 4
_del$56148 = -48					; size = 16
_b$56147 = -20						; size = 4
_a$56146 = -16						; size = 4
_l$56144 = -12						; size = 4
_ni$56140 = -8						; size = 4
_i$56139 = -4						; size = 4
_psb$ = 8						; size = 4
_kst$ = 12						; size = 4
_ti$ = 16						; size = 4
?PSolve_Links@btSoftBody@@SAXPAV1@MM@Z PROC		; btSoftBody::PSolve_Links, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5331
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 5332
	mov	DWORD PTR _i$56139[ebp], 0
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$56140[ebp], eax
	jmp	SHORT $LN5@PSolve_Lin
$LN4@PSolve_Lin:
	mov	eax, DWORD PTR _i$56139[ebp]
	add	eax, 1
	mov	DWORD PTR _i$56139[ebp], eax
$LN5@PSolve_Lin:
	mov	ecx, DWORD PTR _i$56139[ebp]
	cmp	ecx, DWORD PTR _ni$56140[ebp]
	jge	$LN3@PSolve_Lin
; Line 5334
	mov	edx, DWORD PTR _i$56139[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$56144[ebp], eax
; Line 5335
	mov	eax, DWORD PTR _l$56144[ebp]
	fldz
	fcomp	DWORD PTR [eax+24]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@PSolve_Lin
; Line 5337
	mov	ecx, DWORD PTR _l$56144[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _a$56146[ebp], edx
; Line 5338
	mov	eax, DWORD PTR _l$56144[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _b$56147[ebp], ecx
; Line 5339
	mov	edx, DWORD PTR _a$56146[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _b$56147[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _del$56148[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 5340
	lea	ecx, DWORD PTR _del$56148[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _len$56150[ebp]
; Line 5341
	mov	edx, DWORD PTR _l$56144[ebp]
	fld	DWORD PTR [edx+28]
	fadd	DWORD PTR _len$56150[ebp]
	fcomp	DWORD PTR __real@34000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@PSolve_Lin
; Line 5343
	mov	eax, DWORD PTR _l$56144[ebp]
	fld	DWORD PTR [eax+28]
	fsub	DWORD PTR _len$56150[ebp]
	mov	ecx, DWORD PTR _l$56144[ebp]
	fld	DWORD PTR [ecx+28]
	fadd	DWORD PTR _len$56150[ebp]
	mov	edx, DWORD PTR _l$56144[ebp]
	fmul	DWORD PTR [edx+24]
	fdivp	ST(1), ST(0)
	fmul	DWORD PTR _kst$[ebx]
	fstp	DWORD PTR _k$56152[ebp]
; Line 5344
	mov	eax, DWORD PTR _a$56146[ebp]
	fld	DWORD PTR _k$56152[ebp]
	fmul	DWORD PTR [eax+96]
	fstp	DWORD PTR $T67360[ebp]
	lea	ecx, DWORD PTR $T67360[ebp]
	push	ecx
	lea	edx, DWORD PTR _del$56148[ebp]
	push	edx
	lea	eax, DWORD PTR $T56154[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _a$56146[ebp]
	add	ecx, 16					; 00000010H
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 5345
	mov	ecx, DWORD PTR _b$56147[ebp]
	fld	DWORD PTR _k$56152[ebp]
	fmul	DWORD PTR [ecx+96]
	fstp	DWORD PTR $T67361[ebp]
	lea	edx, DWORD PTR $T67361[ebp]
	push	edx
	lea	eax, DWORD PTR _del$56148[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56156[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _b$56147[ebp]
	add	ecx, 16					; 00000010H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
$LN1@PSolve_Lin:
; Line 5348
	jmp	$LN4@PSolve_Lin
$LN3@PSolve_Lin:
; Line 5349
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@PSolve_Lin
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN10@PSolve_Lin:
	DD	1
	DD	$LN9@PSolve_Lin
$LN9@PSolve_Lin:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN8@PSolve_Lin
$LN8@PSolve_Lin:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
?PSolve_Links@btSoftBody@@SAXPAV1@MM@Z ENDP		; btSoftBody::PSolve_Links
_TEXT	ENDS
PUBLIC	?VSolve_Links@btSoftBody@@SAXPAV1@M@Z		; btSoftBody::VSolve_Links
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?VSolve_Links@btSoftBody@@SAXPAV1@M@Z
_TEXT	SEGMENT
$T67368 = -88						; size = 4
$T67367 = -84						; size = 4
$T56173 = -80						; size = 16
$T56171 = -64						; size = 16
$T56169 = -48						; size = 16
_j$56168 = -20						; size = 4
_n$56167 = -16						; size = 4
_l$56166 = -12						; size = 4
_ni$56162 = -8						; size = 4
_i$56161 = -4						; size = 4
_psb$ = 8						; size = 4
_kst$ = 12						; size = 4
?VSolve_Links@btSoftBody@@SAXPAV1@M@Z PROC		; btSoftBody::VSolve_Links, COMDAT
; Line 5353
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 5354
	mov	DWORD PTR _i$56161[ebp], 0
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _ni$56162[ebp], eax
	jmp	SHORT $LN3@VSolve_Lin
$LN2@VSolve_Lin:
	mov	eax, DWORD PTR _i$56161[ebp]
	add	eax, 1
	mov	DWORD PTR _i$56161[ebp], eax
$LN3@VSolve_Lin:
	mov	ecx, DWORD PTR _i$56161[ebp]
	cmp	ecx, DWORD PTR _ni$56162[ebp]
	jge	$LN1@VSolve_Lin
; Line 5356
	mov	edx, DWORD PTR _i$56161[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	DWORD PTR _l$56166[ebp], eax
; Line 5357
	mov	eax, DWORD PTR _l$56166[ebp]
	add	eax, 8
	mov	DWORD PTR _n$56167[ebp], eax
; Line 5358
	mov	ecx, DWORD PTR _n$56167[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 48					; 00000030H
	push	edx
	mov	eax, DWORD PTR _n$56167[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR $T56169[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _l$56166[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fchs
	mov	ecx, DWORD PTR _l$56166[ebp]
	fmul	DWORD PTR [ecx+32]
	fmul	DWORD PTR _kst$[ebx]
	fstp	DWORD PTR _j$56168[ebp]
; Line 5359
	mov	edx, DWORD PTR _n$56167[ebp]
	mov	eax, DWORD PTR [edx]
	fld	DWORD PTR _j$56168[ebp]
	fmul	DWORD PTR [eax+96]
	fstp	DWORD PTR $T67367[ebp]
	lea	ecx, DWORD PTR $T67367[ebp]
	push	ecx
	mov	edx, DWORD PTR _l$56166[ebp]
	add	edx, 48					; 00000030H
	push	edx
	lea	eax, DWORD PTR $T56171[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$56167[ebp]
	mov	ecx, DWORD PTR [ecx]
	add	ecx, 48					; 00000030H
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 5360
	mov	edx, DWORD PTR _n$56167[ebp]
	mov	eax, DWORD PTR [edx+4]
	fld	DWORD PTR _j$56168[ebp]
	fmul	DWORD PTR [eax+96]
	fstp	DWORD PTR $T67368[ebp]
	lea	ecx, DWORD PTR $T67368[ebp]
	push	ecx
	mov	edx, DWORD PTR _l$56166[ebp]
	add	edx, 48					; 00000030H
	push	edx
	lea	eax, DWORD PTR $T56173[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$56167[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	add	ecx, 48					; 00000030H
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 5361
	jmp	$LN2@VSolve_Lin
$LN1@VSolve_Lin:
; Line 5362
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?VSolve_Links@btSoftBody@@SAXPAV1@M@Z ENDP		; btSoftBody::VSolve_Links
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getSolver@btSoftBody@@SAP6AXPAV1@MM@ZW4_@ePSolver@1@@Z
_TEXT	SEGMENT
tv64 = -4						; size = 4
_solver$ = 8						; size = 4
?getSolver@btSoftBody@@SAP6AXPAV1@MM@ZW4_@ePSolver@1@@Z PROC ; btSoftBody::getSolver, COMDAT
; Line 5366
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5367
	mov	eax, DWORD PTR _solver$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 3
	ja	SHORT $LN6@getSolver
	mov	ecx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN10@getSolver[ecx*4]
$LN5@getSolver:
; Line 5370
	mov	eax, OFFSET ?PSolve_Anchors@btSoftBody@@SAXPAV1@MM@Z ; btSoftBody::PSolve_Anchors
	jmp	SHORT $LN8@getSolver
$LN4@getSolver:
; Line 5372
	mov	eax, OFFSET ?PSolve_Links@btSoftBody@@SAXPAV1@MM@Z ; btSoftBody::PSolve_Links
	jmp	SHORT $LN8@getSolver
$LN3@getSolver:
; Line 5374
	mov	eax, OFFSET ?PSolve_RContacts@btSoftBody@@SAXPAV1@MM@Z ; btSoftBody::PSolve_RContacts
	jmp	SHORT $LN8@getSolver
$LN2@getSolver:
; Line 5376
	mov	eax, OFFSET ?PSolve_SContacts@btSoftBody@@SAXPAV1@MM@Z ; btSoftBody::PSolve_SContacts
	jmp	SHORT $LN8@getSolver
$LN6@getSolver:
; Line 5381
	xor	eax, eax
$LN8@getSolver:
; Line 5382
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@getSolver:
	DD	$LN4@getSolver
	DD	$LN5@getSolver
	DD	$LN3@getSolver
	DD	$LN2@getSolver
?getSolver@btSoftBody@@SAP6AXPAV1@MM@ZW4_@ePSolver@1@@Z ENDP ; btSoftBody::getSolver
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getSolver@btSoftBody@@SAP6AXPAV1@M@ZW4_@eVSolver@1@@Z
_TEXT	SEGMENT
tv64 = -4						; size = 4
_solver$ = 8						; size = 4
?getSolver@btSoftBody@@SAP6AXPAV1@M@ZW4_@eVSolver@1@@Z PROC ; btSoftBody::getSolver, COMDAT
; Line 5386
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 5387
	mov	eax, DWORD PTR _solver$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN2@getSolver@2
	jmp	SHORT $LN3@getSolver@2
$LN2@getSolver@2:
; Line 5389
	mov	eax, OFFSET ?VSolve_Links@btSoftBody@@SAXPAV1@M@Z ; btSoftBody::VSolve_Links
	jmp	SHORT $LN5@getSolver@2
$LN3@getSolver@2:
; Line 5394
	xor	eax, eax
$LN5@getSolver@2:
; Line 5395
	mov	esp, ebp
	pop	ebp
	ret	0
?getSolver@btSoftBody@@SAP6AXPAV1@M@ZW4_@eVSolver@1@@Z ENDP ; btSoftBody::getSolver
_TEXT	ENDS
PUBLIC	?ProcessColObj@CollideCL_RS@btSoftColliders@@QAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z ; btSoftColliders::CollideCL_RS::ProcessColObj
PUBLIC	??0CollideCL_RS@btSoftColliders@@QAE@XZ		; btSoftColliders::CollideCL_RS::CollideCL_RS
PUBLIC	??$collideTV@UCollideSDF_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideSDF_RS@btSoftColliders@@@Z ; btDbvt::collideTV<btSoftColliders::CollideSDF_RS>
PUBLIC	?getOrigin@btTransform@@QAEAAVbtVector3@@XZ	; btTransform::getOrigin
PUBLIC	__$ArrayPad$
PUBLIC	?defaultCollisionHandler@btSoftBody@@QAEXPBUbtCollisionObjectWrapper@@@Z ; btSoftBody::defaultCollisionHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?defaultCollisionHandler@btSoftBody@@QAEXPBUbtCollisionObjectWrapper@@@Z
_TEXT	SEGMENT
tv139 = -448						; size = 4
tv129 = -444						; size = 4
tv67 = -440						; size = 4
_collider$56223 = -432					; size = 28
$T56216 = -400						; size = 16
$T56215 = -384						; size = 32
_volume$56214 = -336					; size = 32
_maxs$56213 = -288					; size = 16
_mins$56212 = -256					; size = 16
_basemargin$56211 = -232				; size = 4
$T56210 = -224						; size = 16
_timemargin$56209 = -200				; size = 4
_ctr$56208 = -192					; size = 64
_wtr$56207 = -112					; size = 64
_prb1$56205 = -40					; size = 4
_docollide$56204 = -32					; size = 20
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pcoWrap$ = 8						; size = 4
?defaultCollisionHandler@btSoftBody@@QAEXPBUbtCollisionObjectWrapper@@@Z PROC ; btSoftBody::defaultCollisionHandler, COMDAT
; _this$ = ecx
; Line 5399
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 456				; 000001c8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-456]
	mov	ecx, 114				; 00000072H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 5401
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 1
	je	SHORT $LN2@defaultCol
	cmp	DWORD PTR tv67[ebp], 2
	je	$LN1@defaultCol
	jmp	$LN3@defaultCol
$LN2@defaultCol:
; Line 5406
	mov	ecx, DWORD PTR _pcoWrap$[ebx]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	push	eax
	call	?upcast@btRigidBody@@SAPBV1@PBVbtCollisionObject@@@Z ; btRigidBody::upcast
	add	esp, 4
	mov	DWORD PTR _prb1$56205[ebp], eax
; Line 5407
	mov	ecx, DWORD PTR _pcoWrap$[ebx]
	call	?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ; btCollisionObjectWrapper::getWorldTransform
	push	eax
	lea	ecx, DWORD PTR _wtr$56207[ebp]
	call	??0btTransform@@QAE@ABV0@@Z		; btTransform::btTransform
; Line 5409
	mov	ecx, DWORD PTR _pcoWrap$[ebx]
	call	?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ; btCollisionObjectWrapper::getWorldTransform
	push	eax
	lea	ecx, DWORD PTR _ctr$56208[ebp]
	call	??0btTransform@@QAE@ABV0@@Z		; btTransform::btTransform
; Line 5410
	lea	ecx, DWORD PTR _ctr$56208[ebp]
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	lea	ecx, DWORD PTR _wtr$56207[ebp]
	call	?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	lea	edx, DWORD PTR $T56210[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _timemargin$56209[ebp]
; Line 5411
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv129[ebp], eax
	mov	eax, DWORD PTR tv129[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR tv129[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _basemargin$56211[ebp]
; Line 5412
	lea	ecx, DWORD PTR _mins$56212[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 5413
	lea	ecx, DWORD PTR _maxs$56213[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 5414
	lea	ecx, DWORD PTR _volume$56214[ebp]
	call	??0btDbvtAabbMm@@QAE@XZ
; Line 5417
	mov	ecx, DWORD PTR _pcoWrap$[ebx]
	call	?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ; btCollisionObjectWrapper::getCollisionShape
	mov	DWORD PTR tv139[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _maxs$56213[ebp]
	push	ecx
	lea	edx, DWORD PTR _mins$56212[ebp]
	push	edx
	mov	ecx, DWORD PTR _pcoWrap$[ebx]
	call	?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ; btCollisionObjectWrapper::getWorldTransform
	push	eax
	mov	eax, DWORD PTR tv139[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv139[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5418
	lea	ecx, DWORD PTR _maxs$56213[ebp]
	push	ecx
	lea	edx, DWORD PTR _mins$56212[ebp]
	push	edx
	lea	eax, DWORD PTR $T56215[ebp]
	push	eax
	call	?FromMM@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z ; btDbvtAabbMm::FromMM
	add	esp, 12					; 0000000cH
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR _volume$56214[ebp]
	rep movsd
; Line 5419
	lea	ecx, DWORD PTR _basemargin$56211[ebp]
	push	ecx
	lea	edx, DWORD PTR _basemargin$56211[ebp]
	push	edx
	lea	eax, DWORD PTR _basemargin$56211[ebp]
	push	eax
	lea	ecx, DWORD PTR $T56216[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	ecx, DWORD PTR _volume$56214[ebp]
	call	?Expand@btDbvtAabbMm@@QAEXABVbtVector3@@@Z ; btDbvtAabbMm::Expand
; Line 5420
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _docollide$56204[ebp], ecx
; Line 5421
	mov	edx, DWORD PTR _pcoWrap$[ebx]
	mov	DWORD PTR _docollide$56204[ebp+4], edx
; Line 5422
	mov	eax, DWORD PTR _prb1$56205[ebp]
	mov	DWORD PTR _docollide$56204[ebp+8], eax
; Line 5424
	fld	DWORD PTR _basemargin$56211[ebp]
	fadd	DWORD PTR _timemargin$56209[ebp]
	fstp	DWORD PTR _docollide$56204[ebp+12]
; Line 5425
	fld	DWORD PTR _basemargin$56211[ebp]
	fstp	DWORD PTR _docollide$56204[ebp+16]
; Line 5426
	lea	ecx, DWORD PTR _docollide$56204[ebp]
	push	ecx
	lea	edx, DWORD PTR _volume$56214[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+964]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 964				; 000003c4H
	call	??$collideTV@UCollideSDF_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideSDF_RS@btSoftColliders@@@Z ; btDbvt::collideTV<btSoftColliders::CollideSDF_RS>
; Line 5428
	jmp	SHORT $LN3@defaultCol
$LN1@defaultCol:
; Line 5431
	lea	ecx, DWORD PTR _collider$56223[ebp]
	call	??0CollideCL_RS@btSoftColliders@@QAE@XZ
; Line 5432
	mov	edx, DWORD PTR _pcoWrap$[ebx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _collider$56223[ebp]
	call	?ProcessColObj@CollideCL_RS@btSoftColliders@@QAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z ; btSoftColliders::CollideCL_RS::ProcessColObj
$LN3@defaultCol:
; Line 5436
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@defaultCol
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	1
$LN16@defaultCol:
	DD	8
	DD	$LN15@defaultCol
$LN15@defaultCol:
	DD	-32					; ffffffe0H
	DD	20					; 00000014H
	DD	$LN7@defaultCol
	DD	-112					; ffffff90H
	DD	64					; 00000040H
	DD	$LN8@defaultCol
	DD	-192					; ffffff40H
	DD	64					; 00000040H
	DD	$LN9@defaultCol
	DD	-232					; ffffff18H
	DD	4
	DD	$LN10@defaultCol
	DD	-256					; ffffff00H
	DD	16					; 00000010H
	DD	$LN11@defaultCol
	DD	-288					; fffffee0H
	DD	16					; 00000010H
	DD	$LN12@defaultCol
	DD	-336					; fffffeb0H
	DD	32					; 00000020H
	DD	$LN13@defaultCol
	DD	-432					; fffffe50H
	DD	28					; 0000001cH
	DD	$LN14@defaultCol
$LN14@defaultCol:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN13@defaultCol:
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN12@defaultCol:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	115					; 00000073H
	DB	0
$LN11@defaultCol:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN10@defaultCol:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN9@defaultCol:
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN8@defaultCol:
	DB	119					; 00000077H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN7@defaultCol:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?defaultCollisionHandler@btSoftBody@@QAEXPBUbtCollisionObjectWrapper@@@Z ENDP ; btSoftBody::defaultCollisionHandler
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getOrigin@btTransform@@QAEAAVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOrigin@btTransform@@QAEAAVbtVector3@@XZ PROC	; btTransform::getOrigin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 117
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esp, ebp
	pop	ebp
	ret	0
?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ENDP	; btTransform::getOrigin
_TEXT	ENDS
PUBLIC	??$collideTV@UCollideCL_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideCL_RS@btSoftColliders@@@Z ; btDbvt::collideTV<btSoftColliders::CollideCL_RS>
PUBLIC	?getFriction@btCollisionObject@@QBEMXZ		; btCollisionObject::getFriction
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ProcessColObj@CollideCL_RS@btSoftColliders@@QAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z
_TEXT	SEGMENT
tv153 = -224						; size = 4
tv257 = -220						; size = 4
tv94 = -216						; size = 4
tv82 = -212						; size = 4
$T67394 = -208						; size = 4
$T67393 = -204						; size = 4
$T67392 = -200						; size = 4
$T67391 = -196						; size = 4
$T19938 = -192						; size = 16
$T19934 = -176						; size = 16
$T19933 = -160						; size = 32
_volume$ = -112						; size = 32
_maxs$ = -64						; size = 16
_mins$ = -32						; size = 16
_this$ = -4						; size = 4
_ps$ = 8						; size = 4
_colObWrap$ = 12					; size = 4
?ProcessColObj@CollideCL_RS@btSoftColliders@@QAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z PROC ; btSoftColliders::CollideCL_RS::ProcessColObj, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 775
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 776
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ps$[ebx]
	mov	DWORD PTR [eax+20], ecx
; Line 777
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _colObWrap$[ebx]
	mov	DWORD PTR [edx+24], eax
; Line 778
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ps$[ebx]
	fld	DWORD PTR [edx+480]
	fstp	DWORD PTR [ecx+4]
; Line 779
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ; btCollisionObjectWrapper::getCollisionShape
	mov	DWORD PTR tv82[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv94[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR tv94[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv94[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR tv82[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv82[ebp]
	mov	eax, DWORD PTR [edx+44]
	fstp	DWORD PTR tv257[ebp]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fadd	DWORD PTR tv257[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]
; Line 781
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	ecx, eax
	call	?getFriction@btCollisionObject@@QBEMXZ	; btCollisionObject::getFriction
	fstp	DWORD PTR $T67391[ebp]
	lea	eax, DWORD PTR $T67391[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 340				; 00000154H
	push	edx
	call	??$btMin@M@@YAABMABM0@Z			; btMin<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx+12]
; Line 782
	lea	ecx, DWORD PTR _mins$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 783
	lea	ecx, DWORD PTR _maxs$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 785
	lea	ecx, DWORD PTR _volume$[ebp]
	call	??0btDbvtAabbMm@@QAE@XZ
; Line 786
	mov	ecx, DWORD PTR _colObWrap$[ebx]
	call	?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ; btCollisionObjectWrapper::getCollisionShape
	mov	DWORD PTR tv153[ebp], eax
	mov	esi, esp
	lea	edx, DWORD PTR _maxs$[ebp]
	push	edx
	lea	eax, DWORD PTR _mins$[ebp]
	push	eax
	mov	ecx, DWORD PTR _colObWrap$[ebx]
	call	?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ; btCollisionObjectWrapper::getWorldTransform
	push	eax
	mov	ecx, DWORD PTR tv153[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv153[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 787
	lea	ecx, DWORD PTR _maxs$[ebp]
	push	ecx
	lea	edx, DWORD PTR _mins$[ebp]
	push	edx
	lea	eax, DWORD PTR $T19933[ebp]
	push	eax
	call	?FromMM@btDbvtAabbMm@@SA?AU1@ABVbtVector3@@0@Z ; btDbvtAabbMm::FromMM
	add	esp, 12					; 0000000cH
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR _volume$[ebp]
	rep movsd
; Line 788
	fld1
	fstp	DWORD PTR $T67392[ebp]
	fld1
	fstp	DWORD PTR $T67393[ebp]
	fld1
	fstp	DWORD PTR $T67394[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	push	ecx
	lea	edx, DWORD PTR $T67392[ebp]
	push	edx
	lea	eax, DWORD PTR $T67393[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67394[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T19934[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	edx, DWORD PTR $T19938[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _volume$[ebp]
	call	?Expand@btDbvtAabbMm@@QAEXABVbtVector3@@@Z ; btDbvtAabbMm::Expand
; Line 789
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _volume$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ps$[ebx]
	mov	eax, DWORD PTR [edx+1084]
	push	eax
	mov	ecx, DWORD PTR _ps$[ebx]
	add	ecx, 1084				; 0000043cH
	call	??$collideTV@UCollideCL_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideCL_RS@btSoftColliders@@@Z ; btDbvt::collideTV<btSoftColliders::CollideCL_RS>
; Line 790
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ProcessCol
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN7@ProcessCol:
	DD	3
	DD	$LN6@ProcessCol
$LN6@ProcessCol:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@ProcessCol
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN4@ProcessCol
	DD	-112					; ffffff90H
	DD	32					; 00000020H
	DD	$LN5@ProcessCol
$LN5@ProcessCol:
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN4@ProcessCol:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	115					; 00000073H
	DB	0
$LN3@ProcessCol:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
?ProcessColObj@CollideCL_RS@btSoftColliders@@QAEXPAVbtSoftBody@@PBUbtCollisionObjectWrapper@@@Z ENDP ; btSoftColliders::CollideCL_RS::ProcessColObj
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getFriction@btCollisionObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getFriction@btCollisionObject@@QBEMXZ PROC		; btCollisionObject::getFriction, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 282
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 283
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+236]
; Line 284
	mov	esp, ebp
	pop	ebp
	ret	0
?getFriction@btCollisionObject@@QBEMXZ ENDP		; btCollisionObject::getFriction
_TEXT	ENDS
PUBLIC	??0ClusterBase@btSoftColliders@@QAE@XZ		; btSoftColliders::ClusterBase::ClusterBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CollideCL_RS@btSoftColliders@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CollideCL_RS@btSoftColliders@@QAE@XZ PROC		; btSoftColliders::CollideCL_RS::CollideCL_RS, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ClusterBase@btSoftColliders@@QAE@XZ	; btSoftColliders::ClusterBase::ClusterBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CollideCL_RS@btSoftColliders@@QAE@XZ ENDP		; btSoftColliders::CollideCL_RS::CollideCL_RS
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0ClusterBase@btSoftColliders@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ClusterBase@btSoftColliders@@QAE@XZ PROC		; btSoftColliders::ClusterBase::ClusterBase, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 678
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 680
	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax]
; Line 681
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
; Line 682
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx+8]
; Line 683
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
; Line 684
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+16]
; Line 685
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ClusterBase@btSoftColliders@@QAE@XZ ENDP		; btSoftColliders::ClusterBase::ClusterBase
_TEXT	ENDS
PUBLIC	??$collideTT@UCollideVF_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideVF_SS@btSoftColliders@@@Z ; btDbvt::collideTT<btSoftColliders::CollideVF_SS>
PUBLIC	?ProcessSoftSoft@CollideCL_SS@btSoftColliders@@QAEXPAVbtSoftBody@@0@Z ; btSoftColliders::CollideCL_SS::ProcessSoftSoft
PUBLIC	??0CollideCL_SS@btSoftColliders@@QAE@XZ		; btSoftColliders::CollideCL_SS::CollideCL_SS
PUBLIC	?defaultCollisionHandler@btSoftBody@@QAEXPAV1@@Z ; btSoftBody::defaultCollisionHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?defaultCollisionHandler@btSoftBody@@QAEXPAV1@@Z
_TEXT	SEGMENT
tv203 = -80						; size = 4
tv131 = -76						; size = 4
tv88 = -72						; size = 4
tv70 = -68						; size = 4
_docollide$56241 = -60					; size = 12
_docollide$56238 = -40					; size = 28
_cf$ = -8						; size = 4
_this$ = -4						; size = 4
_psb$ = 8						; size = 4
?defaultCollisionHandler@btSoftBody@@QAEXPAV1@@Z PROC	; btSoftBody::defaultCollisionHandler, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5440
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 5441
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _psb$[ebp]
	mov	edx, DWORD PTR [eax+412]
	and	edx, DWORD PTR [ecx+412]
	mov	DWORD PTR _cf$[ebp], edx
; Line 5442
	mov	eax, DWORD PTR _cf$[ebp]
	and	eax, 48					; 00000030H
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 16			; 00000010H
	je	SHORT $LN3@defaultCol@2
	cmp	DWORD PTR tv70[ebp], 32			; 00000020H
	je	SHORT $LN6@defaultCol@2
	jmp	$LN1@defaultCol@2
$LN6@defaultCol@2:
; Line 5448
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR _psb$[ebp]
	jne	SHORT $LN4@defaultCol@2
	mov	edx, DWORD PTR _psb$[ebp]
	mov	eax, DWORD PTR [edx+412]
	and	eax, 64					; 00000040H
	je	SHORT $LN5@defaultCol@2
$LN4@defaultCol@2:
; Line 5450
	lea	ecx, DWORD PTR _docollide$56238[ebp]
	call	??0CollideCL_SS@btSoftColliders@@QAE@XZ
; Line 5451
	mov	ecx, DWORD PTR _psb$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _docollide$56238[ebp]
	call	?ProcessSoftSoft@CollideCL_SS@btSoftColliders@@QAEXPAVbtSoftBody@@0@Z ; btSoftColliders::CollideCL_SS::ProcessSoftSoft
$LN5@defaultCol@2:
; Line 5455
	jmp	$LN7@defaultCol@2
$LN3@defaultCol@2:
; Line 5459
	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR _psb$[ebp]
	je	$LN2@defaultCol@2
; Line 5464
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv131[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR tv131[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR tv88[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	eax, DWORD PTR [edx+44]
	fstp	DWORD PTR tv203[ebp]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fadd	DWORD PTR tv203[ebp]
	fstp	DWORD PTR _docollide$56241[ebp+8]
; Line 5466
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR _docollide$56241[ebp], ecx
; Line 5467
	mov	edx, DWORD PTR _psb$[ebp]
	mov	DWORD PTR _docollide$56241[ebp+4], edx
; Line 5470
	lea	eax, DWORD PTR _docollide$56241[ebp]
	push	eax
	mov	ecx, DWORD PTR _docollide$56241[ebp+4]
	mov	edx, DWORD PTR [ecx+1024]
	push	edx
	mov	eax, DWORD PTR _docollide$56241[ebp]
	mov	ecx, DWORD PTR [eax+964]
	push	ecx
	mov	ecx, DWORD PTR _docollide$56241[ebp]
	add	ecx, 964				; 000003c4H
	call	??$collideTT@UCollideVF_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideVF_SS@btSoftColliders@@@Z ; btDbvt::collideTT<btSoftColliders::CollideVF_SS>
; Line 5472
	mov	edx, DWORD PTR _psb$[ebp]
	mov	DWORD PTR _docollide$56241[ebp], edx
; Line 5473
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR _docollide$56241[ebp+4], eax
; Line 5476
	lea	ecx, DWORD PTR _docollide$56241[ebp]
	push	ecx
	mov	edx, DWORD PTR _docollide$56241[ebp+4]
	mov	eax, DWORD PTR [edx+1024]
	push	eax
	mov	ecx, DWORD PTR _docollide$56241[ebp]
	mov	edx, DWORD PTR [ecx+964]
	push	edx
	mov	ecx, DWORD PTR _docollide$56241[ebp]
	add	ecx, 964				; 000003c4H
	call	??$collideTT@UCollideVF_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideVF_SS@btSoftColliders@@@Z ; btDbvt::collideTT<btSoftColliders::CollideVF_SS>
$LN2@defaultCol@2:
$LN1@defaultCol@2:
$LN7@defaultCol@2:
; Line 5485
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@defaultCol@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN14@defaultCol@2:
	DD	2
	DD	$LN13@defaultCol@2
$LN13@defaultCol@2:
	DD	-40					; ffffffd8H
	DD	28					; 0000001cH
	DD	$LN11@defaultCol@2
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN12@defaultCol@2
$LN12@defaultCol@2:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN11@defaultCol@2:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?defaultCollisionHandler@btSoftBody@@QAEXPAV1@@Z ENDP	; btSoftBody::defaultCollisionHandler
_TEXT	ENDS
PUBLIC	??$collideTT@UCollideCL_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideCL_SS@btSoftColliders@@@Z ; btDbvt::collideTT<btSoftColliders::CollideCL_SS>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ProcessSoftSoft@CollideCL_SS@btSoftColliders@@QAEXPAVbtSoftBody@@0@Z
_TEXT	SEGMENT
tv194 = -16						; size = 4
tv94 = -12						; size = 4
tv83 = -8						; size = 4
_this$ = -4						; size = 4
_psa$ = 8						; size = 4
_psb$ = 12						; size = 4
?ProcessSoftSoft@CollideCL_SS@btSoftColliders@@QAEXPAVbtSoftBody@@0@Z PROC ; btSoftColliders::CollideCL_SS::ProcessSoftSoft, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 837
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 838
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _psa$[ebp]
	fld	DWORD PTR [ecx+480]
	fstp	DWORD PTR [eax+4]
; Line 840
	mov	ecx, DWORD PTR _psa$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR tv94[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR tv94[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv94[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	eax, DWORD PTR tv83[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR tv83[ebp]
	mov	eax, DWORD PTR [edx+44]
	fstp	DWORD PTR tv194[ebp]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fadd	DWORD PTR tv194[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]
; Line 841
	mov	edx, DWORD PTR _psb$[ebp]
	add	edx, 340				; 00000154H
	push	edx
	mov	eax, DWORD PTR _psa$[ebp]
	add	eax, 340				; 00000154H
	push	eax
	call	??$btMin@M@@YAABMABM0@Z			; btMin<float>
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx+12]
; Line 842
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _psa$[ebp]
	mov	DWORD PTR [edx+20], eax
; Line 843
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _psb$[ebp]
	mov	DWORD PTR [ecx+24], edx
; Line 844
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	mov	edx, DWORD PTR [ecx+1084]
	push	edx
	mov	eax, DWORD PTR _psa$[ebp]
	mov	ecx, DWORD PTR [eax+1084]
	push	ecx
	mov	ecx, DWORD PTR _psa$[ebp]
	add	ecx, 1084				; 0000043cH
	call	??$collideTT@UCollideCL_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideCL_SS@btSoftColliders@@@Z ; btDbvt::collideTT<btSoftColliders::CollideCL_SS>
; Line 845
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ProcessSoftSoft@CollideCL_SS@btSoftColliders@@QAEXPAVbtSoftBody@@0@Z ENDP ; btSoftColliders::CollideCL_SS::ProcessSoftSoft
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CollideCL_SS@btSoftColliders@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CollideCL_SS@btSoftColliders@@QAE@XZ PROC		; btSoftColliders::CollideCL_SS::CollideCL_SS, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ClusterBase@btSoftColliders@@QAE@XZ	; btSoftColliders::ClusterBase::ClusterBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CollideCL_SS@btSoftColliders@@QAE@XZ ENDP		; btSoftColliders::CollideCL_SS::CollideCL_SS
_TEXT	ENDS
PUBLIC	?setWindVelocity@btSoftBody@@QAEXABVbtVector3@@@Z ; btSoftBody::setWindVelocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setWindVelocity@btSoftBody@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_velocity$ = 8						; size = 4
?setWindVelocity@btSoftBody@@QAEXABVbtVector3@@@Z PROC	; btSoftBody::setWindVelocity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 5490
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 5491
	mov	eax, DWORD PTR _velocity$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1248				; 000004e0H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 5492
	mov	esp, ebp
	pop	ebp
	ret	4
?setWindVelocity@btSoftBody@@QAEXABVbtVector3@@@Z ENDP	; btSoftBody::setWindVelocity
_TEXT	ENDS
PUBLIC	?getWindVelocity@btSoftBody@@QAEABVbtVector3@@XZ ; btSoftBody::getWindVelocity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getWindVelocity@btSoftBody@@QAEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWindVelocity@btSoftBody@@QAEABVbtVector3@@XZ PROC	; btSoftBody::getWindVelocity, COMDAT
; _this$ = ecx
; Line 5496
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 5497
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1248				; 000004e0H
; Line 5498
	mov	esp, ebp
	pop	ebp
	ret	0
?getWindVelocity@btSoftBody@@QAEABVbtVector3@@XZ ENDP	; btSoftBody::getWindVelocity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?calculateSerializeBufferSize@btSoftBody@@UBEHXZ
_TEXT	SEGMENT
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
?calculateSerializeBufferSize@btSoftBody@@UBEHXZ PROC	; btSoftBody::calculateSerializeBufferSize, COMDAT
; _this$ = ecx
; Line 5503
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 5504
	mov	DWORD PTR _sz$[ebp], 428		; 000001acH
; Line 5505
	mov	eax, DWORD PTR _sz$[ebp]
; Line 5506
	mov	esp, ebp
	pop	ebp
	ret	0
?calculateSerializeBufferSize@btSoftBody@@UBEHXZ ENDP	; btSoftBody::calculateSerializeBufferSize
_TEXT	ENDS
PUBLIC	??1?$btHashMap@VbtHashPtr@@H@@QAE@XZ		; btHashMap<btHashPtr,int>::~btHashMap<btHashPtr,int>
PUBLIC	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
PUBLIC	?find@?$btHashMap@VbtHashPtr@@H@@QAEPAHABVbtHashPtr@@@Z ; btHashMap<btHashPtr,int>::find
PUBLIC	?serializeFloat@btTransform@@QBEXAAUbtTransformFloatData@@@Z ; btTransform::serializeFloat
PUBLIC	?size@?$btAlignedObjectArray@M@@QBEHXZ		; btAlignedObjectArray<float>::size
PUBLIC	??A?$btAlignedObjectArray@VbtVector3@@@@QBEABVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
PUBLIC	?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z ; btMatrix3x3::serializeFloat
PUBLIC	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
PUBLIC	?insert@?$btHashMap@VbtHashPtr@@H@@QAEXABVbtHashPtr@@ABH@Z ; btHashMap<btHashPtr,int>::insert
PUBLIC	??0btHashPtr@@QAE@PBX@Z				; btHashPtr::btHashPtr
PUBLIC	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
PUBLIC	??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEABQAUMaterial@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
PUBLIC	??0?$btHashMap@VbtHashPtr@@H@@QAE@XZ		; btHashMap<btHashPtr,int>::btHashMap<btHashPtr,int>
EXTRN	?serialize@btCollisionObject@@UBEPBDPAXPAVbtSerializer@@@Z:PROC ; btCollisionObject::serialize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?serialize@btSoftBody@@UBEPBDPAXPAVbtSerializer@@@Z
_TEXT	SEGMENT
tv1558 = -524						; size = 4
tv1535 = -520						; size = 4
tv1464 = -516						; size = 4
tv1416 = -512						; size = 4
tv1330 = -508						; size = 4
tv1098 = -504						; size = 4
tv1043 = -500						; size = 4
tv980 = -496						; size = 4
tv803 = -492						; size = 4
tv785 = -488						; size = 4
tv726 = -484						; size = 4
tv692 = -480						; size = 4
tv654 = -476						; size = 4
tv571 = -472						; size = 4
tv537 = -468						; size = 4
tv503 = -464						; size = 4
tv464 = -460						; size = 4
tv414 = -456						; size = 4
tv392 = -452						; size = 4
tv370 = -448						; size = 4
tv324 = -444						; size = 4
tv258 = -440						; size = 4
tv192 = -436						; size = 4
tv143 = -432						; size = 4
tv87 = -428						; size = 4
$T67474 = -424						; size = 4
$T67471 = -420						; size = 8
$T67432 = -412						; size = 8
_j$56583 = -404						; size = 4
_i$56578 = -400						; size = 4
_memPtr$56576 = -396					; size = 4
_chunk$56575 = -392					; size = 4
_numElem$56574 = -388					; size = 4
_sz$56572 = -384					; size = 4
_indexPtr$56557 = -380					; size = 4
_j$56553 = -376						; size = 4
_memPtr$56551 = -372					; size = 4
_chunk$56550 = -368					; size = 4
_sz$56548 = -364					; size = 4
_numElem$56547 = -360					; size = 4
_j$56536 = -356						; size = 4
_memPtr$56534 = -352					; size = 4
_chunk$56533 = -348					; size = 4
_sz$56531 = -344					; size = 4
_numElem$56530 = -340					; size = 4
_j$56519 = -336						; size = 4
_memPtr$56517 = -332					; size = 4
_chunk$56516 = -328					; size = 4
_sz$56514 = -324					; size = 4
_numElem$56513 = -320					; size = 4
_i$56506 = -316						; size = 4
_memPtr$56504 = -312					; size = 4
_chunk$56503 = -308					; size = 4
_sz$56501 = -304					; size = 4
_numElem$56500 = -300					; size = 4
_i$56485 = -296						; size = 4
_memPtr$56483 = -292					; size = 4
_chunk$56482 = -288					; size = 4
_sz$56480 = -284					; size = 4
_numElem$56479 = -280					; size = 4
_i$56468 = -276						; size = 4
_memPtr$56466 = -272					; size = 4
_chunk$56465 = -268					; size = 4
_sz$56463 = -264					; size = 4
_numElem$56462 = -260					; size = 4
_memPtr$56457 = -256					; size = 4
_chunk$56456 = -252					; size = 4
_sz$56454 = -248					; size = 4
_i$56440 = -244						; size = 4
_memPtr$56438 = -240					; size = 4
_chunk$56437 = -236					; size = 4
_numElem$56436 = -232					; size = 4
_sz$56434 = -228					; size = 4
_j$56421 = -224						; size = 4
_i$56417 = -220						; size = 4
_memPtr$56415 = -216					; size = 4
_chunk$56414 = -212					; size = 4
_numElem$56413 = -208					; size = 4
_sz$56411 = -204					; size = 4
_j$56400 = -200						; size = 4
_i$56394 = -196						; size = 4
_memPtr$56392 = -192					; size = 4
_chunk$56391 = -188					; size = 4
_numElem$56390 = -184					; size = 4
_sz$56388 = -180					; size = 4
_i$56371 = -176						; size = 4
_memPtr$56369 = -172					; size = 4
_chunk$56368 = -168					; size = 4
_numElem$56367 = -164					; size = 4
_sz$56365 = -160					; size = 4
_i$56351 = -152						; size = 4
_memPtr$56349 = -144					; size = 4
_chunk$56348 = -140					; size = 4
_numElem$56347 = -136					; size = 4
_sz$56345 = -132					; size = 4
_memPtr$56333 = -128					; size = 4
_chunk$56331 = -124					; size = 4
_mat$56327 = -120					; size = 4
_i$56323 = -116						; size = 4
_memPtr$56321 = -112					; size = 4
_chunk$56320 = -108					; size = 4
_numElem$56319 = -104					; size = 4
_sz$56317 = -100					; size = 4
_m_nodeIndexMap$ = -92					; size = 80
_sbd$ = -8						; size = 4
_this$ = -4						; size = 4
_dataBuffer$ = 8					; size = 4
_serializer$ = 12					; size = 4
?serialize@btSoftBody@@UBEPBDPAXPAVbtSerializer@@@Z PROC ; btSoftBody::serialize, COMDAT
; _this$ = ecx
; Line 5510
	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-524]
	mov	ecx, 131				; 00000083H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 5511
	mov	eax, DWORD PTR _dataBuffer$[ebp]
	mov	DWORD PTR _sbd$[ebp], eax
; Line 5513
	mov	ecx, DWORD PTR _serializer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _sbd$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@btCollisionObject@@UBEPBDPAXPAVbtSerializer@@@Z ; btCollisionObject::serialize
; Line 5515
	lea	ecx, DWORD PTR _m_nodeIndexMap$[ebp]
	call	??0?$btHashMap@VbtHashPtr@@H@@QAE@XZ
; Line 5517
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	DWORD PTR [ecx+292], eax
; Line 5518
	mov	edx, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [edx+292], 0
	je	SHORT $LN75@serialize
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 892				; 0000037cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN76@serialize
$LN75@serialize:
	mov	DWORD PTR tv87[ebp], 0
$LN76@serialize:
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR [ecx+260], edx
; Line 5520
	mov	eax, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [eax+260], 0
	je	$LN72@serialize
; Line 5522
	mov	DWORD PTR _sz$56317[ebp], 4
; Line 5523
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	DWORD PTR _numElem$56319[ebp], edx
; Line 5524
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56319[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56317[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56320[ebp], eax
; Line 5526
	mov	eax, DWORD PTR _chunk$56320[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56321[ebp], ecx
; Line 5527
	mov	DWORD PTR _i$56323[ebp], 0
	jmp	SHORT $LN71@serialize
$LN70@serialize:
	mov	edx, DWORD PTR _i$56323[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56323[ebp], edx
	mov	eax, DWORD PTR _memPtr$56321[ebp]
	add	eax, 4
	mov	DWORD PTR _memPtr$56321[ebp], eax
$LN71@serialize:
	mov	ecx, DWORD PTR _i$56323[ebp]
	cmp	ecx, DWORD PTR _numElem$56319[ebp]
	jge	$LN69@serialize
; Line 5529
	mov	edx, DWORD PTR _i$56323[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 892				; 0000037cH
	call	??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEABQAUMaterial@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _mat$56327[ebp], eax
; Line 5530
	cmp	DWORD PTR _mat$56327[ebp], 0
	je	SHORT $LN77@serialize
	mov	esi, esp
	mov	ecx, DWORD PTR _mat$56327[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv143[ebp], eax
	jmp	SHORT $LN78@serialize
$LN77@serialize:
	mov	DWORD PTR tv143[ebp], 0
$LN78@serialize:
	mov	eax, DWORD PTR _memPtr$56321[ebp]
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR [eax], ecx
; Line 5531
	mov	esi, esp
	mov	edx, DWORD PTR _mat$56327[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN68@serialize
; Line 5534
	mov	esi, esp
	push	1
	push	16					; 00000010H
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56331[ebp], eax
; Line 5535
	mov	ecx, DWORD PTR _chunk$56331[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _memPtr$56333[ebp], edx
; Line 5536
	mov	eax, DWORD PTR _memPtr$56333[ebp]
	mov	ecx, DWORD PTR _mat$56327[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+12], edx
; Line 5537
	mov	eax, DWORD PTR _memPtr$56333[ebp]
	mov	ecx, DWORD PTR _mat$56327[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+4]
; Line 5538
	mov	edx, DWORD PTR _memPtr$56333[ebp]
	mov	eax, DWORD PTR _mat$56327[ebp]
	fld	DWORD PTR [eax+4]
	fstp	DWORD PTR [edx]
; Line 5539
	mov	ecx, DWORD PTR _memPtr$56333[ebp]
	mov	edx, DWORD PTR _mat$56327[ebp]
	fld	DWORD PTR [edx+12]
	fstp	DWORD PTR [ecx+8]
; Line 5540
	mov	esi, esp
	mov	eax, DWORD PTR _mat$56327[ebp]
	push	eax
	push	1414349395				; 544d4253H
	push	OFFSET $SG56337
	mov	ecx, DWORD PTR _chunk$56331[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN68@serialize:
; Line 5542
	jmp	$LN70@serialize
$LN69@serialize:
; Line 5543
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 892				; 0000037cH
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56341
	mov	ecx, DWORD PTR _chunk$56320[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN72@serialize:
; Line 5549
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	DWORD PTR [ecx+296], eax
; Line 5550
	mov	edx, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [edx+296], 0
	je	SHORT $LN79@serialize
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 732				; 000002dcH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv192[ebp], eax
	jmp	SHORT $LN80@serialize
$LN79@serialize:
	mov	DWORD PTR tv192[ebp], 0
$LN80@serialize:
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR tv192[ebp]
	mov	DWORD PTR [ecx+264], edx
; Line 5551
	mov	eax, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [eax+264], 0
	je	$LN67@serialize
; Line 5553
	mov	DWORD PTR _sz$56345[ebp], 100		; 00000064H
; Line 5554
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	mov	DWORD PTR _numElem$56347[ebp], edx
; Line 5555
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56347[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56345[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56348[ebp], eax
; Line 5556
	mov	eax, DWORD PTR _chunk$56348[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56349[ebp], ecx
; Line 5557
	mov	DWORD PTR _i$56351[ebp], 0
	jmp	SHORT $LN66@serialize
$LN65@serialize:
	mov	edx, DWORD PTR _i$56351[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56351[ebp], edx
	mov	eax, DWORD PTR _memPtr$56349[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _memPtr$56349[ebp], eax
$LN66@serialize:
	mov	ecx, DWORD PTR _i$56351[ebp]
	cmp	ecx, DWORD PTR _numElem$56347[ebp]
	jge	$LN64@serialize
; Line 5559
	mov	edx, DWORD PTR _memPtr$56349[ebp]
	add	edx, 52					; 00000034H
	push	edx
	mov	eax, DWORD PTR _i$56351[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 64					; 00000040H
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5560
	mov	ecx, DWORD PTR _i$56351[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	edx, DWORD PTR _memPtr$56349[ebp]
	fld	DWORD PTR [eax+100]
	fstp	DWORD PTR [edx+88]
; Line 5561
	mov	eax, DWORD PTR _i$56351[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [eax+108]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _memPtr$56349[ebp]
	mov	DWORD PTR [edx+92], ecx
; Line 5562
	mov	eax, DWORD PTR _i$56351[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _memPtr$56349[ebp]
	fld	DWORD PTR [eax+96]
	fstp	DWORD PTR [ecx+84]
; Line 5563
	mov	edx, DWORD PTR _i$56351[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN81@serialize
	mov	eax, DWORD PTR _i$56351[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv258[ebp], eax
	jmp	SHORT $LN82@serialize
$LN81@serialize:
	mov	DWORD PTR tv258[ebp], 0
$LN82@serialize:
	mov	eax, DWORD PTR _memPtr$56349[ebp]
	mov	ecx, DWORD PTR tv258[ebp]
	mov	DWORD PTR [eax], ecx
; Line 5564
	mov	edx, DWORD PTR _memPtr$56349[ebp]
	add	edx, 68					; 00000044H
	push	edx
	mov	eax, DWORD PTR _i$56351[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 80					; 00000050H
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5565
	mov	ecx, DWORD PTR _memPtr$56349[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _i$56351[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5566
	mov	eax, DWORD PTR _memPtr$56349[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _i$56351[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 32					; 00000020H
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5567
	mov	edx, DWORD PTR _memPtr$56349[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	eax, DWORD PTR _i$56351[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5568
	mov	ecx, DWORD PTR _i$56351[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	push	eax
	lea	ecx, DWORD PTR $T67432[ebp]
	call	??0btHashPtr@@QAE@PBX@Z			; btHashPtr::btHashPtr
	lea	edx, DWORD PTR _i$56351[ebp]
	push	edx
	lea	eax, DWORD PTR $T67432[ebp]
	push	eax
	lea	ecx, DWORD PTR _m_nodeIndexMap$[ebp]
	call	?insert@?$btHashMap@VbtHashPtr@@H@@QAEXABVbtHashPtr@@ABH@Z ; btHashMap<btHashPtr,int>::insert
; Line 5569
	jmp	$LN65@serialize
$LN64@serialize:
; Line 5570
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	mov	esi, esp
	push	ecx
	push	1145979475				; 444e4253H
	push	OFFSET $SG56361
	mov	edx, DWORD PTR _chunk$56348[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN67@serialize:
; Line 5573
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	DWORD PTR [ecx+300], eax
; Line 5574
	mov	edx, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [edx+300], 0
	je	SHORT $LN83@serialize
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv324[ebp], eax
	jmp	SHORT $LN84@serialize
$LN83@serialize:
	mov	DWORD PTR tv324[ebp], 0
$LN84@serialize:
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR tv324[ebp]
	mov	DWORD PTR [ecx+268], edx
; Line 5575
	mov	eax, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [eax+268], 0
	je	$LN63@serialize
; Line 5577
	mov	DWORD PTR _sz$56365[ebp], 20		; 00000014H
; Line 5578
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR [ecx+300]
	mov	DWORD PTR _numElem$56367[ebp], edx
; Line 5579
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56367[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56365[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56368[ebp], eax
; Line 5580
	mov	eax, DWORD PTR _chunk$56368[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56369[ebp], ecx
; Line 5581
	mov	DWORD PTR _i$56371[ebp], 0
	jmp	SHORT $LN62@serialize
$LN61@serialize:
	mov	edx, DWORD PTR _i$56371[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56371[ebp], edx
	mov	eax, DWORD PTR _memPtr$56369[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _memPtr$56369[ebp], eax
$LN62@serialize:
	mov	ecx, DWORD PTR _i$56371[ebp]
	cmp	ecx, DWORD PTR _numElem$56367[ebp]
	jge	$LN60@serialize
; Line 5583
	mov	edx, DWORD PTR _i$56371[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	eax, DWORD PTR [eax+20]
	shl	eax, 31					; 0000001fH
	sar	eax, 31					; 0000001fH
	mov	ecx, DWORD PTR _memPtr$56369[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 5584
	mov	edx, DWORD PTR _i$56371[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN85@serialize
	mov	eax, DWORD PTR _i$56371[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv370[ebp], eax
	jmp	SHORT $LN86@serialize
$LN85@serialize:
	mov	DWORD PTR tv370[ebp], 0
$LN86@serialize:
	mov	eax, DWORD PTR _memPtr$56369[ebp]
	mov	ecx, DWORD PTR tv370[ebp]
	mov	DWORD PTR [eax], ecx
; Line 5585
	mov	edx, DWORD PTR _i$56371[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN87@serialize
	mov	eax, DWORD PTR _i$56371[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi+8]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR tv392[ebp], ecx
	jmp	SHORT $LN88@serialize
$LN87@serialize:
	mov	DWORD PTR tv392[ebp], -1
$LN88@serialize:
	mov	edx, DWORD PTR _memPtr$56369[ebp]
	mov	eax, DWORD PTR tv392[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 5586
	mov	ecx, DWORD PTR _i$56371[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN89@serialize
	mov	edx, DWORD PTR _i$56371[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi+12]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR tv414[ebp], ecx
	jmp	SHORT $LN90@serialize
$LN89@serialize:
	mov	DWORD PTR tv414[ebp], -1
$LN90@serialize:
	mov	edx, DWORD PTR _memPtr$56369[ebp]
	mov	eax, DWORD PTR tv414[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 5587
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	ecx, DWORD PTR _memPtr$56369[ebp]
	cmp	DWORD PTR [ecx+4], eax
	jl	SHORT $LN59@serialize
	push	5587					; 000015d3H
	push	OFFSET $SG56378
	call	_printf
	add	esp, 8
	int	3
$LN59@serialize:
; Line 5588
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	edx, DWORD PTR _memPtr$56369[ebp]
	cmp	DWORD PTR [edx+8], eax
	jl	SHORT $LN58@serialize
	push	5588					; 000015d4H
	push	OFFSET $SG56380
	call	_printf
	add	esp, 8
	int	3
$LN58@serialize:
; Line 5589
	mov	eax, DWORD PTR _i$56371[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	ecx, DWORD PTR _memPtr$56369[ebp]
	fld	DWORD PTR [eax+16]
	fstp	DWORD PTR [ecx+12]
; Line 5590
	jmp	$LN61@serialize
$LN60@serialize:
; Line 5591
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 752				; 000002f0H
	call	??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Link>::operator[]
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56384
	mov	edx, DWORD PTR _chunk$56368[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN63@serialize:
; Line 5596
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	DWORD PTR [ecx+304], eax
; Line 5597
	mov	edx, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [edx+304], 0
	je	SHORT $LN91@serialize
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv464[ebp], eax
	jmp	SHORT $LN92@serialize
$LN91@serialize:
	mov	DWORD PTR tv464[ebp], 0
$LN92@serialize:
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR tv464[ebp]
	mov	DWORD PTR [ecx+272], edx
; Line 5598
	mov	eax, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [eax+272], 0
	je	$LN57@serialize
; Line 5600
	mov	DWORD PTR _sz$56388[ebp], 36		; 00000024H
; Line 5601
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR [ecx+304]
	mov	DWORD PTR _numElem$56390[ebp], edx
; Line 5602
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56390[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56388[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56391[ebp], eax
; Line 5603
	mov	eax, DWORD PTR _chunk$56391[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56392[ebp], ecx
; Line 5604
	mov	DWORD PTR _i$56394[ebp], 0
	jmp	SHORT $LN56@serialize
$LN55@serialize:
	mov	edx, DWORD PTR _i$56394[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56394[ebp], edx
	mov	eax, DWORD PTR _memPtr$56392[ebp]
	add	eax, 36					; 00000024H
	mov	DWORD PTR _memPtr$56392[ebp], eax
$LN56@serialize:
	mov	ecx, DWORD PTR _i$56394[ebp]
	cmp	ecx, DWORD PTR _numElem$56390[ebp]
	jge	$LN54@serialize
; Line 5606
	mov	edx, DWORD PTR _i$56394[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN93@serialize
	mov	eax, DWORD PTR _i$56394[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv503[ebp], eax
	jmp	SHORT $LN94@serialize
$LN93@serialize:
	mov	DWORD PTR tv503[ebp], 0
$LN94@serialize:
	mov	eax, DWORD PTR _memPtr$56392[ebp]
	mov	ecx, DWORD PTR tv503[ebp]
	mov	DWORD PTR [eax+16], ecx
; Line 5607
	mov	edx, DWORD PTR _memPtr$56392[ebp]
	push	edx
	mov	eax, DWORD PTR _i$56394[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	add	eax, 32					; 00000020H
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5608
	mov	DWORD PTR _j$56400[ebp], 0
	jmp	SHORT $LN53@serialize
$LN52@serialize:
	mov	ecx, DWORD PTR _j$56400[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$56400[ebp], ecx
$LN53@serialize:
	cmp	DWORD PTR _j$56400[ebp], 3
	jge	$LN51@serialize
; Line 5610
	mov	edx, DWORD PTR _i$56394[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _j$56400[ebp]
	cmp	DWORD PTR [eax+ecx*4+8], 0
	je	SHORT $LN95@serialize
	mov	edx, DWORD PTR _i$56394[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _j$56400[ebp]
	mov	edx, DWORD PTR [esi+ecx*4+8]
	sub	edx, eax
	sar	edx, 7
	mov	DWORD PTR tv537[ebp], edx
	jmp	SHORT $LN96@serialize
$LN95@serialize:
	mov	DWORD PTR tv537[ebp], -1
$LN96@serialize:
	mov	eax, DWORD PTR _j$56400[ebp]
	mov	ecx, DWORD PTR _memPtr$56392[ebp]
	mov	edx, DWORD PTR tv537[ebp]
	mov	DWORD PTR [ecx+eax*4+20], edx
; Line 5611
	jmp	$LN52@serialize
$LN51@serialize:
; Line 5612
	mov	eax, DWORD PTR _i$56394[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	ecx, DWORD PTR _memPtr$56392[ebp]
	fld	DWORD PTR [eax+48]
	fstp	DWORD PTR [ecx+32]
; Line 5613
	jmp	$LN55@serialize
$LN54@serialize:
; Line 5614
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56407
	mov	edx, DWORD PTR _chunk$56391[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN57@serialize:
; Line 5618
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	DWORD PTR [ecx+308], eax
; Line 5619
	mov	edx, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [edx+308], 0
	je	SHORT $LN97@serialize
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv571[ebp], eax
	jmp	SHORT $LN98@serialize
$LN97@serialize:
	mov	DWORD PTR tv571[ebp], 0
$LN98@serialize:
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR tv571[ebp]
	mov	DWORD PTR [ecx+276], edx
; Line 5620
	mov	eax, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [eax+276], 0
	je	$LN50@serialize
; Line 5622
	mov	DWORD PTR _sz$56411[ebp], 100		; 00000064H
; Line 5623
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR [ecx+308]
	mov	DWORD PTR _numElem$56413[ebp], edx
; Line 5624
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56413[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56411[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56414[ebp], eax
; Line 5625
	mov	eax, DWORD PTR _chunk$56414[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56415[ebp], ecx
; Line 5626
	mov	DWORD PTR _i$56417[ebp], 0
	jmp	SHORT $LN49@serialize
$LN48@serialize:
	mov	edx, DWORD PTR _i$56417[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56417[ebp], edx
	mov	eax, DWORD PTR _memPtr$56415[ebp]
	add	eax, 100				; 00000064H
	mov	DWORD PTR _memPtr$56415[ebp], eax
$LN49@serialize:
	mov	ecx, DWORD PTR _i$56417[ebp]
	cmp	ecx, DWORD PTR _numElem$56413[ebp]
	jge	$LN47@serialize
; Line 5628
	mov	DWORD PTR _j$56421[ebp], 0
	jmp	SHORT $LN46@serialize
$LN45@serialize:
	mov	edx, DWORD PTR _j$56421[ebp]
	add	edx, 1
	mov	DWORD PTR _j$56421[ebp], edx
$LN46@serialize:
	cmp	DWORD PTR _j$56421[ebp], 4
	jge	$LN44@serialize
; Line 5630
	mov	eax, DWORD PTR _j$56421[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _memPtr$56415[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$56417[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	edx, DWORD PTR _j$56421[ebp]
	shl	edx, 4
	lea	ecx, DWORD PTR [eax+edx+32]
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5631
	mov	eax, DWORD PTR _j$56421[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	ecx, DWORD PTR _j$56421[ebp]
	cmp	DWORD PTR [eax+ecx*4+8], 0
	je	SHORT $LN99@serialize
	mov	edx, DWORD PTR _j$56421[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR _j$56421[ebp]
	mov	edx, DWORD PTR [esi+ecx*4+8]
	sub	edx, eax
	sar	edx, 7
	mov	DWORD PTR tv654[ebp], edx
	jmp	SHORT $LN100@serialize
$LN99@serialize:
	mov	DWORD PTR tv654[ebp], -1
$LN100@serialize:
	mov	eax, DWORD PTR _j$56421[ebp]
	mov	ecx, DWORD PTR _memPtr$56415[ebp]
	mov	edx, DWORD PTR tv654[ebp]
	mov	DWORD PTR [ecx+eax*4+68], edx
; Line 5632
	jmp	$LN45@serialize
$LN44@serialize:
; Line 5633
	mov	eax, DWORD PTR _i$56417[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	ecx, DWORD PTR _memPtr$56415[ebp]
	fld	DWORD PTR [eax+96]
	fstp	DWORD PTR [ecx+88]
; Line 5634
	mov	edx, DWORD PTR _i$56417[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	ecx, DWORD PTR _memPtr$56415[ebp]
	fld	DWORD PTR [eax+100]
	fstp	DWORD PTR [ecx+92]
; Line 5635
	mov	edx, DWORD PTR _i$56417[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN101@serialize
	mov	eax, DWORD PTR _i$56417[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv692[ebp], eax
	jmp	SHORT $LN102@serialize
$LN101@serialize:
	mov	DWORD PTR tv692[ebp], 0
$LN102@serialize:
	mov	eax, DWORD PTR _memPtr$56415[ebp]
	mov	ecx, DWORD PTR tv692[ebp]
	mov	DWORD PTR [eax+64], ecx
; Line 5636
	mov	edx, DWORD PTR _i$56417[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	ecx, DWORD PTR _memPtr$56415[ebp]
	fld	DWORD PTR [eax+24]
	fstp	DWORD PTR [ecx+84]
; Line 5637
	jmp	$LN48@serialize
$LN47@serialize:
; Line 5638
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56430
	mov	edx, DWORD PTR _chunk$56414[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN50@serialize:
; Line 5641
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	DWORD PTR [ecx+312], eax
; Line 5642
	mov	edx, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [edx+312], 0
	je	SHORT $LN103@serialize
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv726[ebp], eax
	jmp	SHORT $LN104@serialize
$LN103@serialize:
	mov	DWORD PTR tv726[ebp], 0
$LN104@serialize:
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR tv726[ebp]
	mov	DWORD PTR [ecx+280], edx
; Line 5643
	mov	eax, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	$LN43@serialize
; Line 5645
	mov	DWORD PTR _sz$56434[ebp], 92		; 0000005cH
; Line 5646
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR [ecx+312]
	mov	DWORD PTR _numElem$56436[ebp], edx
; Line 5647
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56436[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56434[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56437[ebp], eax
; Line 5648
	mov	eax, DWORD PTR _chunk$56437[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56438[ebp], ecx
; Line 5649
	mov	DWORD PTR _i$56440[ebp], 0
	jmp	SHORT $LN42@serialize
$LN41@serialize:
	mov	edx, DWORD PTR _i$56440[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56440[ebp], edx
	mov	eax, DWORD PTR _memPtr$56438[ebp]
	add	eax, 92					; 0000005cH
	mov	DWORD PTR _memPtr$56438[ebp], eax
$LN42@serialize:
	mov	ecx, DWORD PTR _i$56440[ebp]
	cmp	ecx, DWORD PTR _numElem$56436[ebp]
	jge	$LN40@serialize
; Line 5651
	mov	edx, DWORD PTR _memPtr$56438[ebp]
	push	edx
	mov	eax, DWORD PTR _i$56440[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	add	eax, 48					; 00000030H
	mov	ecx, eax
	call	?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z ; btMatrix3x3::serializeFloat
; Line 5652
	mov	ecx, DWORD PTR _memPtr$56438[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	edx, DWORD PTR _i$56440[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	add	eax, 96					; 00000060H
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5653
	mov	eax, DWORD PTR _i$56440[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	ecx, DWORD PTR _memPtr$56438[ebp]
	fld	DWORD PTR [eax+112]
	fstp	DWORD PTR [ecx+88]
; Line 5654
	mov	edx, DWORD PTR _memPtr$56438[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	eax, DWORD PTR _i$56440[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	add	eax, 16					; 00000010H
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5655
	mov	ecx, DWORD PTR _i$56440[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN105@serialize
	mov	edx, DWORD PTR _i$56440[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	ecx, DWORD PTR [esi]
	sub	ecx, eax
	sar	ecx, 7
	mov	DWORD PTR tv785[ebp], ecx
	jmp	SHORT $LN106@serialize
$LN105@serialize:
	mov	DWORD PTR tv785[ebp], -1
$LN106@serialize:
	mov	edx, DWORD PTR _memPtr$56438[ebp]
	mov	eax, DWORD PTR tv785[ebp]
	mov	DWORD PTR [edx+84], eax
; Line 5657
	mov	ecx, DWORD PTR _i$56440[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN107@serialize
	mov	edx, DWORD PTR _i$56440[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	esi, esp
	mov	eax, DWORD PTR [eax+32]
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv803[ebp], eax
	jmp	SHORT $LN108@serialize
$LN107@serialize:
	mov	DWORD PTR tv803[ebp], 0
$LN108@serialize:
	mov	ecx, DWORD PTR _memPtr$56438[ebp]
	mov	edx, DWORD PTR tv803[ebp]
	mov	DWORD PTR [ecx+80], edx
; Line 5658
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	ecx, DWORD PTR _memPtr$56438[ebp]
	cmp	DWORD PTR [ecx+84], eax
	jl	SHORT $LN39@serialize
	push	5658					; 0000161aH
	push	OFFSET $SG56447
	call	_printf
	add	esp, 8
	int	3
$LN39@serialize:
; Line 5659
	jmp	$LN41@serialize
$LN40@serialize:
; Line 5660
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56451
	mov	edx, DWORD PTR _chunk$56437[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN43@serialize:
; Line 5664
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+340]
	fstp	DWORD PTR [ecx+352]
; Line 5665
	mov	eax, DWORD PTR _sbd$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+316]
	fstp	DWORD PTR [eax+328]
; Line 5666
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+332]
	fstp	DWORD PTR [edx+344]
; Line 5667
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+312]
	mov	DWORD PTR [ecx+324], eax
; Line 5668
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+328]
	fstp	DWORD PTR [ecx+340]
; Line 5669
	mov	eax, DWORD PTR _sbd$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+324]
	fstp	DWORD PTR [eax+336]
; Line 5670
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+400]
	mov	DWORD PTR [edx+412], ecx
; Line 5671
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+404]
	mov	DWORD PTR [edx+416], ecx
; Line 5672
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+408]
	mov	DWORD PTR [edx+420], ecx
; Line 5673
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+396]
	mov	DWORD PTR [edx+408], ecx
; Line 5674
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+388]
	fstp	DWORD PTR [edx+400]
; Line 5675
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+320]
	fstp	DWORD PTR [ecx+332]
; Line 5676
	mov	eax, DWORD PTR _sbd$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+344]
	fstp	DWORD PTR [eax+356]
; Line 5677
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+412]
	mov	DWORD PTR [edx+424], ecx
; Line 5678
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+336]
	fstp	DWORD PTR [edx+348]
; Line 5679
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+348]
	fstp	DWORD PTR [ecx+360]
; Line 5680
	mov	eax, DWORD PTR _sbd$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+352]
	fstp	DWORD PTR [eax+364]
; Line 5681
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+356]
	fstp	DWORD PTR [edx+368]
; Line 5682
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+360]
	fstp	DWORD PTR [ecx+372]
; Line 5683
	mov	eax, DWORD PTR _sbd$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+392]
	fstp	DWORD PTR [eax+404]
; Line 5684
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+388]
	fstp	DWORD PTR [edx+400]
; Line 5685
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+364]
	fstp	DWORD PTR [ecx+376]
; Line 5686
	mov	eax, DWORD PTR _sbd$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+368]
	fstp	DWORD PTR [eax+380]
; Line 5687
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+372]
	fstp	DWORD PTR [edx+384]
; Line 5688
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+376]
	fstp	DWORD PTR [ecx+388]
; Line 5689
	mov	eax, DWORD PTR _sbd$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+380]
	fstp	DWORD PTR [eax+392]
; Line 5690
	mov	edx, DWORD PTR _sbd$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+384]
	fstp	DWORD PTR [edx+396]
; Line 5694
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	DWORD PTR [ecx+256], eax
; Line 5696
	mov	DWORD PTR _sz$56454[ebp], 192		; 000000c0H
; Line 5697
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _sz$56454[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56456[ebp], eax
; Line 5698
	mov	ecx, DWORD PTR _chunk$56456[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _memPtr$56457[ebp], edx
; Line 5700
	mov	eax, DWORD PTR _memPtr$56457[ebp]
	add	eax, 96					; 00000060H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 656				; 00000290H
	call	?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z ; btMatrix3x3::serializeFloat
; Line 5701
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+497]
	mov	eax, DWORD PTR _memPtr$56457[ebp]
	mov	DWORD PTR [eax+180], edx
; Line 5702
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+496]
	mov	eax, DWORD PTR _memPtr$56457[ebp]
	mov	DWORD PTR [eax+176], edx
; Line 5703
	mov	ecx, DWORD PTR _memPtr$56457[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 544				; 00000220H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5705
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 504				; 000001f8H
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	mov	edx, DWORD PTR _memPtr$56457[ebp]
	mov	DWORD PTR [edx+168], eax
; Line 5706
	mov	eax, DWORD PTR _memPtr$56457[ebp]
	cmp	DWORD PTR [eax+168], 0
	je	SHORT $LN109@serialize
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 504				; 000001f8H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QBEABVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv980[ebp], eax
	jmp	SHORT $LN110@serialize
$LN109@serialize:
	mov	DWORD PTR tv980[ebp], 0
$LN110@serialize:
	mov	ecx, DWORD PTR _memPtr$56457[ebp]
	mov	edx, DWORD PTR tv980[ebp]
	mov	DWORD PTR [ecx+160], edx
; Line 5707
	mov	eax, DWORD PTR _memPtr$56457[ebp]
	cmp	DWORD PTR [eax+168], 0
	je	$LN38@serialize
; Line 5709
	mov	ecx, DWORD PTR _memPtr$56457[ebp]
	mov	edx, DWORD PTR [ecx+168]
	mov	DWORD PTR _numElem$56462[ebp], edx
; Line 5710
	mov	DWORD PTR _sz$56463[ebp], 16		; 00000010H
; Line 5711
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56462[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56463[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56465[ebp], eax
; Line 5712
	mov	eax, DWORD PTR _chunk$56465[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56466[ebp], ecx
; Line 5713
	mov	DWORD PTR _i$56468[ebp], 0
	jmp	SHORT $LN37@serialize
$LN36@serialize:
	mov	edx, DWORD PTR _i$56468[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56468[ebp], edx
	mov	eax, DWORD PTR _memPtr$56466[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _memPtr$56466[ebp], eax
$LN37@serialize:
	mov	ecx, DWORD PTR _i$56468[ebp]
	cmp	ecx, DWORD PTR _numElem$56462[ebp]
	jge	SHORT $LN35@serialize
; Line 5715
	mov	edx, DWORD PTR _memPtr$56466[ebp]
	push	edx
	mov	eax, DWORD PTR _i$56468[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 504				; 000001f8H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QBEABVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5716
	jmp	SHORT $LN36@serialize
$LN35@serialize:
; Line 5717
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 504				; 000001f8H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QBEABVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56475
	mov	ecx, DWORD PTR _chunk$56465[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@serialize:
; Line 5719
	mov	eax, DWORD PTR _memPtr$56457[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+500]
	fstp	DWORD PTR [eax+184]
; Line 5720
	mov	edx, DWORD PTR _memPtr$56457[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 560				; 00000230H
	call	?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z ; btMatrix3x3::serializeFloat
; Line 5721
	mov	eax, DWORD PTR _memPtr$56457[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 608				; 00000260H
	call	?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z ; btMatrix3x3::serializeFloat
; Line 5723
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	?size@?$btAlignedObjectArray@M@@QBEHXZ	; btAlignedObjectArray<float>::size
	mov	ecx, DWORD PTR _memPtr$56457[ebp]
	mov	DWORD PTR [ecx+172], eax
; Line 5724
	mov	edx, DWORD PTR _memPtr$56457[ebp]
	cmp	DWORD PTR [edx+172], 0
	je	SHORT $LN111@serialize
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	??A?$btAlignedObjectArray@M@@QBEABMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1043[ebp], eax
	jmp	SHORT $LN112@serialize
$LN111@serialize:
	mov	DWORD PTR tv1043[ebp], 0
$LN112@serialize:
	mov	ecx, DWORD PTR _memPtr$56457[ebp]
	mov	edx, DWORD PTR tv1043[ebp]
	mov	DWORD PTR [ecx+164], edx
; Line 5725
	mov	eax, DWORD PTR _memPtr$56457[ebp]
	cmp	DWORD PTR [eax+172], 0
	je	$LN34@serialize
; Line 5728
	mov	ecx, DWORD PTR _memPtr$56457[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	DWORD PTR _numElem$56479[ebp], edx
; Line 5729
	mov	DWORD PTR _sz$56480[ebp], 4
; Line 5730
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56479[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56480[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56482[ebp], eax
; Line 5731
	mov	eax, DWORD PTR _chunk$56482[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56483[ebp], ecx
; Line 5732
	mov	DWORD PTR _i$56485[ebp], 0
	jmp	SHORT $LN33@serialize
$LN32@serialize:
	mov	edx, DWORD PTR _i$56485[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56485[ebp], edx
	mov	eax, DWORD PTR _memPtr$56483[ebp]
	add	eax, 4
	mov	DWORD PTR _memPtr$56483[ebp], eax
$LN33@serialize:
	mov	ecx, DWORD PTR _i$56485[ebp]
	cmp	ecx, DWORD PTR _numElem$56479[ebp]
	jge	SHORT $LN31@serialize
; Line 5734
	mov	edx, DWORD PTR _i$56485[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	??A?$btAlignedObjectArray@M@@QBEABMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	ecx, DWORD PTR _memPtr$56483[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
; Line 5735
	jmp	SHORT $LN32@serialize
$LN31@serialize:
; Line 5736
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 524				; 0000020cH
	call	??A?$btAlignedObjectArray@M@@QBEABMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56492
	mov	edx, DWORD PTR _chunk$56482[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN34@serialize:
; Line 5739
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 496				; 000001f0H
	mov	esi, esp
	push	ecx
	push	1497453121				; 59415241H
	push	OFFSET $SG56496
	mov	edx, DWORD PTR _chunk$56456[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 5744
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	DWORD PTR [ecx+316], eax
; Line 5745
	mov	edx, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [edx+316], 0
	je	SHORT $LN113@serialize
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	esi, esp
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1098[ebp], eax
	jmp	SHORT $LN114@serialize
$LN113@serialize:
	mov	DWORD PTR tv1098[ebp], 0
$LN114@serialize:
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR tv1098[ebp]
	mov	DWORD PTR [ecx+284], edx
; Line 5746
	mov	eax, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [eax+316], 0
	je	$LN30@serialize
; Line 5748
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	edx, DWORD PTR [ecx+316]
	mov	DWORD PTR _numElem$56500[ebp], edx
; Line 5749
	mov	DWORD PTR _sz$56501[ebp], 348		; 0000015cH
; Line 5750
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56500[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56501[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56503[ebp], eax
; Line 5751
	mov	eax, DWORD PTR _chunk$56503[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56504[ebp], ecx
; Line 5752
	mov	DWORD PTR _i$56506[ebp], 0
	jmp	SHORT $LN29@serialize
$LN28@serialize:
	mov	edx, DWORD PTR _i$56506[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56506[ebp], edx
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	add	eax, 348				; 0000015cH
	mov	DWORD PTR _memPtr$56504[ebp], eax
$LN29@serialize:
	mov	ecx, DWORD PTR _i$56506[ebp]
	cmp	ecx, DWORD PTR _numElem$56500[ebp]
	jge	$LN27@serialize
; Line 5754
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [eax+380]
	fstp	DWORD PTR [ecx+320]
; Line 5755
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	add	edx, 256				; 00000100H
	push	edx
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 352				; 00000160H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5756
	mov	ecx, DWORD PTR _i$56506[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	mov	ecx, DWORD PTR [edx+400]
	mov	DWORD PTR [eax+344], ecx
; Line 5757
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	movzx	ecx, BYTE PTR [eax+397]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	mov	DWORD PTR [edx+340], ecx
; Line 5758
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	add	eax, 160				; 000000a0H
	push	eax
	mov	ecx, DWORD PTR _i$56506[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 240				; 000000f0H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5759
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	movzx	ecx, BYTE PTR [eax+396]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	mov	DWORD PTR [edx+336], ecx
; Line 5760
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	add	eax, 208				; 000000d0H
	push	eax
	mov	ecx, DWORD PTR _i$56506[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 288				; 00000120H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5761
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	add	edx, 224				; 000000e0H
	push	edx
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 304				; 00000130H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5762
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 64					; 00000040H
	call	?serializeFloat@btTransform@@QBEXAAUbtTransformFloatData@@@Z ; btTransform::serializeFloat
; Line 5763
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [ecx+128]
	fstp	DWORD PTR [edx+296]
; Line 5764
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [ecx+132]
	fstp	DWORD PTR [edx+300]
; Line 5765
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _i$56506[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 192				; 000000c0H
	call	?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z ; btMatrix3x3::serializeFloat
; Line 5766
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [eax+376]
	fstp	DWORD PTR [ecx+316]
; Line 5767
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 144				; 00000090H
	call	?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z ; btMatrix3x3::serializeFloat
; Line 5768
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	add	ecx, 240				; 000000f0H
	push	ecx
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 336				; 00000150H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5769
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [ecx+384]
	fstp	DWORD PTR [edx+324]
; Line 5770
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [ecx+388]
	fstp	DWORD PTR [edx+328]
; Line 5771
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [ecx+372]
	fstp	DWORD PTR [edx+312]
; Line 5772
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [ecx+376]
	fstp	DWORD PTR [edx+316]
; Line 5773
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [ecx+380]
	fstp	DWORD PTR [edx+320]
; Line 5774
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	fld	DWORD PTR [ecx+392]
	fstp	DWORD PTR [edx+332]
; Line 5776
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 40					; 00000028H
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	DWORD PTR [ecx+284], eax
; Line 5777
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?size@?$btAlignedObjectArray@M@@QBEHXZ	; btAlignedObjectArray<float>::size
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	DWORD PTR [ecx+292], eax
; Line 5778
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	DWORD PTR [ecx+288], eax
; Line 5780
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	edx, DWORD PTR [eax+320]
	mov	DWORD PTR [ecx+304], edx
; Line 5781
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	add	eax, 176				; 000000b0H
	push	eax
	mov	ecx, DWORD PTR _i$56506[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 256				; 00000100H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5782
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	add	edx, 192				; 000000c0H
	push	edx
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 272				; 00000110H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5783
	mov	ecx, DWORD PTR _i$56506[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	mov	ecx, DWORD PTR [edx+324]
	mov	DWORD PTR [eax+308], ecx
; Line 5787
	mov	edx, DWORD PTR _memPtr$56504[ebp]
	cmp	DWORD PTR [edx+284], 0
	je	SHORT $LN115@serialize
	push	0
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1330[ebp], eax
	jmp	SHORT $LN116@serialize
$LN115@serialize:
	mov	DWORD PTR tv1330[ebp], 0
$LN116@serialize:
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	edx, DWORD PTR tv1330[ebp]
	mov	DWORD PTR [ecx+272], edx
; Line 5788
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	cmp	DWORD PTR [eax+272], 0
	je	$LN26@serialize
; Line 5790
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	edx, DWORD PTR [ecx+284]
	mov	DWORD PTR _numElem$56513[ebp], edx
; Line 5791
	mov	DWORD PTR _sz$56514[ebp], 16		; 00000010H
; Line 5792
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56513[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56514[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56516[ebp], eax
; Line 5793
	mov	eax, DWORD PTR _chunk$56516[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56517[ebp], ecx
; Line 5794
	mov	DWORD PTR _j$56519[ebp], 0
	jmp	SHORT $LN25@serialize
$LN24@serialize:
	mov	edx, DWORD PTR _j$56519[ebp]
	add	edx, 1
	mov	DWORD PTR _j$56519[ebp], edx
	mov	eax, DWORD PTR _memPtr$56517[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _memPtr$56517[ebp], eax
$LN25@serialize:
	mov	ecx, DWORD PTR _j$56519[ebp]
	cmp	ecx, DWORD PTR _numElem$56513[ebp]
	jge	SHORT $LN23@serialize
; Line 5796
	mov	edx, DWORD PTR _memPtr$56517[ebp]
	push	edx
	mov	eax, DWORD PTR _j$56519[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$56506[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	ecx, eax
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5797
	jmp	SHORT $LN24@serialize
$LN23@serialize:
; Line 5798
	push	0
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56526
	mov	eax, DWORD PTR _chunk$56516[ebp]
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@serialize:
; Line 5801
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	cmp	DWORD PTR [ecx+292], 0
	je	SHORT $LN117@serialize
	push	0
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1416[ebp], eax
	jmp	SHORT $LN118@serialize
$LN117@serialize:
	mov	DWORD PTR tv1416[ebp], 0
$LN118@serialize:
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	edx, DWORD PTR tv1416[ebp]
	mov	DWORD PTR [ecx+280], edx
; Line 5802
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	$LN22@serialize
; Line 5804
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	DWORD PTR _numElem$56530[ebp], edx
; Line 5805
	mov	DWORD PTR _sz$56531[ebp], 4
; Line 5806
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56530[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56531[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56533[ebp], eax
; Line 5807
	mov	eax, DWORD PTR _chunk$56533[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56534[ebp], ecx
; Line 5808
	mov	DWORD PTR _j$56536[ebp], 0
	jmp	SHORT $LN21@serialize
$LN20@serialize:
	mov	edx, DWORD PTR _j$56536[ebp]
	add	edx, 1
	mov	DWORD PTR _j$56536[ebp], edx
	mov	eax, DWORD PTR _memPtr$56534[ebp]
	add	eax, 4
	mov	DWORD PTR _memPtr$56534[ebp], eax
$LN21@serialize:
	mov	ecx, DWORD PTR _j$56536[ebp]
	cmp	ecx, DWORD PTR _numElem$56530[ebp]
	jge	SHORT $LN19@serialize
; Line 5810
	mov	edx, DWORD PTR _j$56536[ebp]
	push	edx
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	ecx, DWORD PTR _memPtr$56534[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [ecx]
; Line 5811
	jmp	SHORT $LN20@serialize
$LN19@serialize:
; Line 5812
	push	0
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	??A?$btAlignedObjectArray@M@@QAEAAMH@Z	; btAlignedObjectArray<float>::operator[]
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56543
	mov	eax, DWORD PTR _chunk$56533[ebp]
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@serialize:
; Line 5815
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	cmp	DWORD PTR [ecx+288], 0
	je	SHORT $LN119@serialize
	mov	edx, DWORD PTR _i$56506[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	eax, 20					; 00000014H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1464[ebp], eax
	jmp	SHORT $LN120@serialize
$LN119@serialize:
	mov	DWORD PTR tv1464[ebp], 0
$LN120@serialize:
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	edx, DWORD PTR tv1464[ebp]
	mov	DWORD PTR [ecx+276], edx
; Line 5816
	mov	eax, DWORD PTR _memPtr$56504[ebp]
	cmp	DWORD PTR [eax+276], 0
	je	$LN18@serialize
; Line 5818
	mov	ecx, DWORD PTR _memPtr$56504[ebp]
	mov	edx, DWORD PTR [ecx+292]
	mov	DWORD PTR _numElem$56547[ebp], edx
; Line 5819
	mov	DWORD PTR _sz$56548[ebp], 4
; Line 5820
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56547[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56548[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56550[ebp], eax
; Line 5821
	mov	eax, DWORD PTR _chunk$56550[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56551[ebp], ecx
; Line 5822
	mov	DWORD PTR _j$56553[ebp], 0
	jmp	SHORT $LN17@serialize
$LN16@serialize:
	mov	edx, DWORD PTR _j$56553[ebp]
	add	edx, 1
	mov	DWORD PTR _j$56553[ebp], edx
	mov	eax, DWORD PTR _memPtr$56551[ebp]
	add	eax, 4
	mov	DWORD PTR _memPtr$56551[ebp], eax
$LN17@serialize:
	mov	ecx, DWORD PTR _j$56553[ebp]
	cmp	ecx, DWORD PTR _numElem$56547[ebp]
	jge	SHORT $LN15@serialize
; Line 5824
	mov	edx, DWORD PTR _j$56553[ebp]
	push	edx
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR $T67471[ebp]
	call	??0btHashPtr@@QAE@PBX@Z			; btHashPtr::btHashPtr
	lea	edx, DWORD PTR $T67471[ebp]
	push	edx
	lea	ecx, DWORD PTR _m_nodeIndexMap$[ebp]
	call	?find@?$btHashMap@VbtHashPtr@@H@@QAEPAHABVbtHashPtr@@@Z ; btHashMap<btHashPtr,int>::find
	mov	DWORD PTR _indexPtr$56557[ebp], eax
; Line 5825
	cmp	DWORD PTR _indexPtr$56557[ebp], 0
	jne	SHORT $LN14@serialize
	push	5825					; 000016c1H
	push	OFFSET $SG56560
	call	_printf
	add	esp, 8
	int	3
$LN14@serialize:
; Line 5826
	mov	eax, DWORD PTR _memPtr$56551[ebp]
	mov	ecx, DWORD PTR _indexPtr$56557[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
; Line 5827
	jmp	$LN16@serialize
$LN15@serialize:
; Line 5828
	mov	eax, DWORD PTR _i$56506[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	mov	esi, esp
	push	ecx
	push	1497453121				; 59415241H
	push	OFFSET $SG56564
	mov	edx, DWORD PTR _chunk$56550[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@serialize:
; Line 5830
	jmp	$LN28@serialize
$LN27@serialize:
; Line 5831
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	1497453121				; 59415241H
	push	OFFSET $SG56568
	mov	edx, DWORD PTR _chunk$56503[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN30@serialize:
; Line 5837
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	mov	ecx, DWORD PTR _sbd$[ebp]
	mov	DWORD PTR [ecx+320], eax
; Line 5838
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	test	eax, eax
	je	SHORT $LN121@serialize
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1535[ebp], eax
	jmp	SHORT $LN122@serialize
$LN121@serialize:
	mov	DWORD PTR tv1535[ebp], 0
$LN122@serialize:
	mov	eax, DWORD PTR _sbd$[ebp]
	mov	ecx, DWORD PTR tv1535[ebp]
	mov	DWORD PTR [eax+288], ecx
; Line 5840
	mov	edx, DWORD PTR _sbd$[ebp]
	cmp	DWORD PTR [edx+288], 0
	je	$LN13@serialize
; Line 5842
	mov	DWORD PTR _sz$56572[ebp], 104		; 00000068H
; Line 5843
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	mov	DWORD PTR _numElem$56574[ebp], eax
; Line 5844
	mov	esi, esp
	mov	eax, DWORD PTR _numElem$56574[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$56572[ebp]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _chunk$56575[ebp], eax
; Line 5845
	mov	eax, DWORD PTR _chunk$56575[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _memPtr$56576[ebp], ecx
; Line 5847
	mov	DWORD PTR _i$56578[ebp], 0
	jmp	SHORT $LN12@serialize
$LN11@serialize:
	mov	edx, DWORD PTR _i$56578[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56578[ebp], edx
	mov	eax, DWORD PTR _memPtr$56576[ebp]
	add	eax, 104				; 00000068H
	mov	DWORD PTR _memPtr$56576[ebp], eax
$LN12@serialize:
	mov	ecx, DWORD PTR _i$56578[ebp]
	cmp	ecx, DWORD PTR _numElem$56574[ebp]
	jge	$LN10@serialize
; Line 5849
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR tv1558[ebp], eax
	mov	ecx, DWORD PTR tv1558[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv1558[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+96], eax
; Line 5850
	mov	edx, DWORD PTR _memPtr$56576[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _i$56578[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 48					; 00000030H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5851
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 64					; 00000040H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 5852
	mov	eax, DWORD PTR _i$56578[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56576[ebp]
	fld	DWORD PTR [ecx+80]
	fstp	DWORD PTR [edx+40]
; Line 5853
	mov	eax, DWORD PTR _i$56578[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56576[ebp]
	fld	DWORD PTR [ecx+84]
	fstp	DWORD PTR [edx+44]
; Line 5854
	mov	eax, DWORD PTR _i$56578[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _memPtr$56576[ebp]
	fld	DWORD PTR [ecx+88]
	fstp	DWORD PTR [edx+48]
; Line 5855
	mov	eax, DWORD PTR _i$56578[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+176]
	mov	eax, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [eax+52], edx
; Line 5857
	mov	DWORD PTR _j$56583[ebp], 0
	jmp	SHORT $LN9@serialize
$LN8@serialize:
	mov	ecx, DWORD PTR _j$56583[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$56583[ebp], ecx
$LN9@serialize:
	cmp	DWORD PTR _j$56583[ebp], 4
	jge	SHORT $LN7@serialize
; Line 5859
	mov	edx, DWORD PTR _j$56583[ebp]
	mov	eax, DWORD PTR _memPtr$56576[ebp]
	fldz
	fstp	DWORD PTR [eax+edx*4+56]
; Line 5860
	mov	ecx, DWORD PTR _j$56583[ebp]
	mov	edx, DWORD PTR _memPtr$56576[ebp]
	fldz
	fstp	DWORD PTR [edx+ecx*4+72]
; Line 5861
	jmp	SHORT $LN8@serialize
$LN7@serialize:
; Line 5862
	mov	eax, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [eax], 0
; Line 5863
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 5864
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN6@serialize
; Line 5866
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+88], 1
; Line 5867
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@serialize:
; Line 5869
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN5@serialize
; Line 5871
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+88], 3
; Line 5872
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx], eax
$LN5@serialize:
; Line 5874
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@serialize
; Line 5876
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+88], 2
; Line 5877
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@serialize:
; Line 5880
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@serialize
; Line 5882
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+92], 1
; Line 5883
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@serialize:
; Line 5885
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN2@serialize
; Line 5887
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+92], 3
; Line 5888
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN2@serialize:
; Line 5890
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN1@serialize
; Line 5892
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+92], 2
; Line 5893
	mov	edx, DWORD PTR _i$56578[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _memPtr$56576[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@serialize:
; Line 5895
	jmp	$LN11@serialize
$LN10@serialize:
; Line 5896
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	esi, esp
	push	eax
	push	1497453121				; 59415241H
	push	OFFSET $SG56602
	mov	edx, DWORD PTR _chunk$56575[ebp]
	push	edx
	mov	eax, DWORD PTR _serializer$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _serializer$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@serialize:
; Line 5900
	mov	DWORD PTR $T67474[ebp], OFFSET $SG56604
	lea	ecx, DWORD PTR _m_nodeIndexMap$[ebp]
	call	??1?$btHashMap@VbtHashPtr@@H@@QAE@XZ
	mov	eax, DWORD PTR $T67474[ebp]
; Line 5901
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN126@serialize
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 524				; 0000020cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN126@serialize:
	DD	2
	DD	$LN125@serialize
$LN125@serialize:
	DD	-92					; ffffffa4H
	DD	80					; 00000050H
	DD	$LN123@serialize
	DD	-152					; ffffff68H
	DD	4
	DD	$LN124@serialize
$LN124@serialize:
	DB	105					; 00000069H
	DB	0
$LN123@serialize:
	DB	109					; 0000006dH
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
?serialize@btSoftBody@@UBEPBDPAXPAVbtSerializer@@@Z ENDP ; btSoftBody::serialize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z
_TEXT	SEGMENT
_i$8200 = -8						; size = 4
_this$ = -4						; size = 4
_dataOut$ = 8						; size = 4
?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z PROC ; btVector3::serializeFloat, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 1312
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1314
	mov	DWORD PTR _i$8200[ebp], 0
	jmp	SHORT $LN3@serializeF
$LN2@serializeF:
	mov	eax, DWORD PTR _i$8200[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8200[ebp], eax
$LN3@serializeF:
	cmp	DWORD PTR _i$8200[ebp], 4
	jge	SHORT $LN1@serializeF
; Line 1315
	mov	ecx, DWORD PTR _i$8200[ebp]
	mov	edx, DWORD PTR _dataOut$[ebp]
	mov	eax, DWORD PTR _i$8200[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	fld	DWORD PTR [esi+eax*4]
	fstp	DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN2@serializeF
$LN1@serializeF:
; Line 1316
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ENDP ; btVector3::serializeFloat
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z
_TEXT	SEGMENT
_i$9308 = -8						; size = 4
_this$ = -4						; size = 4
_dataOut$ = 8						; size = 4
?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z PROC ; btMatrix3x3::serializeFloat, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 1342
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1343
	mov	DWORD PTR _i$9308[ebp], 0
	jmp	SHORT $LN3@serializeF@2
$LN2@serializeF@2:
	mov	eax, DWORD PTR _i$9308[ebp]
	add	eax, 1
	mov	DWORD PTR _i$9308[ebp], eax
$LN3@serializeF@2:
	cmp	DWORD PTR _i$9308[ebp], 3
	jge	SHORT $LN4@serializeF@2
; Line 1344
	mov	ecx, DWORD PTR _i$9308[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _dataOut$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _i$9308[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _this$[ebp]
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
	jmp	SHORT $LN2@serializeF@2
$LN4@serializeF@2:
; Line 1345
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z ENDP ; btMatrix3x3::serializeFloat
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?serializeFloat@btTransform@@QBEXAAUbtTransformFloatData@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dataOut$ = 8						; size = 4
?serializeFloat@btTransform@@QBEXAAUbtTransformFloatData@@@Z PROC ; btTransform::serializeFloat, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 274
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 275
	mov	eax, DWORD PTR _dataOut$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serializeFloat@btMatrix3x3@@QBEXAAUbtMatrix3x3FloatData@@@Z ; btMatrix3x3::serializeFloat
; Line 276
	mov	ecx, DWORD PTR _dataOut$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 277
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?serializeFloat@btTransform@@QBEXAAUbtTransformFloatData@@@Z ENDP ; btTransform::serializeFloat
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btHashPtr@@QAE@PBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
??0btHashPtr@@QAE@PBX@Z PROC				; btHashPtr::btHashPtr, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ptr$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 126
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0btHashPtr@@QAE@PBX@Z ENDP				; btHashPtr::btHashPtr
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ	; btAlignedObjectArray<btHashPtr>::btAlignedObjectArray<btHashPtr>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btHashMap@VbtHashPtr@@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btHashMap@VbtHashPtr@@H@@QAE@XZ PROC		; btHashMap<btHashPtr,int>::btHashMap<btHashPtr,int>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ ; btAlignedObjectArray<btHashPtr>::btAlignedObjectArray<btHashPtr>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btHashMap@VbtHashPtr@@H@@QAE@XZ ENDP		; btHashMap<btHashPtr,int>::btHashMap<btHashPtr,int>
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ	; btAlignedObjectArray<btHashPtr>::~btAlignedObjectArray<btHashPtr>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btHashMap@VbtHashPtr@@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btHashMap@VbtHashPtr@@H@@QAE@XZ PROC		; btHashMap<btHashPtr,int>::~btHashMap<btHashPtr,int>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ ; btAlignedObjectArray<btHashPtr>::~btAlignedObjectArray<btHashPtr>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btHashMap@VbtHashPtr@@H@@QAE@XZ ENDP		; btHashMap<btHashPtr,int>::~btHashMap<btHashPtr,int>
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@H@@IAEXXZ		; btAlignedObjectArray<int>::init
PUBLIC	??0?$btAlignedAllocator@H$0BA@@@QAE@XZ		; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@H@@QAE@XZ PROC		; btAlignedObjectArray<int>::btAlignedObjectArray<int>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@H$0BA@@@QAE@XZ	; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@H@@QAE@XZ ENDP		; btAlignedObjectArray<int>::btAlignedObjectArray<int>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@H@@QAEXXZ		; btAlignedObjectArray<int>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@H@@QAE@XZ PROC		; btAlignedObjectArray<int>::~btAlignedObjectArray<int>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@H@@QAEXXZ	; btAlignedObjectArray<int>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@H@@QAE@XZ ENDP		; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@H@@QBEHXZ PROC		; btAlignedObjectArray<int>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@H@@QBEHXZ ENDP		; btAlignedObjectArray<int>::size
_TEXT	ENDS
PUBLIC	??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (n>=0)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??A?$btAlignedObjectArray@H@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@H@@QAEAAHH@Z PROC		; btAlignedObjectArray<int>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@3
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@3:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@H@@QAEAAHH@Z ENDP		; btAlignedObjectArray<int>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@H@@QAEXH@Z	; btAlignedObjectArray<int>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z
_TEXT	SEGMENT
tv83 = -24						; size = 4
$T67501 = -20						; size = 4
_i$56648 = -16						; size = 4
_i$56642 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z PROC	; btAlignedObjectArray<int>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$56642[ebp], ecx
	jmp	SHORT $LN8@resize
$LN7@resize:
	mov	edx, DWORD PTR _i$56642[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56642[ebp], edx
$LN8@resize:
	mov	eax, DWORD PTR _i$56642[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize
; Line 229
	jmp	SHORT $LN7@resize
$LN6@resize:
; Line 230
	jmp	SHORT $LN5@resize
$LN9@resize:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@H@@QAEXH@Z ; btAlignedObjectArray<int>::reserve
$LN4@resize:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$56648[ebp], edx
	jmp	SHORT $LN3@resize
$LN2@resize:
	mov	eax, DWORD PTR _i$56648[ebp]
	add	eax, 1
	mov	DWORD PTR _i$56648[ebp], eax
$LN3@resize:
	mov	ecx, DWORD PTR _i$56648[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$56648[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67501[ebp], eax
	cmp	DWORD PTR $T67501[ebp], 0
	je	SHORT $LN12@resize
	mov	eax, DWORD PTR $T67501[ebp]
	mov	ecx, DWORD PTR _fillData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T67501[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN13@resize
$LN12@resize:
	mov	DWORD PTR tv83[ebp], 0
$LN13@resize:
; Line 240
	jmp	SHORT $LN2@resize
$LN5@resize:
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ENDP	; btAlignedObjectArray<int>::resize
_TEXT	ENDS
PUBLIC	?allocSize@?$btAlignedObjectArray@H@@IAEHH@Z	; btAlignedObjectArray<int>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@H@@QAEXABH@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T67506 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@H@@QAEXABH@Z PROC	; btAlignedObjectArray<int>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@H@@IAEHH@Z ; btAlignedObjectArray<int>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@H@@QAEXH@Z ; btAlignedObjectArray<int>::reserve
$LN1@push_back:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67506[ebp], eax
	cmp	DWORD PTR $T67506[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR $T67506[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67506[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@H@@QAEXABH@Z ENDP	; btAlignedObjectArray<int>::push_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?findLinearSearch@?$btAlignedObjectArray@H@@QBEHABH@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?findLinearSearch@?$btAlignedObjectArray@H@@QBEHABH@Z PROC ; btAlignedObjectArray<int>::findLinearSearch, COMDAT
; _this$ = ecx
; Line 466
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 467
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	mov	DWORD PTR _index$[ebp], eax
; Line 470
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@findLinear
$LN3@findLinear:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@findLinear:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@findLinear
; Line 472
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@findLinear
; Line 474
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 475
	jmp	SHORT $LN2@findLinear
$LN1@findLinear:
; Line 477
	jmp	SHORT $LN3@findLinear
$LN2@findLinear:
; Line 478
	mov	eax, DWORD PTR _index$[ebp]
; Line 479
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?findLinearSearch@?$btAlignedObjectArray@H@@QBEHABH@Z ENDP ; btAlignedObjectArray<int>::findLinearSearch
_TEXT	ENDS
PUBLIC	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z		; btSparseSdf<3>::Lerp
PUBLIC	?BuildCell@?$btSparseSdf@$02@@QAEXAAUCell@1@@Z	; btSparseSdf<3>::BuildCell
PUBLIC	?Reset@?$btSparseSdf@$02@@QAEXXZ		; btSparseSdf<3>::Reset
PUBLIC	?numResets@?P@??Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV3@M@Z@4HA ; `btSparseSdf<3>::Evaluate'::`15'::numResets
PUBLIC	??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
PUBLIC	?Hash@?$btSparseSdf@$02@@SAIHHHPBVbtCollisionShape@@@Z ; btSparseSdf<3>::Hash
PUBLIC	?Decompose@?$btSparseSdf@$02@@SA?AUIntFrac@1@M@Z ; btSparseSdf<3>::Decompose
PUBLIC	__$ArrayPad$
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_memset:PROC
;	COMDAT ?numResets@?P@??Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV3@M@Z@4HA
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsparsesdf.h
_BSS	SEGMENT
?numResets@?P@??Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV3@M@Z@4HA DD 01H DUP (?) ; `btSparseSdf<3>::Evaluate'::`15'::numResets
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV2@M@Z
_TEXT	SEGMENT
tv159 = -292						; size = 4
$T67515 = -288						; size = 4
$T67514 = -284						; size = 4
_d1$ = -280						; size = 4
_d0$ = -276						; size = 4
$T56740 = -272						; size = 16
_gz$ = -240						; size = 16
_gy$ = -216						; size = 16
_gx$ = -192						; size = 16
_d$ = -168						; size = 32
_o$ = -128						; size = 12
_sz$56726 = -112					; size = 4
_c$ = -108						; size = 4
_root$ = -104						; size = 4
_h$ = -100						; size = 4
_iz$ = -92						; size = 12
_iy$ = -72						; size = 12
_ix$ = -52						; size = 12
_scx$ = -32						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_shape$ = 12						; size = 4
_normal$ = 16						; size = 4
_margin$ = 20						; size = 4
?Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV2@M@Z PROC ; btSparseSdf<3>::Evaluate, COMDAT
; _this$ = ecx
; Line 162
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 164
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _x$[ebx]
	push	ecx
	lea	edx, DWORD PTR _scx$[ebp]
	push	edx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
; Line 165
	lea	ecx, DWORD PTR _scx$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _ix$[ebp]
	push	eax
	call	?Decompose@?$btSparseSdf@$02@@SA?AUIntFrac@1@M@Z ; btSparseSdf<3>::Decompose
	add	esp, 8
; Line 166
	lea	ecx, DWORD PTR _scx$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _iy$[ebp]
	push	ecx
	call	?Decompose@?$btSparseSdf@$02@@SA?AUIntFrac@1@M@Z ; btSparseSdf<3>::Decompose
	add	esp, 8
; Line 167
	lea	ecx, DWORD PTR _scx$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _iz$[ebp]
	push	edx
	call	?Decompose@?$btSparseSdf@$02@@SA?AUIntFrac@1@M@Z ; btSparseSdf<3>::Decompose
	add	esp, 8
; Line 168
	mov	eax, DWORD PTR _shape$[ebx]
	push	eax
	mov	ecx, DWORD PTR _iz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iy$[ebp]
	push	edx
	mov	eax, DWORD PTR _ix$[ebp]
	push	eax
	call	?Hash@?$btSparseSdf@$02@@SAIHHHPBVbtCollisionShape@@@Z ; btSparseSdf<3>::Hash
	add	esp, 16					; 00000010H
	mov	DWORD PTR _h$[ebp], eax
; Line 169
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
	mov	ecx, eax
	mov	eax, DWORD PTR _h$[ebp]
	xor	edx, edx
	div	ecx
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
	mov	DWORD PTR _root$[ebp], eax
; Line 170
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _c$[ebp], eax
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], edx
$LN6@Evaluate:
; Line 172
	cmp	DWORD PTR _c$[ebp], 0
	je	SHORT $LN5@Evaluate
; Line 174
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], edx
; Line 179
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	cmp	edx, DWORD PTR _h$[ebp]
	jne	SHORT $LN4@Evaluate
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+256]
	cmp	ecx, DWORD PTR _ix$[ebp]
	jne	SHORT $LN4@Evaluate
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+260]
	cmp	eax, DWORD PTR _iy$[ebp]
	jne	SHORT $LN4@Evaluate
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx+264]
	cmp	edx, DWORD PTR _iz$[ebp]
	jne	SHORT $LN4@Evaluate
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	cmp	ecx, DWORD PTR _shape$[ebx]
	jne	SHORT $LN4@Evaluate
; Line 180
	jmp	SHORT $LN5@Evaluate
; Line 181
	jmp	SHORT $LN3@Evaluate
$LN4@Evaluate:
; Line 182
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+280]
	mov	DWORD PTR _c$[ebp], eax
$LN3@Evaluate:
; Line 183
	jmp	SHORT $LN6@Evaluate
$LN5@Evaluate:
; Line 184
	cmp	DWORD PTR _c$[ebp], 0
	jne	$LN2@Evaluate
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], edx
; Line 187
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], edx
; Line 188
	mov	DWORD PTR _sz$56726[ebp], 284		; 0000011cH
; Line 189
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+32]
	jle	SHORT $LN1@Evaluate
; Line 192
	mov	ecx, DWORD PTR ?numResets@?P@??Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV3@M@Z@4HA ; `btSparseSdf<3>::Evaluate'::`15'::numResets
	add	ecx, 1
	mov	DWORD PTR ?numResets@?P@??Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV3@M@Z@4HA, ecx ; `btSparseSdf<3>::Evaluate'::`15'::numResets
; Line 194
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reset@?$btSparseSdf@$02@@QAEXXZ	; btSparseSdf<3>::Reset
$LN1@Evaluate:
; Line 197
	mov	DWORD PTR $T67514[ebp], 284		; 0000011cH
	mov	edx, DWORD PTR $T67514[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T67515[ebp], eax
	cmp	DWORD PTR $T67515[ebp], 0
	je	SHORT $LN9@Evaluate
	mov	eax, DWORD PTR $T67514[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR $T67515[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR $T67515[ebp]
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN10@Evaluate
$LN9@Evaluate:
	mov	DWORD PTR tv159[ebp], 0
$LN10@Evaluate:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR _c$[ebp], eax
; Line 198
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+280], eax
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 199
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _shape$[ebx]
	mov	DWORD PTR [eax+276], ecx
; Line 200
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [edx+272], eax
; Line 201
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _ix$[ebp]
	mov	DWORD PTR [ecx+256], edx
	mov	eax, DWORD PTR _c$[ebp]
	mov	ecx, DWORD PTR _iy$[ebp]
	mov	DWORD PTR [eax+260], ecx
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _iz$[ebp]
	mov	DWORD PTR [edx+264], eax
; Line 202
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?BuildCell@?$btSparseSdf@$02@@QAEXAAUCell@1@@Z ; btSparseSdf<3>::BuildCell
$LN2@Evaluate:
; Line 204
	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+268], ecx
; Line 206
	mov	edx, DWORD PTR _ix$[ebp+4]
	mov	DWORD PTR _o$[ebp], edx
	mov	eax, DWORD PTR _iy$[ebp+4]
	mov	DWORD PTR _o$[ebp+4], eax
	mov	ecx, DWORD PTR _iz$[ebp+4]
	mov	DWORD PTR _o$[ebp+8], ecx
; Line 207
	mov	edx, DWORD PTR _o$[ebp]
	shl	edx, 6
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _o$[ebp+4]
	shl	eax, 4
	add	edx, eax
	mov	ecx, DWORD PTR _o$[ebp+8]
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR _d$[ebp]
; Line 208
	mov	edx, DWORD PTR _o$[ebp]
	add	edx, 1
	shl	edx, 6
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _o$[ebp+4]
	shl	eax, 4
	add	edx, eax
	mov	ecx, DWORD PTR _o$[ebp+8]
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR _d$[ebp+4]
; Line 209
	mov	edx, DWORD PTR _o$[ebp]
	add	edx, 1
	shl	edx, 6
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _o$[ebp+4]
	add	eax, 1
	shl	eax, 4
	add	edx, eax
	mov	ecx, DWORD PTR _o$[ebp+8]
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR _d$[ebp+8]
; Line 210
	mov	edx, DWORD PTR _o$[ebp]
	shl	edx, 6
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _o$[ebp+4]
	add	eax, 1
	shl	eax, 4
	add	edx, eax
	mov	ecx, DWORD PTR _o$[ebp+8]
	fld	DWORD PTR [edx+ecx*4]
	fstp	DWORD PTR _d$[ebp+12]
; Line 211
	mov	edx, DWORD PTR _o$[ebp]
	shl	edx, 6
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _o$[ebp+4]
	shl	eax, 4
	add	edx, eax
	mov	ecx, DWORD PTR _o$[ebp+8]
	fld	DWORD PTR [edx+ecx*4+4]
	fstp	DWORD PTR _d$[ebp+16]
; Line 212
	mov	edx, DWORD PTR _o$[ebp]
	add	edx, 1
	shl	edx, 6
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _o$[ebp+4]
	shl	eax, 4
	add	edx, eax
	mov	ecx, DWORD PTR _o$[ebp+8]
	fld	DWORD PTR [edx+ecx*4+4]
	fstp	DWORD PTR _d$[ebp+20]
; Line 213
	mov	edx, DWORD PTR _o$[ebp]
	add	edx, 1
	shl	edx, 6
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _o$[ebp+4]
	add	eax, 1
	shl	eax, 4
	add	edx, eax
	mov	ecx, DWORD PTR _o$[ebp+8]
	fld	DWORD PTR [edx+ecx*4+4]
	fstp	DWORD PTR _d$[ebp+24]
; Line 214
	mov	edx, DWORD PTR _o$[ebp]
	shl	edx, 6
	add	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _o$[ebp+4]
	add	eax, 1
	shl	eax, 4
	add	edx, eax
	mov	ecx, DWORD PTR _o$[ebp+8]
	fld	DWORD PTR [edx+ecx*4+4]
	fstp	DWORD PTR _d$[ebp+28]
; Line 217
	fld	DWORD PTR _d$[ebp+4]
	fsub	DWORD PTR _d$[ebp]
	fstp	DWORD PTR _gx$[ebp]
	fld	DWORD PTR _d$[ebp+8]
	fsub	DWORD PTR _d$[ebp+12]
	fstp	DWORD PTR _gx$[ebp+4]
; Line 218
	fld	DWORD PTR _d$[ebp+20]
	fsub	DWORD PTR _d$[ebp+16]
	fstp	DWORD PTR _gx$[ebp+8]
	fld	DWORD PTR _d$[ebp+24]
	fsub	DWORD PTR _d$[ebp+28]
	fstp	DWORD PTR _gx$[ebp+12]
; Line 219
	fld	DWORD PTR _d$[ebp+12]
	fsub	DWORD PTR _d$[ebp]
	fstp	DWORD PTR _gy$[ebp]
	fld	DWORD PTR _d$[ebp+8]
	fsub	DWORD PTR _d$[ebp+4]
	fstp	DWORD PTR _gy$[ebp+4]
; Line 220
	fld	DWORD PTR _d$[ebp+28]
	fsub	DWORD PTR _d$[ebp+16]
	fstp	DWORD PTR _gy$[ebp+8]
	fld	DWORD PTR _d$[ebp+24]
	fsub	DWORD PTR _d$[ebp+20]
	fstp	DWORD PTR _gy$[ebp+12]
; Line 221
	fld	DWORD PTR _d$[ebp+16]
	fsub	DWORD PTR _d$[ebp]
	fstp	DWORD PTR _gz$[ebp]
	fld	DWORD PTR _d$[ebp+20]
	fsub	DWORD PTR _d$[ebp+4]
	fstp	DWORD PTR _gz$[ebp+4]
; Line 222
	fld	DWORD PTR _d$[ebp+28]
	fsub	DWORD PTR _d$[ebp+12]
	fstp	DWORD PTR _gz$[ebp+8]
	fld	DWORD PTR _d$[ebp+24]
	fsub	DWORD PTR _d$[ebp+8]
	fstp	DWORD PTR _gz$[ebp+12]
; Line 224
	push	ecx
	fld	DWORD PTR _iz$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _iy$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gx$[ebp+12]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gx$[ebp+8]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _iy$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gx$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gx$[ebp]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _normal$[ebx]
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
; Line 226
	push	ecx
	fld	DWORD PTR _iz$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _ix$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gy$[ebp+12]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gy$[ebp+8]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _ix$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gy$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gy$[ebp]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _normal$[ebx]
	call	?setY@btVector3@@QAEXM@Z		; btVector3::setY
; Line 228
	push	ecx
	fld	DWORD PTR _iy$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _ix$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gz$[ebp+12]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gz$[ebp+8]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _ix$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gz$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _gz$[ebp]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _normal$[ebx]
	call	?setZ@btVector3@@QAEXM@Z		; btVector3::setZ
; Line 229
	lea	edx, DWORD PTR $T56740[ebp]
	push	edx
	mov	ecx, DWORD PTR _normal$[ebx]
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
	mov	ecx, DWORD PTR _normal$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 235
	push	ecx
	fld	DWORD PTR _iy$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _ix$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d$[ebp+12]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _ix$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d$[ebp]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _d0$[ebp]
; Line 237
	push	ecx
	fld	DWORD PTR _iy$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _ix$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d$[ebp+24]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d$[ebp+28]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _ix$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d$[ebp+20]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d$[ebp+16]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 8
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _d1$[ebp]
; Line 238
	push	ecx
	fld	DWORD PTR _iz$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d1$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _d0$[ebp]
	fstp	DWORD PTR [esp]
	call	?Lerp@?$btSparseSdf@$02@@SAMMMM@Z	; btSparseSdf<3>::Lerp
	add	esp, 12					; 0000000cH
	fsub	DWORD PTR _margin$[ebx]
; Line 239
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Evaluate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	2
$LN21@Evaluate:
	DD	9
	DD	$LN20@Evaluate
$LN20@Evaluate:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN11@Evaluate
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN12@Evaluate
	DD	-72					; ffffffb8H
	DD	12					; 0000000cH
	DD	$LN13@Evaluate
	DD	-92					; ffffffa4H
	DD	12					; 0000000cH
	DD	$LN14@Evaluate
	DD	-128					; ffffff80H
	DD	12					; 0000000cH
	DD	$LN15@Evaluate
	DD	-168					; ffffff58H
	DD	32					; 00000020H
	DD	$LN16@Evaluate
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN17@Evaluate
	DD	-216					; ffffff28H
	DD	16					; 00000010H
	DD	$LN18@Evaluate
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN19@Evaluate
$LN19@Evaluate:
	DB	103					; 00000067H
	DB	122					; 0000007aH
	DB	0
$LN18@Evaluate:
	DB	103					; 00000067H
	DB	121					; 00000079H
	DB	0
$LN17@Evaluate:
	DB	103					; 00000067H
	DB	120					; 00000078H
	DB	0
$LN16@Evaluate:
	DB	100					; 00000064H
	DB	0
$LN15@Evaluate:
	DB	111					; 0000006fH
	DB	0
$LN14@Evaluate:
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	0
$LN13@Evaluate:
	DB	105					; 00000069H
	DB	121					; 00000079H
	DB	0
$LN12@Evaluate:
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN11@Evaluate:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	120					; 00000078H
	DB	0
?Evaluate@?$btSparseSdf@$02@@QAEMABVbtVector3@@PBVbtCollisionShape@@AAV2@M@Z ENDP ; btSparseSdf<3>::Evaluate
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ ; btAlignedObjectArray<btCollisionObject const *>::init
PUBLIC	??0?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAE@XZ ; btAlignedAllocator<btCollisionObject const *,16>::btAlignedAllocator<btCollisionObject const *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ PROC ; btAlignedObjectArray<btCollisionObject const *>::btAlignedObjectArray<btCollisionObject const *>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAE@XZ ; btAlignedAllocator<btCollisionObject const *,16>::btAlignedAllocator<btCollisionObject const *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ ; btAlignedObjectArray<btCollisionObject const *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ ENDP ; btAlignedObjectArray<btCollisionObject const *>::btAlignedObjectArray<btCollisionObject const *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXXZ ; btAlignedObjectArray<btCollisionObject const *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ PROC ; btAlignedObjectArray<btCollisionObject const *>::~btAlignedObjectArray<btCollisionObject const *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXXZ ; btAlignedObjectArray<btCollisionObject const *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAE@XZ ENDP ; btAlignedObjectArray<btCollisionObject const *>::~btAlignedObjectArray<btCollisionObject const *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ PROC ; btAlignedObjectArray<btCollisionObject const *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ENDP ; btAlignedObjectArray<btCollisionObject const *>::size
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXH@Z ; btAlignedObjectArray<btCollisionObject const *>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEHH@Z ; btAlignedObjectArray<btCollisionObject const *>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXABQBVbtCollisionObject@@@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T67539 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXABQBVbtCollisionObject@@@Z PROC ; btAlignedObjectArray<btCollisionObject const *>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@2
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEHH@Z ; btAlignedObjectArray<btCollisionObject const *>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXH@Z ; btAlignedObjectArray<btCollisionObject const *>::reserve
$LN1@push_back@2:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67539[ebp], eax
	cmp	DWORD PTR $T67539[ebp], 0
	je	SHORT $LN4@push_back@2
	mov	edx, DWORD PTR $T67539[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67539[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back@2:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXABQBVbtCollisionObject@@@Z ENDP ; btAlignedObjectArray<btCollisionObject const *>::push_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?findLinearSearch@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHABQBVbtCollisionObject@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?findLinearSearch@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHABQBVbtCollisionObject@@@Z PROC ; btAlignedObjectArray<btCollisionObject const *>::findLinearSearch, COMDAT
; _this$ = ecx
; Line 466
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 467
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::size
	mov	DWORD PTR _index$[ebp], eax
; Line 470
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@findLinear@2
$LN3@findLinear@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@findLinear@2:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@findLinear@2
; Line 472
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@findLinear@2
; Line 474
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 475
	jmp	SHORT $LN2@findLinear@2
$LN1@findLinear@2:
; Line 477
	jmp	SHORT $LN3@findLinear@2
$LN2@findLinear@2:
; Line 478
	mov	eax, DWORD PTR _index$[ebp]
; Line 479
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?findLinearSearch@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHABQBVbtCollisionObject@@@Z ENDP ; btAlignedObjectArray<btCollisionObject const *>::findLinearSearch
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::init
PUBLIC	??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ ; btAlignedAllocator<btVector3,16>::btAlignedAllocator<btVector3,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ PROC	; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ ; btAlignedAllocator<btVector3,16>::btAlignedAllocator<btVector3,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ENDP	; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ ; btAlignedObjectArray<btVector3>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ PROC	; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ ; btAlignedObjectArray<btVector3>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ENDP	; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ PROC	; btAlignedObjectArray<btVector3>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ENDP	; btAlignedObjectArray<btVector3>::size
_TEXT	ENDS
PUBLIC	??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (n<size())', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??A?$btAlignedObjectArray@VbtVector3@@@@QBEABVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@VbtVector3@@@@QBEABVbtVector3@@H@Z PROC ; btAlignedObjectArray<btVector3>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@4
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@4:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@4
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@4:
; Line 172
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@VbtVector3@@@@QBEABVbtVector3@@H@Z ENDP ; btAlignedObjectArray<btVector3>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z PROC ; btAlignedObjectArray<btVector3>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@5
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@5:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ENDP ; btAlignedObjectArray<btVector3>::operator[]
_TEXT	ENDS
PUBLIC	??2btVector3@@SAPAXIPAX@Z			; btVector3::operator new
PUBLIC	?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z ; btAlignedObjectArray<btVector3>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z
_TEXT	SEGMENT
tv84 = -24						; size = 4
$T67556 = -20						; size = 4
_i$56793 = -16						; size = 4
_i$56787 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z PROC ; btAlignedObjectArray<btVector3>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@2
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$56787[ebp], ecx
	jmp	SHORT $LN8@resize@2
$LN7@resize@2:
	mov	edx, DWORD PTR _i$56787[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56787[ebp], edx
$LN8@resize@2:
	mov	eax, DWORD PTR _i$56787[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@2
; Line 229
	jmp	SHORT $LN7@resize@2
$LN6@resize@2:
; Line 230
	jmp	SHORT $LN5@resize@2
$LN9@resize@2:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@2
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z ; btAlignedObjectArray<btVector3>::reserve
$LN4@resize@2:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$56793[ebp], edx
	jmp	SHORT $LN3@resize@2
$LN2@resize@2:
	mov	eax, DWORD PTR _i$56793[ebp]
	add	eax, 1
	mov	DWORD PTR _i$56793[ebp], eax
$LN3@resize@2:
	mov	ecx, DWORD PTR _i$56793[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@2
; Line 239
	mov	edx, DWORD PTR _i$56793[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	push	edx
	push	16					; 00000010H
	call	??2btVector3@@SAPAXIPAX@Z		; btVector3::operator new
	add	esp, 8
	mov	DWORD PTR $T67556[ebp], eax
	cmp	DWORD PTR $T67556[ebp], 0
	je	SHORT $LN12@resize@2
	mov	ecx, DWORD PTR _fillData$[ebp]
	mov	edx, DWORD PTR $T67556[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR $T67556[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN13@resize@2
$LN12@resize@2:
	mov	DWORD PTR tv84[ebp], 0
$LN13@resize@2:
; Line 240
	jmp	SHORT $LN2@resize@2
$LN5@resize@2:
; Line 245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ENDP ; btAlignedObjectArray<btVector3>::resize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??2btVector3@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_ptr$ = 12						; size = 4
??2btVector3@@SAPAXIPAX@Z PROC				; btVector3::operator new, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 87
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	pop	ebp
	ret	0
??2btVector3@@SAPAXIPAX@Z ENDP				; btVector3::operator new
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@M@@IAEXXZ		; btAlignedObjectArray<float>::init
PUBLIC	??0?$btAlignedAllocator@M$0BA@@@QAE@XZ		; btAlignedAllocator<float,16>::btAlignedAllocator<float,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@M@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@M@@QAE@XZ PROC		; btAlignedObjectArray<float>::btAlignedObjectArray<float>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@M$0BA@@@QAE@XZ	; btAlignedAllocator<float,16>::btAlignedAllocator<float,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@M@@IAEXXZ	; btAlignedObjectArray<float>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@M@@QAE@XZ ENDP		; btAlignedObjectArray<float>::btAlignedObjectArray<float>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@M@@QAEXXZ		; btAlignedObjectArray<float>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@M@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@M@@QAE@XZ PROC		; btAlignedObjectArray<float>::~btAlignedObjectArray<float>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@M@@QAEXXZ	; btAlignedObjectArray<float>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@M@@QAE@XZ ENDP		; btAlignedObjectArray<float>::~btAlignedObjectArray<float>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@M@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@M@@QBEHXZ PROC		; btAlignedObjectArray<float>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@M@@QBEHXZ ENDP		; btAlignedObjectArray<float>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@M@@QBEABMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@M@@QBEABMH@Z PROC		; btAlignedObjectArray<float>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@6
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@6:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@M@@QBEHXZ	; btAlignedObjectArray<float>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@6
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@6:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@M@@QBEABMH@Z ENDP		; btAlignedObjectArray<float>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@M@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@M@@QAEAAMH@Z PROC		; btAlignedObjectArray<float>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@7
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@7:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@M@@QAEAAMH@Z ENDP		; btAlignedObjectArray<float>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@M@@QAEXH@Z	; btAlignedObjectArray<float>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@M@@QAEXHABM@Z
_TEXT	SEGMENT
tv83 = -24						; size = 4
$T67573 = -20						; size = 4
_i$56824 = -16						; size = 4
_i$56818 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@M@@QAEXHABM@Z PROC	; btAlignedObjectArray<float>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@M@@QBEHXZ	; btAlignedObjectArray<float>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@3
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$56818[ebp], ecx
	jmp	SHORT $LN8@resize@3
$LN7@resize@3:
	mov	edx, DWORD PTR _i$56818[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56818[ebp], edx
$LN8@resize@3:
	mov	eax, DWORD PTR _i$56818[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@3
; Line 229
	jmp	SHORT $LN7@resize@3
$LN6@resize@3:
; Line 230
	jmp	SHORT $LN1@resize@3
$LN9@resize@3:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@M@@QBEHXZ	; btAlignedObjectArray<float>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@3
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@M@@QAEXH@Z ; btAlignedObjectArray<float>::reserve
$LN4@resize@3:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$56824[ebp], edx
	jmp	SHORT $LN3@resize@3
$LN2@resize@3:
	mov	eax, DWORD PTR _i$56824[ebp]
	add	eax, 1
	mov	DWORD PTR _i$56824[ebp], eax
$LN3@resize@3:
	mov	ecx, DWORD PTR _i$56824[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN1@resize@3
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$56824[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67573[ebp], eax
	cmp	DWORD PTR $T67573[ebp], 0
	je	SHORT $LN12@resize@3
	mov	eax, DWORD PTR $T67573[ebp]
	mov	ecx, DWORD PTR _fillData$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	edx, DWORD PTR $T67573[ebp]
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN13@resize@3
$LN12@resize@3:
	mov	DWORD PTR tv83[ebp], 0
$LN13@resize@3:
; Line 240
	jmp	SHORT $LN2@resize@3
$LN1@resize@3:
; Line 245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@M@@QAEXHABM@Z ENDP	; btAlignedObjectArray<float>::resize
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node *>::init
PUBLIC	??0?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Node *,16>::btAlignedAllocator<btSoftBody::Node *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Node *>::btAlignedObjectArray<btSoftBody::Node *>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Node *,16>::btAlignedAllocator<btSoftBody::Node *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Node *>::btAlignedObjectArray<btSoftBody::Node *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Node *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Node *>::~btAlignedObjectArray<btSoftBody::Node *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Node *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Node *>::~btAlignedObjectArray<btSoftBody::Node *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Node *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Node *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEABQAUNode@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEABQAUNode@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@8
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@8:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@8
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@8:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEABQAUNode@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@9
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@9:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?resize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXHABQAUNode@btSoftBody@@@Z
_TEXT	SEGMENT
tv83 = -24						; size = 4
$T67588 = -20						; size = 4
_i$56855 = -16						; size = 4
_i$56849 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXHABQAUNode@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@4
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$56849[ebp], ecx
	jmp	SHORT $LN8@resize@4
$LN7@resize@4:
	mov	edx, DWORD PTR _i$56849[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56849[ebp], edx
$LN8@resize@4:
	mov	eax, DWORD PTR _i$56849[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@4
; Line 229
	jmp	SHORT $LN7@resize@4
$LN6@resize@4:
; Line 230
	jmp	SHORT $LN5@resize@4
$LN9@resize@4:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@4
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Node *>::reserve
$LN4@resize@4:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$56855[ebp], edx
	jmp	SHORT $LN3@resize@4
$LN2@resize@4:
	mov	eax, DWORD PTR _i$56855[ebp]
	add	eax, 1
	mov	DWORD PTR _i$56855[ebp], eax
$LN3@resize@4:
	mov	ecx, DWORD PTR _i$56855[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@4
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$56855[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67588[ebp], eax
	cmp	DWORD PTR $T67588[ebp], 0
	je	SHORT $LN12@resize@4
	mov	eax, DWORD PTR $T67588[ebp]
	mov	ecx, DWORD PTR _fillData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T67588[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN13@resize@4
$LN12@resize@4:
	mov	DWORD PTR tv83[ebp], 0
$LN13@resize@4:
; Line 240
	jmp	SHORT $LN2@resize@4
$LN5@resize@4:
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXHABQAUNode@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::resize
_TEXT	ENDS
PUBLIC	?allocSize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Node *>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T67593 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@3
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Node *>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Node *>::reserve
$LN1@push_back@3:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67593[ebp], eax
	cmp	DWORD PTR $T67593[ebp], 0
	je	SHORT $LN4@push_back@3
	mov	edx, DWORD PTR $T67593[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67593[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back@3
$LN4@push_back@3:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back@3:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXABQAUNode@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::push_back
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Node *>::destroy
PUBLIC	?copy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IBEXHHPAPAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Node *>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$56874 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Node *>::allocate
	mov	DWORD PTR _s$56874[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$56874[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IBEXHHPAPAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node *>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Node *>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node *>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$56874[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?findLinearSearch@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHABQAUNode@btSoftBody@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?findLinearSearch@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHABQAUNode@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::findLinearSearch, COMDAT
; _this$ = ecx
; Line 466
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 467
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	mov	DWORD PTR _index$[ebp], eax
; Line 470
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@findLinear@3
$LN3@findLinear@3:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@findLinear@3:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@findLinear@3
; Line 472
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@findLinear@3
; Line 474
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 475
	jmp	SHORT $LN2@findLinear@3
$LN1@findLinear@3:
; Line 477
	jmp	SHORT $LN3@findLinear@3
$LN2@findLinear@3:
; Line 478
	mov	eax, DWORD PTR _index$[ebp]
; Line 479
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?findLinearSearch@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHABQAUNode@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::findLinearSearch
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::init
PUBLIC	??0?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::btAlignedAllocator<enum btSoftBody::eVSolver::_,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::btAlignedObjectArray<enum btSoftBody::eVSolver::_>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::btAlignedAllocator<enum btSoftBody::eVSolver::_,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::btAlignedObjectArray<enum btSoftBody::eVSolver::_>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::~btAlignedObjectArray<enum btSoftBody::eVSolver::_>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::~btAlignedObjectArray<enum btSoftBody::eVSolver::_>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEAAW4_@eVSolver@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEAAW4_@eVSolver@btSoftBody@@H@Z PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@10
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@10:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEAAW4_@eVSolver@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::operator[]
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::clear
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXABW4_@eVSolver@btSoftBody@@@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T67612 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXABW4_@eVSolver@btSoftBody@@@Z PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@4
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::reserve
$LN1@push_back@4:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67612[ebp], eax
	cmp	DWORD PTR $T67612[ebp], 0
	je	SHORT $LN4@push_back@4
	mov	edx, DWORD PTR $T67612[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67612[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back@4
$LN4@push_back@4:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back@4:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXABW4_@eVSolver@btSoftBody@@@Z ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::push_back
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::init
PUBLIC	??0?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::btAlignedAllocator<enum btSoftBody::ePSolver::_,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::btAlignedObjectArray<enum btSoftBody::ePSolver::_>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::btAlignedAllocator<enum btSoftBody::ePSolver::_,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::btAlignedObjectArray<enum btSoftBody::ePSolver::_>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::~btAlignedObjectArray<enum btSoftBody::ePSolver::_>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::~btAlignedObjectArray<enum btSoftBody::ePSolver::_>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEAAW4_@ePSolver@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEAAW4_@ePSolver@btSoftBody@@H@Z PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@11
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@11:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEAAW4_@ePSolver@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::operator[]
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::clear
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T67627 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@5
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::reserve
$LN1@push_back@5:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67627[ebp], eax
	cmp	DWORD PTR $T67627[ebp], 0
	je	SHORT $LN4@push_back@5
	mov	edx, DWORD PTR $T67627[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67627[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back@5
$LN4@push_back@5:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back@5:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXABW4_@ePSolver@btSoftBody@@@Z ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::push_back
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Note>::init
PUBLIC	??0?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Note,16>::btAlignedAllocator<btSoftBody::Note,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Note>::btAlignedObjectArray<btSoftBody::Note>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Note,16>::btAlignedAllocator<btSoftBody::Note,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Note>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Note>::btAlignedObjectArray<btSoftBody::Note>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Note>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Note>::~btAlignedObjectArray<btSoftBody::Note>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Note>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@UNote@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Note>::~btAlignedObjectArray<btSoftBody::Note>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Note>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Note>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Note>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@12
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@12:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Note>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Note>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Note>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXABUNote@btSoftBody@@@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T67640 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXABUNote@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Note>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@6
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Note>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Note>::reserve
$LN1@push_back@6:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	push	80					; 00000050H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67640[ebp], eax
	cmp	DWORD PTR $T67640[ebp], 0
	je	SHORT $LN4@push_back@6
	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 20					; 00000014H
	mov	edi, DWORD PTR $T67640[ebp]
	rep movsd
	mov	eax, DWORD PTR $T67640[ebp]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@push_back@6
$LN4@push_back@6:
	mov	DWORD PTR tv85[ebp], 0
$LN5@push_back@6:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXABUNote@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Note>::push_back
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::init
PUBLIC	??0?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Node,16>::btAlignedAllocator<btSoftBody::Node,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Node>::btAlignedObjectArray<btSoftBody::Node>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Node,16>::btAlignedAllocator<btSoftBody::Node,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::btAlignedObjectArray<btSoftBody::Node>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Node>::~btAlignedObjectArray<btSoftBody::Node>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@UNode@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::~btAlignedObjectArray<btSoftBody::Node>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Node>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@13
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@13:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@13
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@13:
; Line 172
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEABUNode@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@14
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@14:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::operator[]
_TEXT	ENDS
PUBLIC	??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (m_size>0)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?pop_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pop_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Node>::pop_back, COMDAT
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN1@pop_back
	push	195					; 000000c3H
	push	OFFSET ??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@pop_back:
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 198
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::pop_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?resize@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXHABUNode@btSoftBody@@@Z
_TEXT	SEGMENT
tv84 = -24						; size = 4
$T67657 = -20						; size = 4
_i$56965 = -16						; size = 4
_i$56959 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXHABUNode@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@5
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$56959[ebp], ecx
	jmp	SHORT $LN8@resize@5
$LN7@resize@5:
	mov	edx, DWORD PTR _i$56959[ebp]
	add	edx, 1
	mov	DWORD PTR _i$56959[ebp], edx
$LN8@resize@5:
	mov	eax, DWORD PTR _i$56959[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@5
; Line 229
	jmp	SHORT $LN7@resize@5
$LN6@resize@5:
; Line 230
	jmp	SHORT $LN5@resize@5
$LN9@resize@5:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@5
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Node>::reserve
$LN4@resize@5:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$56965[ebp], edx
	jmp	SHORT $LN3@resize@5
$LN2@resize@5:
	mov	eax, DWORD PTR _i$56965[ebp]
	add	eax, 1
	mov	DWORD PTR _i$56965[ebp], eax
$LN3@resize@5:
	mov	ecx, DWORD PTR _i$56965[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@5
; Line 239
	mov	edx, DWORD PTR _i$56965[ebp]
	shl	edx, 7
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	push	edx
	push	128					; 00000080H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67657[ebp], eax
	cmp	DWORD PTR $T67657[ebp], 0
	je	SHORT $LN12@resize@5
	mov	esi, DWORD PTR _fillData$[ebp]
	mov	ecx, 32					; 00000020H
	mov	edi, DWORD PTR $T67657[ebp]
	rep movsd
	mov	ecx, DWORD PTR $T67657[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN13@resize@5
$LN12@resize@5:
	mov	DWORD PTR tv84[ebp], 0
$LN13@resize@5:
; Line 240
	jmp	SHORT $LN2@resize@5
$LN5@resize@5:
; Line 245
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 246
	pop	edi
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXHABUNode@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::resize
_TEXT	ENDS
PUBLIC	?allocSize@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Node>::allocSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXABUNode@btSoftBody@@@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T67662 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXABUNode@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@7
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Node>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Node>::reserve
$LN1@push_back@7:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	push	128					; 00000080H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67662[ebp], eax
	cmp	DWORD PTR $T67662[ebp], 0
	je	SHORT $LN4@push_back@7
	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 32					; 00000020H
	mov	edi, DWORD PTR $T67662[ebp]
	rep movsd
	mov	eax, DWORD PTR $T67662[ebp]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@push_back@7
$LN4@push_back@7:
	mov	DWORD PTR tv85[ebp], 0
$LN5@push_back@7:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXABUNode@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::push_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Node>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::capacity
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Node>::destroy
PUBLIC	?copy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IBEXHHPAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Node>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$56986 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@2
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Node>::allocate
	mov	DWORD PTR _s$56986[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$56986[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IBEXHHPAUNode@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Node>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Node>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$56986[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@2:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::reserve
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::init
PUBLIC	??0?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Link,16>::btAlignedAllocator<btSoftBody::Link,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Link>::btAlignedObjectArray<btSoftBody::Link>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Link,16>::btAlignedAllocator<btSoftBody::Link,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Link>::btAlignedObjectArray<btSoftBody::Link>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Link>::~btAlignedObjectArray<btSoftBody::Link>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@ULink@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Link>::~btAlignedObjectArray<btSoftBody::Link>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Link>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Link>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Link>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@15
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@15:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@15
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@15:
; Line 172
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEABULink@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Link>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Link>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@16
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@16:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEAAULink@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Link>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Link>::pop_back, COMDAT
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN1@pop_back@2
	push	195					; 000000c3H
	push	OFFSET ??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@pop_back@2:
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 198
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Link>::pop_back
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Link>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Link>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXABULink@btSoftBody@@@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T67683 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXABULink@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Link>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@8
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Link>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Link>::reserve
$LN1@push_back@8:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	push	64					; 00000040H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67683[ebp], eax
	cmp	DWORD PTR $T67683[ebp], 0
	je	SHORT $LN4@push_back@8
	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR $T67683[ebp]
	rep movsd
	mov	eax, DWORD PTR $T67683[ebp]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@push_back@8
$LN4@push_back@8:
	mov	DWORD PTR tv85[ebp], 0
$LN5@push_back@8:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXABULink@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Link>::push_back
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Face>::init
PUBLIC	??0?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Face,16>::btAlignedAllocator<btSoftBody::Face,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Face>::btAlignedObjectArray<btSoftBody::Face>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Face,16>::btAlignedAllocator<btSoftBody::Face,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Face>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Face>::btAlignedObjectArray<btSoftBody::Face>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Face>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Face>::~btAlignedObjectArray<btSoftBody::Face>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Face>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@UFace@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Face>::~btAlignedObjectArray<btSoftBody::Face>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Face>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Face>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@17
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@17:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@17
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@17:
; Line 172
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEABUFace@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@18
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@18:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Face>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Face>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXABUFace@btSoftBody@@@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T67698 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXABUFace@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@9
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Face>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Face>::reserve
$LN1@push_back@9:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	push	64					; 00000040H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67698[ebp], eax
	cmp	DWORD PTR $T67698[ebp], 0
	je	SHORT $LN4@push_back@9
	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR $T67698[ebp]
	rep movsd
	mov	eax, DWORD PTR $T67698[ebp]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@push_back@9
$LN4@push_back@9:
	mov	DWORD PTR tv85[ebp], 0
$LN5@push_back@9:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXABUFace@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::push_back
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Tetra>::init
PUBLIC	??0?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Tetra,16>::btAlignedAllocator<btSoftBody::Tetra,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Tetra>::btAlignedObjectArray<btSoftBody::Tetra>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Tetra,16>::btAlignedAllocator<btSoftBody::Tetra,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Tetra>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::btAlignedObjectArray<btSoftBody::Tetra>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Tetra>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Tetra>::~btAlignedObjectArray<btSoftBody::Tetra>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Tetra>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::~btAlignedObjectArray<btSoftBody::Tetra>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Tetra>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Tetra>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@19
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@19:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@19
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@19:
; Line 172
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEABUTetra@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Tetra>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@20
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@20:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Tetra>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Tetra>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXABUTetra@btSoftBody@@@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T67713 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXABUTetra@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Tetra>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@10
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Tetra>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Tetra>::reserve
$LN1@push_back@10:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	push	112					; 00000070H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67713[ebp], eax
	cmp	DWORD PTR $T67713[ebp], 0
	je	SHORT $LN4@push_back@10
	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 28					; 0000001cH
	mov	edi, DWORD PTR $T67713[ebp]
	rep movsd
	mov	eax, DWORD PTR $T67713[ebp]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@push_back@10
$LN4@push_back@10:
	mov	DWORD PTR tv85[ebp], 0
$LN5@push_back@10:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXABUTetra@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::push_back
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Anchor>::init
PUBLIC	??0?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Anchor,16>::btAlignedAllocator<btSoftBody::Anchor,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Anchor>::btAlignedObjectArray<btSoftBody::Anchor>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Anchor,16>::btAlignedAllocator<btSoftBody::Anchor,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Anchor>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::btAlignedObjectArray<btSoftBody::Anchor>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Anchor>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Anchor>::~btAlignedObjectArray<btSoftBody::Anchor>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Anchor>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::~btAlignedObjectArray<btSoftBody::Anchor>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Anchor>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Anchor>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@21
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@21:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@21
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@21:
; Line 172
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEABUAnchor@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Anchor>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@22
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@22:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
_TEXT	ENDS
PUBLIC	??0Anchor@btSoftBody@@QAE@ABU01@@Z		; btSoftBody::Anchor::Anchor
PUBLIC	?reserve@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Anchor>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Anchor>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXABUAnchor@btSoftBody@@@Z
_TEXT	SEGMENT
tv87 = -16						; size = 4
$T67728 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXABUAnchor@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Anchor>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@11
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Anchor>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Anchor>::reserve
$LN1@push_back@11:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	push	128					; 00000080H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67728[ebp], eax
	cmp	DWORD PTR $T67728[ebp], 0
	je	SHORT $LN4@push_back@11
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67728[ebp]
	call	??0Anchor@btSoftBody@@QAE@ABU01@@Z
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN5@push_back@11
$LN4@push_back@11:
	mov	DWORD PTR tv87[ebp], 0
$LN5@push_back@11:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXABUAnchor@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::push_back
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::RContact>::init
PUBLIC	??0?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::RContact,16>::btAlignedAllocator<btSoftBody::RContact,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::RContact>::btAlignedObjectArray<btSoftBody::RContact>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::RContact,16>::btAlignedAllocator<btSoftBody::RContact,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::RContact>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::RContact>::btAlignedObjectArray<btSoftBody::RContact>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::RContact>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::RContact>::~btAlignedObjectArray<btSoftBody::RContact>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::RContact>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@URContact@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::RContact>::~btAlignedObjectArray<btSoftBody::RContact>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::RContact>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::RContact>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::RContact>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@23
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@23:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::RContact>::operator[]
_TEXT	ENDS
PUBLIC	??0RContact@btSoftBody@@QAE@ABU01@@Z		; btSoftBody::RContact::RContact
PUBLIC	?reserve@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::RContact>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXHABURContact@btSoftBody@@@Z
_TEXT	SEGMENT
tv86 = -24						; size = 4
$T67741 = -20						; size = 4
_i$57094 = -16						; size = 4
_i$57088 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXHABURContact@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::RContact>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@6
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$57088[ebp], ecx
	jmp	SHORT $LN8@resize@6
$LN7@resize@6:
	mov	edx, DWORD PTR _i$57088[ebp]
	add	edx, 1
	mov	DWORD PTR _i$57088[ebp], edx
$LN8@resize@6:
	mov	eax, DWORD PTR _i$57088[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@6
; Line 229
	jmp	SHORT $LN7@resize@6
$LN6@resize@6:
; Line 230
	jmp	SHORT $LN5@resize@6
$LN9@resize@6:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@6
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::RContact>::reserve
$LN4@resize@6:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$57094[ebp], edx
	jmp	SHORT $LN3@resize@6
$LN2@resize@6:
	mov	eax, DWORD PTR _i$57094[ebp]
	add	eax, 1
	mov	DWORD PTR _i$57094[ebp], eax
$LN3@resize@6:
	mov	ecx, DWORD PTR _i$57094[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@6
; Line 239
	mov	edx, DWORD PTR _i$57094[ebp]
	imul	edx, 144				; 00000090H
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	push	edx
	push	144					; 00000090H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67741[ebp], eax
	cmp	DWORD PTR $T67741[ebp], 0
	je	SHORT $LN12@resize@6
	mov	ecx, DWORD PTR _fillData$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T67741[ebp]
	call	??0RContact@btSoftBody@@QAE@ABU01@@Z
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN13@resize@6
$LN12@resize@6:
	mov	DWORD PTR tv86[ebp], 0
$LN13@resize@6:
; Line 240
	jmp	SHORT $LN2@resize@6
$LN5@resize@6:
; Line 245
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXHABURContact@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::RContact>::resize
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::SContact>::init
PUBLIC	??0?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::SContact,16>::btAlignedAllocator<btSoftBody::SContact,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::SContact>::btAlignedObjectArray<btSoftBody::SContact>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::SContact,16>::btAlignedAllocator<btSoftBody::SContact,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::SContact>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::SContact>::btAlignedObjectArray<btSoftBody::SContact>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::SContact>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::SContact>::~btAlignedObjectArray<btSoftBody::SContact>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::SContact>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@USContact@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::SContact>::~btAlignedObjectArray<btSoftBody::SContact>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::SContact>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::SContact>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEAAUSContact@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEAAUSContact@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::SContact>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@24
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@24:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEAAUSContact@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::SContact>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::SContact>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXHABUSContact@btSoftBody@@@Z
_TEXT	SEGMENT
tv84 = -24						; size = 4
$T67754 = -20						; size = 4
_i$57129 = -16						; size = 4
_i$57123 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXHABUSContact@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::SContact>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@7
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$57123[ebp], ecx
	jmp	SHORT $LN8@resize@7
$LN7@resize@7:
	mov	edx, DWORD PTR _i$57123[ebp]
	add	edx, 1
	mov	DWORD PTR _i$57123[ebp], edx
$LN8@resize@7:
	mov	eax, DWORD PTR _i$57123[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@7
; Line 229
	jmp	SHORT $LN7@resize@7
$LN6@resize@7:
; Line 230
	jmp	SHORT $LN5@resize@7
$LN9@resize@7:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@7
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::SContact>::reserve
$LN4@resize@7:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$57129[ebp], edx
	jmp	SHORT $LN3@resize@7
$LN2@resize@7:
	mov	eax, DWORD PTR _i$57129[ebp]
	add	eax, 1
	mov	DWORD PTR _i$57129[ebp], eax
$LN3@resize@7:
	mov	ecx, DWORD PTR _i$57129[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@7
; Line 239
	mov	edx, DWORD PTR _i$57129[ebp]
	shl	edx, 6
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	push	edx
	push	64					; 00000040H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67754[ebp], eax
	cmp	DWORD PTR $T67754[ebp], 0
	je	SHORT $LN12@resize@7
	mov	esi, DWORD PTR _fillData$[ebp]
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR $T67754[ebp]
	rep movsd
	mov	ecx, DWORD PTR $T67754[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN13@resize@7
$LN12@resize@7:
	mov	DWORD PTR tv84[ebp], 0
$LN13@resize@7:
; Line 240
	jmp	SHORT $LN2@resize@7
$LN5@resize@7:
; Line 245
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 246
	pop	edi
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXHABUSContact@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::SContact>::resize
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::init
PUBLIC	??0?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Joint *,16>::btAlignedAllocator<btSoftBody::Joint *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Joint *>::btAlignedObjectArray<btSoftBody::Joint *>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Joint *,16>::btAlignedAllocator<btSoftBody::Joint *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::btAlignedObjectArray<btSoftBody::Joint *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Joint *>::~btAlignedObjectArray<btSoftBody::Joint *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::~btAlignedObjectArray<btSoftBody::Joint *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Joint *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@25
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@25:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@25
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@25:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEABQAUJoint@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@26
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@26:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T67769 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@12
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::reserve
$LN1@push_back@12:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67769[ebp], eax
	cmp	DWORD PTR $T67769[ebp], 0
	je	SHORT $LN4@push_back@12
	mov	edx, DWORD PTR $T67769[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67769[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back@12
$LN4@push_back@12:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back@12:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::push_back
_TEXT	ENDS
PUBLIC	?pop_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::pop_back
PUBLIC	?swap@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXHH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::swap
PUBLIC	?findLinearSearch@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHABQAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::findLinearSearch
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?remove@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z
_TEXT	SEGMENT
_findIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?remove@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::remove, COMDAT
; _this$ = ecx
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 484
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findLinearSearch@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHABQAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::findLinearSearch
	mov	DWORD PTR _findIndex$[ebp], eax
; Line 485
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	cmp	DWORD PTR _findIndex$[ebp], eax
	jge	SHORT $LN2@remove
; Line 487
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _findIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?swap@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXHH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::swap
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::pop_back
$LN2@remove:
; Line 490
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?remove@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::remove
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Material *>::init
PUBLIC	??0?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Material *,16>::btAlignedAllocator<btSoftBody::Material *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Material *>::btAlignedObjectArray<btSoftBody::Material *>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Material *,16>::btAlignedAllocator<btSoftBody::Material *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Material *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Material *>::btAlignedObjectArray<btSoftBody::Material *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Material *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Material *>::~btAlignedObjectArray<btSoftBody::Material *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Material *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Material *>::~btAlignedObjectArray<btSoftBody::Material *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Material *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Material *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEABQAUMaterial@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEABQAUMaterial@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Material *>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@27
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@27:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@27
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@27:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEABQAUMaterial@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Material *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@28
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@28:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEAAPAUMaterial@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Material *>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Material *>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Material *>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXABQAUMaterial@btSoftBody@@@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T67786 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXABQAUMaterial@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Material *>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@13
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Material *>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Material *>::reserve
$LN1@push_back@13:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67786[ebp], eax
	cmp	DWORD PTR $T67786[ebp], 0
	je	SHORT $LN4@push_back@13
	mov	edx, DWORD PTR $T67786[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67786[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back@13
$LN4@push_back@13:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back@13:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXABQAUMaterial@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Material *>::push_back
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::init
PUBLIC	??0?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Cluster *,16>::btAlignedAllocator<btSoftBody::Cluster *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::btAlignedObjectArray<btSoftBody::Cluster *>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAE@XZ ; btAlignedAllocator<btSoftBody::Cluster *,16>::btAlignedAllocator<btSoftBody::Cluster *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::btAlignedObjectArray<btSoftBody::Cluster *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::~btAlignedObjectArray<btSoftBody::Cluster *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAE@XZ ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::~btAlignedObjectArray<btSoftBody::Cluster *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@29
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@29:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@29
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@29:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEABQAUCluster@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@30
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@30:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHABQAUCluster@btSoftBody@@@Z
_TEXT	SEGMENT
tv83 = -24						; size = 4
$T67801 = -20						; size = 4
_i$57214 = -16						; size = 4
_i$57208 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHABQAUCluster@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@8
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$57208[ebp], ecx
	jmp	SHORT $LN8@resize@8
$LN7@resize@8:
	mov	edx, DWORD PTR _i$57208[ebp]
	add	edx, 1
	mov	DWORD PTR _i$57208[ebp], edx
$LN8@resize@8:
	mov	eax, DWORD PTR _i$57208[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@8
; Line 229
	jmp	SHORT $LN7@resize@8
$LN6@resize@8:
; Line 230
	jmp	SHORT $LN5@resize@8
$LN9@resize@8:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@8
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::reserve
$LN4@resize@8:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$57214[ebp], edx
	jmp	SHORT $LN3@resize@8
$LN2@resize@8:
	mov	eax, DWORD PTR _i$57214[ebp]
	add	eax, 1
	mov	DWORD PTR _i$57214[ebp], eax
$LN3@resize@8:
	mov	ecx, DWORD PTR _i$57214[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@8
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$57214[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67801[ebp], eax
	cmp	DWORD PTR $T67801[ebp], 0
	je	SHORT $LN12@resize@8
	mov	eax, DWORD PTR $T67801[ebp]
	mov	ecx, DWORD PTR _fillData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T67801[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN13@resize@8
$LN12@resize@8:
	mov	DWORD PTR tv83[ebp], 0
$LN13@resize@8:
; Line 240
	jmp	SHORT $LN2@resize@8
$LN5@resize@8:
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHABQAUCluster@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::resize
_TEXT	ENDS
PUBLIC	?allocSize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T67806 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@14
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::reserve
$LN1@push_back@14:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67806[ebp], eax
	cmp	DWORD PTR $T67806[ebp], 0
	je	SHORT $LN4@push_back@14
	mov	edx, DWORD PTR $T67806[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67806[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back@14
$LN4@push_back@14:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back@14:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::push_back
_TEXT	ENDS
PUBLIC	?pop_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::pop_back
PUBLIC	?swap@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::swap
PUBLIC	?findLinearSearch@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::findLinearSearch
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?remove@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z
_TEXT	SEGMENT
_findIndex$ = -8					; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?remove@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::remove, COMDAT
; _this$ = ecx
; Line 482
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 484
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findLinearSearch@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHABQAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::findLinearSearch
	mov	DWORD PTR _findIndex$[ebp], eax
; Line 485
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _findIndex$[ebp], eax
	jge	SHORT $LN2@remove@2
; Line 487
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _findIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?swap@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::swap
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?pop_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::pop_back
$LN2@remove@2:
; Line 490
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?remove@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXABQAUCluster@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::remove
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@_N@@IAEXXZ		; btAlignedObjectArray<bool>::init
PUBLIC	??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ		; btAlignedAllocator<bool,16>::btAlignedAllocator<bool,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@_N@@QAE@XZ PROC		; btAlignedObjectArray<bool>::btAlignedObjectArray<bool>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ	; btAlignedAllocator<bool,16>::btAlignedAllocator<bool,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@_N@@IAEXXZ	; btAlignedObjectArray<bool>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@_N@@QAE@XZ ENDP		; btAlignedObjectArray<bool>::btAlignedObjectArray<bool>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@_N@@QAEXXZ	; btAlignedObjectArray<bool>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@_N@@QAE@XZ PROC		; btAlignedObjectArray<bool>::~btAlignedObjectArray<bool>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@_N@@QAEXXZ ; btAlignedObjectArray<bool>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@_N@@QAE@XZ ENDP		; btAlignedObjectArray<bool>::~btAlignedObjectArray<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z PROC		; btAlignedObjectArray<bool>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@31
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@31:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR _n$[ebp]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z ENDP		; btAlignedObjectArray<bool>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z	; btAlignedObjectArray<bool>::reserve
PUBLIC	?size@?$btAlignedObjectArray@_N@@QBEHXZ		; btAlignedObjectArray<bool>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z
_TEXT	SEGMENT
tv82 = -24						; size = 4
$T67819 = -20						; size = 4
_i$57253 = -16						; size = 4
_i$57247 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z PROC	; btAlignedObjectArray<bool>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@9
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$57247[ebp], ecx
	jmp	SHORT $LN8@resize@9
$LN7@resize@9:
	mov	edx, DWORD PTR _i$57247[ebp]
	add	edx, 1
	mov	DWORD PTR _i$57247[ebp], edx
$LN8@resize@9:
	mov	eax, DWORD PTR _i$57247[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@9
; Line 229
	jmp	SHORT $LN7@resize@9
$LN6@resize@9:
; Line 230
	jmp	SHORT $LN5@resize@9
$LN9@resize@9:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@9
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z ; btAlignedObjectArray<bool>::reserve
$LN4@resize@9:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$57253[ebp], edx
	jmp	SHORT $LN3@resize@9
$LN2@resize@9:
	mov	eax, DWORD PTR _i$57253[ebp]
	add	eax, 1
	mov	DWORD PTR _i$57253[ebp], eax
$LN3@resize@9:
	mov	ecx, DWORD PTR _i$57253[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@9
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _i$57253[ebp]
	push	eax
	push	1
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67819[ebp], eax
	cmp	DWORD PTR $T67819[ebp], 0
	je	SHORT $LN12@resize@9
	mov	ecx, DWORD PTR $T67819[ebp]
	mov	edx, DWORD PTR _fillData$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR $T67819[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $LN13@resize@9
$LN12@resize@9:
	mov	DWORD PTR tv82[ebp], 0
$LN13@resize@9:
; Line 240
	jmp	SHORT $LN2@resize@9
$LN5@resize@9:
; Line 245
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z ENDP	; btAlignedObjectArray<bool>::resize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@_N@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@_N@@QBEHXZ PROC		; btAlignedObjectArray<bool>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@_N@@QBEHXZ ENDP		; btAlignedObjectArray<bool>::size
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ ; btAlignedObjectArray<btHashPtr>::init
PUBLIC	??0?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAE@XZ ; btAlignedAllocator<btHashPtr,16>::btAlignedAllocator<btHashPtr,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ PROC	; btAlignedObjectArray<btHashPtr>::btAlignedObjectArray<btHashPtr>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAE@XZ ; btAlignedAllocator<btHashPtr,16>::btAlignedAllocator<btHashPtr,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ ; btAlignedObjectArray<btHashPtr>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ ENDP	; btAlignedObjectArray<btHashPtr>::btAlignedObjectArray<btHashPtr>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXXZ ; btAlignedObjectArray<btHashPtr>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ PROC	; btAlignedObjectArray<btHashPtr>::~btAlignedObjectArray<btHashPtr>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXXZ ; btAlignedObjectArray<btHashPtr>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@VbtHashPtr@@@@QAE@XZ ENDP	; btAlignedObjectArray<btHashPtr>::~btAlignedObjectArray<btHashPtr>
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ ; btAlignedObjectArray<NodeLinks>::init
PUBLIC	??0?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAE@XZ ; btAlignedAllocator<NodeLinks,16>::btAlignedAllocator<NodeLinks,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ PROC	; btAlignedObjectArray<NodeLinks>::btAlignedObjectArray<NodeLinks>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAE@XZ ; btAlignedAllocator<NodeLinks,16>::btAlignedAllocator<NodeLinks,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ ; btAlignedObjectArray<NodeLinks>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ ENDP	; btAlignedObjectArray<NodeLinks>::btAlignedObjectArray<NodeLinks>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@UNodeLinks@@@@QAEXXZ ; btAlignedObjectArray<NodeLinks>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ PROC	; btAlignedObjectArray<NodeLinks>::~btAlignedObjectArray<NodeLinks>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@UNodeLinks@@@@QAEXXZ ; btAlignedObjectArray<NodeLinks>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@UNodeLinks@@@@QAE@XZ ENDP	; btAlignedObjectArray<NodeLinks>::~btAlignedObjectArray<NodeLinks>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ PROC	; btAlignedObjectArray<NodeLinks>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ENDP	; btAlignedObjectArray<NodeLinks>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z PROC ; btAlignedObjectArray<NodeLinks>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@32
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@32:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UNodeLinks@@@@QAEAAUNodeLinks@@H@Z ENDP ; btAlignedObjectArray<NodeLinks>::operator[]
_TEXT	ENDS
PUBLIC	??0NodeLinks@@QAE@ABU0@@Z			; NodeLinks::NodeLinks
PUBLIC	?reserve@?$btAlignedObjectArray@UNodeLinks@@@@QAEXH@Z ; btAlignedObjectArray<NodeLinks>::reserve
PUBLIC	??_GNodeLinks@@QAEPAXI@Z			; NodeLinks::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@UNodeLinks@@@@QAEXHABUNodeLinks@@@Z
_TEXT	SEGMENT
tv91 = -24						; size = 4
$T67838 = -20						; size = 4
_i$58432 = -16						; size = 4
_i$58426 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@UNodeLinks@@@@QAEXHABUNodeLinks@@@Z PROC ; btAlignedObjectArray<NodeLinks>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ; btAlignedObjectArray<NodeLinks>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@10
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$58426[ebp], ecx
	jmp	SHORT $LN8@resize@10
$LN7@resize@10:
	mov	edx, DWORD PTR _i$58426[ebp]
	add	edx, 1
	mov	DWORD PTR _i$58426[ebp], edx
$LN8@resize@10:
	mov	eax, DWORD PTR _i$58426[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@10
; Line 228
	push	0
	mov	ecx, DWORD PTR _i$58426[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	call	??_GNodeLinks@@QAEPAXI@Z
; Line 229
	jmp	SHORT $LN7@resize@10
$LN6@resize@10:
; Line 230
	jmp	SHORT $LN5@resize@10
$LN9@resize@10:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ; btAlignedObjectArray<NodeLinks>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@10
; Line 234
	mov	eax, DWORD PTR _newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@UNodeLinks@@@@QAEXH@Z ; btAlignedObjectArray<NodeLinks>::reserve
$LN4@resize@10:
; Line 237
	mov	ecx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$58432[ebp], ecx
	jmp	SHORT $LN3@resize@10
$LN2@resize@10:
	mov	edx, DWORD PTR _i$58432[ebp]
	add	edx, 1
	mov	DWORD PTR _i$58432[ebp], edx
$LN3@resize@10:
	mov	eax, DWORD PTR _i$58432[ebp]
	cmp	eax, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@10
; Line 239
	mov	ecx, DWORD PTR _i$58432[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	push	20					; 00000014H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67838[ebp], eax
	cmp	DWORD PTR $T67838[ebp], 0
	je	SHORT $LN12@resize@10
	mov	eax, DWORD PTR _fillData$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T67838[ebp]
	call	??0NodeLinks@@QAE@ABU0@@Z
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN13@resize@10
$LN12@resize@10:
	mov	DWORD PTR tv91[ebp], 0
$LN13@resize@10:
; Line 240
	jmp	SHORT $LN2@resize@10
$LN5@resize@10:
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@UNodeLinks@@@@QAEXHABUNodeLinks@@@Z ENDP ; btAlignedObjectArray<NodeLinks>::resize
_TEXT	ENDS
PUBLIC	?resize@?$btSymMatrix@H@@QAEXHABH@Z		; btSymMatrix<int>::resize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btSymMatrix@H@@QAE@HABH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_init$ = 12						; size = 4
??0?$btSymMatrix@H@@QAE@HABH@Z PROC			; btSymMatrix<int>::btSymMatrix<int>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	eax, DWORD PTR _init$[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$btSymMatrix@H@@QAEXHABH@Z	; btSymMatrix<int>::resize
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$btSymMatrix@H@@QAE@HABH@Z ENDP			; btSymMatrix<int>::btSymMatrix<int>
_TEXT	ENDS
PUBLIC	?index@?$btSymMatrix@H@@QBEHHH@Z		; btSymMatrix<int>::index
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??R?$btSymMatrix@H@@QAEAAHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 4
_r$ = 12						; size = 4
??R?$btSymMatrix@H@@QAEAAHHH@Z PROC			; btSymMatrix<int>::operator(), COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _r$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?index@?$btSymMatrix@H@@QBEHHH@Z	; btSymMatrix<int>::index
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$btSymMatrix@H@@QAEAAHHH@Z ENDP			; btSymMatrix<int>::operator()
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody *>::size, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEABQAVbtSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEABQAVbtSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody *>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@33
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@33:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody *>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@33
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@33:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAVbtSoftBody@@@@QBEABQAVbtSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody *>::operator[]
_TEXT	ENDS
PUBLIC	?growTables@?$btHashMap@VbtHashPtr@@H@@IAEXABVbtHashPtr@@@Z ; btHashMap<btHashPtr,int>::growTables
PUBLIC	?push_back@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXABVbtHashPtr@@@Z ; btAlignedObjectArray<btHashPtr>::push_back
PUBLIC	?findIndex@?$btHashMap@VbtHashPtr@@H@@QBEHABVbtHashPtr@@@Z ; btHashMap<btHashPtr,int>::findIndex
PUBLIC	?getHash@btHashPtr@@QBEIXZ			; btHashPtr::getHash
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?insert@?$btHashMap@VbtHashPtr@@H@@QAEXABVbtHashPtr@@ABH@Z
_TEXT	SEGMENT
_newCapacity$ = -24					; size = 4
_oldCapacity$ = -20					; size = 4
_count$ = -16						; size = 4
_index$ = -12						; size = 4
_hash$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_value$ = 12						; size = 4
?insert@?$btHashMap@VbtHashPtr@@H@@QAEXABVbtHashPtr@@ABH@Z PROC ; btHashMap<btHashPtr,int>::insert, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 269
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 270
	mov	ecx, DWORD PTR _key$[ebp]
	call	?getHash@btHashPtr@@QBEIXZ		; btHashPtr::getHash
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	sub	eax, 1
	and	esi, eax
	mov	DWORD PTR _hash$[ebp], esi
; Line 273
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findIndex@?$btHashMap@VbtHashPtr@@H@@QBEHABVbtHashPtr@@@Z ; btHashMap<btHashPtr,int>::findIndex
	mov	DWORD PTR _index$[ebp], eax
; Line 274
	cmp	DWORD PTR _index$[ebp], -1
	je	SHORT $LN2@insert
; Line 276
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	edx, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
; Line 277
	jmp	$LN3@insert
$LN2@insert:
; Line 280
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	mov	DWORD PTR _count$[ebp], eax
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	mov	DWORD PTR _oldCapacity$[ebp], eax
; Line 282
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push_back@?$btAlignedObjectArray@H@@QAEXABH@Z ; btAlignedObjectArray<int>::push_back
; Line 283
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?push_back@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXABVbtHashPtr@@@Z ; btAlignedObjectArray<btHashPtr>::push_back
; Line 285
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	mov	DWORD PTR _newCapacity$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _oldCapacity$[ebp]
	cmp	ecx, DWORD PTR _newCapacity$[ebp]
	jge	SHORT $LN1@insert
; Line 288
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?growTables@?$btHashMap@VbtHashPtr@@H@@IAEXABVbtHashPtr@@@Z ; btHashMap<btHashPtr,int>::growTables
; Line 290
	mov	ecx, DWORD PTR _key$[ebp]
	call	?getHash@btHashPtr@@QBEIXZ		; btHashPtr::getHash
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	sub	eax, 1
	and	esi, eax
	mov	DWORD PTR _hash$[ebp], esi
$LN1@insert:
; Line 292
	mov	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
; Line 293
	mov	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@insert:
; Line 294
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@?$btHashMap@VbtHashPtr@@H@@QAEXABVbtHashPtr@@ABH@Z ENDP ; btHashMap<btHashPtr,int>::insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getHash@btHashPtr@@QBEIXZ
_TEXT	SEGMENT
tv67 = -16						; size = 4
_key$ = -12						; size = 4
_VOID_IS_8$ = -5					; size = 1
_this$ = -4						; size = 4
?getHash@btHashPtr@@QBEIXZ PROC				; btHashPtr::getHash, COMDAT
; _this$ = ecx
; Line 140
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 141
	mov	BYTE PTR _VOID_IS_8$[ebp], 0
; Line 143
	xor	eax, eax
	je	SHORT $LN3@getHash
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN4@getHash
$LN3@getHash:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv67[ebp], edx
$LN4@getHash:
	mov	eax, DWORD PTR tv67[ebp]
	mov	DWORD PTR _key$[ebp], eax
; Line 146
	mov	ecx, DWORD PTR _key$[ebp]
	shl	ecx, 15					; 0000000fH
	not	ecx
	add	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
	mov	edx, DWORD PTR _key$[ebp]
	sar	edx, 10					; 0000000aH
	xor	edx, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], edx
	mov	eax, DWORD PTR _key$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR _key$[ebp], edx
	mov	eax, DWORD PTR _key$[ebp]
	sar	eax, 6
	xor	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], eax
	mov	ecx, DWORD PTR _key$[ebp]
	shl	ecx, 11					; 0000000bH
	not	ecx
	add	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
	mov	edx, DWORD PTR _key$[ebp]
	sar	edx, 16					; 00000010H
	xor	edx, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], edx
; Line 147
	mov	eax, DWORD PTR _key$[ebp]
; Line 148
	mov	esp, ebp
	pop	ebp
	ret	0
?getHash@btHashPtr@@QBEIXZ ENDP				; btHashPtr::getHash
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?find@?$btHashMap@VbtHashPtr@@H@@QAEPAHABVbtHashPtr@@@Z
_TEXT	SEGMENT
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?find@?$btHashMap@VbtHashPtr@@H@@QAEPAHABVbtHashPtr@@@Z PROC ; btHashMap<btHashPtr,int>::find, COMDAT
; _this$ = ecx
; Line 413
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 414
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findIndex@?$btHashMap@VbtHashPtr@@H@@QBEHABVbtHashPtr@@@Z ; btHashMap<btHashPtr,int>::findIndex
	mov	DWORD PTR _index$[ebp], eax
; Line 415
	cmp	DWORD PTR _index$[ebp], -1
	jne	SHORT $LN1@find
; Line 417
	xor	eax, eax
	jmp	SHORT $LN2@find
$LN1@find:
; Line 419
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
$LN2@find:
; Line 420
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?find@?$btHashMap@VbtHashPtr@@H@@QAEPAHABVbtHashPtr@@@Z ENDP ; btHashMap<btHashPtr,int>::find
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Anchor@btSoftBody@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0Anchor@btSoftBody@@QAE@ABU01@@Z PROC			; btSoftBody::Anchor::Anchor, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+36]
	fstp	DWORD PTR [ecx+36]
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+112]
	fstp	DWORD PTR [edx+112]
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Anchor@btSoftBody@@QAE@ABU01@@Z ENDP			; btSoftBody::Anchor::Anchor
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0RContact@btSoftBody@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0RContact@btSoftBody@@QAE@ABU01@@Z PROC		; btSoftBody::RContact::RContact, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, DWORD PTR ___that$[ebp]
	mov	ecx, 12					; 0000000cH
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+48], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 112				; 00000070H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+128]
	fstp	DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+132]
	fstp	DWORD PTR [ecx+132]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [ecx+136]
	fstp	DWORD PTR [eax+136]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0RContact@btSoftBody@@QAE@ABU01@@Z ENDP		; btSoftBody::RContact::RContact
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GNodeLinks@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GNodeLinks@@QAEPAXI@Z PROC				; NodeLinks::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1NodeLinks@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GNodeLinks@@QAEPAXI@Z ENDP				; NodeLinks::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@H@@QAE@ABV0@@Z	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0NodeLinks@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0NodeLinks@@QAE@ABU0@@Z PROC				; NodeLinks::NodeLinks, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@ABV0@@Z ; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0NodeLinks@@QAE@ABU0@@Z ENDP				; NodeLinks::NodeLinks
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@H@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@H@@IAEHH@Z PROC	; btAlignedObjectArray<int>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize
$LN3@allocSize:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@H@@IAEHH@Z ENDP	; btAlignedObjectArray<int>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@H@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@H@@IAEXXZ PROC		; btAlignedObjectArray<int>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@H@@IAEXXZ ENDP		; btAlignedObjectArray<int>::init
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z	; btAlignedObjectArray<int>::copy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@H@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T67873 = -12						; size = 4
_otherSize$ = -8					; size = 4
_this$ = -4						; size = 4
_otherArray$ = 8					; size = 4
??0?$btAlignedObjectArray@H@@QAE@ABV0@@Z PROC		; btAlignedObjectArray<int>::btAlignedObjectArray<int>, COMDAT
; _this$ = ecx
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@H$0BA@@@QAE@XZ	; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
; Line 139
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::init
; Line 141
	mov	ecx, DWORD PTR _otherArray$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	mov	DWORD PTR _otherSize$[ebp], eax
; Line 142
	mov	DWORD PTR $T67873[ebp], 0
	lea	eax, DWORD PTR $T67873[ebp]
	push	eax
	mov	ecx, DWORD PTR _otherSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
; Line 143
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _otherSize$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _otherArray$[ebp]
	call	?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z ; btAlignedObjectArray<int>::copy
; Line 144
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$btAlignedObjectArray@H@@QAE@ABV0@@Z ENDP		; btAlignedObjectArray<int>::btAlignedObjectArray<int>
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z	; btAlignedObjectArray<int>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@H@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@H@@QAEXXZ PROC		; btAlignedObjectArray<int>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z ; btAlignedObjectArray<int>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@H@@IAEXXZ ; btAlignedObjectArray<int>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@H@@QAEXXZ ENDP		; btAlignedObjectArray<int>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@H@@QBEHXZ PROC		; btAlignedObjectArray<int>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@H@@QBEHXZ ENDP		; btAlignedObjectArray<int>::capacity
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z	; btAlignedObjectArray<int>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@H@@QAEXH@Z
_TEXT	SEGMENT
_s$58596 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@H@@QAEXH@Z PROC		; btAlignedObjectArray<int>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@3
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z ; btAlignedObjectArray<int>::allocate
	mov	DWORD PTR _s$58596[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58596[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z ; btAlignedObjectArray<int>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z ; btAlignedObjectArray<int>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@H@@IAEXXZ ; btAlignedObjectArray<int>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58596[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@3:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@H@@QAEXH@Z ENDP		; btAlignedObjectArray<int>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@H$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@H$0BA@@@QAE@XZ PROC		; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@H$0BA@@@QAE@XZ ENDP		; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Reset@?$btSparseSdf@$02@@QAEXXZ
_TEXT	SEGMENT
$T67884 = -24						; size = 4
_pn$58620 = -20						; size = 4
_pc$58616 = -16						; size = 4
_ni$58612 = -12						; size = 4
_i$58611 = -8						; size = 4
_this$ = -4						; size = 4
?Reset@?$btSparseSdf@$02@@QAEXXZ PROC			; btSparseSdf<3>::Reset, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsparsesdf.h
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 92
	mov	DWORD PTR _i$58611[ebp], 0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
	mov	DWORD PTR _ni$58612[ebp], eax
	jmp	SHORT $LN5@Reset
$LN4@Reset:
	mov	eax, DWORD PTR _i$58611[ebp]
	add	eax, 1
	mov	DWORD PTR _i$58611[ebp], eax
$LN5@Reset:
	mov	ecx, DWORD PTR _i$58611[ebp]
	cmp	ecx, DWORD PTR _ni$58612[ebp]
	jge	SHORT $LN3@Reset
; Line 94
	mov	edx, DWORD PTR _i$58611[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pc$58616[ebp], eax
; Line 95
	mov	ecx, DWORD PTR _i$58611[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
	mov	DWORD PTR [eax], 0
$LN2@Reset:
; Line 96
	cmp	DWORD PTR _pc$58616[ebp], 0
	je	SHORT $LN1@Reset
; Line 98
	mov	edx, DWORD PTR _pc$58616[ebp]
	mov	eax, DWORD PTR [edx+280]
	mov	DWORD PTR _pn$58620[ebp], eax
; Line 99
	mov	ecx, DWORD PTR _pc$58616[ebp]
	mov	DWORD PTR $T67884[ebp], ecx
	mov	edx, DWORD PTR $T67884[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 100
	mov	eax, DWORD PTR _pn$58620[ebp]
	mov	DWORD PTR _pc$58616[ebp], eax
; Line 101
	jmp	SHORT $LN2@Reset
$LN1@Reset:
; Line 102
	jmp	SHORT $LN4@Reset
$LN3@Reset:
; Line 103
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR [ecx+20]
; Line 104
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
; Line 105
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 106
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 1
; Line 107
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 1
; Line 108
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@?$btSparseSdf@$02@@QAEXXZ ENDP			; btSparseSdf<3>::Reset
_TEXT	ENDS
PUBLIC	?DistanceToShape@?$btSparseSdf@$02@@SAMABVbtVector3@@PBVbtCollisionShape@@@Z ; btSparseSdf<3>::DistanceToShape
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BuildCell@?$btSparseSdf@$02@@QAEXAAUCell@1@@Z
_TEXT	SEGMENT
tv198 = -172						; size = 4
tv196 = -168						; size = 4
tv194 = -164						; size = 4
$T67890 = -160						; size = 4
$T67889 = -156						; size = 4
$T67888 = -152						; size = 4
$T67887 = -148						; size = 4
$T58650 = -144						; size = 16
_x$58649 = -124						; size = 4
_i$58645 = -116						; size = 4
_y$58644 = -108						; size = 4
_j$58640 = -100						; size = 4
_z$58639 = -92						; size = 4
_k$58635 = -84						; size = 4
$T58633 = -80						; size = 16
$T58628 = -64						; size = 16
_org$ = -32						; size = 16
_this$ = -4						; size = 4
_c$ = 8							; size = 4
?BuildCell@?$btSparseSdf@$02@@QAEXAAUCell@1@@Z PROC	; btSparseSdf<3>::BuildCell, COMDAT
; _this$ = ecx
; Line 242
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 176				; 000000b0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 246
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T67887[ebp]
	mov	eax, DWORD PTR _c$[ebx]
	fild	DWORD PTR [eax+264]
	fstp	DWORD PTR $T67888[ebp]
	mov	ecx, DWORD PTR _c$[ebx]
	fild	DWORD PTR [ecx+260]
	fstp	DWORD PTR $T67889[ebp]
	mov	edx, DWORD PTR _c$[ebx]
	fild	DWORD PTR [edx+256]
	fstp	DWORD PTR $T67890[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	lea	ecx, DWORD PTR $T67887[ebp]
	push	ecx
	lea	edx, DWORD PTR $T67888[ebp]
	push	edx
	lea	eax, DWORD PTR $T67889[ebp]
	push	eax
	lea	ecx, DWORD PTR $T67890[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T58628[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	edx, DWORD PTR $T58633[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _org$[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 247
	mov	DWORD PTR _k$58635[ebp], 0
	jmp	SHORT $LN9@BuildCell
$LN8@BuildCell:
	mov	ecx, DWORD PTR _k$58635[ebp]
	add	ecx, 1
	mov	DWORD PTR _k$58635[ebp], ecx
$LN9@BuildCell:
	cmp	DWORD PTR _k$58635[ebp], 3
	jg	$LN7@BuildCell
; Line 249
	fild	DWORD PTR _k$58635[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [edx+20]
	lea	ecx, DWORD PTR _org$[ebp]
	fstp	DWORD PTR tv194[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR tv194[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR _z$58639[ebp]
; Line 250
	mov	DWORD PTR _j$58640[ebp], 0
	jmp	SHORT $LN6@BuildCell
$LN5@BuildCell:
	mov	eax, DWORD PTR _j$58640[ebp]
	add	eax, 1
	mov	DWORD PTR _j$58640[ebp], eax
$LN6@BuildCell:
	cmp	DWORD PTR _j$58640[ebp], 3
	jg	$LN4@BuildCell
; Line 252
	fild	DWORD PTR _j$58640[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+20]
	lea	ecx, DWORD PTR _org$[ebp]
	fstp	DWORD PTR tv196[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR tv196[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR _y$58644[ebp]
; Line 253
	mov	DWORD PTR _i$58645[ebp], 0
	jmp	SHORT $LN3@BuildCell
$LN2@BuildCell:
	mov	edx, DWORD PTR _i$58645[ebp]
	add	edx, 1
	mov	DWORD PTR _i$58645[ebp], edx
$LN3@BuildCell:
	cmp	DWORD PTR _i$58645[ebp], 3
	jg	SHORT $LN1@BuildCell
; Line 255
	fild	DWORD PTR _i$58645[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+20]
	lea	ecx, DWORD PTR _org$[ebp]
	fstp	DWORD PTR tv198[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR tv198[ebp]
	fadd	DWORD PTR [eax]
	fstp	DWORD PTR _x$58649[ebp]
; Line 257
	mov	ecx, DWORD PTR _c$[ebx]
	mov	edx, DWORD PTR [ecx+276]
	push	edx
	lea	eax, DWORD PTR _z$58639[ebp]
	push	eax
	lea	ecx, DWORD PTR _y$58644[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$58649[ebp]
	push	edx
	lea	ecx, DWORD PTR $T58650[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	call	?DistanceToShape@?$btSparseSdf@$02@@SAMABVbtVector3@@PBVbtCollisionShape@@@Z ; btSparseSdf<3>::DistanceToShape
	add	esp, 8
	mov	eax, DWORD PTR _i$58645[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _c$[ebx]
	mov	ecx, DWORD PTR _j$58640[ebp]
	shl	ecx, 4
	add	eax, ecx
	mov	edx, DWORD PTR _k$58635[ebp]
	fstp	DWORD PTR [eax+edx*4]
; Line 258
	jmp	SHORT $LN2@BuildCell
$LN1@BuildCell:
; Line 259
	jmp	$LN5@BuildCell
$LN4@BuildCell:
; Line 260
	jmp	$LN8@BuildCell
$LN7@BuildCell:
; Line 261
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@BuildCell
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
$LN17@BuildCell:
	DD	4
	DD	$LN16@BuildCell
$LN16@BuildCell:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN12@BuildCell
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN13@BuildCell
	DD	-108					; ffffff94H
	DD	4
	DD	$LN14@BuildCell
	DD	-124					; ffffff84H
	DD	4
	DD	$LN15@BuildCell
$LN15@BuildCell:
	DB	120					; 00000078H
	DB	0
$LN14@BuildCell:
	DB	121					; 00000079H
	DB	0
$LN13@BuildCell:
	DB	122					; 0000007aH
	DB	0
$LN12@BuildCell:
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	0
?BuildCell@?$btSparseSdf@$02@@QAEXAAUCell@1@@Z ENDP	; btSparseSdf<3>::BuildCell
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	__ftol2_sse:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Decompose@?$btSparseSdf@$02@@SA?AUIntFrac@1@M@Z
_TEXT	SEGMENT
tv70 = -36						; size = 4
_k$ = -32						; size = 4
_o$ = -28						; size = 4
_r$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
?Decompose@?$btSparseSdf@$02@@SA?AUIntFrac@1@M@Z PROC	; btSparseSdf<3>::Decompose, COMDAT
; Line 278
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 282
	fld	DWORD PTR _x$[ebp]
	fdiv	DWORD PTR __real@40400000
	fstp	DWORD PTR _x$[ebp]
; Line 283
	fldz
	fcomp	DWORD PTR _x$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@Decompose
	fld	DWORD PTR _x$[ebp]
	fchs
	fadd	DWORD PTR __real@3f800000
	call	__ftol2_sse
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN4@Decompose
$LN3@Decompose:
	mov	DWORD PTR tv70[ebp], 0
$LN4@Decompose:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _o$[ebp], eax
; Line 284
	fild	DWORD PTR _o$[ebp]
	fadd	DWORD PTR _x$[ebp]
	fstp	DWORD PTR _x$[ebp]
	fld	DWORD PTR _x$[ebp]
	call	__ftol2_sse
	mov	DWORD PTR _r$[ebp], eax
; Line 285
	fild	DWORD PTR _r$[ebp]
	fsubr	DWORD PTR _x$[ebp]
	fmul	DWORD PTR __real@40400000
	fstp	DWORD PTR _k$[ebp]
; Line 286
	fld	DWORD PTR _k$[ebp]
	call	__ftol2_sse
	mov	DWORD PTR _r$[ebp+4], eax
	fild	DWORD PTR _r$[ebp+4]
	fsubr	DWORD PTR _k$[ebp]
	fstp	DWORD PTR _r$[ebp+8]
	mov	ecx, DWORD PTR _r$[ebp]
	sub	ecx, DWORD PTR _o$[ebp]
	mov	DWORD PTR _r$[ebp], ecx
; Line 287
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	eax, DWORD PTR _r$[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _r$[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _r$[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 288
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Decompose
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@Decompose:
	DD	1
	DD	$LN6@Decompose
$LN6@Decompose:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN5@Decompose
$LN5@Decompose:
	DB	114					; 00000072H
	DB	0
?Decompose@?$btSparseSdf@$02@@SA?AUIntFrac@1@M@Z ENDP	; btSparseSdf<3>::Decompose
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Lerp@?$btSparseSdf@$02@@SAMMMM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_t$ = 16						; size = 4
?Lerp@?$btSparseSdf@$02@@SAMMMM@Z PROC			; btSparseSdf<3>::Lerp, COMDAT
; Line 291
	push	ebp
	mov	ebp, esp
; Line 292
	fld	DWORD PTR _b$[ebp]
	fsub	DWORD PTR _a$[ebp]
	fmul	DWORD PTR _t$[ebp]
	fadd	DWORD PTR _a$[ebp]
; Line 293
	pop	ebp
	ret	0
?Lerp@?$btSparseSdf@$02@@SAMMMM@Z ENDP			; btSparseSdf<3>::Lerp
_TEXT	ENDS
PUBLIC	??$HsiehHash@$03@@YAIPBX@Z			; HsiehHash<4>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Hash@?$btSparseSdf@$02@@SAIHHHPBVbtCollisionShape@@@Z
_TEXT	SEGMENT
_result$ = -32						; size = 4
_ptr$ = -28						; size = 4
_myset$ = -20						; size = 16
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_shape$ = 20						; size = 4
?Hash@?$btSparseSdf@$02@@SAIHHHPBVbtCollisionShape@@@Z PROC ; btSparseSdf<3>::Hash, COMDAT
; Line 299
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 308
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR _myset$[ebp], eax
	mov	ecx, DWORD PTR _y$[ebp]
	mov	DWORD PTR _myset$[ebp+4], ecx
	mov	edx, DWORD PTR _z$[ebp]
	mov	DWORD PTR _myset$[ebp+8], edx
	mov	eax, DWORD PTR _shape$[ebp]
	mov	DWORD PTR _myset$[ebp+12], eax
; Line 309
	lea	ecx, DWORD PTR _myset$[ebp]
	mov	DWORD PTR _ptr$[ebp], ecx
; Line 311
	mov	edx, DWORD PTR _ptr$[ebp]
	push	edx
	call	??$HsiehHash@$03@@YAIPBX@Z		; HsiehHash<4>
	add	esp, 4
	mov	DWORD PTR _result$[ebp], eax
; Line 314
	mov	eax, DWORD PTR _result$[ebp]
; Line 315
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Hash
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@Hash:
	DD	1
	DD	$LN4@Hash
$LN4@Hash:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN3@Hash
$LN3@Hash:
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
?Hash@?$btSparseSdf@$02@@SAIHHHPBVbtCollisionShape@@@Z ENDP ; btSparseSdf<3>::Hash
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@34
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@34:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEHH@Z PROC ; btAlignedObjectArray<btCollisionObject const *>::allocSize, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@2
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@2
$LN3@allocSize@2:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@2:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btCollisionObject const *>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ PROC ; btAlignedObjectArray<btCollisionObject const *>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ ENDP ; btAlignedObjectArray<btCollisionObject const *>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ ; btAlignedObjectArray<btCollisionObject const *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXHH@Z ; btAlignedObjectArray<btCollisionObject const *>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXXZ PROC ; btAlignedObjectArray<btCollisionObject const *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXHH@Z ; btAlignedObjectArray<btCollisionObject const *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ ; btAlignedObjectArray<btCollisionObject const *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ ; btAlignedObjectArray<btCollisionObject const *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXXZ ENDP ; btAlignedObjectArray<btCollisionObject const *>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ PROC ; btAlignedObjectArray<btCollisionObject const *>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ENDP ; btAlignedObjectArray<btCollisionObject const *>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IBEXHHPAPBVbtCollisionObject@@@Z ; btAlignedObjectArray<btCollisionObject const *>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEPAXH@Z ; btAlignedObjectArray<btCollisionObject const *>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58703 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXH@Z PROC ; btAlignedObjectArray<btCollisionObject const *>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@4
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEPAXH@Z ; btAlignedObjectArray<btCollisionObject const *>::allocate
	mov	DWORD PTR _s$58703[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58703[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IBEXHHPAPBVbtCollisionObject@@@Z ; btAlignedObjectArray<btCollisionObject const *>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QBEHXZ ; btAlignedObjectArray<btCollisionObject const *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXHH@Z ; btAlignedObjectArray<btCollisionObject const *>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ ; btAlignedObjectArray<btCollisionObject const *>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58703[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@4:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@PBVbtCollisionObject@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btCollisionObject const *>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btCollisionObject const *,16>::btAlignedAllocator<btCollisionObject const *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btCollisionObject const *,16>::btAlignedAllocator<btCollisionObject const *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ PROC	; btAlignedObjectArray<btVector3>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ENDP	; btAlignedObjectArray<btVector3>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z ; btAlignedObjectArray<btVector3>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ PROC	; btAlignedObjectArray<btVector3>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z ; btAlignedObjectArray<btVector3>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ ENDP	; btAlignedObjectArray<btVector3>::clear
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z ; btAlignedObjectArray<btVector3>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58714 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z PROC ; btAlignedObjectArray<btVector3>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@5
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z ; btAlignedObjectArray<btVector3>::allocate
	mov	DWORD PTR _s$58714[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58714[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z ; btAlignedObjectArray<btVector3>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58714[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@5:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btVector3>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ PROC	; btAlignedAllocator<btVector3,16>::btAlignedAllocator<btVector3,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ ENDP	; btAlignedAllocator<btVector3,16>::btAlignedAllocator<btVector3,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@M@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@M@@IAEXXZ PROC		; btAlignedObjectArray<float>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@M@@IAEXXZ ENDP		; btAlignedObjectArray<float>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@M@@IAEXXZ	; btAlignedObjectArray<float>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@M@@IAEXHH@Z	; btAlignedObjectArray<float>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@M@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@M@@QAEXXZ PROC		; btAlignedObjectArray<float>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@M@@QBEHXZ	; btAlignedObjectArray<float>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@M@@IAEXHH@Z ; btAlignedObjectArray<float>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@M@@IAEXXZ ; btAlignedObjectArray<float>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@M@@IAEXXZ	; btAlignedObjectArray<float>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@M@@QAEXXZ ENDP		; btAlignedObjectArray<float>::clear
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@M@@IBEXHHPAM@Z	; btAlignedObjectArray<float>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@M@@IAEPAXH@Z	; btAlignedObjectArray<float>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@M@@QBEHXZ	; btAlignedObjectArray<float>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@M@@QAEXH@Z
_TEXT	SEGMENT
_s$58725 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@M@@QAEXH@Z PROC		; btAlignedObjectArray<float>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@M@@QBEHXZ ; btAlignedObjectArray<float>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@6
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@M@@IAEPAXH@Z ; btAlignedObjectArray<float>::allocate
	mov	DWORD PTR _s$58725[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58725[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@M@@QBEHXZ	; btAlignedObjectArray<float>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@M@@IBEXHHPAM@Z ; btAlignedObjectArray<float>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@M@@QBEHXZ	; btAlignedObjectArray<float>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@M@@IAEXHH@Z ; btAlignedObjectArray<float>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@M@@IAEXXZ ; btAlignedObjectArray<float>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58725[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@6:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@M@@QAEXH@Z ENDP		; btAlignedObjectArray<float>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@M$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@M$0BA@@@QAE@XZ PROC		; btAlignedAllocator<float,16>::btAlignedAllocator<float,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@M$0BA@@@QAE@XZ ENDP		; btAlignedAllocator<float,16>::btAlignedAllocator<float,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@3
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@3
$LN3@allocSize@3:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@3:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IBEXHHPAPAUNode@btSoftBody@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T67953 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IBEXHHPAPAUNode@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy
$LN2@copy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T67953[ebp], eax
	cmp	DWORD PTR $T67953[ebp], 0
	je	SHORT $LN6@copy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T67953[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T67953[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy
$LN6@copy:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy:
	jmp	SHORT $LN2@copy
$LN4@copy:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IBEXHHPAPAUNode@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Node *>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Node *>::init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy
$LN2@destroy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy
; Line 99
	jmp	SHORT $LN2@destroy
$LN4@destroy:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEPAPAUNode@btSoftBody@@HPAPBQAU23@@Z ; btAlignedAllocator<btSoftBody::Node *,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEPAPAUNode@btSoftBody@@HPAPBQAU23@@Z ; btAlignedAllocator<btSoftBody::Node *,16>::allocate
	jmp	SHORT $LN2@allocate
$LN1@allocate:
; Line 106
	xor	eax, eax
$LN2@allocate:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEXPAPAUNode@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Node *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Node *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEXPAPAUNode@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Node *,16>::deallocate
$LN1@deallocate:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Node *>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?clear@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Node *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Node *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Node *>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Node *>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Node *>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Node *,16>::btAlignedAllocator<btSoftBody::Node *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Node *,16>::btAlignedAllocator<btSoftBody::Node *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@4
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@4
$LN3@allocSize@4:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@4:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@2
$LN2@destroy@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@2
; Line 99
	jmp	SHORT $LN2@destroy@2
$LN4@destroy@2:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEXPAW4_@eVSolver@btSoftBody@@@Z ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@2
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@2
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEXPAW4_@eVSolver@btSoftBody@@@Z ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::deallocate
$LN1@deallocate@2:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@2:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IBEXHHPAW4_@eVSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58781 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@7
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::allocate
	mov	DWORD PTR _s$58781[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58781[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IBEXHHPAW4_@eVSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58781[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@7:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::btAlignedAllocator<enum btSoftBody::eVSolver::_,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::btAlignedAllocator<enum btSoftBody::eVSolver::_,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@5
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@5
$LN3@allocSize@5:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@5:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@3
$LN2@destroy@3:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@3:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@3
; Line 99
	jmp	SHORT $LN2@destroy@3
$LN4@destroy@3:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEXPAW4_@ePSolver@btSoftBody@@@Z ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@3
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@3
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEXPAW4_@ePSolver@btSoftBody@@@Z ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::deallocate
$LN1@deallocate@3:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@3:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IBEXHHPAW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58804 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@8
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::allocate
	mov	DWORD PTR _s$58804[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58804[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IBEXHHPAW4_@ePSolver@btSoftBody@@@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58804[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@8:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::btAlignedAllocator<enum btSoftBody::ePSolver::_,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::btAlignedAllocator<enum btSoftBody::ePSolver::_,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Note>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@6
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@6
$LN3@allocSize@6:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@6:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Note>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Note>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Note>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Note>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Note>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Note>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Note>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Note>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Note>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Note>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Note>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Note>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IBEXHHPAUNote@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Note>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Note>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58819 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Note>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@9
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Note>::allocate
	mov	DWORD PTR _s$58819[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58819[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IBEXHHPAUNote@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Note>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Note>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Note>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58819[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@9:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Note>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Note,16>::btAlignedAllocator<btSoftBody::Note,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Note,16>::btAlignedAllocator<btSoftBody::Note,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@7
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@7
$LN3@allocSize@7:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@7:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IBEXHHPAUNode@btSoftBody@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T68022 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IBEXHHPAUNode@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@2
$LN2@copy@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@2
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	128					; 00000080H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68022[ebp], eax
	cmp	DWORD PTR $T68022[ebp], 0
	je	SHORT $LN6@copy@2
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+12]
	add	esi, ecx
	mov	ecx, 32					; 00000020H
	mov	edi, DWORD PTR $T68022[ebp]
	rep movsd
	mov	eax, DWORD PTR $T68022[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@copy@2
$LN6@copy@2:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@2:
	jmp	SHORT $LN2@copy@2
$LN4@copy@2:
; Line 83
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IBEXHHPAUNode@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Node>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@4
$LN2@destroy@4:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@4:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@4
; Line 99
	jmp	SHORT $LN2@destroy@4
$LN4@destroy@4:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEPAUNode@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Node,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@2
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEPAUNode@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Node,16>::allocate
	jmp	SHORT $LN2@allocate@2
$LN1@allocate@2:
; Line 106
	xor	eax, eax
$LN2@allocate@2:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEXPAUNode@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Node,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Node>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@4
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@4
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEXPAUNode@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Node,16>::deallocate
$LN1@deallocate@4:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@4:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?clear@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Node>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Node>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UNode@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Node>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Node,16>::btAlignedAllocator<btSoftBody::Node,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Node,16>::btAlignedAllocator<btSoftBody::Node,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Link>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@8
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@8
$LN3@allocSize@8:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@8:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Link>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Link>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Link>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Link>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Link>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Link>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Link>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Link>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Link>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IBEXHHPAULink@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Link>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Link>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58865 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Link>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@10
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Link>::allocate
	mov	DWORD PTR _s$58865[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58865[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IBEXHHPAULink@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Link>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Link>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Link>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58865[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@10:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@ULink@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Link>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Link,16>::btAlignedAllocator<btSoftBody::Link,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Link,16>::btAlignedAllocator<btSoftBody::Link,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@9
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@9
$LN3@allocSize@9:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@9:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Face>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Face>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Face>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Face>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Face>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Face>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Face>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Face>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Face>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Face>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Face>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IBEXHHPAUFace@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Face>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Face>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58880 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@11
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Face>::allocate
	mov	DWORD PTR _s$58880[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58880[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IBEXHHPAUFace@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Face>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Face>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Face>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58880[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@11:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Face,16>::btAlignedAllocator<btSoftBody::Face,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Face,16>::btAlignedAllocator<btSoftBody::Face,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Tetra>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@10
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@10
$LN3@allocSize@10:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@10:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Tetra>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Tetra>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Tetra>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Tetra>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Tetra>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Tetra>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Tetra>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Tetra>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IBEXHHPAUTetra@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Tetra>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Tetra>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58895 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Tetra>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@12
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Tetra>::allocate
	mov	DWORD PTR _s$58895[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58895[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IBEXHHPAUTetra@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Tetra>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Tetra>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Tetra>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58895[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@12:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Tetra,16>::btAlignedAllocator<btSoftBody::Tetra,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Tetra,16>::btAlignedAllocator<btSoftBody::Tetra,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Anchor>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@11
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@11
$LN3@allocSize@11:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@11:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Anchor>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Anchor>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Anchor>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Anchor>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Anchor>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Anchor>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Anchor>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Anchor>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IBEXHHPAUAnchor@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Anchor>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Anchor>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58910 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Anchor>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@13
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Anchor>::allocate
	mov	DWORD PTR _s$58910[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58910[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IBEXHHPAUAnchor@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Anchor>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Anchor>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Anchor>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58910[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@13:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Anchor,16>::btAlignedAllocator<btSoftBody::Anchor,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Anchor,16>::btAlignedAllocator<btSoftBody::Anchor,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::RContact>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::RContact>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::RContact>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::RContact>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::RContact>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::RContact>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::RContact>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::RContact>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::RContact>::clear
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IBEXHHPAURContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::RContact>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::RContact>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58925 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::RContact>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@14
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::RContact>::allocate
	mov	DWORD PTR _s$58925[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58925[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IBEXHHPAURContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::RContact>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::RContact>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::RContact>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58925[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@14:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::RContact>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::RContact>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::RContact>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::RContact,16>::btAlignedAllocator<btSoftBody::RContact,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::RContact,16>::btAlignedAllocator<btSoftBody::RContact,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::SContact>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::SContact>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::SContact>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::SContact>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::SContact>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::SContact>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::SContact>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::SContact>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::SContact>::clear
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IBEXHHPAUSContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::SContact>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::SContact>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58940 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::SContact>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@15
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::SContact>::allocate
	mov	DWORD PTR _s$58940[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58940[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IBEXHHPAUSContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::SContact>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::SContact>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::SContact>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58940[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@15:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::SContact>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::SContact>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::SContact>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::SContact,16>::btAlignedAllocator<btSoftBody::SContact,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::SContact,16>::btAlignedAllocator<btSoftBody::SContact,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@12
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@12
$LN3@allocSize@12:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@12:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Joint *>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Joint *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?pop_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pop_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Joint *>::pop_back, COMDAT
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN1@pop_back@3
	push	195					; 000000c3H
	push	OFFSET ??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@pop_back@3:
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 198
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::pop_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Joint *>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IBEXHHPAPAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58958 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@16
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::allocate
	mov	DWORD PTR _s$58958[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58958[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IBEXHHPAPAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Joint *>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Joint *>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58958[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@16:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?swap@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXHH@Z
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_index0$ = 8						; size = 4
_index1$ = 12						; size = 4
?swap@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::swap, COMDAT
; _this$ = ecx
; Line 408
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 415
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _index0$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _temp$[ebp], eax
; Line 416
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _index0$[ebp]
	mov	esi, DWORD PTR _index1$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 417
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _index1$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 420
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?swap@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::swap
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?findLinearSearch@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHABQAUJoint@btSoftBody@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?findLinearSearch@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHABQAUJoint@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::findLinearSearch, COMDAT
; _this$ = ecx
; Line 466
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 467
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	mov	DWORD PTR _index$[ebp], eax
; Line 470
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@findLinear@4
$LN3@findLinear@4:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@findLinear@4:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@findLinear@4
; Line 472
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@findLinear@4
; Line 474
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 475
	jmp	SHORT $LN2@findLinear@4
$LN1@findLinear@4:
; Line 477
	jmp	SHORT $LN3@findLinear@4
$LN2@findLinear@4:
; Line 478
	mov	eax, DWORD PTR _index$[ebp]
; Line 479
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?findLinearSearch@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHABQAUJoint@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::findLinearSearch
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Joint *,16>::btAlignedAllocator<btSoftBody::Joint *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Joint *,16>::btAlignedAllocator<btSoftBody::Joint *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Material *>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@13
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@13
$LN3@allocSize@13:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@13:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Material *>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Material *>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Material *>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Material *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Material *>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Material *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Material *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Material *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Material *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Material *>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Material *>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Material *>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IBEXHHPAPAUMaterial@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Material *>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Material *>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$58984 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Material *>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@17
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Material *>::allocate
	mov	DWORD PTR _s$58984[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$58984[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IBEXHHPAPAUMaterial@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Material *>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Material *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Material *>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Material *>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$58984[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@17:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Material *>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Material *,16>::btAlignedAllocator<btSoftBody::Material *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Material *,16>::btAlignedAllocator<btSoftBody::Material *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::allocSize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@14
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@14
$LN3@allocSize@14:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@14:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?pop_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pop_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::pop_back, COMDAT
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN1@pop_back@4
	push	195					; 000000c3H
	push	OFFSET ??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@pop_back@4:
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 198
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::pop_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IBEXHHPAPAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXH@Z
_TEXT	SEGMENT
_s$59002 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXH@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@18
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEPAXH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::allocate
	mov	DWORD PTR _s$59002[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$59002[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IBEXHHPAPAUCluster@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXHH@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$59002[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@18:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?swap@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHH@Z
_TEXT	SEGMENT
_temp$ = -8						; size = 4
_this$ = -4						; size = 4
_index0$ = 8						; size = 4
_index1$ = 12						; size = 4
?swap@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::swap, COMDAT
; _this$ = ecx
; Line 408
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 415
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _index0$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _temp$[ebp], eax
; Line 416
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _index0$[ebp]
	mov	esi, DWORD PTR _index1$[ebp]
	mov	edx, DWORD PTR [edx+esi*4]
	mov	DWORD PTR [ecx+eax*4], edx
; Line 417
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _index1$[ebp]
	mov	eax, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
; Line 420
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?swap@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::swap
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?findLinearSearch@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHABQAUCluster@btSoftBody@@@Z
_TEXT	SEGMENT
_i$ = -12						; size = 4
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?findLinearSearch@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHABQAUCluster@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::findLinearSearch, COMDAT
; _this$ = ecx
; Line 466
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 467
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	mov	DWORD PTR _index$[ebp], eax
; Line 470
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@findLinear@5
$LN3@findLinear@5:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@findLinear@5:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN2@findLinear@5
; Line 472
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN1@findLinear@5
; Line 474
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _index$[ebp], eax
; Line 475
	jmp	SHORT $LN2@findLinear@5
$LN1@findLinear@5:
; Line 477
	jmp	SHORT $LN3@findLinear@5
$LN2@findLinear@5:
; Line 478
	mov	eax, DWORD PTR _index$[ebp]
; Line 479
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?findLinearSearch@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHABQAUCluster@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::findLinearSearch
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btSoftBody::Cluster *,16>::btAlignedAllocator<btSoftBody::Cluster *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btSoftBody::Cluster *,16>::btAlignedAllocator<btSoftBody::Cluster *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@_N@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@_N@@IAEXXZ PROC		; btAlignedObjectArray<bool>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@_N@@IAEXXZ ENDP		; btAlignedObjectArray<bool>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ	; btAlignedObjectArray<bool>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z	; btAlignedObjectArray<bool>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@_N@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@_N@@QAEXXZ PROC		; btAlignedObjectArray<bool>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z ; btAlignedObjectArray<bool>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ ; btAlignedObjectArray<bool>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@_N@@IAEXXZ	; btAlignedObjectArray<bool>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@_N@@QAEXXZ ENDP		; btAlignedObjectArray<bool>::clear
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z	; btAlignedObjectArray<bool>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z	; btAlignedObjectArray<bool>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z
_TEXT	SEGMENT
_s$59024 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z PROC	; btAlignedObjectArray<bool>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@_N@@QBEHXZ ; btAlignedObjectArray<bool>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@19
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z ; btAlignedObjectArray<bool>::allocate
	mov	DWORD PTR _s$59024[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$59024[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z ; btAlignedObjectArray<bool>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z ; btAlignedObjectArray<bool>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ ; btAlignedObjectArray<bool>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$59024[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@19:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z ENDP	; btAlignedObjectArray<bool>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ PROC		; btAlignedAllocator<bool,16>::btAlignedAllocator<bool,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ ENDP		; btAlignedAllocator<bool,16>::btAlignedAllocator<bool,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ PROC	; btAlignedObjectArray<btHashPtr>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ ENDP	; btAlignedObjectArray<btHashPtr>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ ; btAlignedObjectArray<btHashPtr>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXHH@Z ; btAlignedObjectArray<btHashPtr>::destroy
PUBLIC	?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXXZ PROC	; btAlignedObjectArray<btHashPtr>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXHH@Z ; btAlignedObjectArray<btHashPtr>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ ; btAlignedObjectArray<btHashPtr>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ ; btAlignedObjectArray<btHashPtr>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXXZ ENDP	; btAlignedObjectArray<btHashPtr>::clear
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXH@Z ; btAlignedObjectArray<btHashPtr>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@VbtHashPtr@@@@IAEHH@Z ; btAlignedObjectArray<btHashPtr>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXABVbtHashPtr@@@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T68181 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXABVbtHashPtr@@@Z PROC ; btAlignedObjectArray<btHashPtr>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@15
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@VbtHashPtr@@@@IAEHH@Z ; btAlignedObjectArray<btHashPtr>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXH@Z ; btAlignedObjectArray<btHashPtr>::reserve
$LN1@push_back@15:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*8]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68181[ebp], eax
	cmp	DWORD PTR $T68181[ebp], 0
	je	SHORT $LN4@push_back@15
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T68181[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T68181[ebp]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@push_back@15
$LN4@push_back@15:
	mov	DWORD PTR tv85[ebp], 0
$LN5@push_back@15:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXABVbtHashPtr@@@Z ENDP ; btAlignedObjectArray<btHashPtr>::push_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAE@XZ PROC	; btAlignedAllocator<btHashPtr,16>::btAlignedAllocator<btHashPtr,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAE@XZ ENDP	; btAlignedAllocator<btHashPtr,16>::btAlignedAllocator<btHashPtr,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ PROC	; btAlignedObjectArray<NodeLinks>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ ENDP	; btAlignedObjectArray<NodeLinks>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ ; btAlignedObjectArray<NodeLinks>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@UNodeLinks@@@@IAEXHH@Z ; btAlignedObjectArray<NodeLinks>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@UNodeLinks@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@UNodeLinks@@@@QAEXXZ PROC	; btAlignedObjectArray<NodeLinks>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ; btAlignedObjectArray<NodeLinks>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UNodeLinks@@@@IAEXHH@Z ; btAlignedObjectArray<NodeLinks>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ ; btAlignedObjectArray<NodeLinks>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ ; btAlignedObjectArray<NodeLinks>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@UNodeLinks@@@@QAEXXZ ENDP	; btAlignedObjectArray<NodeLinks>::clear
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@UNodeLinks@@@@IBEXHHPAUNodeLinks@@@Z ; btAlignedObjectArray<NodeLinks>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEPAXH@Z ; btAlignedObjectArray<NodeLinks>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ; btAlignedObjectArray<NodeLinks>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@UNodeLinks@@@@QAEXH@Z
_TEXT	SEGMENT
_s$59925 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@UNodeLinks@@@@QAEXH@Z PROC ; btAlignedObjectArray<NodeLinks>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ; btAlignedObjectArray<NodeLinks>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@20
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEPAXH@Z ; btAlignedObjectArray<NodeLinks>::allocate
	mov	DWORD PTR _s$59925[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$59925[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ; btAlignedObjectArray<NodeLinks>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@UNodeLinks@@@@IBEXHHPAUNodeLinks@@@Z ; btAlignedObjectArray<NodeLinks>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ; btAlignedObjectArray<NodeLinks>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UNodeLinks@@@@IAEXHH@Z ; btAlignedObjectArray<NodeLinks>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ ; btAlignedObjectArray<NodeLinks>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$59925[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@20:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@UNodeLinks@@@@QAEXH@Z ENDP ; btAlignedObjectArray<NodeLinks>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAE@XZ PROC	; btAlignedAllocator<NodeLinks,16>::btAlignedAllocator<NodeLinks,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAE@XZ ENDP	; btAlignedAllocator<NodeLinks,16>::btAlignedAllocator<NodeLinks,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?resize@?$btSymMatrix@H@@QAEXHABH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_init$ = 12						; size = 4
?resize@?$btSymMatrix@H@@QAEXHABH@Z PROC		; btSymMatrix<int>::resize, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR _init$[ebp]
	push	edx
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _n$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btSymMatrix@H@@QAEXHABH@Z ENDP		; btSymMatrix<int>::resize
_TEXT	ENDS
PUBLIC	??$btSwap@H@@YAXAAH0@Z				; btSwap<int>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?index@?$btSymMatrix@H@@QBEHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 4
_r$ = 12						; size = 4
?index@?$btSymMatrix@H@@QBEHHH@Z PROC			; btSymMatrix<int>::index, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _r$[ebp]
	jle	SHORT $LN1@index
	lea	ecx, DWORD PTR _r$[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	call	??$btSwap@H@@YAXAAH0@Z			; btSwap<int>
	add	esp, 8
$LN1@index:
	mov	eax, DWORD PTR _r$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _r$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _c$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?index@?$btSymMatrix@H@@QBEHHH@Z ENDP			; btSymMatrix<int>::index
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@VbtHashPtr@@@@QAEAAVbtHashPtr@@H@Z ; btAlignedObjectArray<btHashPtr>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?growTables@?$btHashMap@VbtHashPtr@@H@@IAEXABVbtHashPtr@@@Z
_TEXT	SEGMENT
$T68201 = -28						; size = 4
$T68200 = -24						; size = 4
_hashValue$59956 = -20					; size = 4
_i$59946 = -16						; size = 4
_curHashtableSize$59943 = -12				; size = 4
_newCapacity$ = -8					; size = 4
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?growTables@?$btHashMap@VbtHashPtr@@H@@IAEXABVbtHashPtr@@@Z PROC ; btHashMap<btHashPtr,int>::growTables, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	mov	DWORD PTR _newCapacity$[ebp], eax
; Line 234
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	eax, DWORD PTR _newCapacity$[ebp]
	jge	$LN11@growTables
; Line 237
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	mov	DWORD PTR _curHashtableSize$59943[ebp], eax
; Line 239
	mov	DWORD PTR $T68200[ebp], 0
	lea	eax, DWORD PTR $T68200[ebp]
	push	eax
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
; Line 240
	mov	DWORD PTR $T68201[ebp], 0
	lea	edx, DWORD PTR $T68201[ebp]
	push	edx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
; Line 244
	mov	DWORD PTR _i$59946[ebp], 0
	jmp	SHORT $LN9@growTables
$LN8@growTables:
	mov	ecx, DWORD PTR _i$59946[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$59946[ebp], ecx
$LN9@growTables:
	mov	edx, DWORD PTR _i$59946[ebp]
	cmp	edx, DWORD PTR _newCapacity$[ebp]
	jge	SHORT $LN7@growTables
; Line 246
	mov	eax, DWORD PTR _i$59946[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR [eax], -1
; Line 247
	jmp	SHORT $LN8@growTables
$LN7@growTables:
; Line 248
	mov	DWORD PTR _i$59946[ebp], 0
	jmp	SHORT $LN6@growTables
$LN5@growTables:
	mov	ecx, DWORD PTR _i$59946[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$59946[ebp], ecx
$LN6@growTables:
	mov	edx, DWORD PTR _i$59946[ebp]
	cmp	edx, DWORD PTR _newCapacity$[ebp]
	jge	SHORT $LN4@growTables
; Line 250
	mov	eax, DWORD PTR _i$59946[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR [eax], -1
; Line 251
	jmp	SHORT $LN5@growTables
$LN4@growTables:
; Line 253
	mov	DWORD PTR _i$59946[ebp], 0
	jmp	SHORT $LN3@growTables
$LN2@growTables:
	mov	ecx, DWORD PTR _i$59946[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$59946[ebp], ecx
$LN3@growTables:
	mov	edx, DWORD PTR _i$59946[ebp]
	cmp	edx, DWORD PTR _curHashtableSize$59943[ebp]
	jge	SHORT $LN11@growTables
; Line 258
	mov	eax, DWORD PTR _i$59946[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$btAlignedObjectArray@VbtHashPtr@@@@QAEAAVbtHashPtr@@H@Z ; btAlignedObjectArray<btHashPtr>::operator[]
	mov	ecx, eax
	call	?getHash@btHashPtr@@QBEIXZ		; btHashPtr::getHash
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	sub	eax, 1
	and	esi, eax
	mov	DWORD PTR _hashValue$59956[ebp], esi
; Line 259
	mov	ecx, DWORD PTR _hashValue$59956[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _i$59946[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
; Line 260
	mov	edx, DWORD PTR _hashValue$59956[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR _i$59946[ebp]
	mov	DWORD PTR [eax], ecx
; Line 261
	jmp	SHORT $LN2@growTables
$LN11@growTables:
; Line 265
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?growTables@?$btHashMap@VbtHashPtr@@H@@IAEXABVbtHashPtr@@@Z ENDP ; btHashMap<btHashPtr,int>::growTables
_TEXT	ENDS
PUBLIC	?equals@btHashPtr@@QBE_NABV1@@Z			; btHashPtr::equals
PUBLIC	??A?$btAlignedObjectArray@VbtHashPtr@@@@QBEABVbtHashPtr@@H@Z ; btAlignedObjectArray<btHashPtr>::operator[]
PUBLIC	??A?$btAlignedObjectArray@H@@QBEABHH@Z		; btAlignedObjectArray<int>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?findIndex@?$btHashMap@VbtHashPtr@@H@@QBEHABVbtHashPtr@@@Z
_TEXT	SEGMENT
_index$ = -12						; size = 4
_hash$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?findIndex@?$btHashMap@VbtHashPtr@@H@@QBEHABVbtHashPtr@@@Z PROC ; btHashMap<btHashPtr,int>::findIndex, COMDAT
; _this$ = ecx
; Line 424
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 425
	mov	ecx, DWORD PTR _key$[ebp]
	call	?getHash@btHashPtr@@QBEIXZ		; btHashPtr::getHash
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	sub	eax, 1
	and	esi, eax
	mov	DWORD PTR _hash$[ebp], esi
; Line 427
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _hash$[ebp], eax
	jb	SHORT $LN3@findIndex
; Line 429
	or	eax, -1
	jmp	SHORT $LN4@findIndex
$LN3@findIndex:
; Line 432
	mov	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QBEABHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _index$[ebp], ecx
$LN2@findIndex:
; Line 433
	cmp	DWORD PTR _index$[ebp], -1
	je	SHORT $LN1@findIndex
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$btAlignedObjectArray@VbtHashPtr@@@@QBEABVbtHashPtr@@H@Z ; btAlignedObjectArray<btHashPtr>::operator[]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	call	?equals@btHashPtr@@QBE_NABV1@@Z		; btHashPtr::equals
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@findIndex
; Line 435
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@H@@QBEABHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _index$[ebp], edx
; Line 436
	jmp	SHORT $LN2@findIndex
$LN1@findIndex:
; Line 437
	mov	eax, DWORD PTR _index$[ebp]
$LN4@findIndex:
; Line 438
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?findIndex@?$btHashMap@VbtHashPtr@@H@@QBEHABVbtHashPtr@@@Z ENDP ; btHashMap<btHashPtr,int>::findIndex
_TEXT	ENDS
PUBLIC	?getPointer@btHashPtr@@QBEPBXXZ			; btHashPtr::getPointer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?equals@btHashPtr@@QBE_NABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?equals@btHashPtr@@QBE_NABV1@@Z PROC			; btHashPtr::equals, COMDAT
; _this$ = ecx
; Line 134
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 135
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getPointer@btHashPtr@@QBEPBXXZ		; btHashPtr::getPointer
	mov	esi, eax
	mov	ecx, DWORD PTR _other$[ebp]
	call	?getPointer@btHashPtr@@QBEPBXXZ		; btHashPtr::getPointer
	xor	ecx, ecx
	cmp	esi, eax
	sete	cl
	mov	al, cl
; Line 136
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?equals@btHashPtr@@QBE_NABV1@@Z ENDP			; btHashPtr::equals
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getPointer@btHashPtr@@QBEPBXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getPointer@btHashPtr@@QBEPBXXZ PROC			; btHashPtr::getPointer, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 130
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 131
	mov	esp, ebp
	pop	ebp
	ret	0
?getPointer@btHashPtr@@QBEPBXXZ ENDP			; btHashPtr::getPointer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@H@@QBEABHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@H@@QBEABHH@Z PROC		; btAlignedObjectArray<int>::operator[], COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@35
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@35:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@35
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@35:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@H@@QBEABHH@Z ENDP		; btAlignedObjectArray<int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T68212 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z PROC	; btAlignedObjectArray<int>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@3
$LN2@copy@3:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@3:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@3
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68212[ebp], eax
	cmp	DWORD PTR $T68212[ebp], 0
	je	SHORT $LN6@copy@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T68212[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T68212[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@3
$LN6@copy@3:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@3:
	jmp	SHORT $LN2@copy@3
$LN4@copy@3:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z ENDP	; btAlignedObjectArray<int>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z PROC	; btAlignedObjectArray<int>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@5
$LN2@destroy@5:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@5:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@5
; Line 99
	jmp	SHORT $LN2@destroy@5
$LN4@destroy@5:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z ENDP	; btAlignedObjectArray<int>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z ; btAlignedAllocator<int,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z PROC	; btAlignedObjectArray<int>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@3
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z ; btAlignedAllocator<int,16>::allocate
	jmp	SHORT $LN2@allocate@3
$LN1@allocate@3:
; Line 106
	xor	eax, eax
$LN2@allocate@3:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z ENDP	; btAlignedObjectArray<int>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z ; btAlignedAllocator<int,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@H@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@H@@IAEXXZ PROC	; btAlignedObjectArray<int>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@5
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@5
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z ; btAlignedAllocator<int,16>::deallocate
$LN1@deallocate@5:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@5:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@H@@IAEXXZ ENDP	; btAlignedObjectArray<int>::deallocate
_TEXT	ENDS
PUBLIC	??0sResults@btGjkEpaSolver2@@QAE@XZ		; btGjkEpaSolver2::sResults::sResults
PUBLIC	?isConvex@btCollisionShape@@QBE_NXZ		; btCollisionShape::isConvex
PUBLIC	__$ArrayPad$
EXTRN	?SignedDistance@btGjkEpaSolver2@@SAMABVbtVector3@@MPBVbtConvexShape@@ABVbtTransform@@AAUsResults@1@@Z:PROC ; btGjkEpaSolver2::SignedDistance
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DistanceToShape@?$btSparseSdf@$02@@SAMABVbtVector3@@PBVbtCollisionShape@@@Z
_TEXT	SEGMENT
_csh$60261 = -184					; size = 4
_res$60260 = -176					; size = 80
_unit$ = -80						; size = 64
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_shape$ = 12						; size = 4
?DistanceToShape@?$btSparseSdf@$02@@SAMABVbtVector3@@PBVbtCollisionShape@@@Z PROC ; btSparseSdf<3>::DistanceToShape, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsparsesdf.h
; Line 265
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 266
	lea	ecx, DWORD PTR _unit$[ebp]
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
; Line 267
	lea	ecx, DWORD PTR _unit$[ebp]
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 268
	mov	ecx, DWORD PTR _shape$[ebx]
	call	?isConvex@btCollisionShape@@QBE_NXZ	; btCollisionShape::isConvex
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@DistanceTo
; Line 270
	lea	ecx, DWORD PTR _res$60260[ebp]
	call	??0sResults@btGjkEpaSolver2@@QAE@XZ
; Line 271
	mov	ecx, DWORD PTR _shape$[ebx]
	mov	DWORD PTR _csh$60261[ebp], ecx
; Line 272
	lea	edx, DWORD PTR _res$60260[ebp]
	push	edx
	lea	eax, DWORD PTR _unit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _csh$60261[ebp]
	push	ecx
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _x$[ebx]
	push	edx
	call	?SignedDistance@btGjkEpaSolver2@@SAMABVbtVector3@@MPBVbtConvexShape@@ABVbtTransform@@AAUsResults@1@@Z ; btGjkEpaSolver2::SignedDistance
	add	esp, 20					; 00000014H
	jmp	SHORT $LN2@DistanceTo
$LN1@DistanceTo:
; Line 274
	fldz
$LN2@DistanceTo:
; Line 275
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DistanceTo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN7@DistanceTo:
	DD	2
	DD	$LN6@DistanceTo
$LN6@DistanceTo:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN4@DistanceTo
	DD	-176					; ffffff50H
	DD	80					; 00000050H
	DD	$LN5@DistanceTo
$LN5@DistanceTo:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN4@DistanceTo:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	0
?DistanceToShape@?$btSparseSdf@$02@@SAMABVbtVector3@@PBVbtCollisionShape@@@Z ENDP ; btSparseSdf<3>::DistanceToShape
_TEXT	ENDS
PUBLIC	?isConvex@btBroadphaseProxy@@SA_NH@Z		; btBroadphaseProxy::isConvex
PUBLIC	?getShapeType@btCollisionShape@@QBEHXZ		; btCollisionShape::getShapeType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?isConvex@btCollisionShape@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isConvex@btCollisionShape@@QBE_NXZ PROC		; btCollisionShape::isConvex, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btcollisionshape.h
; Line 73
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 74
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getShapeType@btCollisionShape@@QBEHXZ	; btCollisionShape::getShapeType
	push	eax
	call	?isConvex@btBroadphaseProxy@@SA_NH@Z	; btBroadphaseProxy::isConvex
	add	esp, 4
; Line 75
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isConvex@btCollisionShape@@QBE_NXZ ENDP		; btCollisionShape::isConvex
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?isConvex@btBroadphaseProxy@@SA_NH@Z
_TEXT	SEGMENT
_proxyType$ = 8						; size = 4
?isConvex@btBroadphaseProxy@@SA_NH@Z PROC		; btBroadphaseProxy::isConvex, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btbroadphaseproxy.h
; Line 140
	push	ebp
	mov	ebp, esp
; Line 141
	xor	eax, eax
	cmp	DWORD PTR _proxyType$[ebp], 20		; 00000014H
	setl	al
; Line 142
	pop	ebp
	ret	0
?isConvex@btBroadphaseProxy@@SA_NH@Z ENDP		; btBroadphaseProxy::isConvex
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getShapeType@btCollisionShape@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getShapeType@btCollisionShape@@QBEHXZ PROC		; btCollisionShape::getShapeType, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btcollisionshape.h
; Line 111
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?getShapeType@btCollisionShape@@QBEHXZ ENDP		; btCollisionShape::getShapeType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0sResults@btGjkEpaSolver2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sResults@btGjkEpaSolver2@@QAE@XZ PROC		; btGjkEpaSolver2::sResults::sResults, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0sResults@btGjkEpaSolver2@@QAE@XZ ENDP		; btGjkEpaSolver2::sResults::sResults
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IBEXHHPAPBVbtCollisionObject@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T68238 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IBEXHHPAPBVbtCollisionObject@@@Z PROC ; btAlignedObjectArray<btCollisionObject const *>::copy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@4
$LN2@copy@4:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@4:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@4
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68238[ebp], eax
	cmp	DWORD PTR $T68238[ebp], 0
	je	SHORT $LN6@copy@4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T68238[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T68238[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@4
$LN6@copy@4:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@4:
	jmp	SHORT $LN2@copy@4
$LN4@copy@4:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IBEXHHPAPBVbtCollisionObject@@@Z ENDP ; btAlignedObjectArray<btCollisionObject const *>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btCollisionObject const *>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@6
$LN2@destroy@6:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@6:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@6
; Line 99
	jmp	SHORT $LN2@destroy@6
$LN4@destroy@6:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btCollisionObject const *>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEPAPBVbtCollisionObject@@HPAPBQBV2@@Z ; btAlignedAllocator<btCollisionObject const *,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btCollisionObject const *>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@4
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEPAPBVbtCollisionObject@@HPAPBQBV2@@Z ; btAlignedAllocator<btCollisionObject const *,16>::allocate
	jmp	SHORT $LN2@allocate@4
$LN1@allocate@4:
; Line 106
	xor	eax, eax
$LN2@allocate@4:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btCollisionObject const *>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEXPAPBVbtCollisionObject@@@Z ; btAlignedAllocator<btCollisionObject const *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ PROC ; btAlignedObjectArray<btCollisionObject const *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@6
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@6
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEXPAPBVbtCollisionObject@@@Z ; btAlignedAllocator<btCollisionObject const *,16>::deallocate
$LN1@deallocate@6:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@6:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PBVbtCollisionObject@@@@IAEXXZ ENDP ; btAlignedObjectArray<btCollisionObject const *>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T68249 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z PROC ; btAlignedObjectArray<btVector3>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@5
$LN2@copy@5:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@5:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@5
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2btVector3@@SAPAXIPAX@Z		; btVector3::operator new
	add	esp, 8
	mov	DWORD PTR $T68249[ebp], eax
	cmp	DWORD PTR $T68249[ebp], 0
	je	SHORT $LN6@copy@5
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, ecx
	mov	ecx, DWORD PTR $T68249[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T68249[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN7@copy@5
$LN6@copy@5:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@5:
	jmp	SHORT $LN2@copy@5
$LN4@copy@5:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z ENDP ; btAlignedObjectArray<btVector3>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btVector3>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@7
$LN2@destroy@7:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@7:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@7
; Line 99
	jmp	SHORT $LN2@destroy@7
$LN4@destroy@7:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btVector3>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z ; btAlignedAllocator<btVector3,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btVector3>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@5
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z ; btAlignedAllocator<btVector3,16>::allocate
	jmp	SHORT $LN2@allocate@5
$LN1@allocate@5:
; Line 106
	xor	eax, eax
$LN2@allocate@5:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btVector3>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z ; btAlignedAllocator<btVector3,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ PROC ; btAlignedObjectArray<btVector3>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@7
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@7
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z ; btAlignedAllocator<btVector3,16>::deallocate
$LN1@deallocate@7:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@7:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ENDP ; btAlignedObjectArray<btVector3>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ PROC ; btAlignedObjectArray<btVector3>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ENDP ; btAlignedObjectArray<btVector3>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@M@@IBEXHHPAM@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T68262 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@M@@IBEXHHPAM@Z PROC	; btAlignedObjectArray<float>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@6
$LN2@copy@6:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@6:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN1@copy@6
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68262[ebp], eax
	cmp	DWORD PTR $T68262[ebp], 0
	je	SHORT $LN6@copy@6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T68262[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	fld	DWORD PTR [ecx+eax*4]
	fstp	DWORD PTR [edx]
	mov	ecx, DWORD PTR $T68262[ebp]
	mov	DWORD PTR tv75[ebp], ecx
	jmp	SHORT $LN7@copy@6
$LN6@copy@6:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@6:
	jmp	SHORT $LN2@copy@6
$LN1@copy@6:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@M@@IBEXHHPAM@Z ENDP	; btAlignedObjectArray<float>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@M@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@M@@IAEXHH@Z PROC	; btAlignedObjectArray<float>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@8
$LN2@destroy@8:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@8:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@8
; Line 99
	jmp	SHORT $LN2@destroy@8
$LN4@destroy@8:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@M@@IAEXHH@Z ENDP	; btAlignedObjectArray<float>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@M$0BA@@@QAEPAMHPAPBM@Z ; btAlignedAllocator<float,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@M@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@M@@IAEPAXH@Z PROC	; btAlignedObjectArray<float>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@6
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@M$0BA@@@QAEPAMHPAPBM@Z ; btAlignedAllocator<float,16>::allocate
	jmp	SHORT $LN2@allocate@6
$LN1@allocate@6:
; Line 106
	xor	eax, eax
$LN2@allocate@6:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@M@@IAEPAXH@Z ENDP	; btAlignedObjectArray<float>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@M$0BA@@@QAEXPAM@Z ; btAlignedAllocator<float,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@M@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@M@@IAEXXZ PROC	; btAlignedObjectArray<float>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@8
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@8
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@M$0BA@@@QAEXPAM@Z ; btAlignedAllocator<float,16>::deallocate
$LN1@deallocate@8:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@8:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@M@@IAEXXZ ENDP	; btAlignedObjectArray<float>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@M@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@M@@QBEHXZ PROC		; btAlignedObjectArray<float>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@M@@QBEHXZ ENDP		; btAlignedObjectArray<float>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEPAPAUNode@btSoftBody@@HPAPBQAU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEPAPAUNode@btSoftBody@@HPAPBQAU23@@Z PROC ; btAlignedAllocator<btSoftBody::Node *,16>::allocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEPAPAUNode@btSoftBody@@HPAPBQAU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Node *,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEXPAPAUNode@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEXPAPAUNode@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Node *,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PAUNode@btSoftBody@@$0BA@@@QAEXPAPAUNode@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Node *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IBEXHHPAW4_@eVSolver@btSoftBody@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T68279 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IBEXHHPAW4_@eVSolver@btSoftBody@@@Z PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::copy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@7
$LN2@copy@7:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@7:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@7
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68279[ebp], eax
	cmp	DWORD PTR $T68279[ebp], 0
	je	SHORT $LN6@copy@7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T68279[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T68279[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@7
$LN6@copy@7:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@7:
	jmp	SHORT $LN2@copy@7
$LN4@copy@7:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IBEXHHPAW4_@eVSolver@btSoftBody@@@Z ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::copy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEPAW4_@eVSolver@btSoftBody@@HPAPBW4234@@Z ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@7
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEPAW4_@eVSolver@btSoftBody@@HPAPBW4234@@Z ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::allocate
	jmp	SHORT $LN2@allocate@7
$LN1@allocate@7:
; Line 106
	xor	eax, eax
$LN2@allocate@7:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@W4_@eVSolver@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<enum btSoftBody::eVSolver::_>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEXPAW4_@eVSolver@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEXPAW4_@eVSolver@btSoftBody@@@Z PROC ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEXPAW4_@eVSolver@btSoftBody@@@Z ENDP ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IBEXHHPAW4_@ePSolver@btSoftBody@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T68288 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IBEXHHPAW4_@ePSolver@btSoftBody@@@Z PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::copy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@8
$LN2@copy@8:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@8:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@8
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68288[ebp], eax
	cmp	DWORD PTR $T68288[ebp], 0
	je	SHORT $LN6@copy@8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T68288[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T68288[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@8
$LN6@copy@8:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@8:
	jmp	SHORT $LN2@copy@8
$LN4@copy@8:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IBEXHHPAW4_@ePSolver@btSoftBody@@@Z ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::copy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEPAW4_@ePSolver@btSoftBody@@HPAPBW4234@@Z ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@8
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEPAW4_@ePSolver@btSoftBody@@HPAPBW4234@@Z ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::allocate
	jmp	SHORT $LN2@allocate@8
$LN1@allocate@8:
; Line 106
	xor	eax, eax
$LN2@allocate@8:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@W4_@ePSolver@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<enum btSoftBody::ePSolver::_>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEXPAW4_@ePSolver@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEXPAW4_@ePSolver@btSoftBody@@@Z PROC ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEXPAW4_@ePSolver@btSoftBody@@@Z ENDP ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IBEXHHPAUNote@btSoftBody@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T68297 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IBEXHHPAUNote@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Note>::copy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@9
$LN2@copy@9:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@9:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@9
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 80					; 00000050H
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	80					; 00000050H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68297[ebp], eax
	cmp	DWORD PTR $T68297[ebp], 0
	je	SHORT $LN6@copy@9
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+12]
	add	esi, ecx
	mov	ecx, 20					; 00000014H
	mov	edi, DWORD PTR $T68297[ebp]
	rep movsd
	mov	eax, DWORD PTR $T68297[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@copy@9
$LN6@copy@9:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@9:
	jmp	SHORT $LN2@copy@9
$LN4@copy@9:
; Line 83
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IBEXHHPAUNote@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Note>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Note>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@9
$LN2@destroy@9:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@9:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@9
; Line 99
	jmp	SHORT $LN2@destroy@9
$LN4@destroy@9:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Note>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEPAUNote@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Note,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Note>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@9
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEPAUNote@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Note,16>::allocate
	jmp	SHORT $LN2@allocate@9
$LN1@allocate@9:
; Line 106
	xor	eax, eax
$LN2@allocate@9:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Note>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEXPAUNote@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Note,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Note>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@9
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@9
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEXPAUNote@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Note,16>::deallocate
$LN1@deallocate@9:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@9:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@UNote@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Note>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEPAUNode@btSoftBody@@HPAPBU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEPAUNode@btSoftBody@@HPAPBU23@@Z PROC ; btAlignedAllocator<btSoftBody::Node,16>::allocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 7
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEPAUNode@btSoftBody@@HPAPBU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Node,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEXPAUNode@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEXPAUNode@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Node,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@UNode@btSoftBody@@$0BA@@@QAEXPAUNode@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Node,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IBEXHHPAULink@btSoftBody@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T68312 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IBEXHHPAULink@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Link>::copy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@10
$LN2@copy@10:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@10:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@10
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	64					; 00000040H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68312[ebp], eax
	cmp	DWORD PTR $T68312[ebp], 0
	je	SHORT $LN6@copy@10
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+12]
	add	esi, ecx
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR $T68312[ebp]
	rep movsd
	mov	eax, DWORD PTR $T68312[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@copy@10
$LN6@copy@10:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@10:
	jmp	SHORT $LN2@copy@10
$LN4@copy@10:
; Line 83
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IBEXHHPAULink@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Link>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Link>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@10
$LN2@destroy@10:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@10:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@10
; Line 99
	jmp	SHORT $LN2@destroy@10
$LN4@destroy@10:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Link>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEPAULink@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Link,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Link>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@10
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEPAULink@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Link,16>::allocate
	jmp	SHORT $LN2@allocate@10
$LN1@allocate@10:
; Line 106
	xor	eax, eax
$LN2@allocate@10:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Link>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEXPAULink@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Link,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Link>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@10
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@10
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEXPAULink@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Link,16>::deallocate
$LN1@deallocate@10:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@10:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@ULink@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Link>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IBEXHHPAUFace@btSoftBody@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T68323 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IBEXHHPAUFace@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@11
$LN2@copy@11:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@11:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@11
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	64					; 00000040H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68323[ebp], eax
	cmp	DWORD PTR $T68323[ebp], 0
	je	SHORT $LN6@copy@11
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+12]
	add	esi, ecx
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR $T68323[ebp]
	rep movsd
	mov	eax, DWORD PTR $T68323[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@copy@11
$LN6@copy@11:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@11:
	jmp	SHORT $LN2@copy@11
$LN4@copy@11:
; Line 83
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IBEXHHPAUFace@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@11
$LN2@destroy@11:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@11:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@11
; Line 99
	jmp	SHORT $LN2@destroy@11
$LN4@destroy@11:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEPAUFace@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Face,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@11
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEPAUFace@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Face,16>::allocate
	jmp	SHORT $LN2@allocate@11
$LN1@allocate@11:
; Line 106
	xor	eax, eax
$LN2@allocate@11:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEXPAUFace@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Face,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Face>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@11
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@11
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEXPAUFace@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Face,16>::deallocate
$LN1@deallocate@11:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@11:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@UFace@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Face>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IBEXHHPAUTetra@btSoftBody@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T68334 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IBEXHHPAUTetra@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Tetra>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@12
$LN2@copy@12:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@12:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@12
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 112				; 00000070H
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	112					; 00000070H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68334[ebp], eax
	cmp	DWORD PTR $T68334[ebp], 0
	je	SHORT $LN6@copy@12
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 112				; 00000070H
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+12]
	add	esi, ecx
	mov	ecx, 28					; 0000001cH
	mov	edi, DWORD PTR $T68334[ebp]
	rep movsd
	mov	eax, DWORD PTR $T68334[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@copy@12
$LN6@copy@12:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@12:
	jmp	SHORT $LN2@copy@12
$LN4@copy@12:
; Line 83
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IBEXHHPAUTetra@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Tetra>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@12
$LN2@destroy@12:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@12:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@12
; Line 99
	jmp	SHORT $LN2@destroy@12
$LN4@destroy@12:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEPAUTetra@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Tetra,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Tetra>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@12
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEPAUTetra@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Tetra,16>::allocate
	jmp	SHORT $LN2@allocate@12
$LN1@allocate@12:
; Line 106
	xor	eax, eax
$LN2@allocate@12:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEXPAUTetra@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Tetra,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Tetra>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@12
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@12
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEXPAUTetra@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Tetra,16>::deallocate
$LN1@deallocate@12:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@12:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@UTetra@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IBEXHHPAUAnchor@btSoftBody@@@Z
_TEXT	SEGMENT
tv78 = -16						; size = 4
$T68345 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IBEXHHPAUAnchor@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Anchor>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@13
$LN2@copy@13:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@13:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@13
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 7
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	128					; 00000080H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68345[ebp], eax
	cmp	DWORD PTR $T68345[ebp], 0
	je	SHORT $LN6@copy@13
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 7
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	mov	ecx, DWORD PTR $T68345[ebp]
	call	??0Anchor@btSoftBody@@QAE@ABU01@@Z
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN7@copy@13
$LN6@copy@13:
	mov	DWORD PTR tv78[ebp], 0
$LN7@copy@13:
	jmp	SHORT $LN2@copy@13
$LN4@copy@13:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IBEXHHPAUAnchor@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Anchor>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@13
$LN2@destroy@13:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@13:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@13
; Line 99
	jmp	SHORT $LN2@destroy@13
$LN4@destroy@13:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEPAUAnchor@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Anchor,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Anchor>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@13
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEPAUAnchor@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::Anchor,16>::allocate
	jmp	SHORT $LN2@allocate@13
$LN1@allocate@13:
; Line 106
	xor	eax, eax
$LN2@allocate@13:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEXPAUAnchor@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Anchor,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Anchor>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@13
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@13
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEXPAUAnchor@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Anchor,16>::deallocate
$LN1@deallocate@13:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@13:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IBEXHHPAURContact@btSoftBody@@@Z
_TEXT	SEGMENT
tv78 = -16						; size = 4
$T68356 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IBEXHHPAURContact@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::RContact>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@14
$LN2@copy@14:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@14:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@14
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 144				; 00000090H
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	144					; 00000090H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68356[ebp], eax
	cmp	DWORD PTR $T68356[ebp], 0
	je	SHORT $LN6@copy@14
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	mov	ecx, DWORD PTR $T68356[ebp]
	call	??0RContact@btSoftBody@@QAE@ABU01@@Z
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN7@copy@14
$LN6@copy@14:
	mov	DWORD PTR tv78[ebp], 0
$LN7@copy@14:
	jmp	SHORT $LN2@copy@14
$LN4@copy@14:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IBEXHHPAURContact@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::RContact>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::RContact>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@14
$LN2@destroy@14:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@14:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@14
; Line 99
	jmp	SHORT $LN2@destroy@14
$LN4@destroy@14:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::RContact>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEPAURContact@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::RContact,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::RContact>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@14
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEPAURContact@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::RContact,16>::allocate
	jmp	SHORT $LN2@allocate@14
$LN1@allocate@14:
; Line 106
	xor	eax, eax
$LN2@allocate@14:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::RContact>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEXPAURContact@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::RContact,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::RContact>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@14
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@14
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEXPAURContact@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::RContact,16>::deallocate
$LN1@deallocate@14:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@14:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::RContact>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IBEXHHPAUSContact@btSoftBody@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T68367 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IBEXHHPAUSContact@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::SContact>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@15
$LN2@copy@15:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@15:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@15
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 6
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	64					; 00000040H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68367[ebp], eax
	cmp	DWORD PTR $T68367[ebp], 0
	je	SHORT $LN6@copy@15
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [edx+12]
	add	esi, ecx
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR $T68367[ebp]
	rep movsd
	mov	eax, DWORD PTR $T68367[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@copy@15
$LN6@copy@15:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@15:
	jmp	SHORT $LN2@copy@15
$LN4@copy@15:
; Line 83
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IBEXHHPAUSContact@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::SContact>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::SContact>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@15
$LN2@destroy@15:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@15:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@15
; Line 99
	jmp	SHORT $LN2@destroy@15
$LN4@destroy@15:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::SContact>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEPAUSContact@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::SContact,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::SContact>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@15
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEPAUSContact@btSoftBody@@HPAPBU23@@Z ; btAlignedAllocator<btSoftBody::SContact,16>::allocate
	jmp	SHORT $LN2@allocate@15
$LN1@allocate@15:
; Line 106
	xor	eax, eax
$LN2@allocate@15:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::SContact>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEXPAUSContact@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::SContact,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::SContact>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@15
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@15
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEXPAUSContact@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::SContact,16>::deallocate
$LN1@deallocate@15:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@15:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::SContact>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IBEXHHPAPAUJoint@btSoftBody@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T68378 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IBEXHHPAPAUJoint@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@16
$LN2@copy@16:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@16:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@16
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68378[ebp], eax
	cmp	DWORD PTR $T68378[ebp], 0
	je	SHORT $LN6@copy@16
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T68378[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T68378[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@16
$LN6@copy@16:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@16:
	jmp	SHORT $LN2@copy@16
$LN4@copy@16:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IBEXHHPAPAUJoint@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@16
$LN2@destroy@16:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@16:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@16
; Line 99
	jmp	SHORT $LN2@destroy@16
$LN4@destroy@16:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEPAPAUJoint@btSoftBody@@HPAPBQAU23@@Z ; btAlignedAllocator<btSoftBody::Joint *,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@16
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEPAPAUJoint@btSoftBody@@HPAPBQAU23@@Z ; btAlignedAllocator<btSoftBody::Joint *,16>::allocate
	jmp	SHORT $LN2@allocate@16
$LN1@allocate@16:
; Line 106
	xor	eax, eax
$LN2@allocate@16:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEXPAPAUJoint@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Joint *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Joint *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@16
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@16
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEXPAPAUJoint@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Joint *,16>::deallocate
$LN1@deallocate@16:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@16:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IBEXHHPAPAUMaterial@btSoftBody@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T68389 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IBEXHHPAPAUMaterial@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Material *>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@17
$LN2@copy@17:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@17:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@17
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68389[ebp], eax
	cmp	DWORD PTR $T68389[ebp], 0
	je	SHORT $LN6@copy@17
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T68389[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T68389[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@17
$LN6@copy@17:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@17:
	jmp	SHORT $LN2@copy@17
$LN4@copy@17:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IBEXHHPAPAUMaterial@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Material *>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Material *>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@17
$LN2@destroy@17:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@17:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@17
; Line 99
	jmp	SHORT $LN2@destroy@17
$LN4@destroy@17:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Material *>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEPAPAUMaterial@btSoftBody@@HPAPBQAU23@@Z ; btAlignedAllocator<btSoftBody::Material *,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Material *>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@17
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEPAPAUMaterial@btSoftBody@@HPAPBQAU23@@Z ; btAlignedAllocator<btSoftBody::Material *,16>::allocate
	jmp	SHORT $LN2@allocate@17
$LN1@allocate@17:
; Line 106
	xor	eax, eax
$LN2@allocate@17:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Material *>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEXPAPAUMaterial@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Material *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Material *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@17
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@17
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEXPAPAUMaterial@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Material *,16>::deallocate
$LN1@deallocate@17:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@17:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PAUMaterial@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Material *>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IBEXHHPAPAUCluster@btSoftBody@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T68400 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IBEXHHPAPAUCluster@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@18
$LN2@copy@18:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@18:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@18
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68400[ebp], eax
	cmp	DWORD PTR $T68400[ebp], 0
	je	SHORT $LN6@copy@18
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T68400[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T68400[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@18
$LN6@copy@18:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@18:
	jmp	SHORT $LN2@copy@18
$LN4@copy@18:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IBEXHHPAPAUCluster@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@18
$LN2@destroy@18:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@18:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@18
; Line 99
	jmp	SHORT $LN2@destroy@18
$LN4@destroy@18:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEPAPAUCluster@btSoftBody@@HPAPBQAU23@@Z ; btAlignedAllocator<btSoftBody::Cluster *,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@18
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEPAPAUCluster@btSoftBody@@HPAPBQAU23@@Z ; btAlignedAllocator<btSoftBody::Cluster *,16>::allocate
	jmp	SHORT $LN2@allocate@18
$LN1@allocate@18:
; Line 106
	xor	eax, eax
$LN2@allocate@18:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEXPAPAUCluster@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Cluster *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@18
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@18
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEXPAPAUCluster@btSoftBody@@@Z ; btAlignedAllocator<btSoftBody::Cluster *,16>::deallocate
$LN1@deallocate@18:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@18:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@IAEXXZ ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z
_TEXT	SEGMENT
tv73 = -16						; size = 4
$T68411 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z PROC	; btAlignedObjectArray<bool>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@19
$LN2@copy@19:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@19:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@19
; Line 79
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	push	1
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68411[ebp], eax
	cmp	DWORD PTR $T68411[ebp], 0
	je	SHORT $LN6@copy@19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T68411[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [edx+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR $T68411[ebp]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN7@copy@19
$LN6@copy@19:
	mov	DWORD PTR tv73[ebp], 0
$LN7@copy@19:
	jmp	SHORT $LN2@copy@19
$LN4@copy@19:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z ENDP	; btAlignedObjectArray<bool>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z PROC	; btAlignedObjectArray<bool>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@19
$LN2@destroy@19:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@19:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@19
; Line 99
	jmp	SHORT $LN2@destroy@19
$LN4@destroy@19:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z ENDP	; btAlignedObjectArray<bool>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z ; btAlignedAllocator<bool,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z PROC	; btAlignedObjectArray<bool>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@19
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z ; btAlignedAllocator<bool,16>::allocate
	jmp	SHORT $LN2@allocate@19
$LN1@allocate@19:
; Line 106
	xor	eax, eax
$LN2@allocate@19:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z ENDP	; btAlignedObjectArray<bool>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z ; btAlignedAllocator<bool,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ PROC	; btAlignedObjectArray<bool>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@19
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@19
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z ; btAlignedAllocator<bool,16>::deallocate
$LN1@deallocate@19:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@19:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ ENDP	; btAlignedObjectArray<bool>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@_N@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@_N@@QBEHXZ PROC	; btAlignedObjectArray<bool>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@_N@@QBEHXZ ENDP	; btAlignedObjectArray<bool>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@VbtHashPtr@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@VbtHashPtr@@@@IAEHH@Z PROC ; btAlignedObjectArray<btHashPtr>::allocSize, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@15
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@15
$LN3@allocSize@15:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@15:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@VbtHashPtr@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btHashPtr>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btHashPtr>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@20
$LN2@destroy@20:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@20:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@20
; Line 99
	jmp	SHORT $LN2@destroy@20
$LN4@destroy@20:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btHashPtr>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEXPAVbtHashPtr@@@Z ; btAlignedAllocator<btHashPtr,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ PROC ; btAlignedObjectArray<btHashPtr>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@20
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@20
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEXPAVbtHashPtr@@@Z ; btAlignedAllocator<btHashPtr,16>::deallocate
$LN1@deallocate@20:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@20:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ ENDP ; btAlignedObjectArray<btHashPtr>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ PROC	; btAlignedObjectArray<btHashPtr>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ENDP	; btAlignedObjectArray<btHashPtr>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@VbtHashPtr@@@@QBEABVbtHashPtr@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@VbtHashPtr@@@@QBEABVbtHashPtr@@H@Z PROC ; btAlignedObjectArray<btHashPtr>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@36
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@36:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@36
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@36:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@VbtHashPtr@@@@QBEABVbtHashPtr@@H@Z ENDP ; btAlignedObjectArray<btHashPtr>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@VbtHashPtr@@@@QAEAAVbtHashPtr@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@VbtHashPtr@@@@QAEAAVbtHashPtr@@H@Z PROC ; btAlignedObjectArray<btHashPtr>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@37
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@37:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@VbtHashPtr@@@@QAEAAVbtHashPtr@@H@Z ENDP ; btAlignedObjectArray<btHashPtr>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ PROC ; btAlignedObjectArray<btHashPtr>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ENDP ; btAlignedObjectArray<btHashPtr>::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@VbtHashPtr@@@@IBEXHHPAVbtHashPtr@@@Z ; btAlignedObjectArray<btHashPtr>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEPAXH@Z ; btAlignedObjectArray<btHashPtr>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXH@Z
_TEXT	SEGMENT
_s$60819 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXH@Z PROC ; btAlignedObjectArray<btHashPtr>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@21
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEPAXH@Z ; btAlignedObjectArray<btHashPtr>::allocate
	mov	DWORD PTR _s$60819[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$60819[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@VbtHashPtr@@@@IBEXHHPAVbtHashPtr@@@Z ; btAlignedObjectArray<btHashPtr>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtHashPtr@@@@QBEHXZ ; btAlignedObjectArray<btHashPtr>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXHH@Z ; btAlignedObjectArray<btHashPtr>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEXXZ ; btAlignedObjectArray<btHashPtr>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$60819[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@21:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@VbtHashPtr@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btHashPtr>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@UNodeLinks@@@@IBEXHHPAUNodeLinks@@@Z
_TEXT	SEGMENT
tv78 = -16						; size = 4
$T68442 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@UNodeLinks@@@@IBEXHHPAUNodeLinks@@@Z PROC ; btAlignedObjectArray<NodeLinks>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@20
$LN2@copy@20:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@20:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@20
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 20					; 00000014H
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	20					; 00000014H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68442[ebp], eax
	cmp	DWORD PTR $T68442[ebp], 0
	je	SHORT $LN6@copy@20
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	mov	ecx, DWORD PTR $T68442[ebp]
	call	??0NodeLinks@@QAE@ABU0@@Z
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN7@copy@20
$LN6@copy@20:
	mov	DWORD PTR tv78[ebp], 0
$LN7@copy@20:
	jmp	SHORT $LN2@copy@20
$LN4@copy@20:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@UNodeLinks@@@@IBEXHHPAUNodeLinks@@@Z ENDP ; btAlignedObjectArray<NodeLinks>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@UNodeLinks@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@UNodeLinks@@@@IAEXHH@Z PROC ; btAlignedObjectArray<NodeLinks>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@21
$LN2@destroy@21:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@21:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@21
; Line 98
	push	0
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+12]
	call	??_GNodeLinks@@QAEPAXI@Z
; Line 99
	jmp	SHORT $LN2@destroy@21
$LN4@destroy@21:
; Line 100
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@UNodeLinks@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<NodeLinks>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEPAUNodeLinks@@HPAPBU2@@Z ; btAlignedAllocator<NodeLinks,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<NodeLinks>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@20
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEPAUNodeLinks@@HPAPBU2@@Z ; btAlignedAllocator<NodeLinks,16>::allocate
	jmp	SHORT $LN2@allocate@20
$LN1@allocate@20:
; Line 106
	xor	eax, eax
$LN2@allocate@20:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<NodeLinks>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEXPAUNodeLinks@@@Z ; btAlignedAllocator<NodeLinks,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ PROC ; btAlignedObjectArray<NodeLinks>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@21
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@21
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEXPAUNodeLinks@@@Z ; btAlignedAllocator<NodeLinks,16>::deallocate
$LN1@deallocate@21:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@21:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@UNodeLinks@@@@IAEXXZ ENDP ; btAlignedObjectArray<NodeLinks>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ PROC ; btAlignedObjectArray<NodeLinks>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@UNodeLinks@@@@QBEHXZ ENDP ; btAlignedObjectArray<NodeLinks>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z PROC ; btAlignedAllocator<int,16>::allocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z ENDP ; btAlignedAllocator<int,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z PROC	; btAlignedAllocator<int,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z ENDP	; btAlignedAllocator<int,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEPAPBVbtCollisionObject@@HPAPBQBV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEPAPBVbtCollisionObject@@HPAPBQBV2@@Z PROC ; btAlignedAllocator<btCollisionObject const *,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEPAPBVbtCollisionObject@@HPAPBQBV2@@Z ENDP ; btAlignedAllocator<btCollisionObject const *,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEXPAPBVbtCollisionObject@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEXPAPBVbtCollisionObject@@@Z PROC ; btAlignedAllocator<btCollisionObject const *,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PBVbtCollisionObject@@$0BA@@@QAEXPAPBVbtCollisionObject@@@Z ENDP ; btAlignedAllocator<btCollisionObject const *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z PROC ; btAlignedAllocator<btVector3,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z ENDP ; btAlignedAllocator<btVector3,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z PROC ; btAlignedAllocator<btVector3,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z ENDP ; btAlignedAllocator<btVector3,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@M$0BA@@@QAEPAMHPAPBM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@M$0BA@@@QAEPAMHPAPBM@Z PROC ; btAlignedAllocator<float,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@M$0BA@@@QAEPAMHPAPBM@Z ENDP ; btAlignedAllocator<float,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@M$0BA@@@QAEXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@M$0BA@@@QAEXPAM@Z PROC	; btAlignedAllocator<float,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@M$0BA@@@QAEXPAM@Z ENDP	; btAlignedAllocator<float,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEPAW4_@eVSolver@btSoftBody@@HPAPBW4234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEPAW4_@eVSolver@btSoftBody@@HPAPBW4234@@Z PROC ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@W4_@eVSolver@btSoftBody@@$0BA@@@QAEPAW4_@eVSolver@btSoftBody@@HPAPBW4234@@Z ENDP ; btAlignedAllocator<enum btSoftBody::eVSolver::_,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEPAW4_@ePSolver@btSoftBody@@HPAPBW4234@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEPAW4_@ePSolver@btSoftBody@@HPAPBW4234@@Z PROC ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@W4_@ePSolver@btSoftBody@@$0BA@@@QAEPAW4_@ePSolver@btSoftBody@@HPAPBW4234@@Z ENDP ; btAlignedAllocator<enum btSoftBody::ePSolver::_,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEPAUNote@btSoftBody@@HPAPBU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEPAUNote@btSoftBody@@HPAPBU23@@Z PROC ; btAlignedAllocator<btSoftBody::Note,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 80					; 00000050H
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEPAUNote@btSoftBody@@HPAPBU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Note,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEXPAUNote@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEXPAUNote@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Note,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@UNote@btSoftBody@@$0BA@@@QAEXPAUNote@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Note,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEPAULink@btSoftBody@@HPAPBU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEPAULink@btSoftBody@@HPAPBU23@@Z PROC ; btAlignedAllocator<btSoftBody::Link,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEPAULink@btSoftBody@@HPAPBU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Link,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEXPAULink@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEXPAULink@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Link,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@ULink@btSoftBody@@$0BA@@@QAEXPAULink@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Link,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEPAUFace@btSoftBody@@HPAPBU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEPAUFace@btSoftBody@@HPAPBU23@@Z PROC ; btAlignedAllocator<btSoftBody::Face,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEPAUFace@btSoftBody@@HPAPBU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Face,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEXPAUFace@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEXPAUFace@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Face,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@UFace@btSoftBody@@$0BA@@@QAEXPAUFace@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Face,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEPAUTetra@btSoftBody@@HPAPBU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEPAUTetra@btSoftBody@@HPAPBU23@@Z PROC ; btAlignedAllocator<btSoftBody::Tetra,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 112				; 00000070H
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEPAUTetra@btSoftBody@@HPAPBU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Tetra,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEXPAUTetra@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEXPAUTetra@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Tetra,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@UTetra@btSoftBody@@$0BA@@@QAEXPAUTetra@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Tetra,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEPAUAnchor@btSoftBody@@HPAPBU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEPAUAnchor@btSoftBody@@HPAPBU23@@Z PROC ; btAlignedAllocator<btSoftBody::Anchor,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 7
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEPAUAnchor@btSoftBody@@HPAPBU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Anchor,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEXPAUAnchor@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEXPAUAnchor@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Anchor,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@UAnchor@btSoftBody@@$0BA@@@QAEXPAUAnchor@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Anchor,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEPAURContact@btSoftBody@@HPAPBU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEPAURContact@btSoftBody@@HPAPBU23@@Z PROC ; btAlignedAllocator<btSoftBody::RContact,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 144				; 00000090H
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEPAURContact@btSoftBody@@HPAPBU23@@Z ENDP ; btAlignedAllocator<btSoftBody::RContact,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEXPAURContact@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEXPAURContact@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::RContact,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@URContact@btSoftBody@@$0BA@@@QAEXPAURContact@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::RContact,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEPAUSContact@btSoftBody@@HPAPBU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEPAUSContact@btSoftBody@@HPAPBU23@@Z PROC ; btAlignedAllocator<btSoftBody::SContact,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEPAUSContact@btSoftBody@@HPAPBU23@@Z ENDP ; btAlignedAllocator<btSoftBody::SContact,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEXPAUSContact@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEXPAUSContact@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::SContact,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@USContact@btSoftBody@@$0BA@@@QAEXPAUSContact@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::SContact,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEPAPAUJoint@btSoftBody@@HPAPBQAU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEPAPAUJoint@btSoftBody@@HPAPBQAU23@@Z PROC ; btAlignedAllocator<btSoftBody::Joint *,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEPAPAUJoint@btSoftBody@@HPAPBQAU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Joint *,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEXPAPAUJoint@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEXPAPAUJoint@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Joint *,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PAUJoint@btSoftBody@@$0BA@@@QAEXPAPAUJoint@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Joint *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEPAPAUMaterial@btSoftBody@@HPAPBQAU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEPAPAUMaterial@btSoftBody@@HPAPBQAU23@@Z PROC ; btAlignedAllocator<btSoftBody::Material *,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEPAPAUMaterial@btSoftBody@@HPAPBQAU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Material *,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEXPAPAUMaterial@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEXPAPAUMaterial@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Material *,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PAUMaterial@btSoftBody@@$0BA@@@QAEXPAPAUMaterial@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Material *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEPAPAUCluster@btSoftBody@@HPAPBQAU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEPAPAUCluster@btSoftBody@@HPAPBQAU23@@Z PROC ; btAlignedAllocator<btSoftBody::Cluster *,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEPAPAUCluster@btSoftBody@@HPAPBQAU23@@Z ENDP ; btAlignedAllocator<btSoftBody::Cluster *,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEXPAPAUCluster@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEXPAPAUCluster@btSoftBody@@@Z PROC ; btAlignedAllocator<btSoftBody::Cluster *,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PAUCluster@btSoftBody@@$0BA@@@QAEXPAPAUCluster@btSoftBody@@@Z ENDP ; btAlignedAllocator<btSoftBody::Cluster *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z PROC ; btAlignedAllocator<bool,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z ENDP ; btAlignedAllocator<bool,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z PROC ; btAlignedAllocator<bool,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z ENDP ; btAlignedAllocator<bool,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@VbtHashPtr@@@@IBEXHHPAVbtHashPtr@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T68519 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@VbtHashPtr@@@@IBEXHHPAVbtHashPtr@@@Z PROC ; btAlignedObjectArray<btHashPtr>::copy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@21
$LN2@copy@21:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@21:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@21
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68519[ebp], eax
	cmp	DWORD PTR $T68519[ebp], 0
	je	SHORT $LN6@copy@21
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR $T68519[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T68519[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@copy@21
$LN6@copy@21:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@21:
	jmp	SHORT $LN2@copy@21
$LN4@copy@21:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@VbtHashPtr@@@@IBEXHHPAVbtHashPtr@@@Z ENDP ; btAlignedObjectArray<btHashPtr>::copy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEPAVbtHashPtr@@HPAPBV2@@Z ; btAlignedAllocator<btHashPtr,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btHashPtr>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@21
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEPAVbtHashPtr@@HPAPBV2@@Z ; btAlignedAllocator<btHashPtr,16>::allocate
	jmp	SHORT $LN2@allocate@21
$LN1@allocate@21:
; Line 106
	xor	eax, eax
$LN2@allocate@21:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@VbtHashPtr@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btHashPtr>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEXPAVbtHashPtr@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEXPAVbtHashPtr@@@Z PROC ; btAlignedAllocator<btHashPtr,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEXPAVbtHashPtr@@@Z ENDP ; btAlignedAllocator<btHashPtr,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEPAUNodeLinks@@HPAPBU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEPAUNodeLinks@@HPAPBU2@@Z PROC ; btAlignedAllocator<NodeLinks,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 20					; 00000014H
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEPAUNodeLinks@@HPAPBU2@@Z ENDP ; btAlignedAllocator<NodeLinks,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEXPAUNodeLinks@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEXPAUNodeLinks@@@Z PROC ; btAlignedAllocator<NodeLinks,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@UNodeLinks@@$0BA@@@QAEXPAUNodeLinks@@@Z ENDP ; btAlignedAllocator<NodeLinks,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEPAVbtHashPtr@@HPAPBV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEPAVbtHashPtr@@HPAPBV2@@Z PROC ; btAlignedAllocator<btHashPtr,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 3
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@VbtHashPtr@@$0BA@@@QAEPAVbtHashPtr@@HPAPBV2@@Z ENDP ; btAlignedAllocator<btHashPtr,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btSetMax@M@@YAXAAMABM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btSetMax@M@@YAXAAMABM@Z PROC				; btSetMax<float>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btminmax.h
; Line 51
	push	ebp
	mov	ebp, esp
; Line 52
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@btSetMax
; Line 54
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx]
$LN1@btSetMax:
; Line 56
	pop	ebp
	ret	0
??$btSetMax@M@@YAXAAMABM@Z ENDP				; btSetMax<float>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btSetMin@M@@YAXAAMABM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btSetMin@M@@YAXAAMABM@Z PROC				; btSetMin<float>, COMDAT
; Line 42
	push	ebp
	mov	ebp, esp
; Line 43
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@btSetMin
; Line 45
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx]
$LN1@btSetMin:
; Line 47
	pop	ebp
	ret	0
??$btSetMin@M@@YAXAAMABM@Z ENDP				; btSetMin<float>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btMin@M@@YAABMABM0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T68538 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btMin@M@@YAABMABM0@Z PROC				; btMin<float>, COMDAT
; Line 24
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 25
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@btMin
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], edx
	jmp	SHORT $LN4@btMin
$LN3@btMin:
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN4@btMin:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T68538[ebp], ecx
	mov	eax, DWORD PTR $T68538[ebp]
; Line 26
	mov	esp, ebp
	pop	ebp
	ret	0
??$btMin@M@@YAABMABM0@Z ENDP				; btMin<float>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z
_TEXT	SEGMENT
$T61775 = -32						; size = 16
$T61774 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_t$ = 20						; size = 4
??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z PROC	; Lerp<btVector3>, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 189
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	lea	eax, DWORD PTR _t$[ebx]
	push	eax
	mov	ecx, DWORD PTR _a$[ebx]
	push	ecx
	mov	edx, DWORD PTR _b$[ebx]
	push	edx
	lea	eax, DWORD PTR $T61774[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T61775[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _a$[ebx]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??$Lerp@VbtVector3@@@@YA?AVbtVector3@@ABV0@0M@Z ENDP	; Lerp<btVector3>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$Clamp@M@@YAMABM00@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
tv67 = -4						; size = 4
_x$ = 8							; size = 4
_l$ = 12						; size = 4
_h$ = 16						; size = 4
??$Clamp@M@@YAMABM00@Z PROC				; Clamp<float>, COMDAT
; Line 217
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _l$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@Clamp@2
	mov	edx, DWORD PTR _l$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv67[ebp]
	jmp	SHORT $LN6@Clamp@2
$LN5@Clamp@2:
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _h$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@Clamp@2
	mov	edx, DWORD PTR _h$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR tv66[ebp]
	jmp	SHORT $LN4@Clamp@2
$LN3@Clamp@2:
	mov	eax, DWORD PTR _x$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR tv66[ebp]
$LN4@Clamp@2:
	fld	DWORD PTR tv66[ebp]
	fstp	DWORD PTR tv67[ebp]
$LN6@Clamp@2:
	fld	DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??$Clamp@M@@YAMABM00@Z ENDP				; Clamp<float>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btSwap@M@@YAXAAM0@Z
_TEXT	SEGMENT
_tmp$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btSwap@M@@YAXAAM0@Z PROC				; btSwap<float>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 536
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 537
	mov	eax, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _tmp$[ebp]
; Line 538
	mov	ecx, DWORD PTR _a$[ebp]
	mov	edx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx]
; Line 539
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR _tmp$[ebp]
	fstp	DWORD PTR [eax]
; Line 540
	mov	esp, ebp
	pop	ebp
	ret	0
??$btSwap@M@@YAXAAM0@Z ENDP				; btSwap<float>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$Lerp@M@@YAMABM0M@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_t$ = 16						; size = 4
??$Lerp@M@@YAMABM0M@Z PROC				; Lerp<float>, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 189
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	fmul	DWORD PTR _t$[ebp]
	mov	edx, DWORD PTR _a$[ebp]
	fadd	DWORD PTR [edx]
	pop	ebp
	ret	0
??$Lerp@M@@YAMABM0M@Z ENDP				; Lerp<float>
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ; btAlignedObjectArray<btDbvtNode const *>::~btAlignedObjectArray<btDbvtNode const *>
PUBLIC	?Process@CollideCL_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z ; btSoftColliders::CollideCL_RS::Process
PUBLIC	?isinternal@btDbvtNode@@QBE_NXZ			; btDbvtNode::isinternal
PUBLIC	?Intersect@@YA_NABUbtDbvtAabbMm@@0@Z		; Intersect
PUBLIC	?pop_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::pop_back
PUBLIC	??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z ; btAlignedObjectArray<btDbvtNode const *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
PUBLIC	?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::push_back
PUBLIC	?reserve@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXH@Z ; btAlignedObjectArray<btDbvtNode const *>::reserve
PUBLIC	?resize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXHABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::resize
PUBLIC	??0?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ; btAlignedObjectArray<btDbvtNode const *>::btAlignedObjectArray<btDbvtNode const *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$collideTV@UCollideCL_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideCL_RS@btSoftColliders@@@Z
_TEXT	SEGMENT
$T68555 = -88						; size = 4
_n$61797 = -84						; size = 4
_stack$61791 = -76					; size = 20
_volume$61789 = -48					; size = 32
_this$ = -4						; size = 4
_root$ = 8						; size = 4
_vol$ = 12						; size = 4
_policy$ = 16						; size = 4
??$collideTV@UCollideCL_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideCL_RS@btSoftColliders@@@Z PROC ; btDbvt::collideTV<btSoftColliders::CollideCL_RS>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 925
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 927
	cmp	DWORD PTR _root$[ebx], 0
	je	$LN8@collideTV
; Line 929
	mov	esi, DWORD PTR _vol$[ebx]
	mov	ecx, 8
	lea	edi, DWORD PTR _volume$61789[ebp]
	rep movsd
; Line 930
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	??0?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ; btAlignedObjectArray<btDbvtNode const *>::btAlignedObjectArray<btDbvtNode const *>
; Line 931
	mov	DWORD PTR $T68555[ebp], 0
	lea	eax, DWORD PTR $T68555[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	?resize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXHABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::resize
; Line 932
	push	64					; 00000040H
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	?reserve@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXH@Z ; btAlignedObjectArray<btDbvtNode const *>::reserve
; Line 933
	lea	ecx, DWORD PTR _root$[ebx]
	push	ecx
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::push_back
$LN6@collideTV:
; Line 935
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	sub	eax, 1
	push	eax
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z ; btAlignedObjectArray<btDbvtNode const *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _n$61797[ebp], edx
; Line 936
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	?pop_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::pop_back
; Line 937
	lea	eax, DWORD PTR _volume$61789[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$61797[ebp]
	push	ecx
	call	?Intersect@@YA_NABUbtDbvtAabbMm@@0@Z	; Intersect
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@collideTV
; Line 939
	mov	ecx, DWORD PTR _n$61797[ebp]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@collideTV
; Line 941
	mov	ecx, DWORD PTR _n$61797[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::push_back
; Line 942
	mov	edx, DWORD PTR _n$61797[ebp]
	add	edx, 40					; 00000028H
	push	edx
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::push_back
; Line 944
	jmp	SHORT $LN5@collideTV
$LN2@collideTV:
; Line 946
	mov	eax, DWORD PTR _n$61797[ebp]
	push	eax
	mov	ecx, DWORD PTR _policy$[ebx]
	call	?Process@CollideCL_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z ; btSoftColliders::CollideCL_RS::Process
$LN5@collideTV:
; Line 949
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	test	eax, eax
	jg	SHORT $LN6@collideTV
; Line 950
	lea	ecx, DWORD PTR _stack$61791[ebp]
	call	??1?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ; btAlignedObjectArray<btDbvtNode const *>::~btAlignedObjectArray<btDbvtNode const *>
$LN8@collideTV:
; Line 951
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@collideTV
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
$LN13@collideTV:
	DD	2
	DD	$LN12@collideTV
$LN12@collideTV:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN10@collideTV
	DD	-76					; ffffffb4H
	DD	20					; 00000014H
	DD	$LN11@collideTV
$LN11@collideTV:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN10@collideTV:
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
??$collideTV@UCollideCL_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideCL_RS@btSoftColliders@@@Z ENDP ; btDbvt::collideTV<btSoftColliders::CollideCL_RS>
_TEXT	ENDS
PUBLIC	?isleaf@btDbvtNode@@QBE_NXZ			; btDbvtNode::isleaf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?isinternal@btDbvtNode@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isinternal@btDbvtNode@@QBE_NXZ PROC			; btDbvtNode::isinternal, COMDAT
; _this$ = ecx
; Line 182
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isleaf@btDbvtNode@@QBE_NXZ		; btDbvtNode::isleaf
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isinternal@btDbvtNode@@QBE_NXZ ENDP			; btDbvtNode::isinternal
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?isleaf@btDbvtNode@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isleaf@btDbvtNode@@QBE_NXZ PROC			; btDbvtNode::isleaf, COMDAT
; _this$ = ecx
; Line 181
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+40], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?isleaf@btDbvtNode@@QBE_NXZ ENDP			; btDbvtNode::isleaf
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Intersect@@YA_NABUbtDbvtAabbMm@@0@Z
_TEXT	SEGMENT
_pu$ = -152						; size = 4
_rt$ = -144						; size = 16
$T13698 = -112						; size = 16
$T13697 = -96						; size = 16
$T13696 = -80						; size = 16
$T13695 = -64						; size = 16
$T13694 = -48						; size = 16
$T13693 = -32						; size = 16
$T13692 = -16						; size = 16
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?Intersect@@YA_NABUbtDbvtAabbMm@@0@Z PROC		; Intersect, COMDAT
; Line 522
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	edi
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 525
	mov	ecx, DWORD PTR _b$[ebx]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T13696[ebp], xmm0
	mov	ecx, DWORD PTR _a$[ebx]
	add	ecx, 16					; 00000010H
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T13695[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13696[ebp]
	movaps	xmm1, XMMWORD PTR $T13695[ebp]
	cmpltps	xmm1, xmm0
	movaps	XMMWORD PTR $T13697[ebp], xmm1
	mov	ecx, DWORD PTR _a$[ebx]
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T13693[ebp], xmm0
	mov	ecx, DWORD PTR _b$[ebx]
	add	ecx, 16					; 00000010H
	call	??BbtVector3@@QBEPBMXZ			; btVector3::operator float const *
	movaps	xmm0, XMMWORD PTR [eax]
	movaps	XMMWORD PTR $T13692[ebp], xmm0
	movaps	xmm0, XMMWORD PTR $T13693[ebp]
	movaps	xmm1, XMMWORD PTR $T13692[ebp]
	cmpltps	xmm1, xmm0
	movaps	XMMWORD PTR $T13694[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T13697[ebp]
	movaps	xmm1, XMMWORD PTR $T13694[ebp]
	orps	xmm1, xmm0
	movaps	XMMWORD PTR $T13698[ebp], xmm1
	movaps	xmm0, XMMWORD PTR $T13698[ebp]
	movaps	XMMWORD PTR _rt$[ebp], xmm0
; Line 527
	lea	eax, DWORD PTR _rt$[ebp]
	mov	DWORD PTR _pu$[ebp], eax
; Line 531
	mov	ecx, DWORD PTR _pu$[ebp]
	mov	edx, DWORD PTR _pu$[ebp]
	mov	eax, DWORD PTR [ecx]
	or	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _pu$[ebp]
	or	eax, DWORD PTR [ecx+8]
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 540
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Intersect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN5@Intersect:
	DD	1
	DD	$LN4@Intersect
$LN4@Intersect:
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN3@Intersect
$LN3@Intersect:
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
?Intersect@@YA_NABUbtDbvtAabbMm@@0@Z ENDP		; Intersect
_TEXT	ENDS
PUBLIC	??1CJoint@btSoftBody@@UAE@XZ			; btSoftBody::CJoint::~CJoint
PUBLIC	??4CJoint@btSoftBody@@QAEAAU01@ABU01@@Z		; btSoftBody::CJoint::operator=
PUBLIC	?SolveContact@ClusterBase@btSoftColliders@@QAE_NABUsResults@btGjkEpaSolver2@@UBody@btSoftBody@@U56@AAUCJoint@6@@Z ; btSoftColliders::ClusterBase::SolveContact
PUBLIC	??0Body@btSoftBody@@QAE@PBVbtCollisionObject@@@Z ; btSoftBody::Body::Body
PUBLIC	??0CJoint@btSoftBody@@QAE@XZ			; btSoftBody::CJoint::CJoint
PUBLIC	??1btSoftClusterCollisionShape@@UAE@XZ		; btSoftClusterCollisionShape::~btSoftClusterCollisionShape
PUBLIC	?isStaticOrKinematicObject@btCollisionObject@@QBE_NXZ ; btCollisionObject::isStaticOrKinematicObject
PUBLIC	??0btSoftClusterCollisionShape@@QAE@PBUCluster@btSoftBody@@@Z ; btSoftClusterCollisionShape::btSoftClusterCollisionShape
PUBLIC	__$ArrayPad$
EXTRN	?SignedDistance@btGjkEpaSolver2@@SA_NPBVbtConvexShape@@ABVbtTransform@@01ABVbtVector3@@AAUsResults@1@@Z:PROC ; btGjkEpaSolver2::SignedDistance
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Process@CollideCL_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z
_TEXT	SEGMENT
tv186 = -552						; size = 4
$T68580 = -548						; size = 4
$T68577 = -544						; size = 4
$T68574 = -532						; size = 4
$T68573 = -528						; size = 4
$T68572 = -524						; size = 4
_pj$19918 = -520					; size = 4
_joint$19914 = -512					; size = 272
$T19909 = -224						; size = 16
_res$ = -192						; size = 80
_rshape$ = -104						; size = 4
_cshape$ = -96						; size = 80
_cluster$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_leaf$ = 8						; size = 4
?Process@CollideCL_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z PROC ; btSoftColliders::CollideCL_RS::Process, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 741
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 560				; 00000230H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-560]
	mov	ecx, 140				; 0000008cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 742
	mov	eax, DWORD PTR _leaf$[ebx]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _cluster$[ebp], ecx
; Line 743
	mov	edx, DWORD PTR _cluster$[ebp]
	push	edx
	lea	ecx, DWORD PTR _cshape$[ebp]
	call	??0btSoftClusterCollisionShape@@QAE@PBUCluster@btSoftBody@@@Z ; btSoftClusterCollisionShape::btSoftClusterCollisionShape
; Line 745
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ; btCollisionObjectWrapper::getCollisionShape
	mov	DWORD PTR _rshape$[ebp], eax
; Line 748
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	ecx, eax
	call	?isStaticOrKinematicObject@btCollisionObject@@QBE_NXZ ; btCollisionObject::isStaticOrKinematicObject
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Process@2
	mov	eax, DWORD PTR _cluster$[ebp]
	movzx	ecx, BYTE PTR [eax+396]
	test	ecx, ecx
	je	SHORT $LN5@Process@2
; Line 749
	lea	ecx, DWORD PTR _cshape$[ebp]
	call	??1btSoftClusterCollisionShape@@UAE@XZ
	jmp	$LN6@Process@2
$LN5@Process@2:
; Line 751
	lea	ecx, DWORD PTR _res$[ebp]
	call	??0sResults@btGjkEpaSolver2@@QAE@XZ
; Line 754
	fldz
	fstp	DWORD PTR $T68572[ebp]
	fldz
	fstp	DWORD PTR $T68573[ebp]
	fld1
	fstp	DWORD PTR $T68574[ebp]
	lea	edx, DWORD PTR _res$[ebp]
	push	edx
	lea	eax, DWORD PTR $T68572[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68573[ebp]
	push	ecx
	lea	edx, DWORD PTR $T68574[ebp]
	push	edx
	lea	ecx, DWORD PTR $T19909[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ; btCollisionObjectWrapper::getWorldTransform
	push	eax
	mov	ecx, DWORD PTR _rshape$[ebp]
	push	ecx
	call	?getIdentity@btTransform@@SAABV1@XZ	; btTransform::getIdentity
	push	eax
	lea	edx, DWORD PTR _cshape$[ebp]
	push	edx
	call	?SignedDistance@btGjkEpaSolver2@@SA_NPBVbtConvexShape@@ABVbtTransform@@01ABVbtVector3@@AAUsResults@1@@Z ; btGjkEpaSolver2::SignedDistance
	add	esp, 24					; 00000018H
	movzx	eax, al
	test	eax, eax
	je	$LN4@Process@2
; Line 756
	lea	ecx, DWORD PTR _joint$19914[ebp]
	call	??0CJoint@btSoftBody@@QAE@XZ
; Line 757
	lea	ecx, DWORD PTR _joint$19914[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	push	eax
	call	??0Body@btSoftBody@@QAE@PBVbtCollisionObject@@@Z ; btSoftBody::Body::Body
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	eax, DWORD PTR _cluster$[ebp]
	push	eax
	call	??0Body@btSoftBody@@QAE@PAUCluster@1@@Z	; btSoftBody::Body::Body
	lea	ecx, DWORD PTR _res$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SolveContact@ClusterBase@btSoftColliders@@QAE_NABUsResults@btGjkEpaSolver2@@UBody@btSoftBody@@U56@AAUCJoint@6@@Z ; btSoftColliders::ClusterBase::SolveContact
	movzx	edx, al
	test	edx, edx
	je	$LN1@Process@2
; Line 759
	push	16					; 00000010H
	push	272					; 00000110H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	push	eax
	push	272					; 00000110H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68577[ebp], eax
	cmp	DWORD PTR $T68577[ebp], 0
	je	SHORT $LN8@Process@2
	mov	ecx, DWORD PTR $T68577[ebp]
	call	??0CJoint@btSoftBody@@QAE@XZ
	mov	DWORD PTR tv186[ebp], eax
	jmp	SHORT $LN9@Process@2
$LN8@Process@2:
	mov	DWORD PTR tv186[ebp], 0
$LN9@Process@2:
	mov	eax, DWORD PTR tv186[ebp]
	mov	DWORD PTR _pj$19918[ebp], eax
; Line 760
	lea	ecx, DWORD PTR _joint$19914[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pj$19918[ebp]
	call	??4CJoint@btSoftBody@@QAEAAU01@ABU01@@Z
	mov	edx, DWORD PTR _pj$19918[ebp]
	mov	DWORD PTR $T68580[ebp], edx
	lea	eax, DWORD PTR $T68580[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, 872				; 00000368H
	call	?push_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::push_back
; Line 761
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	ecx, eax
	call	?isStaticOrKinematicObject@btCollisionObject@@QBE_NXZ ; btCollisionObject::isStaticOrKinematicObject
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Process@2
; Line 763
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _pj$19918[ebp]
	fld	DWORD PTR [eax+84]
	fmul	DWORD PTR [edx+368]
	mov	ecx, DWORD PTR _pj$19918[ebp]
	fstp	DWORD PTR [ecx+84]
; Line 764
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _pj$19918[ebp]
	fld	DWORD PTR [ecx+88]
	fmul	DWORD PTR [eax+380]
	mov	edx, DWORD PTR _pj$19918[ebp]
	fstp	DWORD PTR [edx+88]
; Line 766
	jmp	SHORT $LN1@Process@2
$LN2@Process@2:
; Line 768
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _pj$19918[ebp]
	fld	DWORD PTR [edx+84]
	fmul	DWORD PTR [ecx+364]
	mov	eax, DWORD PTR _pj$19918[ebp]
	fstp	DWORD PTR [eax+84]
; Line 769
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _pj$19918[ebp]
	fld	DWORD PTR [eax+88]
	fmul	DWORD PTR [edx+376]
	mov	ecx, DWORD PTR _pj$19918[ebp]
	fstp	DWORD PTR [ecx+88]
$LN1@Process@2:
; Line 772
	lea	ecx, DWORD PTR _joint$19914[ebp]
	call	??1CJoint@btSoftBody@@UAE@XZ
$LN4@Process@2:
; Line 773
	lea	ecx, DWORD PTR _cshape$[ebp]
	call	??1btSoftClusterCollisionShape@@UAE@XZ
$LN6@Process@2:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Process@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	1
$LN14@Process@2:
	DD	3
	DD	$LN13@Process@2
$LN13@Process@2:
	DD	-96					; ffffffa0H
	DD	80					; 00000050H
	DD	$LN10@Process@2
	DD	-192					; ffffff40H
	DD	80					; 00000050H
	DD	$LN11@Process@2
	DD	-512					; fffffe00H
	DD	272					; 00000110H
	DD	$LN12@Process@2
$LN12@Process@2:
	DB	106					; 0000006aH
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN11@Process@2:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN10@Process@2:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
?Process@CollideCL_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z ENDP ; btSoftColliders::CollideCL_RS::Process
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?isStaticOrKinematicObject@btCollisionObject@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isStaticOrKinematicObject@btCollisionObject@@QBE_NXZ PROC ; btCollisionObject::isStaticOrKinematicObject, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 198
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+216]
	and	eax, 3
	neg	eax
	sbb	eax, eax
	neg	eax
; Line 200
	mov	esp, ebp
	pop	ebp
	ret	0
?isStaticOrKinematicObject@btCollisionObject@@QBE_NXZ ENDP ; btCollisionObject::isStaticOrKinematicObject
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0Body@btSoftBody@@QAE@PBVbtCollisionObject@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_colObj$ = 8						; size = 4
??0Body@btSoftBody@@QAE@PBVbtCollisionObject@@@Z PROC	; btSoftBody::Body::Body, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 387
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _colObj$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 388
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	?upcast@btRigidBody@@SAPBV1@PBVbtCollisionObject@@@Z ; btRigidBody::upcast
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 389
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Body@btSoftBody@@QAE@PBVbtCollisionObject@@@Z ENDP	; btSoftBody::Body::Body
_TEXT	ENDS
PUBLIC	?setMargin@btSoftClusterCollisionShape@@UAEXM@Z	; btSoftClusterCollisionShape::setMargin
PUBLIC	??_7btSoftClusterCollisionShape@@6B@		; btSoftClusterCollisionShape::`vftable'
PUBLIC	?getAabb@btSoftClusterCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ; btSoftClusterCollisionShape::getAabb
PUBLIC	?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ ; btConvexInternalShape::getLocalScaling
PUBLIC	?calculateLocalInertia@btSoftClusterCollisionShape@@UBEXMAAVbtVector3@@@Z ; btSoftClusterCollisionShape::calculateLocalInertia
PUBLIC	?getName@btSoftClusterCollisionShape@@UBEPBDXZ	; btSoftClusterCollisionShape::getName
PUBLIC	?getMargin@btSoftClusterCollisionShape@@UBEMXZ	; btSoftClusterCollisionShape::getMargin
PUBLIC	?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ ; btConvexInternalShape::calculateSerializeBufferSize
PUBLIC	?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z ; btConvexInternalShape::serialize
PUBLIC	?localGetSupportingVertex@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z ; btSoftClusterCollisionShape::localGetSupportingVertex
PUBLIC	?localGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z ; btSoftClusterCollisionShape::localGetSupportingVertexWithoutMargin
PUBLIC	?batchedUnitVectorGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBEXPBVbtVector3@@PAV2@H@Z ; btSoftClusterCollisionShape::batchedUnitVectorGetSupportingVertexWithoutMargin
PUBLIC	?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ ; btConvexInternalShape::getNumPreferredPenetrationDirections
PUBLIC	?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z ; btConvexInternalShape::getPreferredPenetrationDirection
PUBLIC	?getShapeType@btSoftClusterCollisionShape@@UBEHXZ ; btSoftClusterCollisionShape::getShapeType
EXTRN	??0btConvexInternalShape@@IAE@XZ:PROC		; btConvexInternalShape::btConvexInternalShape
EXTRN	??_EbtSoftClusterCollisionShape@@UAEPAXI@Z:PROC	; btSoftClusterCollisionShape::`vector deleting destructor'
EXTRN	?setLocalScaling@btConvexInternalShape@@UAEXABVbtVector3@@@Z:PROC ; btConvexInternalShape::setLocalScaling
EXTRN	?project@btConvexShape@@UBEXABVbtTransform@@ABVbtVector3@@AAM2@Z:PROC ; btConvexShape::project
EXTRN	?getAabbSlow@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z:PROC ; btConvexInternalShape::getAabbSlow
;	COMDAT ??_7btSoftClusterCollisionShape@@6B@
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
CONST	SEGMENT
??_7btSoftClusterCollisionShape@@6B@ DD FLAT:??_EbtSoftClusterCollisionShape@@UAEPAXI@Z ; btSoftClusterCollisionShape::`vftable'
	DD	FLAT:?getAabb@btSoftClusterCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getBoundingSphere@btCollisionShape@@UBEXAAVbtVector3@@AAM@Z
	DD	FLAT:?getAngularMotionDisc@btCollisionShape@@UBEMXZ
	DD	FLAT:?getContactBreakingThreshold@btCollisionShape@@UBEMM@Z
	DD	FLAT:?setLocalScaling@btConvexInternalShape@@UAEXABVbtVector3@@@Z
	DD	FLAT:?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ
	DD	FLAT:?calculateLocalInertia@btSoftClusterCollisionShape@@UBEXMAAVbtVector3@@@Z
	DD	FLAT:?getName@btSoftClusterCollisionShape@@UBEPBDXZ
	DD	FLAT:?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ
	DD	FLAT:?setMargin@btSoftClusterCollisionShape@@UAEXM@Z
	DD	FLAT:?getMargin@btSoftClusterCollisionShape@@UBEMXZ
	DD	FLAT:?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ
	DD	FLAT:?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z
	DD	FLAT:?serializeSingleShape@btCollisionShape@@UBEXPAVbtSerializer@@@Z
	DD	FLAT:?localGetSupportingVertex@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z
	DD	FLAT:?localGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z
	DD	FLAT:?project@btConvexShape@@UBEXABVbtTransform@@ABVbtVector3@@AAM2@Z
	DD	FLAT:?batchedUnitVectorGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBEXPBVbtVector3@@PAV2@H@Z
	DD	FLAT:?getAabbSlow@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ
	DD	FLAT:?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z
	DD	FLAT:?getShapeType@btSoftClusterCollisionShape@@UBEHXZ
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSoftClusterCollisionShape@@QAE@PBUCluster@btSoftBody@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_cluster$ = 8						; size = 4
??0btSoftClusterCollisionShape@@QAE@PBUCluster@btSoftBody@@@Z PROC ; btSoftClusterCollisionShape::btSoftClusterCollisionShape, COMDAT
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btConvexInternalShape@@IAE@XZ	; btConvexInternalShape::btConvexInternalShape
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftClusterCollisionShape@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cluster$[ebp]
	mov	DWORD PTR [ecx+64], edx
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setMargin@btSoftClusterCollisionShape@@UAEXM@Z ; btSoftClusterCollisionShape::setMargin
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btSoftClusterCollisionShape@@QAE@PBUCluster@btSoftBody@@@Z ENDP ; btSoftClusterCollisionShape::btSoftClusterCollisionShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ PROC ; btConvexInternalShape::getLocalScaling, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconvexinternalshape.h
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 102
	mov	esp, ebp
	pop	ebp
	ret	0
?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ ENDP ; btConvexInternalShape::getLocalScaling
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ PROC ; btConvexInternalShape::getNumPreferredPenetrationDirections, COMDAT
; _this$ = ecx
; Line 124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 125
	xor	eax, eax
; Line 126
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ ENDP ; btConvexInternalShape::getNumPreferredPenetrationDirections
_TEXT	ENDS
PUBLIC	??_C@_0GF@FDAKEKK@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0GF@FDAKEKK@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0GF@FDAKEKK@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\BulletCollision/CollisionShapes/btConvexInternalShape.h:'
	DB	'%u (0)', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_penetrationVector$ = 12				; size = 4
?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z PROC ; btConvexInternalShape::getPreferredPenetrationDirection, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 132
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@getPreferr
	push	132					; 00000084H
	push	OFFSET ??_C@_0GF@FDAKEKK@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@getPreferr:
; Line 133
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z ENDP ; btConvexInternalShape::getPreferredPenetrationDirection
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ PROC ; btConvexInternalShape::calculateSerializeBufferSize, COMDAT
; _this$ = ecx
; Line 161
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 162
	mov	eax, 52					; 00000034H
; Line 163
	mov	esp, ebp
	pop	ebp
	ret	0
?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ ENDP ; btConvexInternalShape::calculateSerializeBufferSize
_TEXT	ENDS
PUBLIC	??_C@_0BK@ILJDJEOD@btConvexInternalShapeData?$AA@ ; `string'
;	COMDAT ??_C@_0BK@ILJDJEOD@btConvexInternalShapeData?$AA@
CONST	SEGMENT
??_C@_0BK@ILJDJEOD@btConvexInternalShapeData?$AA@ DB 'btConvexInternalSha'
	DB	'peData', 00H				; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z
_TEXT	SEGMENT
_shapeData$ = -8					; size = 4
_this$ = -4						; size = 4
_dataBuffer$ = 8					; size = 4
_serializer$ = 12					; size = 4
?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z PROC ; btConvexInternalShape::serialize, COMDAT
; _this$ = ecx
; Line 167
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 168
	mov	eax, DWORD PTR _dataBuffer$[ebp]
	mov	DWORD PTR _shapeData$[ebp], eax
; Line 169
	mov	ecx, DWORD PTR _serializer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _shapeData$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@btCollisionShape@@UBEPBDPAXPAVbtSerializer@@@Z ; btCollisionShape::serialize
; Line 171
	mov	eax, DWORD PTR _shapeData$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 172
	mov	ecx, DWORD PTR _shapeData$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 173
	mov	edx, DWORD PTR _shapeData$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	fstp	DWORD PTR [edx+44]
; Line 175
	mov	eax, OFFSET ??_C@_0BK@ILJDJEOD@btConvexInternalShapeData?$AA@
; Line 176
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z ENDP ; btConvexInternalShape::serialize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?localGetSupportingVertex@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z
_TEXT	SEGMENT
_k$19231 = -28						; size = 4
_ni$19227 = -24						; size = 4
_i$19226 = -20						; size = 4
_j$ = -16						; size = 4
_d$ = -12						; size = 4
_n$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vec$ = 12						; size = 4
?localGetSupportingVertex@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z PROC ; btSoftClusterCollisionShape::localGetSupportingVertex, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 127
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 128
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEABQAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	DWORD PTR _n$[ebp], eax
; Line 129
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _vec$[ebp]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _d$[ebp]
; Line 130
	mov	DWORD PTR _j$[ebp], 0
; Line 131
	mov	DWORD PTR _i$19226[ebp], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+64]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	mov	DWORD PTR _ni$19227[ebp], eax
	jmp	SHORT $LN4@localGetSu
$LN3@localGetSu:
	mov	edx, DWORD PTR _i$19226[ebp]
	add	edx, 1
	mov	DWORD PTR _i$19226[ebp], edx
$LN4@localGetSu:
	mov	eax, DWORD PTR _i$19226[ebp]
	cmp	eax, DWORD PTR _ni$19227[ebp]
	jge	SHORT $LN2@localGetSu
; Line 133
	mov	ecx, DWORD PTR _i$19226[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _vec$[ebp]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _k$19231[ebp]
; Line 134
	fld	DWORD PTR _d$[ebp]
	fcomp	DWORD PTR _k$19231[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@localGetSu
	fld	DWORD PTR _k$19231[ebp]
	fstp	DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _i$19226[ebp]
	mov	DWORD PTR _j$[ebp], edx
$LN1@localGetSu:
; Line 135
	jmp	SHORT $LN3@localGetSu
$LN2@localGetSu:
; Line 136
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 137
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?localGetSupportingVertex@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z ENDP ; btSoftClusterCollisionShape::localGetSupportingVertex
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?localGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_vec$ = 12						; size = 4
?localGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z PROC ; btSoftClusterCollisionShape::localGetSupportingVertexWithoutMargin, COMDAT
; _this$ = ecx
; Line 139
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 140
	mov	esi, esp
	mov	eax, DWORD PTR _vec$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 141
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?localGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBE?AVbtVector3@@ABV2@@Z ENDP ; btSoftClusterCollisionShape::localGetSupportingVertexWithoutMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?batchedUnitVectorGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBEXPBVbtVector3@@PAV2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_vectors$ = 8						; size = 4
_supportVerticesOut$ = 12				; size = 4
_numVectors$ = 16					; size = 4
?batchedUnitVectorGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBEXPBVbtVector3@@PAV2@H@Z PROC ; btSoftClusterCollisionShape::batchedUnitVectorGetSupportingVertexWithoutMargin, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?batchedUnitVectorGetSupportingVertexWithoutMargin@btSoftClusterCollisionShape@@UBEXPBVbtVector3@@PAV2@H@Z ENDP ; btSoftClusterCollisionShape::batchedUnitVectorGetSupportingVertexWithoutMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?calculateLocalInertia@btSoftClusterCollisionShape@@UBEXMAAVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mass$ = 8						; size = 4
_inertia$ = 12						; size = 4
?calculateLocalInertia@btSoftClusterCollisionShape@@UBEXMAAVbtVector3@@@Z PROC ; btSoftClusterCollisionShape::calculateLocalInertia, COMDAT
; _this$ = ecx
; Line 148
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?calculateLocalInertia@btSoftClusterCollisionShape@@UBEXMAAVbtVector3@@@Z ENDP ; btSoftClusterCollisionShape::calculateLocalInertia
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAabb@btSoftClusterCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_aabbMin$ = 12						; size = 4
_aabbMax$ = 16						; size = 4
?getAabb@btSoftClusterCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z PROC ; btSoftClusterCollisionShape::getAabb, COMDAT
; _this$ = ecx
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getAabb@btSoftClusterCollisionShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ENDP ; btSoftClusterCollisionShape::getAabb
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getShapeType@btSoftClusterCollisionShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getShapeType@btSoftClusterCollisionShape@@UBEHXZ PROC	; btSoftClusterCollisionShape::getShapeType, COMDAT
; _this$ = ecx
; Line 153
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 32					; 00000020H
	mov	esp, ebp
	pop	ebp
	ret	0
?getShapeType@btSoftClusterCollisionShape@@UBEHXZ ENDP	; btSoftClusterCollisionShape::getShapeType
_TEXT	ENDS
PUBLIC	??_C@_0M@ILJPCFIM@SOFTCLUSTER?$AA@		; `string'
;	COMDAT ??_C@_0M@ILJPCFIM@SOFTCLUSTER?$AA@
CONST	SEGMENT
??_C@_0M@ILJPCFIM@SOFTCLUSTER?$AA@ DB 'SOFTCLUSTER', 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?getName@btSoftClusterCollisionShape@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@btSoftClusterCollisionShape@@UBEPBDXZ PROC	; btSoftClusterCollisionShape::getName, COMDAT
; _this$ = ecx
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_0M@ILJPCFIM@SOFTCLUSTER?$AA@
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@btSoftClusterCollisionShape@@UBEPBDXZ ENDP	; btSoftClusterCollisionShape::getName
_TEXT	ENDS
PUBLIC	?setMargin@btConvexInternalShape@@UAEXM@Z	; btConvexInternalShape::setMargin
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setMargin@btSoftClusterCollisionShape@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_margin$ = 8						; size = 4
?setMargin@btSoftClusterCollisionShape@@UAEXM@Z PROC	; btSoftClusterCollisionShape::setMargin, COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 160
	push	ecx
	fld	DWORD PTR _margin$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setMargin@btConvexInternalShape@@UAEXM@Z ; btConvexInternalShape::setMargin
; Line 161
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setMargin@btSoftClusterCollisionShape@@UAEXM@Z ENDP	; btSoftClusterCollisionShape::setMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setMargin@btConvexInternalShape@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_margin$ = 8						; size = 4
?setMargin@btConvexInternalShape@@UAEXM@Z PROC		; btConvexInternalShape::setMargin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconvexinternalshape.h
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _margin$[ebp]
	fstp	DWORD PTR [eax+48]
; Line 112
	mov	esp, ebp
	pop	ebp
	ret	4
?setMargin@btConvexInternalShape@@UAEXM@Z ENDP		; btConvexInternalShape::setMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getMargin@btSoftClusterCollisionShape@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMargin@btSoftClusterCollisionShape@@UBEMXZ PROC	; btSoftClusterCollisionShape::getMargin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 163
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 164
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 165
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getMargin@btSoftClusterCollisionShape@@UBEMXZ ENDP	; btSoftClusterCollisionShape::getMargin
_TEXT	ENDS
PUBLIC	??3btConvexInternalShape@@SAXPAX@Z		; btConvexInternalShape::operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtSoftClusterCollisionShape@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtSoftClusterCollisionShape@@UAEPAXI@Z PROC		; btSoftClusterCollisionShape::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSoftClusterCollisionShape@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3btConvexInternalShape@@SAXPAX@Z	; btConvexInternalShape::operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtSoftClusterCollisionShape@@UAEPAXI@Z ENDP		; btSoftClusterCollisionShape::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??3btConvexInternalShape@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??3btConvexInternalShape@@SAXPAX@Z PROC			; btConvexInternalShape::operator delete, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconvexinternalshape.h
; Line 47
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??3btConvexInternalShape@@SAXPAX@Z ENDP			; btConvexInternalShape::operator delete
_TEXT	ENDS
PUBLIC	??1btConvexInternalShape@@UAE@XZ		; btConvexInternalShape::~btConvexInternalShape
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btSoftClusterCollisionShape@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSoftClusterCollisionShape@@UAE@XZ PROC		; btSoftClusterCollisionShape::~btSoftClusterCollisionShape, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btConvexInternalShape@@UAE@XZ	; btConvexInternalShape::~btConvexInternalShape
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSoftClusterCollisionShape@@UAE@XZ ENDP		; btSoftClusterCollisionShape::~btSoftClusterCollisionShape
_TEXT	ENDS
PUBLIC	??_7btConvexInternalShape@@6B@			; btConvexInternalShape::`vftable'
PUBLIC	?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ; btConvexInternalShape::getAabb
PUBLIC	?getMargin@btConvexInternalShape@@UBEMXZ	; btConvexInternalShape::getMargin
EXTRN	??1btConvexShape@@UAE@XZ:PROC			; btConvexShape::~btConvexShape
EXTRN	??_EbtConvexInternalShape@@UAEPAXI@Z:PROC	; btConvexInternalShape::`vector deleting destructor'
EXTRN	?localGetSupportingVertex@btConvexInternalShape@@UBE?AVbtVector3@@ABV2@@Z:PROC ; btConvexInternalShape::localGetSupportingVertex
;	COMDAT ??_7btConvexInternalShape@@6B@
CONST	SEGMENT
??_7btConvexInternalShape@@6B@ DD FLAT:??_EbtConvexInternalShape@@UAEPAXI@Z ; btConvexInternalShape::`vftable'
	DD	FLAT:?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getBoundingSphere@btCollisionShape@@UBEXAAVbtVector3@@AAM@Z
	DD	FLAT:?getAngularMotionDisc@btCollisionShape@@UBEMXZ
	DD	FLAT:?getContactBreakingThreshold@btCollisionShape@@UBEMM@Z
	DD	FLAT:?setLocalScaling@btConvexInternalShape@@UAEXABVbtVector3@@@Z
	DD	FLAT:?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ
	DD	FLAT:?setMargin@btConvexInternalShape@@UAEXM@Z
	DD	FLAT:?getMargin@btConvexInternalShape@@UBEMXZ
	DD	FLAT:?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ
	DD	FLAT:?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z
	DD	FLAT:?serializeSingleShape@btCollisionShape@@UBEXPAVbtSerializer@@@Z
	DD	FLAT:?localGetSupportingVertex@btConvexInternalShape@@UBE?AVbtVector3@@ABV2@@Z
	DD	FLAT:__purecall
	DD	FLAT:?project@btConvexShape@@UBEXABVbtTransform@@ABVbtVector3@@AAM2@Z
	DD	FLAT:__purecall
	DD	FLAT:?getAabbSlow@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ
	DD	FLAT:?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??1btConvexInternalShape@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btConvexInternalShape@@UAE@XZ PROC			; btConvexInternalShape::~btConvexInternalShape, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btConvexInternalShape@@6B@
; Line 52
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btConvexShape@@UAE@XZ		; btConvexShape::~btConvexShape
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btConvexInternalShape@@UAE@XZ ENDP			; btConvexInternalShape::~btConvexInternalShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_aabbMin$ = 12						; size = 4
_aabbMax$ = 16						; size = 4
?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z PROC ; btConvexInternalShape::getAabb, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	esi, esp
	mov	eax, DWORD PTR _aabbMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aabbMin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 91
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ENDP ; btConvexInternalShape::getAabb
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getMargin@btConvexInternalShape@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMargin@btConvexInternalShape@@UBEMXZ PROC		; btConvexInternalShape::getMargin, COMDAT
; _this$ = ecx
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
; Line 116
	mov	esp, ebp
	pop	ebp
	ret	0
?getMargin@btConvexInternalShape@@UBEMXZ ENDP		; btConvexInternalShape::getMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GbtConvexInternalShape@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtConvexInternalShape@@UAEPAXI@Z PROC		; btConvexInternalShape::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btConvexInternalShape@@UAE@XZ	; btConvexInternalShape::~btConvexInternalShape
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3btConvexInternalShape@@SAXPAX@Z	; btConvexInternalShape::operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtConvexInternalShape@@UAEPAXI@Z ENDP		; btConvexInternalShape::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??D@YA?AVbtVector3@@ABV0@ABVbtMatrix3x3@@@Z	; operator*
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SolveContact@ClusterBase@btSoftColliders@@QAE_NABUsResults@btGjkEpaSolver2@@UBody@btSoftBody@@U56@AAUCJoint@6@@Z
_TEXT	SEGMENT
tv231 = -388						; size = 4
$T19899 = -384						; size = 48
$T19898 = -336						; size = 16
$T19897 = -320						; size = 16
$T19896 = -304						; size = 16
_fv$19894 = -272					; size = 16
_iv$19892 = -240					; size = 16
_depth$19891 = -216					; size = 4
_rvac$19890 = -204					; size = 4
_vrel$19888 = -192					; size = 16
_vb$19886 = -160					; size = 16
_va$19884 = -128					; size = 16
_rb$19882 = -96						; size = 16
_ra$19880 = -64						; size = 16
_norm$19879 = -32					; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_res$ = 8						; size = 4
_ba$ = 12						; size = 12
_bb$ = 24						; size = 12
_joint$ = 36						; size = 4
?SolveContact@ClusterBase@btSoftColliders@@QAE_NABUsResults@btGjkEpaSolver2@@UBody@btSoftBody@@U56@AAUCJoint@6@@Z PROC ; btSoftColliders::ClusterBase::SolveContact, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 689
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 690
	mov	eax, DWORD PTR _res$[ebx]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+8]
	fcomp	DWORD PTR [eax+64]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1@SolveConta
; Line 692
	mov	edx, DWORD PTR _res$[ebx]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _norm$19879[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _norm$19879[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _norm$19879[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _norm$19879[ebp+12], ecx
; Line 693
	lea	ecx, DWORD PTR _norm$19879[ebp]
	call	?normalize@btVector3@@QAEAAV1@XZ	; btVector3::normalize
; Line 695
	lea	ecx, DWORD PTR _ba$[ebx]
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	edx, DWORD PTR _res$[ebx]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR _ra$19880[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 696
	lea	ecx, DWORD PTR _bb$[ebx]
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	ecx, DWORD PTR _res$[ebx]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	edx, DWORD PTR _rb$19882[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 697
	lea	eax, DWORD PTR _ra$19880[ebp]
	push	eax
	lea	ecx, DWORD PTR _va$19884[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ba$[ebx]
	call	?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ; btSoftBody::Body::velocity
; Line 698
	lea	edx, DWORD PTR _rb$19882[ebp]
	push	edx
	lea	eax, DWORD PTR _vb$19886[ebp]
	push	eax
	lea	ecx, DWORD PTR _bb$[ebx]
	call	?velocity@Body@btSoftBody@@QBE?AVbtVector3@@ABV3@@Z ; btSoftBody::Body::velocity
; Line 699
	lea	ecx, DWORD PTR _vb$19886[ebp]
	push	ecx
	lea	edx, DWORD PTR _va$19884[ebp]
	push	edx
	lea	eax, DWORD PTR _vrel$19888[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 700
	lea	ecx, DWORD PTR _norm$19879[ebp]
	push	ecx
	lea	edx, DWORD PTR _vrel$19888[ebp]
	push	edx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _rvac$19890[ebp]
; Line 701
	mov	eax, DWORD PTR _res$[ebx]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+64]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR _depth$19891[ebp]
; Line 704
	lea	edx, DWORD PTR _rvac$19890[ebp]
	push	edx
	lea	eax, DWORD PTR _norm$19879[ebp]
	push	eax
	lea	ecx, DWORD PTR _iv$19892[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 705
	lea	edx, DWORD PTR _iv$19892[ebp]
	push	edx
	lea	eax, DWORD PTR _vrel$19888[ebp]
	push	eax
	lea	ecx, DWORD PTR _fv$19894[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 706
	mov	edx, DWORD PTR _joint$[ebx]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _ba$[ebx]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _ba$[ebx+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _ba$[ebx+8]
	mov	DWORD PTR [edx+8], eax
; Line 707
	mov	ecx, DWORD PTR _joint$[ebx]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR _bb$[ebx]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _bb$[ebx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _bb$[ebx+8]
	mov	DWORD PTR [ecx+8], edx
; Line 708
	lea	ecx, DWORD PTR _ba$[ebx]
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	eax, DWORD PTR _ra$19880[ebp]
	push	eax
	lea	ecx, DWORD PTR $T19896[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABVbtMatrix3x3@@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _joint$[ebx]
	add	edx, 48					; 00000030H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 709
	lea	ecx, DWORD PTR _bb$[ebx]
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	ecx, DWORD PTR _rb$19882[ebp]
	push	ecx
	lea	edx, DWORD PTR $T19897[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABVbtMatrix3x3@@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _joint$[ebx]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 710
	mov	ecx, DWORD PTR _joint$[ebx]
	add	ecx, 208				; 000000d0H
	mov	edx, DWORD PTR _ra$19880[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _ra$19880[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _ra$19880[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _ra$19880[ebp+12]
	mov	DWORD PTR [ecx+12], eax
; Line 711
	mov	ecx, DWORD PTR _joint$[ebx]
	add	ecx, 224				; 000000e0H
	mov	edx, DWORD PTR _rb$19882[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _rb$19882[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _rb$19882[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _rb$19882[ebp+12]
	mov	DWORD PTR [ecx+12], eax
; Line 712
	mov	ecx, DWORD PTR _joint$[ebx]
	fld1
	fstp	DWORD PTR [ecx+80]
; Line 713
	mov	edx, DWORD PTR _joint$[ebx]
	fld1
	fstp	DWORD PTR [edx+84]
; Line 714
	mov	eax, DWORD PTR _joint$[ebx]
	mov	DWORD PTR [eax+192], 0
; Line 715
	mov	ecx, DWORD PTR _joint$[ebx]
	mov	DWORD PTR [ecx+196], 0
; Line 716
	mov	edx, DWORD PTR _joint$[ebx]
	fld1
	fstp	DWORD PTR [edx+88]
; Line 718
	lea	eax, DWORD PTR _norm$19879[ebp]
	push	eax
	lea	ecx, DWORD PTR _depth$19891[ebp]
	push	ecx
	lea	edx, DWORD PTR $T19898[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABMABV0@@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _joint$[ebx]
	add	ecx, 96					; 00000060H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 720
	mov	ecx, DWORD PTR _joint$[ebx]
	add	ecx, 240				; 000000f0H
	mov	edx, DWORD PTR _norm$19879[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _norm$19879[ebp+4]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _norm$19879[ebp+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _norm$19879[ebp+12]
	mov	DWORD PTR [ecx+12], eax
; Line 722
	mov	ecx, DWORD PTR _joint$[ebx]
	mov	BYTE PTR [ecx+176], 0
; Line 723
	lea	ecx, DWORD PTR _fv$19894[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _rvac$19890[ebp]
	fmul	DWORD PTR [edx+12]
	fmul	DWORD PTR _rvac$19890[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+12]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@SolveConta
	fld1
	fstp	DWORD PTR tv231[ebp]
	jmp	SHORT $LN5@SolveConta
$LN4@SolveConta:
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR tv231[ebp]
$LN5@SolveConta:
	mov	edx, DWORD PTR _joint$[ebx]
	fld	DWORD PTR tv231[ebp]
	fstp	DWORD PTR [edx+256]
; Line 725
	mov	eax, DWORD PTR _joint$[ebx]
	add	eax, 224				; 000000e0H
	push	eax
	lea	ecx, DWORD PTR _bb$[ebx]
	call	?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ ; btSoftBody::Body::invWorldInertia
	push	eax
	lea	ecx, DWORD PTR _bb$[ebx]
	call	?invMass@Body@btSoftBody@@QBEMXZ	; btSoftBody::Body::invMass
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _joint$[ebx]
	add	ecx, 208				; 000000d0H
	push	ecx
	lea	ecx, DWORD PTR _ba$[ebx]
	call	?invWorldInertia@Body@btSoftBody@@QBEABVbtMatrix3x3@@XZ ; btSoftBody::Body::invWorldInertia
	push	eax
	lea	ecx, DWORD PTR _ba$[ebx]
	call	?invMass@Body@btSoftBody@@QBEMXZ	; btSoftBody::Body::invMass
	push	ecx
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR $T19899[ebp]
	push	edx
	call	?ImpulseMatrix@@YA?AVbtMatrix3x3@@MABV1@ABVbtVector3@@M01@Z ; ImpulseMatrix
	add	esp, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _joint$[ebx]
	add	ecx, 128				; 00000080H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 727
	mov	al, 1
	jmp	SHORT $LN2@SolveConta
$LN1@SolveConta:
; Line 729
	xor	al, al
$LN2@SolveConta:
; Line 730
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@SolveConta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	32					; 00000020H
$LN17@SolveConta:
	DD	10					; 0000000aH
	DD	$LN16@SolveConta
$LN16@SolveConta:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN6@SolveConta
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN7@SolveConta
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN8@SolveConta
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN9@SolveConta
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN10@SolveConta
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN11@SolveConta
	DD	-204					; ffffff34H
	DD	4
	DD	$LN12@SolveConta
	DD	-216					; ffffff28H
	DD	4
	DD	$LN13@SolveConta
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN14@SolveConta
	DD	-272					; fffffef0H
	DD	16					; 00000010H
	DD	$LN15@SolveConta
$LN15@SolveConta:
	DB	102					; 00000066H
	DB	118					; 00000076H
	DB	0
$LN14@SolveConta:
	DB	105					; 00000069H
	DB	118					; 00000076H
	DB	0
$LN13@SolveConta:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN12@SolveConta:
	DB	114					; 00000072H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	0
$LN11@SolveConta:
	DB	118					; 00000076H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	0
$LN10@SolveConta:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	0
$LN9@SolveConta:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	0
$LN8@SolveConta:
	DB	114					; 00000072H
	DB	98					; 00000062H
	DB	0
$LN7@SolveConta:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
$LN6@SolveConta:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
?SolveContact@ClusterBase@btSoftColliders@@QAE_NABUsResults@btGjkEpaSolver2@@UBody@btSoftBody@@U56@AAUCJoint@6@@Z ENDP ; btSoftColliders::ClusterBase::SolveContact
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??D@YA?AVbtVector3@@ABV0@ABVbtMatrix3x3@@@Z
_TEXT	SEGMENT
$T68657 = -12						; size = 4
$T68656 = -8						; size = 4
$T68655 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_m$ = 16						; size = 4
??D@YA?AVbtVector3@@ABV0@ABVbtMatrix3x3@@@Z PROC	; operator*, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 1158
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1192
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T68655[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _m$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T68656[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	ecx, DWORD PTR _m$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T68657[ebp]
	lea	eax, DWORD PTR $T68655[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68656[ebp]
	push	ecx
	lea	edx, DWORD PTR $T68657[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1194
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABV0@ABVbtMatrix3x3@@@Z ENDP	; operator*
_TEXT	ENDS
PUBLIC	??_7CJoint@btSoftBody@@6B@			; btSoftBody::CJoint::`vftable'
PUBLIC	?Type@CJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ ; btSoftBody::CJoint::Type
EXTRN	??_ECJoint@btSoftBody@@UAEPAXI@Z:PROC		; btSoftBody::CJoint::`vector deleting destructor'
;	COMDAT ??_7CJoint@btSoftBody@@6B@
CONST	SEGMENT
??_7CJoint@btSoftBody@@6B@ DD FLAT:??_ECJoint@btSoftBody@@UAEPAXI@Z ; btSoftBody::CJoint::`vftable'
	DD	FLAT:?Prepare@CJoint@btSoftBody@@UAEXMH@Z
	DD	FLAT:?Solve@CJoint@btSoftBody@@UAEXMM@Z
	DD	FLAT:?Terminate@CJoint@btSoftBody@@UAEXM@Z
	DD	FLAT:?Type@CJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CJoint@btSoftBody@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CJoint@btSoftBody@@QAE@XZ PROC			; btSoftBody::CJoint::CJoint, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Joint@btSoftBody@@QAE@XZ		; btSoftBody::Joint::Joint
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CJoint@btSoftBody@@6B@
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CJoint@btSoftBody@@QAE@XZ ENDP			; btSoftBody::CJoint::CJoint
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Type@CJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Type@CJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ PROC	; btSoftBody::CJoint::Type, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 562
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 2
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@CJoint@btSoftBody@@UBE?AW4_@eType@Joint@2@XZ ENDP	; btSoftBody::CJoint::Type
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CJoint@btSoftBody@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CJoint@btSoftBody@@UAE@XZ PROC			; btSoftBody::CJoint::~CJoint, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Joint@btSoftBody@@UAE@XZ		; btSoftBody::Joint::~Joint
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CJoint@btSoftBody@@UAE@XZ ENDP			; btSoftBody::CJoint::~CJoint
_TEXT	ENDS
PUBLIC	??4Joint@btSoftBody@@QAEAAU01@ABU01@@Z		; btSoftBody::Joint::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CJoint@btSoftBody@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_$S3$20079 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CJoint@btSoftBody@@QAEAAU01@ABU01@@Z PROC		; btSoftBody::CJoint::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4Joint@btSoftBody@@QAEAAU01@ABU01@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	DWORD PTR [ecx+192], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+196]
	mov	DWORD PTR [ecx+196], eax
	mov	DWORD PTR _$S3$20079[ebp], 0
	jmp	SHORT $LN3@operator@38
$LN2@operator@38:
	mov	ecx, DWORD PTR _$S3$20079[ebp]
	add	ecx, 1
	mov	DWORD PTR _$S3$20079[ebp], ecx
$LN3@operator@38:
	cmp	DWORD PTR _$S3$20079[ebp], 2
	jae	SHORT $LN1@operator@38
	mov	edx, DWORD PTR _$S3$20079[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR ___that$[ebp]
	lea	ecx, DWORD PTR [eax+edx+208]
	mov	edx, DWORD PTR _$S3$20079[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [eax+edx+208]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN2@operator@38
$LN1@operator@38:
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 240				; 000000f0H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [ecx+256]
	fstp	DWORD PTR [eax+256]
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CJoint@btSoftBody@@QAEAAU01@ABU01@@Z ENDP		; btSoftBody::CJoint::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCJoint@btSoftBody@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCJoint@btSoftBody@@UAEPAXI@Z PROC			; btSoftBody::CJoint::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CJoint@btSoftBody@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@10
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@10:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCJoint@btSoftBody@@UAEPAXI@Z ENDP			; btSoftBody::CJoint::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4Joint@btSoftBody@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_$S5$20098 = -12					; size = 4
_$S4$20094 = -8						; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4Joint@btSoftBody@@QAEAAU01@ABU01@@Z PROC		; btSoftBody::Joint::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR _$S4$20094[ebp], 0
	jmp	SHORT $LN6@operator@39
$LN5@operator@39:
	mov	eax, DWORD PTR _$S4$20094[ebp]
	add	eax, 1
	mov	DWORD PTR _$S4$20094[ebp], eax
$LN6@operator@39:
	cmp	DWORD PTR _$S4$20094[ebp], 2
	jae	SHORT $LN4@operator@39
	mov	ecx, DWORD PTR _$S4$20094[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR ___that$[ebp]
	lea	eax, DWORD PTR [edx+ecx+16]
	mov	ecx, DWORD PTR _$S4$20094[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [edx+ecx+16]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	jmp	SHORT $LN5@operator@39
$LN4@operator@39:
	mov	DWORD PTR _$S5$20098[ebp], 0
	jmp	SHORT $LN3@operator@39
$LN2@operator@39:
	mov	ecx, DWORD PTR _$S5$20098[ebp]
	add	ecx, 1
	mov	DWORD PTR _$S5$20098[ebp], ecx
$LN3@operator@39:
	cmp	DWORD PTR _$S5$20098[ebp], 2
	jae	SHORT $LN1@operator@39
	mov	edx, DWORD PTR _$S5$20098[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR ___that$[ebp]
	lea	ecx, DWORD PTR [eax+edx+48]
	mov	edx, DWORD PTR _$S5$20098[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [eax+edx+48]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	jmp	SHORT $LN2@operator@39
$LN1@operator@39:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [eax+80]
	fstp	DWORD PTR [edx+80]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [edx+84]
	fstp	DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	fld	DWORD PTR [ecx+88]
	fstp	DWORD PTR [eax+88]
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 128				; 00000080H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+176]
	mov	BYTE PTR [edx+176], cl
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4Joint@btSoftBody@@QAEAAU01@ABU01@@Z ENDP		; btSoftBody::Joint::operator=
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::init
PUBLIC	??0?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAE@XZ ; btAlignedAllocator<btDbvtNode const *,16>::btAlignedAllocator<btDbvtNode const *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ PROC	; btAlignedObjectArray<btDbvtNode const *>::btAlignedObjectArray<btDbvtNode const *>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAE@XZ ; btAlignedAllocator<btDbvtNode const *,16>::btAlignedAllocator<btDbvtNode const *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ENDP	; btAlignedObjectArray<btDbvtNode const *>::btAlignedObjectArray<btDbvtNode const *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ PROC	; btAlignedObjectArray<btDbvtNode const *>::~btAlignedObjectArray<btDbvtNode const *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ENDP	; btAlignedObjectArray<btDbvtNode const *>::~btAlignedObjectArray<btDbvtNode const *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ PROC ; btAlignedObjectArray<btDbvtNode const *>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ ENDP ; btAlignedObjectArray<btDbvtNode const *>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXHH@Z ; btAlignedObjectArray<btDbvtNode const *>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ PROC ; btAlignedObjectArray<btDbvtNode const *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXHH@Z ; btAlignedObjectArray<btDbvtNode const *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ ENDP ; btAlignedObjectArray<btDbvtNode const *>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btDbvtNode const *,16>::btAlignedAllocator<btDbvtNode const *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btDbvtNode const *,16>::btAlignedAllocator<btDbvtNode const *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btDbvtNode const *>::destroy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@22
$LN2@destroy@22:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@22:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@22
; Line 99
	jmp	SHORT $LN2@destroy@22
$LN4@destroy@22:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btDbvtNode const *>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEXPAPBUbtDbvtNode@@@Z ; btAlignedAllocator<btDbvtNode const *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ PROC ; btAlignedObjectArray<btDbvtNode const *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@22
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@22
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEXPAPBUbtDbvtNode@@@Z ; btAlignedAllocator<btDbvtNode const *,16>::deallocate
$LN1@deallocate@22:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@22:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ ENDP ; btAlignedObjectArray<btDbvtNode const *>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ PROC ; btAlignedObjectArray<btDbvtNode const *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ENDP ; btAlignedObjectArray<btDbvtNode const *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEXPAPBUbtDbvtNode@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEXPAPBUbtDbvtNode@@@Z PROC ; btAlignedAllocator<btDbvtNode const *,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEXPAPBUbtDbvtNode@@@Z ENDP ; btAlignedAllocator<btDbvtNode const *,16>::deallocate
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ ; btAlignedObjectArray<btDbvt::sStkNN>::~btAlignedObjectArray<btDbvt::sStkNN>
PUBLIC	?Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z ; btSoftColliders::CollideCL_SS::Process
PUBLIC	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
PUBLIC	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
PUBLIC	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z	; btDbvt::sStkNN::sStkNN
PUBLIC	?resize@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXHABUsStkNN@btDbvt@@@Z ; btAlignedObjectArray<btDbvt::sStkNN>::resize
PUBLIC	??0sStkNN@btDbvt@@QAE@XZ			; btDbvt::sStkNN::sStkNN
PUBLIC	??0?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ ; btAlignedObjectArray<btDbvt::sStkNN>::btAlignedObjectArray<btDbvt::sStkNN>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$collideTT@UCollideCL_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideCL_SS@btSoftColliders@@@Z
_TEXT	SEGMENT
tv290 = -212						; size = 4
tv278 = -208						; size = 4
tv262 = -204						; size = 4
tv250 = -200						; size = 4
tv236 = -196						; size = 4
tv222 = -192						; size = 4
tv208 = -188						; size = 4
tv194 = -184						; size = 4
tv167 = -180						; size = 4
tv153 = -176						; size = 4
tv139 = -172						; size = 4
$T68703 = -168						; size = 8
$T68702 = -160						; size = 8
$T68701 = -152						; size = 8
$T68700 = -144						; size = 8
$T68699 = -136						; size = 8
$T68698 = -128						; size = 8
$T68697 = -120						; size = 8
$T68696 = -112						; size = 8
$T68695 = -104						; size = 8
$T68694 = -96						; size = 8
$T68693 = -88						; size = 8
$T68692 = -80						; size = 8
$T68691 = -72						; size = 8
$T68690 = -64						; size = 8
_p$61818 = -52						; size = 8
_stkStack$61811 = -36					; size = 20
_treshold$61809 = -12					; size = 4
_depth$61808 = -8					; size = 4
_this$ = -4						; size = 4
_root0$ = 8						; size = 4
_root1$ = 12						; size = 4
_policy$ = 16						; size = 4
??$collideTT@UCollideCL_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideCL_SS@btSoftColliders@@@Z PROC ; btDbvt::collideTT<btSoftColliders::CollideCL_SS>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 727
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 729
	cmp	DWORD PTR _root0$[ebp], 0
	je	$LN16@collideTT
	cmp	DWORD PTR _root1$[ebp], 0
	je	$LN16@collideTT
; Line 731
	mov	DWORD PTR _depth$61808[ebp], 1
; Line 732
	mov	DWORD PTR _treshold$61809[ebp], 124	; 0000007cH
; Line 733
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??0?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ ; btAlignedObjectArray<btDbvt::sStkNN>::btAlignedObjectArray<btDbvt::sStkNN>
; Line 734
	lea	ecx, DWORD PTR $T68690[ebp]
	call	??0sStkNN@btDbvt@@QAE@XZ		; btDbvt::sStkNN::sStkNN
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	?resize@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXHABUsStkNN@btDbvt@@@Z ; btAlignedObjectArray<btDbvt::sStkNN>::resize
; Line 735
	mov	eax, DWORD PTR _root1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _root0$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T68691[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	esi, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	push	0
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
$LN14@collideTT:
; Line 737
	mov	edx, DWORD PTR _depth$61808[ebp]
	sub	edx, 1
	mov	DWORD PTR _depth$61808[ebp], edx
	mov	eax, DWORD PTR _depth$61808[ebp]
	push	eax
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _p$61818[ebp], ecx
	mov	DWORD PTR _p$61818[ebp+4], edx
; Line 738
	mov	eax, DWORD PTR _depth$61808[ebp]
	cmp	eax, DWORD PTR _treshold$61809[ebp]
	jle	SHORT $LN11@collideTT
; Line 740
	lea	ecx, DWORD PTR $T68692[ebp]
	call	??0sStkNN@btDbvt@@QAE@XZ		; btDbvt::sStkNN::sStkNN
	push	eax
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
	shl	eax, 1
	push	eax
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	?resize@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXHABUsStkNN@btDbvt@@@Z ; btAlignedObjectArray<btDbvt::sStkNN>::resize
; Line 741
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
	sub	eax, 4
	mov	DWORD PTR _treshold$61809[ebp], eax
$LN11@collideTT:
; Line 743
	mov	ecx, DWORD PTR _p$61818[ebp]
	cmp	ecx, DWORD PTR _p$61818[ebp+4]
	jne	$LN10@collideTT
; Line 745
	mov	ecx, DWORD PTR _p$61818[ebp]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	edx, al
	test	edx, edx
	je	$LN9@collideTT
; Line 747
	mov	eax, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR _depth$61808[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$61808[ebp], ecx
	mov	edx, DWORD PTR tv139[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$61818[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _p$61818[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	lea	ecx, DWORD PTR $T68693[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 748
	mov	eax, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv153[ebp], eax
	mov	ecx, DWORD PTR _depth$61808[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$61808[ebp], ecx
	mov	edx, DWORD PTR tv153[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$61818[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$61818[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR $T68694[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 749
	mov	eax, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv167[ebp], eax
	mov	ecx, DWORD PTR _depth$61808[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$61808[ebp], ecx
	mov	edx, DWORD PTR tv167[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$61818[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$61818[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	lea	ecx, DWORD PTR $T68695[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
$LN9@collideTT:
; Line 751
	jmp	$LN13@collideTT
$LN10@collideTT:
; Line 752
	mov	eax, DWORD PTR _p$61818[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$61818[ebp]
	push	ecx
	call	?Intersect@@YA_NABUbtDbvtAabbMm@@0@Z	; Intersect
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN13@collideTT
; Line 754
	mov	ecx, DWORD PTR _p$61818[ebp]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	eax, al
	test	eax, eax
	je	$LN6@collideTT
; Line 756
	mov	ecx, DWORD PTR _p$61818[ebp+4]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@collideTT
; Line 758
	mov	edx, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv194[ebp], edx
	mov	eax, DWORD PTR _depth$61808[ebp]
	add	eax, 1
	mov	DWORD PTR _depth$61808[ebp], eax
	mov	ecx, DWORD PTR tv194[ebp]
	push	ecx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _p$61818[ebp+4]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _p$61818[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	lea	ecx, DWORD PTR $T68696[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 759
	mov	eax, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv208[ebp], eax
	mov	ecx, DWORD PTR _depth$61808[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$61808[ebp], ecx
	mov	edx, DWORD PTR tv208[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$61818[ebp+4]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _p$61818[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR $T68697[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 760
	mov	eax, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv222[ebp], eax
	mov	ecx, DWORD PTR _depth$61808[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$61808[ebp], ecx
	mov	edx, DWORD PTR tv222[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$61818[ebp+4]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$61818[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	lea	ecx, DWORD PTR $T68698[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 761
	mov	eax, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv236[ebp], eax
	mov	ecx, DWORD PTR _depth$61808[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$61808[ebp], ecx
	mov	edx, DWORD PTR tv236[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$61818[ebp+4]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$61818[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR $T68699[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 763
	jmp	$LN4@collideTT
$LN5@collideTT:
; Line 765
	mov	eax, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv250[ebp], eax
	mov	ecx, DWORD PTR _depth$61808[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$61808[ebp], ecx
	mov	edx, DWORD PTR tv250[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$61818[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$61818[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	lea	ecx, DWORD PTR $T68700[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 766
	mov	eax, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv262[ebp], eax
	mov	ecx, DWORD PTR _depth$61808[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$61808[ebp], ecx
	mov	edx, DWORD PTR tv262[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$61818[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$61818[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	lea	ecx, DWORD PTR $T68701[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
$LN4@collideTT:
; Line 769
	jmp	$LN13@collideTT
$LN6@collideTT:
; Line 771
	mov	ecx, DWORD PTR _p$61818[ebp+4]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	eax, al
	test	eax, eax
	je	$LN2@collideTT
; Line 773
	mov	ecx, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv278[ebp], ecx
	mov	edx, DWORD PTR _depth$61808[ebp]
	add	edx, 1
	mov	DWORD PTR _depth$61808[ebp], edx
	mov	eax, DWORD PTR tv278[ebp]
	push	eax
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _p$61818[ebp+4]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _p$61818[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68702[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 774
	mov	eax, DWORD PTR _depth$61808[ebp]
	mov	DWORD PTR tv290[ebp], eax
	mov	ecx, DWORD PTR _depth$61808[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$61808[ebp], ecx
	mov	edx, DWORD PTR tv290[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$61818[ebp+4]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$61818[ebp]
	push	edx
	lea	ecx, DWORD PTR $T68703[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 776
	jmp	SHORT $LN13@collideTT
$LN2@collideTT:
; Line 778
	mov	eax, DWORD PTR _p$61818[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$61818[ebp]
	push	ecx
	mov	ecx, DWORD PTR _policy$[ebp]
	call	?Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z ; btSoftColliders::CollideCL_SS::Process
$LN13@collideTT:
; Line 782
	cmp	DWORD PTR _depth$61808[ebp], 0
	jne	$LN14@collideTT
; Line 783
	lea	ecx, DWORD PTR _stkStack$61811[ebp]
	call	??1?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ ; btAlignedObjectArray<btDbvt::sStkNN>::~btAlignedObjectArray<btDbvt::sStkNN>
$LN16@collideTT:
; Line 784
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@collideTT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN21@collideTT:
	DD	2
	DD	$LN20@collideTT
$LN20@collideTT:
	DD	-36					; ffffffdcH
	DD	20					; 00000014H
	DD	$LN18@collideTT
	DD	-52					; ffffffccH
	DD	8
	DD	$LN19@collideTT
$LN19@collideTT:
	DB	112					; 00000070H
	DB	0
$LN18@collideTT:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
??$collideTT@UCollideCL_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideCL_SS@btSoftColliders@@@Z ENDP ; btDbvt::collideTT<btSoftColliders::CollideCL_SS>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0sStkNN@btDbvt@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0sStkNN@btDbvt@@QAE@XZ PROC				; btDbvt::sStkNN::sStkNN, COMDAT
; _this$ = ecx
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0sStkNN@btDbvt@@QAE@XZ ENDP				; btDbvt::sStkNN::sStkNN
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_na$ = 8						; size = 4
_nb$ = 12						; size = 4
??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z PROC		; btDbvt::sStkNN::sStkNN, COMDAT
; _this$ = ecx
; Line 202
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _na$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _nb$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ENDP		; btDbvt::sStkNN::sStkNN
_TEXT	ENDS
PUBLIC	?count@?BA@??Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z@4HA ; `btSoftColliders::CollideCL_SS::Process'::`16'::count
PUBLIC	??$btMax@M@@YAABMABM0@Z				; btMax<float>
PUBLIC	__$ArrayPad$
;	COMDAT ?count@?BA@??Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z@4HA
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
_BSS	SEGMENT
?count@?BA@??Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z@4HA DD 01H DUP (?) ; `btSoftColliders::CollideCL_SS::Process'::`16'::count
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z
_TEXT	SEGMENT
tv202 = -652						; size = 4
$T68720 = -648						; size = 4
$T68717 = -644						; size = 4
_pj$19962 = -632					; size = 4
_joint$19958 = -624					; size = 272
$T19956 = -336						; size = 16
_res$19955 = -304					; size = 80
_csb$19954 = -208					; size = 80
_csa$19953 = -112					; size = 80
_connected$ = -17					; size = 1
_clb$ = -16						; size = 4
_cla$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_la$ = 8						; size = 4
_lb$ = 12						; size = 4
?Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z PROC ; btSoftColliders::CollideCL_SS::Process, COMDAT
; _this$ = ecx
; Line 799
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 656				; 00000290H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-656]
	mov	ecx, 164				; 000000a4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 800
	mov	eax, DWORD PTR _la$[ebx]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _cla$[ebp], ecx
; Line 801
	mov	edx, DWORD PTR _lb$[ebx]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _clb$[ebp], eax
; Line 804
	mov	BYTE PTR _connected$[ebp], 0
; Line 805
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+24]
	jne	SHORT $LN5@Process@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, 1164				; 0000048cH
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	test	eax, eax
	je	SHORT $LN5@Process@3
; Line 807
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	mov	ecx, DWORD PTR _clb$[ebp]
	imul	eax, DWORD PTR [ecx+400]
	mov	edx, DWORD PTR _cla$[ebp]
	add	eax, DWORD PTR [edx+400]
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1164				; 0000048cH
	call	??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z ; btAlignedObjectArray<bool>::operator[]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _connected$[ebp], cl
$LN5@Process@3:
; Line 810
	movzx	edx, BYTE PTR _connected$[ebp]
	test	edx, edx
	jne	$LN4@Process@3
; Line 812
	mov	eax, DWORD PTR _cla$[ebp]
	push	eax
	lea	ecx, DWORD PTR _csa$19953[ebp]
	call	??0btSoftClusterCollisionShape@@QAE@PBUCluster@btSoftBody@@@Z ; btSoftClusterCollisionShape::btSoftClusterCollisionShape
; Line 813
	mov	ecx, DWORD PTR _clb$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _csb$19954[ebp]
	call	??0btSoftClusterCollisionShape@@QAE@PBUCluster@btSoftBody@@@Z ; btSoftClusterCollisionShape::btSoftClusterCollisionShape
; Line 814
	lea	ecx, DWORD PTR _res$19955[ebp]
	call	??0sResults@btGjkEpaSolver2@@QAE@XZ
; Line 817
	lea	edx, DWORD PTR _res$19955[ebp]
	push	edx
	mov	eax, DWORD PTR _clb$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	mov	ecx, DWORD PTR _cla$[ebp]
	add	ecx, 240				; 000000f0H
	push	ecx
	lea	edx, DWORD PTR $T19956[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	call	?getIdentity@btTransform@@SAABV1@XZ	; btTransform::getIdentity
	push	eax
	lea	eax, DWORD PTR _csb$19954[ebp]
	push	eax
	call	?getIdentity@btTransform@@SAABV1@XZ	; btTransform::getIdentity
	push	eax
	lea	ecx, DWORD PTR _csa$19953[ebp]
	push	ecx
	call	?SignedDistance@btGjkEpaSolver2@@SA_NPBVbtConvexShape@@ABVbtTransform@@01ABVbtVector3@@AAUsResults@1@@Z ; btGjkEpaSolver2::SignedDistance
	add	esp, 24					; 00000018H
	movzx	edx, al
	test	edx, edx
	je	$LN3@Process@3
; Line 819
	lea	ecx, DWORD PTR _joint$19958[ebp]
	call	??0CJoint@btSoftBody@@QAE@XZ
; Line 820
	lea	eax, DWORD PTR _joint$19958[ebp]
	push	eax
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR _clb$[ebp]
	push	edx
	call	??0Body@btSoftBody@@QAE@PAUCluster@1@@Z	; btSoftBody::Body::Body
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	eax, DWORD PTR _cla$[ebp]
	push	eax
	call	??0Body@btSoftBody@@QAE@PAUCluster@1@@Z	; btSoftBody::Body::Body
	lea	ecx, DWORD PTR _res$19955[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SolveContact@ClusterBase@btSoftColliders@@QAE_NABUsResults@btGjkEpaSolver2@@UBody@btSoftBody@@U56@AAUCJoint@6@@Z ; btSoftColliders::ClusterBase::SolveContact
	movzx	edx, al
	test	edx, edx
	je	$LN2@Process@3
; Line 822
	push	16					; 00000010H
	push	272					; 00000110H
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	push	eax
	push	272					; 00000110H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68717[ebp], eax
	cmp	DWORD PTR $T68717[ebp], 0
	je	SHORT $LN8@Process@3
	mov	ecx, DWORD PTR $T68717[ebp]
	call	??0CJoint@btSoftBody@@QAE@XZ
	mov	DWORD PTR tv202[ebp], eax
	jmp	SHORT $LN9@Process@3
$LN8@Process@3:
	mov	DWORD PTR tv202[ebp], 0
$LN9@Process@3:
	mov	eax, DWORD PTR tv202[ebp]
	mov	DWORD PTR _pj$19962[ebp], eax
; Line 823
	lea	ecx, DWORD PTR _joint$19958[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pj$19962[ebp]
	call	??4CJoint@btSoftBody@@QAEAAU01@ABU01@@Z
	mov	edx, DWORD PTR _pj$19962[ebp]
	mov	DWORD PTR $T68720[ebp], edx
	lea	eax, DWORD PTR $T68720[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+20]
	add	ecx, 872				; 00000368H
	call	?push_back@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEXABQAUJoint@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::Joint *>::push_back
; Line 824
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	add	eax, 372				; 00000174H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 372				; 00000174H
	push	edx
	call	??$btMax@M@@YAABMABM0@Z			; btMax<float>
	add	esp, 8
	mov	ecx, DWORD PTR _pj$19962[ebp]
	fld	DWORD PTR [ecx+84]
	fmul	DWORD PTR [eax]
	mov	edx, DWORD PTR _pj$19962[ebp]
	fstp	DWORD PTR [edx+84]
; Line 825
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	fld	DWORD PTR [ecx+384]
	fadd	DWORD PTR [eax+384]
	fdiv	DWORD PTR __real@40000000
	mov	ecx, DWORD PTR _pj$19962[ebp]
	fmul	DWORD PTR [ecx+88]
	mov	edx, DWORD PTR _pj$19962[ebp]
	fstp	DWORD PTR [edx+88]
$LN2@Process@3:
; Line 827
	lea	ecx, DWORD PTR _joint$19958[ebp]
	call	??1CJoint@btSoftBody@@UAE@XZ
$LN3@Process@3:
; Line 828
	lea	ecx, DWORD PTR _csb$19954[ebp]
	call	??1btSoftClusterCollisionShape@@UAE@XZ
	lea	ecx, DWORD PTR _csa$19953[ebp]
	call	??1btSoftClusterCollisionShape@@UAE@XZ
	jmp	SHORT $LN1@Process@3
$LN4@Process@3:
; Line 831
	mov	eax, DWORD PTR ?count@?BA@??Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z@4HA ; `btSoftColliders::CollideCL_SS::Process'::`16'::count
	add	eax, 1
	mov	DWORD PTR ?count@?BA@??Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z@4HA, eax ; `btSoftColliders::CollideCL_SS::Process'::`16'::count
$LN1@Process@3:
; Line 835
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Process@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	2
$LN15@Process@3:
	DD	4
	DD	$LN14@Process@3
$LN14@Process@3:
	DD	-112					; ffffff90H
	DD	80					; 00000050H
	DD	$LN10@Process@3
	DD	-208					; ffffff30H
	DD	80					; 00000050H
	DD	$LN11@Process@3
	DD	-304					; fffffed0H
	DD	80					; 00000050H
	DD	$LN12@Process@3
	DD	-624					; fffffd90H
	DD	272					; 00000110H
	DD	$LN13@Process@3
$LN13@Process@3:
	DB	106					; 0000006aH
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN12@Process@3:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN11@Process@3:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	0
$LN10@Process@3:
	DB	99					; 00000063H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	0
?Process@CollideCL_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z ENDP ; btSoftColliders::CollideCL_SS::Process
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ ; btAlignedObjectArray<btDbvt::sStkNN>::init
PUBLIC	??0?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAE@XZ ; btAlignedAllocator<btDbvt::sStkNN,16>::btAlignedAllocator<btDbvt::sStkNN,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ PROC	; btAlignedObjectArray<btDbvt::sStkNN>::btAlignedObjectArray<btDbvt::sStkNN>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAE@XZ ; btAlignedAllocator<btDbvt::sStkNN,16>::btAlignedAllocator<btDbvt::sStkNN,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ ; btAlignedObjectArray<btDbvt::sStkNN>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ ENDP	; btAlignedObjectArray<btDbvt::sStkNN>::btAlignedObjectArray<btDbvt::sStkNN>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXXZ ; btAlignedObjectArray<btDbvt::sStkNN>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ PROC	; btAlignedObjectArray<btDbvt::sStkNN>::~btAlignedObjectArray<btDbvt::sStkNN>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXXZ ; btAlignedObjectArray<btDbvt::sStkNN>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ ENDP	; btAlignedObjectArray<btDbvt::sStkNN>::~btAlignedObjectArray<btDbvt::sStkNN>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ PROC ; btAlignedObjectArray<btDbvt::sStkNN>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ ; btAlignedObjectArray<btDbvt::sStkNN>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXHH@Z ; btAlignedObjectArray<btDbvt::sStkNN>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXXZ PROC ; btAlignedObjectArray<btDbvt::sStkNN>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXHH@Z ; btAlignedObjectArray<btDbvt::sStkNN>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ ; btAlignedObjectArray<btDbvt::sStkNN>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ ; btAlignedObjectArray<btDbvt::sStkNN>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXXZ ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btDbvt::sStkNN,16>::btAlignedAllocator<btDbvt::sStkNN,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btDbvt::sStkNN,16>::btAlignedAllocator<btDbvt::sStkNN,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btDbvt::sStkNN>::destroy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@23
$LN2@destroy@23:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@23:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@23
; Line 99
	jmp	SHORT $LN2@destroy@23
$LN4@destroy@23:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEXPAUsStkNN@btDbvt@@@Z ; btAlignedAllocator<btDbvt::sStkNN,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ PROC ; btAlignedObjectArray<btDbvt::sStkNN>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@23
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@23
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEXPAUsStkNN@btDbvt@@@Z ; btAlignedAllocator<btDbvt::sStkNN,16>::deallocate
$LN1@deallocate@23:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@23:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ PROC ; btAlignedObjectArray<btDbvt::sStkNN>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEXPAUsStkNN@btDbvt@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEXPAUsStkNN@btDbvt@@@Z PROC ; btAlignedAllocator<btDbvt::sStkNN,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEXPAUsStkNN@btDbvt@@@Z ENDP ; btAlignedAllocator<btDbvt::sStkNN,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btMax@M@@YAABMABM0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T68748 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btMax@M@@YAABMABM0@Z PROC				; btMax<float>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btminmax.h
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 31
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN3@btMax
	mov	edx, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], edx
	jmp	SHORT $LN4@btMax
$LN3@btMax:
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], eax
$LN4@btMax:
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T68748[ebp], ecx
	mov	eax, DWORD PTR $T68748[ebp]
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$btMax@M@@YAABMABM0@Z ENDP				; btMax<float>
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$ZeroInitialize@UNode@btSoftBody@@@@YAXAAUNode@btSoftBody@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??$ZeroInitialize@UNode@btSoftBody@@@@YAXAAUNode@btSoftBody@@@Z PROC ; ZeroInitialize<btSoftBody::Node>, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 175
	push	ebp
	mov	ebp, esp
; Line 176
	push	128					; 00000080H
	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 177
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$ZeroInitialize@UNode@btSoftBody@@@@YAXAAUNode@btSoftBody@@@Z ENDP ; ZeroInitialize<btSoftBody::Node>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$ZeroInitialize@UMaterial@btSoftBody@@@@YAXAAUMaterial@btSoftBody@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??$ZeroInitialize@UMaterial@btSoftBody@@@@YAXAAUMaterial@btSoftBody@@@Z PROC ; ZeroInitialize<btSoftBody::Material>, COMDAT
; Line 175
	push	ebp
	mov	ebp, esp
; Line 176
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 177
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$ZeroInitialize@UMaterial@btSoftBody@@@@YAXAAUMaterial@btSoftBody@@@Z ENDP ; ZeroInitialize<btSoftBody::Material>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$ZeroInitialize@UNote@btSoftBody@@@@YAXAAUNote@btSoftBody@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??$ZeroInitialize@UNote@btSoftBody@@@@YAXAAUNote@btSoftBody@@@Z PROC ; ZeroInitialize<btSoftBody::Note>, COMDAT
; Line 175
	push	ebp
	mov	ebp, esp
; Line 176
	push	80					; 00000050H
	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 177
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$ZeroInitialize@UNote@btSoftBody@@@@YAXAAUNote@btSoftBody@@@Z ENDP ; ZeroInitialize<btSoftBody::Note>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$ZeroInitialize@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??$ZeroInitialize@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@@Z PROC ; ZeroInitialize<btSoftBody::Link>, COMDAT
; Line 175
	push	ebp
	mov	ebp, esp
; Line 176
	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 177
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$ZeroInitialize@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@@Z ENDP ; ZeroInitialize<btSoftBody::Link>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$ZeroInitialize@UFace@btSoftBody@@@@YAXAAUFace@btSoftBody@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??$ZeroInitialize@UFace@btSoftBody@@@@YAXAAUFace@btSoftBody@@@Z PROC ; ZeroInitialize<btSoftBody::Face>, COMDAT
; Line 175
	push	ebp
	mov	ebp, esp
; Line 176
	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 177
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$ZeroInitialize@UFace@btSoftBody@@@@YAXAAUFace@btSoftBody@@@Z ENDP ; ZeroInitialize<btSoftBody::Face>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$ZeroInitialize@UTetra@btSoftBody@@@@YAXAAUTetra@btSoftBody@@@Z
_TEXT	SEGMENT
_value$ = 8						; size = 4
??$ZeroInitialize@UTetra@btSoftBody@@@@YAXAAUTetra@btSoftBody@@@Z PROC ; ZeroInitialize<btSoftBody::Tetra>, COMDAT
; Line 175
	push	ebp
	mov	ebp, esp
; Line 176
	push	112					; 00000070H
	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 177
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??$ZeroInitialize@UTetra@btSoftBody@@@@YAXAAUTetra@btSoftBody@@@Z ENDP ; ZeroInitialize<btSoftBody::Tetra>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z
_TEXT	SEGMENT
_tmp$ = -80						; size = 64
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z PROC ; btSwap<btSoftBody::Link>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 536
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 537
	mov	esi, DWORD PTR _a$[ebx]
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR _tmp$[ebp]
	rep movsd
; Line 538
	mov	esi, DWORD PTR _b$[ebx]
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR _a$[ebx]
	rep movsd
; Line 539
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _tmp$[ebp]
	mov	edi, DWORD PTR _b$[ebx]
	rep movsd
; Line 540
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@btSwap
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN5@btSwap:
	DD	1
	DD	$LN4@btSwap
$LN4@btSwap:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@btSwap
$LN3@btSwap:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$btSwap@ULink@btSoftBody@@@@YAXAAULink@btSoftBody@@0@Z ENDP ; btSwap<btSoftBody::Link>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btSwap@UFace@btSoftBody@@@@YAXAAUFace@btSoftBody@@0@Z
_TEXT	SEGMENT
_tmp$ = -80						; size = 64
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btSwap@UFace@btSoftBody@@@@YAXAAUFace@btSoftBody@@0@Z PROC ; btSwap<btSoftBody::Face>, COMDAT
; Line 536
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 537
	mov	esi, DWORD PTR _a$[ebx]
	mov	ecx, 16					; 00000010H
	lea	edi, DWORD PTR _tmp$[ebp]
	rep movsd
; Line 538
	mov	esi, DWORD PTR _b$[ebx]
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR _a$[ebx]
	rep movsd
; Line 539
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _tmp$[ebp]
	mov	edi, DWORD PTR _b$[ebx]
	rep movsd
; Line 540
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@btSwap@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN5@btSwap@2:
	DD	1
	DD	$LN4@btSwap@2
$LN4@btSwap@2:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN3@btSwap@2
$LN3@btSwap@2:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
??$btSwap@UFace@btSoftBody@@@@YAXAAUFace@btSoftBody@@0@Z ENDP ; btSwap<btSoftBody::Face>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btMin@H@@YAABHABH0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T68775 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btMin@H@@YAABHABH0@Z PROC				; btMin<int>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btminmax.h
; Line 24
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 25
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN3@btMin@2
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@btMin@2
$LN3@btMin@2:
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@btMin@2:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T68775[ebp], edx
	mov	eax, DWORD PTR $T68775[ebp]
; Line 26
	mov	esp, ebp
	pop	ebp
	ret	0
??$btMin@H@@YAABHABH0@Z ENDP				; btMin<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btSwap@PAUCluster@btSoftBody@@@@YAXAAPAUCluster@btSoftBody@@0@Z
_TEXT	SEGMENT
_tmp$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btSwap@PAUCluster@btSoftBody@@@@YAXAAPAUCluster@btSoftBody@@0@Z PROC ; btSwap<btSoftBody::Cluster *>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 536
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 537
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 538
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 539
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx], eax
; Line 540
	mov	esp, ebp
	pop	ebp
	ret	0
??$btSwap@PAUCluster@btSoftBody@@@@YAXAAPAUCluster@btSoftBody@@0@Z ENDP ; btSwap<btSoftBody::Cluster *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$SameSign@M@@YA_NABM0@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??$SameSign@M@@YA_NABM0@Z PROC				; SameSign<float>, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 233
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@SameSign
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@SameSign
$LN3@SameSign:
	mov	DWORD PTR tv67[ebp], 0
$LN4@SameSign:
	mov	al, BYTE PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??$SameSign@M@@YA_NABM0@Z ENDP				; SameSign<float>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btMax@H@@YAABHABH0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T68786 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btMax@H@@YAABHABH0@Z PROC				; btMax<int>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btminmax.h
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 31
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jle	SHORT $LN3@btMax@2
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@btMax@2
$LN3@btMax@2:
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@btMax@2:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T68786[ebp], edx
	mov	eax, DWORD PTR $T68786[ebp]
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$btMax@H@@YAABHABH0@Z ENDP				; btMax<int>
_TEXT	ENDS
PUBLIC	?btRayAabb2@@YA_NABVbtVector3@@0QBIQBV1@AAMMM@Z	; btRayAabb2
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$rayTest@URayFromToCaster@btSoftBody@@@btDbvt@@SAXPBUbtDbvtNode@@ABVbtVector3@@1AAURayFromToCaster@btSoftBody@@@Z
_TEXT	SEGMENT
tv218 = -292						; size = 4
tv211 = -288						; size = 4
tv151 = -284						; size = 4
tv145 = -280						; size = 4
tv139 = -276						; size = 4
tv134 = -272						; size = 4
tv90 = -268						; size = 4
tv78 = -264						; size = 4
$T68805 = -260						; size = 4
$T68804 = -256						; size = 4
_result1$62408 = -252					; size = 4
_lambda_min$62407 = -248				; size = 4
_tmin$62406 = -240					; size = 4
_node$62405 = -232					; size = 4
_bounds$62400 = -224					; size = 32
_treshold$62398 = -184					; size = 4
_depth$62397 = -180					; size = 4
_stack$62396 = -172					; size = 20
_resultNormal$62394 = -144				; size = 16
$T62393 = -112						; size = 16
_lambda_max$62392 = -92					; size = 4
_signs$62391 = -84					; size = 12
_rayDirectionInverse$62390 = -64			; size = 16
_rayDir$62388 = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
_root$ = 8						; size = 4
_rayFrom$ = 12						; size = 4
_rayTo$ = 16						; size = 4
_policy$ = 20						; size = 4
??$rayTest@URayFromToCaster@btSoftBody@@@btDbvt@@SAXPBUbtDbvtNode@@ABVbtVector3@@1AAURayFromToCaster@btSoftBody@@@Z PROC ; btDbvt::rayTest<btSoftBody::RayFromToCaster>, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 1011
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1013
	cmp	DWORD PTR _root$[ebx], 0
	je	$LN8@rayTest@3
; Line 1015
	mov	eax, DWORD PTR _rayFrom$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rayTo$[ebx]
	push	ecx
	lea	edx, DWORD PTR _rayDir$62388[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 1016
	lea	ecx, DWORD PTR _rayDir$62388[ebp]
	call	?normalize@btVector3@@QAEAAV1@XZ	; btVector3::normalize
; Line 1019
	lea	ecx, DWORD PTR _rayDirectionInverse$62390[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 1020
	lea	ecx, DWORD PTR _rayDir$62388[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN11@rayTest@3
	fld	DWORD PTR __real@5d5e0b6b
	fstp	DWORD PTR tv78[ebp]
	jmp	SHORT $LN12@rayTest@3
$LN11@rayTest@3:
	lea	ecx, DWORD PTR _rayDir$62388[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld1
	fdiv	DWORD PTR [eax]
	fstp	DWORD PTR tv78[ebp]
$LN12@rayTest@3:
	lea	ecx, DWORD PTR _rayDirectionInverse$62390[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR tv78[ebp]
	fstp	DWORD PTR [eax]
; Line 1021
	lea	ecx, DWORD PTR _rayDir$62388[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax+4]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@rayTest@3
	fld	DWORD PTR __real@5d5e0b6b
	fstp	DWORD PTR tv90[ebp]
	jmp	SHORT $LN14@rayTest@3
$LN13@rayTest@3:
	lea	ecx, DWORD PTR _rayDir$62388[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld1
	fdiv	DWORD PTR [eax+4]
	fstp	DWORD PTR tv90[ebp]
$LN14@rayTest@3:
	lea	ecx, DWORD PTR _rayDirectionInverse$62390[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR tv90[ebp]
	fstp	DWORD PTR [eax+4]
; Line 1022
	lea	ecx, DWORD PTR _rayDir$62388[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax+8]
	fldz
	fucompp
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@rayTest@3
	fld	DWORD PTR __real@5d5e0b6b
	fstp	DWORD PTR tv134[ebp]
	jmp	SHORT $LN16@rayTest@3
$LN15@rayTest@3:
	lea	ecx, DWORD PTR _rayDir$62388[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld1
	fdiv	DWORD PTR [eax+8]
	fstp	DWORD PTR tv134[ebp]
$LN16@rayTest@3:
	lea	ecx, DWORD PTR _rayDirectionInverse$62390[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR tv134[ebp]
	fstp	DWORD PTR [eax+8]
; Line 1023
	lea	ecx, DWORD PTR _rayDirectionInverse$62390[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN17@rayTest@3
	mov	DWORD PTR tv139[ebp], 1
	jmp	SHORT $LN18@rayTest@3
$LN17@rayTest@3:
	mov	DWORD PTR tv139[ebp], 0
$LN18@rayTest@3:
	mov	eax, DWORD PTR tv139[ebp]
	mov	DWORD PTR _signs$62391[ebp], eax
	lea	ecx, DWORD PTR _rayDirectionInverse$62390[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN19@rayTest@3
	mov	DWORD PTR tv145[ebp], 1
	jmp	SHORT $LN20@rayTest@3
$LN19@rayTest@3:
	mov	DWORD PTR tv145[ebp], 0
$LN20@rayTest@3:
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR _signs$62391[ebp+4], ecx
	lea	ecx, DWORD PTR _rayDirectionInverse$62390[ebp]
	call	??BbtVector3@@QAEPAMXZ			; btVector3::operator float *
	fld	DWORD PTR [eax+8]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN21@rayTest@3
	mov	DWORD PTR tv151[ebp], 1
	jmp	SHORT $LN22@rayTest@3
$LN21@rayTest@3:
	mov	DWORD PTR tv151[ebp], 0
$LN22@rayTest@3:
	mov	edx, DWORD PTR tv151[ebp]
	mov	DWORD PTR _signs$62391[ebp+8], edx
; Line 1025
	mov	eax, DWORD PTR _rayFrom$[ebx]
	push	eax
	mov	ecx, DWORD PTR _rayTo$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T62393[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _rayDir$62388[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR _lambda_max$62392[ebp]
; Line 1027
	lea	ecx, DWORD PTR _resultNormal$62394[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 1029
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	??0?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ; btAlignedObjectArray<btDbvtNode const *>::btAlignedObjectArray<btDbvtNode const *>
; Line 1031
	mov	DWORD PTR _depth$62397[ebp], 1
; Line 1032
	mov	DWORD PTR _treshold$62398[ebp], 126	; 0000007eH
; Line 1034
	mov	DWORD PTR $T68804[ebp], 0
	lea	eax, DWORD PTR $T68804[ebp]
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	?resize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXHABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::resize
; Line 1035
	push	0
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z ; btAlignedObjectArray<btDbvtNode const *>::operator[]
	mov	ecx, DWORD PTR _root$[ebx]
	mov	DWORD PTR [eax], ecx
; Line 1036
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	2
	push	16					; 00000010H
	lea	edx, DWORD PTR _bounds$62400[ebp]
	push	edx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
$LN7@rayTest@3:
; Line 1038
	mov	eax, DWORD PTR _depth$62397[ebp]
	sub	eax, 1
	mov	DWORD PTR _depth$62397[ebp], eax
	mov	ecx, DWORD PTR _depth$62397[ebp]
	push	ecx
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z ; btAlignedObjectArray<btDbvtNode const *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _node$62405[ebp], edx
; Line 1040
	mov	ecx, DWORD PTR _node$62405[ebp]
	call	?Mins@btDbvtAabbMm@@QBEABVbtVector3@@XZ	; btDbvtAabbMm::Mins
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _bounds$62400[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _bounds$62400[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _bounds$62400[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _bounds$62400[ebp+12], edx
; Line 1041
	mov	ecx, DWORD PTR _node$62405[ebp]
	call	?Maxs@btDbvtAabbMm@@QBEABVbtVector3@@XZ	; btDbvtAabbMm::Maxs
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _bounds$62400[ebp+16], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _bounds$62400[ebp+20], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _bounds$62400[ebp+24], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _bounds$62400[ebp+28], edx
; Line 1043
	fld1
	fstp	DWORD PTR _tmin$62406[ebp]
	fldz
	fstp	DWORD PTR _lambda_min$62407[ebp]
; Line 1044
	push	ecx
	fld	DWORD PTR _lambda_max$62392[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _lambda_min$62407[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _tmin$62406[ebp]
	push	eax
	lea	ecx, DWORD PTR _bounds$62400[ebp]
	push	ecx
	lea	edx, DWORD PTR _signs$62391[ebp]
	push	edx
	lea	eax, DWORD PTR _rayDirectionInverse$62390[ebp]
	push	eax
	mov	ecx, DWORD PTR _rayFrom$[ebx]
	push	ecx
	call	?btRayAabb2@@YA_NABVbtVector3@@0QBIQBV1@AAMMM@Z ; btRayAabb2
	add	esp, 28					; 0000001cH
	movzx	edx, al
	mov	DWORD PTR _result1$62408[ebp], edx
; Line 1052
	cmp	DWORD PTR _result1$62408[ebp], 0
	je	$LN1@rayTest@3
; Line 1054
	mov	ecx, DWORD PTR _node$62405[ebp]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	eax, al
	test	eax, eax
	je	$LN3@rayTest@3
; Line 1056
	mov	ecx, DWORD PTR _depth$62397[ebp]
	cmp	ecx, DWORD PTR _treshold$62398[ebp]
	jle	SHORT $LN2@rayTest@3
; Line 1058
	mov	DWORD PTR $T68805[ebp], 0
	lea	edx, DWORD PTR $T68805[ebp]
	push	edx
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	shl	eax, 1
	push	eax
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	?resize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXHABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::resize
; Line 1059
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	sub	eax, 2
	mov	DWORD PTR _treshold$62398[ebp], eax
$LN2@rayTest@3:
; Line 1061
	mov	eax, DWORD PTR _depth$62397[ebp]
	mov	DWORD PTR tv211[ebp], eax
	mov	ecx, DWORD PTR _depth$62397[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62397[ebp], ecx
	mov	edx, DWORD PTR tv211[ebp]
	push	edx
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z ; btAlignedObjectArray<btDbvtNode const *>::operator[]
	mov	ecx, DWORD PTR _node$62405[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax], edx
; Line 1062
	mov	eax, DWORD PTR _depth$62397[ebp]
	mov	DWORD PTR tv218[ebp], eax
	mov	ecx, DWORD PTR _depth$62397[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62397[ebp], ecx
	mov	edx, DWORD PTR tv218[ebp]
	push	edx
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z ; btAlignedObjectArray<btDbvtNode const *>::operator[]
	mov	ecx, DWORD PTR _node$62405[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax], edx
; Line 1064
	jmp	SHORT $LN1@rayTest@3
$LN3@rayTest@3:
; Line 1066
	mov	eax, DWORD PTR _node$62405[ebp]
	push	eax
	mov	ecx, DWORD PTR _policy$[ebx]
	call	?Process@RayFromToCaster@btSoftBody@@QAEXPBUbtDbvtNode@@@Z ; btSoftBody::RayFromToCaster::Process
$LN1@rayTest@3:
; Line 1069
	cmp	DWORD PTR _depth$62397[ebp], 0
	jne	$LN7@rayTest@3
; Line 1071
	lea	ecx, DWORD PTR _stack$62396[ebp]
	call	??1?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ; btAlignedObjectArray<btDbvtNode const *>::~btAlignedObjectArray<btDbvtNode const *>
$LN8@rayTest@3:
; Line 1072
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@rayTest@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN31@rayTest@3:
	DD	7
	DD	$LN30@rayTest@3
$LN30@rayTest@3:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN23@rayTest@3
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN24@rayTest@3
	DD	-84					; ffffffacH
	DD	12					; 0000000cH
	DD	$LN25@rayTest@3
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN26@rayTest@3
	DD	-172					; ffffff54H
	DD	20					; 00000014H
	DD	$LN27@rayTest@3
	DD	-224					; ffffff20H
	DD	32					; 00000020H
	DD	$LN28@rayTest@3
	DD	-240					; ffffff10H
	DD	4
	DD	$LN29@rayTest@3
$LN29@rayTest@3:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN28@rayTest@3:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN27@rayTest@3:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN26@rayTest@3:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN25@rayTest@3:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN24@rayTest@3:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	0
$LN23@rayTest@3:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
??$rayTest@URayFromToCaster@btSoftBody@@@btDbvt@@SAXPBUbtDbvtNode@@ABVbtVector3@@1AAURayFromToCaster@btSoftBody@@@Z ENDP ; btDbvt::rayTest<btSoftBody::RayFromToCaster>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?btRayAabb2@@YA_NABVbtVector3@@0QBIQBV1@AAMMM@Z
_TEXT	SEGMENT
tv179 = -48						; size = 4
tv288 = -44						; size = 4
tv286 = -40						; size = 4
tv284 = -36						; size = 4
tv282 = -32						; size = 4
tv280 = -28						; size = 4
tv278 = -24						; size = 4
_tzmax$ = -20						; size = 4
_tzmin$ = -16						; size = 4
_tymax$ = -12						; size = 4
_tymin$ = -8						; size = 4
_tmax$ = -4						; size = 4
_rayFrom$ = 8						; size = 4
_rayInvDirection$ = 12					; size = 4
_raySign$ = 16						; size = 4
_bounds$ = 20						; size = 4
_tmin$ = 24						; size = 4
_lambda_min$ = 28					; size = 4
_lambda_max$ = 32					; size = 4
?btRayAabb2@@YA_NABVbtVector3@@0QBIQBV1@AAMMM@Z PROC	; btRayAabb2, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btaabbutil2.h
; Line 97
	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 99
	mov	eax, DWORD PTR _raySign$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 4
	add	ecx, DWORD PTR _bounds$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _rayFrom$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rayInvDirection$[ebp]
	fstp	DWORD PTR tv278[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR tv278[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _tmin$[ebp]
	fstp	DWORD PTR [ecx]
; Line 100
	mov	edx, DWORD PTR _raySign$[ebp]
	mov	ecx, 1
	sub	ecx, DWORD PTR [edx]
	shl	ecx, 4
	add	ecx, DWORD PTR _bounds$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _rayFrom$[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rayInvDirection$[ebp]
	fstp	DWORD PTR tv280[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR tv280[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR _tmax$[ebp]
; Line 101
	mov	eax, DWORD PTR _raySign$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	add	ecx, DWORD PTR _bounds$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _rayFrom$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rayInvDirection$[ebp]
	fstp	DWORD PTR tv282[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv282[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR _tymin$[ebp]
; Line 102
	mov	ecx, DWORD PTR _raySign$[ebp]
	mov	edx, 1
	sub	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	add	edx, DWORD PTR _bounds$[ebp]
	mov	ecx, edx
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	mov	esi, eax
	mov	ecx, DWORD PTR _rayFrom$[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rayInvDirection$[ebp]
	fstp	DWORD PTR tv284[ebp]
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	fld	DWORD PTR tv284[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR _tymax$[ebp]
; Line 104
	mov	eax, DWORD PTR _tmin$[ebp]
	fld	DWORD PTR _tymax$[ebp]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN7@btRayAabb2
	fld	DWORD PTR _tmax$[ebp]
	fcomp	DWORD PTR _tymin$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN8@btRayAabb2
$LN7@btRayAabb2:
; Line 105
	xor	al, al
	jmp	$LN9@btRayAabb2
$LN8@btRayAabb2:
; Line 107
	mov	ecx, DWORD PTR _tmin$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR _tymin$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@btRayAabb2
; Line 108
	mov	edx, DWORD PTR _tmin$[ebp]
	fld	DWORD PTR _tymin$[ebp]
	fstp	DWORD PTR [edx]
$LN6@btRayAabb2:
; Line 110
	fld	DWORD PTR _tmax$[ebp]
	fcomp	DWORD PTR _tymax$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@btRayAabb2
; Line 111
	fld	DWORD PTR _tymax$[ebp]
	fstp	DWORD PTR _tmax$[ebp]
$LN5@btRayAabb2:
; Line 113
	mov	eax, DWORD PTR _raySign$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shl	ecx, 4
	add	ecx, DWORD PTR _bounds$[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	mov	esi, eax
	mov	ecx, DWORD PTR _rayFrom$[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rayInvDirection$[ebp]
	fstp	DWORD PTR tv286[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR tv286[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR _tzmin$[ebp]
; Line 114
	mov	ecx, DWORD PTR _raySign$[ebp]
	mov	edx, 1
	sub	edx, DWORD PTR [ecx+8]
	shl	edx, 4
	add	edx, DWORD PTR _bounds$[ebp]
	mov	ecx, edx
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	mov	esi, eax
	mov	ecx, DWORD PTR _rayFrom$[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR [esi]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _rayInvDirection$[ebp]
	fstp	DWORD PTR tv288[ebp]
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	fld	DWORD PTR tv288[ebp]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR _tzmax$[ebp]
; Line 116
	mov	eax, DWORD PTR _tmin$[ebp]
	fld	DWORD PTR _tzmax$[ebp]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 5
	jnp	SHORT $LN3@btRayAabb2
	fld	DWORD PTR _tmax$[ebp]
	fcomp	DWORD PTR _tzmin$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN4@btRayAabb2
$LN3@btRayAabb2:
; Line 117
	xor	al, al
	jmp	SHORT $LN9@btRayAabb2
$LN4@btRayAabb2:
; Line 118
	mov	ecx, DWORD PTR _tmin$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR _tzmin$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN2@btRayAabb2
; Line 119
	mov	edx, DWORD PTR _tmin$[ebp]
	fld	DWORD PTR _tzmin$[ebp]
	fstp	DWORD PTR [edx]
$LN2@btRayAabb2:
; Line 120
	fld	DWORD PTR _tmax$[ebp]
	fcomp	DWORD PTR _tzmax$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@btRayAabb2
; Line 121
	fld	DWORD PTR _tzmax$[ebp]
	fstp	DWORD PTR _tmax$[ebp]
$LN1@btRayAabb2:
; Line 122
	mov	eax, DWORD PTR _tmin$[ebp]
	fld	DWORD PTR _lambda_max$[ebp]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN11@btRayAabb2
	fld	DWORD PTR _lambda_min$[ebp]
	fcomp	DWORD PTR _tmax$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@btRayAabb2
	mov	DWORD PTR tv179[ebp], 1
	jmp	SHORT $LN12@btRayAabb2
$LN11@btRayAabb2:
	mov	DWORD PTR tv179[ebp], 0
$LN12@btRayAabb2:
	mov	al, BYTE PTR tv179[ebp]
$LN9@btRayAabb2:
; Line 123
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?btRayAabb2@@YA_NABVbtVector3@@0QBIQBV1@AAMMM@Z ENDP	; btRayAabb2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$BaryEval@VbtVector3@@@@YA?AVbtVector3@@ABV0@000@Z
_TEXT	SEGMENT
$T62419 = -64						; size = 16
$T62418 = -48						; size = 16
$T62417 = -32						; size = 16
$T62416 = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_coord$ = 24						; size = 4
??$BaryEval@VbtVector3@@@@YA?AVbtVector3@@ABV0@000@Z PROC ; BaryEval<btVector3>, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 408
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 409
	mov	ecx, DWORD PTR _coord$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	eax, DWORD PTR _c$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T62419[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _coord$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	edx, DWORD PTR _b$[ebx]
	push	edx
	lea	eax, DWORD PTR $T62417[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _coord$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	mov	ecx, DWORD PTR _a$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T62416[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T62418[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 410
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
??$BaryEval@VbtVector3@@@@YA?AVbtVector3@@ABV0@000@Z ENDP ; BaryEval<btVector3>
_TEXT	ENDS
PUBLIC	?Process@CollideSDF_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z ; btSoftColliders::CollideSDF_RS::Process
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$collideTV@UCollideSDF_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideSDF_RS@btSoftColliders@@@Z
_TEXT	SEGMENT
$T68823 = -88						; size = 4
_n$62435 = -84						; size = 4
_stack$62430 = -76					; size = 20
_volume$62428 = -48					; size = 32
_this$ = -4						; size = 4
_root$ = 8						; size = 4
_vol$ = 12						; size = 4
_policy$ = 16						; size = 4
??$collideTV@UCollideSDF_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideSDF_RS@btSoftColliders@@@Z PROC ; btDbvt::collideTV<btSoftColliders::CollideSDF_RS>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 925
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 927
	cmp	DWORD PTR _root$[ebx], 0
	je	$LN8@collideTV@2
; Line 929
	mov	esi, DWORD PTR _vol$[ebx]
	mov	ecx, 8
	lea	edi, DWORD PTR _volume$62428[ebp]
	rep movsd
; Line 930
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	??0?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ; btAlignedObjectArray<btDbvtNode const *>::btAlignedObjectArray<btDbvtNode const *>
; Line 931
	mov	DWORD PTR $T68823[ebp], 0
	lea	eax, DWORD PTR $T68823[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	?resize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXHABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::resize
; Line 932
	push	64					; 00000040H
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	?reserve@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXH@Z ; btAlignedObjectArray<btDbvtNode const *>::reserve
; Line 933
	lea	ecx, DWORD PTR _root$[ebx]
	push	ecx
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::push_back
$LN6@collideTV@2:
; Line 935
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	sub	eax, 1
	push	eax
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z ; btAlignedObjectArray<btDbvtNode const *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _n$62435[ebp], edx
; Line 936
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	?pop_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::pop_back
; Line 937
	lea	eax, DWORD PTR _volume$62428[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$62435[ebp]
	push	ecx
	call	?Intersect@@YA_NABUbtDbvtAabbMm@@0@Z	; Intersect
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@collideTV@2
; Line 939
	mov	ecx, DWORD PTR _n$62435[ebp]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@collideTV@2
; Line 941
	mov	ecx, DWORD PTR _n$62435[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::push_back
; Line 942
	mov	edx, DWORD PTR _n$62435[ebp]
	add	edx, 40					; 00000028H
	push	edx
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::push_back
; Line 944
	jmp	SHORT $LN5@collideTV@2
$LN2@collideTV@2:
; Line 946
	mov	eax, DWORD PTR _n$62435[ebp]
	push	eax
	mov	ecx, DWORD PTR _policy$[ebx]
	call	?Process@CollideSDF_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z ; btSoftColliders::CollideSDF_RS::Process
$LN5@collideTV@2:
; Line 949
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	test	eax, eax
	jg	SHORT $LN6@collideTV@2
; Line 950
	lea	ecx, DWORD PTR _stack$62430[ebp]
	call	??1?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAE@XZ ; btAlignedObjectArray<btDbvtNode const *>::~btAlignedObjectArray<btDbvtNode const *>
$LN8@collideTV@2:
; Line 951
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@collideTV@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
$LN13@collideTV@2:
	DD	2
	DD	$LN12@collideTV@2
$LN12@collideTV@2:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN10@collideTV@2
	DD	-76					; ffffffb4H
	DD	20					; 00000014H
	DD	$LN11@collideTV@2
$LN11@collideTV@2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN10@collideTV@2:
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
??$collideTV@UCollideSDF_RS@btSoftColliders@@@btDbvt@@QBEXPBUbtDbvtNode@@ABUbtDbvtAabbMm@@AAUCollideSDF_RS@btSoftColliders@@@Z ENDP ; btDbvt::collideTV<btSoftColliders::CollideSDF_RS>
_TEXT	ENDS
PUBLIC	?DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z ; btSoftColliders::CollideSDF_RS::DoNode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Process@CollideSDF_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z
_TEXT	SEGMENT
_node$ = -8						; size = 4
_this$ = -4						; size = 4
_leaf$ = 8						; size = 4
?Process@CollideSDF_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z PROC ; btSoftColliders::CollideSDF_RS::Process, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 853
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 854
	mov	eax, DWORD PTR _leaf$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _node$[ebp], ecx
; Line 855
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z ; btSoftColliders::CollideSDF_RS::DoNode
; Line 856
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Process@CollideSDF_RS@btSoftColliders@@QAEXPBUbtDbvtNode@@@Z ENDP ; btSoftColliders::CollideSDF_RS::Process
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXABURContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::RContact>::push_back
PUBLIC	?iwiStatic@?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@4VbtMatrix3x3@@B ; `btSoftColliders::CollideSDF_RS::DoNode'::`8'::iwiStatic
PUBLIC	??_B?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@57 ; `btSoftColliders::CollideSDF_RS::DoNode'::`8'::`local static guard'
PUBLIC	__$ArrayPad$
;	COMDAT ?iwiStatic@?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@4VbtMatrix3x3@@B
_BSS	SEGMENT
?iwiStatic@?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@4VbtMatrix3x3@@B DB 030H DUP (?) ; `btSoftColliders::CollideSDF_RS::DoNode'::`8'::iwiStatic
_BSS	ENDS
;	COMDAT ??_B?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@57
_BSS	SEGMENT
??_B?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@57 DD 01H DUP (?) ; `btSoftColliders::CollideSDF_RS::DoNode'::`8'::`local static guard'
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z
_TEXT	SEGMENT
tv277 = -600						; size = 4
tv265 = -596						; size = 4
tv183 = -592						; size = 4
tv158 = -588						; size = 4
tv139 = -584						; size = 4
tv90 = -580						; size = 4
tv68 = -576						; size = 4
$T68855 = -572						; size = 4
$T68854 = -568						; size = 4
$T68853 = -564						; size = 4
$T68852 = -560						; size = 4
$T68849 = -556						; size = 4
$T68848 = -552						; size = 4
$T68847 = -548						; size = 4
$T68846 = -544						; size = 4
$T68845 = -540						; size = 4
$T68844 = -536						; size = 4
$T68843 = -532						; size = 4
$T68842 = -528						; size = 4
$T68841 = -524						; size = 4
$T68840 = -520						; size = 4
$T68837 = -516						; size = 4
$T20031 = -512						; size = 48
_fc$20030 = -452					; size = 4
$T20028 = -448						; size = 16
_fv$20027 = -416					; size = 16
_dn$20026 = -380					; size = 4
_vr$20024 = -368					; size = 16
_vb$20022 = -336					; size = 16
$T20017 = -304						; size = 16
$T20016 = -288						; size = 16
$T20015 = -272						; size = 16
_va$20014 = -240					; size = 16
_ra$20012 = -208					; size = 16
_iwi$20009 = -184					; size = 4
_wtr$19992 = -180					; size = 4
_ms$19990 = -176					; size = 4
_imb$19989 = -172					; size = 4
_ima$19988 = -168					; size = 4
_c$ = -160						; size = 144
_m$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_n$ = 8							; size = 4
?DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z PROC ; btSoftColliders::CollideSDF_RS::DoNode, COMDAT
; _this$ = ecx
; Line 858
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 604				; 0000025cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-604]
	mov	ecx, 151				; 00000097H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 859
	mov	eax, DWORD PTR _n$[ebx]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN7@DoNode
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+12]
	fstp	DWORD PTR tv68[ebp]
	jmp	SHORT $LN8@DoNode
$LN7@DoNode:
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+16]
	fstp	DWORD PTR tv68[ebp]
$LN8@DoNode:
	fld	DWORD PTR tv68[ebp]
	fstp	DWORD PTR _m$[ebp]
; Line 860
	lea	ecx, DWORD PTR _c$[ebp]
	call	??0RContact@btSoftBody@@QAE@XZ
; Line 863
	mov	eax, DWORD PTR _n$[ebx]
	mov	ecx, DWORD PTR [eax+108]
	shl	ecx, 31					; 0000001fH
	sar	ecx, 31					; 0000001fH
	test	ecx, ecx
	jne	$LN1@DoNode
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _m$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _n$[ebx]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?checkContact@btSoftBody@@QBE_NPBUbtCollisionObjectWrapper@@ABVbtVector3@@MAAUsCti@1@@Z ; btSoftBody::checkContact
	movzx	ecx, al
	test	ecx, ecx
	je	$LN1@DoNode
; Line 865
	mov	edx, DWORD PTR _n$[ebx]
	fld	DWORD PTR [edx+96]
	fstp	DWORD PTR _ima$19988[ebp]
; Line 866
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN9@DoNode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getInvMass@btRigidBody@@QBEMXZ		; btRigidBody::getInvMass
	fstp	DWORD PTR tv90[ebp]
	jmp	SHORT $LN10@DoNode
$LN9@DoNode:
	fldz
	fstp	DWORD PTR tv90[ebp]
$LN10@DoNode:
	fld	DWORD PTR tv90[ebp]
	fstp	DWORD PTR _imb$19989[ebp]
; Line 867
	fld	DWORD PTR _ima$19988[ebp]
	fadd	DWORD PTR _imb$19989[ebp]
	fstp	DWORD PTR _ms$19990[ebp]
; Line 868
	fldz
	fcomp	DWORD PTR _ms$19990[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@DoNode
; Line 870
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN11@DoNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	mov	DWORD PTR tv139[ebp], eax
	jmp	SHORT $LN12@DoNode
$LN11@DoNode:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	ecx, eax
	call	?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	mov	DWORD PTR tv139[ebp], eax
$LN12@DoNode:
	mov	edx, DWORD PTR tv139[ebp]
	mov	DWORD PTR $T68837[ebp], edx
	mov	eax, DWORD PTR $T68837[ebp]
	mov	DWORD PTR _wtr$19992[ebp], eax
; Line 871
	mov	ecx, DWORD PTR ??_B?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@57
	and	ecx, 1
	jne	$LN2@DoNode
	mov	edx, DWORD PTR ??_B?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@57
	or	edx, 1
	mov	DWORD PTR ??_B?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@57, edx
	fldz
	fstp	DWORD PTR $T68840[ebp]
	fldz
	fstp	DWORD PTR $T68841[ebp]
	fldz
	fstp	DWORD PTR $T68842[ebp]
	fldz
	fstp	DWORD PTR $T68843[ebp]
	fldz
	fstp	DWORD PTR $T68844[ebp]
	fldz
	fstp	DWORD PTR $T68845[ebp]
	fldz
	fstp	DWORD PTR $T68846[ebp]
	fldz
	fstp	DWORD PTR $T68847[ebp]
	fldz
	fstp	DWORD PTR $T68848[ebp]
	lea	eax, DWORD PTR $T68840[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68841[ebp]
	push	ecx
	lea	edx, DWORD PTR $T68842[ebp]
	push	edx
	lea	eax, DWORD PTR $T68843[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68844[ebp]
	push	ecx
	lea	edx, DWORD PTR $T68845[ebp]
	push	edx
	lea	eax, DWORD PTR $T68846[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68847[ebp]
	push	ecx
	lea	edx, DWORD PTR $T68848[ebp]
	push	edx
	mov	ecx, OFFSET ?iwiStatic@?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@4VbtMatrix3x3@@B ; `btSoftColliders::CollideSDF_RS::DoNode'::`8'::iwiStatic
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
$LN2@DoNode:
; Line 872
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN13@DoNode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getInvInertiaTensorWorld@btRigidBody@@QBEABVbtMatrix3x3@@XZ ; btRigidBody::getInvInertiaTensorWorld
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN14@DoNode
$LN13@DoNode:
	mov	DWORD PTR tv158[ebp], OFFSET ?iwiStatic@?7??DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z@4VbtMatrix3x3@@B ; `btSoftColliders::CollideSDF_RS::DoNode'::`8'::iwiStatic
$LN14@DoNode:
	mov	edx, DWORD PTR tv158[ebp]
	mov	DWORD PTR $T68849[ebp], edx
	mov	eax, DWORD PTR $T68849[ebp]
	mov	DWORD PTR _iwi$20009[ebp], eax
; Line 873
	mov	ecx, DWORD PTR _wtr$19992[ebp]
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	ecx, DWORD PTR _n$[ebx]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _ra$20012[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 874
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN15@DoNode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 476				; 000001dcH
	push	edx
	lea	eax, DWORD PTR _ra$20012[ebp]
	push	eax
	lea	ecx, DWORD PTR $T20015[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?getVelocityInLocalPoint@btRigidBody@@QBE?AVbtVector3@@ABV2@@Z ; btRigidBody::getVelocityInLocalPoint
	push	eax
	lea	eax, DWORD PTR $T20016[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv183[ebp], eax
	jmp	SHORT $LN16@DoNode
$LN15@DoNode:
	fldz
	fstp	DWORD PTR $T68853[ebp]
	fldz
	fstp	DWORD PTR $T68854[ebp]
	fldz
	fstp	DWORD PTR $T68855[ebp]
	lea	ecx, DWORD PTR $T68853[ebp]
	push	ecx
	lea	edx, DWORD PTR $T68854[ebp]
	push	edx
	lea	eax, DWORD PTR $T68855[ebp]
	push	eax
	lea	ecx, DWORD PTR $T20017[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	DWORD PTR tv183[ebp], eax
$LN16@DoNode:
	mov	ecx, DWORD PTR tv183[ebp]
	mov	DWORD PTR $T68852[ebp], ecx
	mov	edx, DWORD PTR $T68852[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _va$20014[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _va$20014[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _va$20014[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _va$20014[ebp+12], ecx
; Line 875
	mov	edx, DWORD PTR _n$[ebx]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _n$[ebx]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _vb$20022[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 876
	lea	edx, DWORD PTR _va$20014[ebp]
	push	edx
	lea	eax, DWORD PTR _vb$20022[ebp]
	push	eax
	lea	ecx, DWORD PTR _vr$20024[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 877
	lea	edx, DWORD PTR _c$[ebp+16]
	push	edx
	lea	eax, DWORD PTR _vr$20024[ebp]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _dn$20026[ebp]
; Line 878
	lea	ecx, DWORD PTR _dn$20026[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+16]
	push	edx
	lea	eax, DWORD PTR $T20028[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _vr$20024[ebp]
	push	ecx
	lea	edx, DWORD PTR _fv$20027[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 879
	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	ecx, eax
	call	?getFriction@btCollisionObject@@QBEMXZ	; btCollisionObject::getFriction
	fmul	DWORD PTR [esi+340]
	fstp	DWORD PTR _fc$20030[ebp]
; Line 880
	mov	edx, DWORD PTR _n$[ebx]
	mov	DWORD PTR _c$[ebp+48], edx
; Line 881
	lea	eax, DWORD PTR _ra$20012[ebp]
	push	eax
	mov	ecx, DWORD PTR _iwi$20009[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _imb$19989[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _ima$19988[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	ecx
	fld	DWORD PTR [eax+476]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T20031[ebp]
	push	ecx
	call	?ImpulseMatrix@@YA?AVbtMatrix3x3@@MMMABV1@ABVbtVector3@@@Z ; ImpulseMatrix
	add	esp, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _c$[ebp+64]
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 882
	mov	edx, DWORD PTR _ra$20012[ebp]
	mov	DWORD PTR _c$[ebp+112], edx
	mov	eax, DWORD PTR _ra$20012[ebp+4]
	mov	DWORD PTR _c$[ebp+116], eax
	mov	ecx, DWORD PTR _ra$20012[ebp+8]
	mov	DWORD PTR _c$[ebp+120], ecx
	mov	edx, DWORD PTR _ra$20012[ebp+12]
	mov	DWORD PTR _c$[ebp+124], edx
; Line 883
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR _ima$19988[ebp]
	fmul	DWORD PTR [ecx+476]
	fstp	DWORD PTR _c$[ebp+128]
; Line 884
	lea	ecx, DWORD PTR _fv$20027[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fld	DWORD PTR _dn$20026[ebp]
	fmul	DWORD PTR _fc$20030[ebp]
	fmul	DWORD PTR _dn$20026[ebp]
	fmul	DWORD PTR _fc$20030[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN17@DoNode
	fldz
	fstp	DWORD PTR tv265[ebp]
	jmp	SHORT $LN18@DoNode
$LN17@DoNode:
	fld1
	fsub	DWORD PTR _fc$20030[ebp]
	fstp	DWORD PTR tv265[ebp]
$LN18@DoNode:
	fld	DWORD PTR tv265[ebp]
	fstp	DWORD PTR _c$[ebp+132]
; Line 885
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	ecx, eax
	call	?isStaticOrKinematicObject@btCollisionObject@@QBE_NXZ ; btCollisionObject::isStaticOrKinematicObject
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@DoNode
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	fld	DWORD PTR [edx+352]
	fstp	DWORD PTR tv277[ebp]
	jmp	SHORT $LN20@DoNode
$LN19@DoNode:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	fld	DWORD PTR [ecx+348]
	fstp	DWORD PTR tv277[ebp]
$LN20@DoNode:
	fld	DWORD PTR tv277[ebp]
	fstp	DWORD PTR _c$[ebp+136]
; Line 886
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 832				; 00000340H
	call	?push_back@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXABURContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::RContact>::push_back
; Line 887
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN1@DoNode
; Line 888
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	call	?activate@btCollisionObject@@QBEX_N@Z	; btCollisionObject::activate
$LN1@DoNode:
; Line 891
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@DoNode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
$LN29@DoNode:
	DD	7
	DD	$LN28@DoNode
$LN28@DoNode:
	DD	-160					; ffffff60H
	DD	144					; 00000090H
	DD	$LN21@DoNode
	DD	-208					; ffffff30H
	DD	16					; 00000010H
	DD	$LN22@DoNode
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN23@DoNode
	DD	-336					; fffffeb0H
	DD	16					; 00000010H
	DD	$LN24@DoNode
	DD	-368					; fffffe90H
	DD	16					; 00000010H
	DD	$LN25@DoNode
	DD	-380					; fffffe84H
	DD	4
	DD	$LN26@DoNode
	DD	-416					; fffffe60H
	DD	16					; 00000010H
	DD	$LN27@DoNode
$LN27@DoNode:
	DB	102					; 00000066H
	DB	118					; 00000076H
	DB	0
$LN26@DoNode:
	DB	100					; 00000064H
	DB	110					; 0000006eH
	DB	0
$LN25@DoNode:
	DB	118					; 00000076H
	DB	114					; 00000072H
	DB	0
$LN24@DoNode:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	0
$LN23@DoNode:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	0
$LN22@DoNode:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
$LN21@DoNode:
	DB	99					; 00000063H
	DB	0
?DoNode@CollideSDF_RS@btSoftColliders@@QBEXAAUNode@btSoftBody@@@Z ENDP ; btSoftColliders::CollideSDF_RS::DoNode
_TEXT	ENDS
PUBLIC	?allocSize@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::RContact>::allocSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXABURContact@btSoftBody@@@Z
_TEXT	SEGMENT
tv87 = -16						; size = 4
$T68873 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXABURContact@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::RContact>::push_back, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@16
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::RContact>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::RContact>::reserve
$LN1@push_back@16:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 144				; 00000090H
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	push	144					; 00000090H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68873[ebp], eax
	cmp	DWORD PTR $T68873[ebp], 0
	je	SHORT $LN4@push_back@16
	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T68873[ebp]
	call	??0RContact@btSoftBody@@QAE@ABU01@@Z
	mov	DWORD PTR tv87[ebp], eax
	jmp	SHORT $LN5@push_back@16
$LN4@push_back@16:
	mov	DWORD PTR tv87[ebp], 0
$LN5@push_back@16:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEXABURContact@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::RContact>::push_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::RContact>::allocSize, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@16
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@16
$LN3@allocSize@16:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@16:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@URContact@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::RContact>::allocSize
_TEXT	ENDS
PUBLIC	?Process@CollideVF_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z ; btSoftColliders::CollideVF_SS::Process
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??$collideTT@UCollideVF_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideVF_SS@btSoftColliders@@@Z
_TEXT	SEGMENT
tv290 = -212						; size = 4
tv278 = -208						; size = 4
tv262 = -204						; size = 4
tv250 = -200						; size = 4
tv236 = -196						; size = 4
tv222 = -192						; size = 4
tv208 = -188						; size = 4
tv194 = -184						; size = 4
tv167 = -180						; size = 4
tv153 = -176						; size = 4
tv139 = -172						; size = 4
$T68895 = -168						; size = 8
$T68894 = -160						; size = 8
$T68893 = -152						; size = 8
$T68892 = -144						; size = 8
$T68891 = -136						; size = 8
$T68890 = -128						; size = 8
$T68889 = -120						; size = 8
$T68888 = -112						; size = 8
$T68887 = -104						; size = 8
$T68886 = -96						; size = 8
$T68885 = -88						; size = 8
$T68884 = -80						; size = 8
$T68883 = -72						; size = 8
$T68882 = -64						; size = 8
_p$62455 = -52						; size = 8
_stkStack$62449 = -36					; size = 20
_treshold$62447 = -12					; size = 4
_depth$62446 = -8					; size = 4
_this$ = -4						; size = 4
_root0$ = 8						; size = 4
_root1$ = 12						; size = 4
_policy$ = 16						; size = 4
??$collideTT@UCollideVF_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideVF_SS@btSoftColliders@@@Z PROC ; btDbvt::collideTT<btSoftColliders::CollideVF_SS>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
; Line 727
	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 729
	cmp	DWORD PTR _root0$[ebp], 0
	je	$LN16@collideTT@2
	cmp	DWORD PTR _root1$[ebp], 0
	je	$LN16@collideTT@2
; Line 731
	mov	DWORD PTR _depth$62446[ebp], 1
; Line 732
	mov	DWORD PTR _treshold$62447[ebp], 124	; 0000007cH
; Line 733
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??0?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ ; btAlignedObjectArray<btDbvt::sStkNN>::btAlignedObjectArray<btDbvt::sStkNN>
; Line 734
	lea	ecx, DWORD PTR $T68882[ebp]
	call	??0sStkNN@btDbvt@@QAE@XZ		; btDbvt::sStkNN::sStkNN
	push	eax
	push	128					; 00000080H
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	?resize@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXHABUsStkNN@btDbvt@@@Z ; btAlignedObjectArray<btDbvt::sStkNN>::resize
; Line 735
	mov	eax, DWORD PTR _root1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _root0$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T68883[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	esi, DWORD PTR [eax]
	mov	edi, DWORD PTR [eax+4]
	push	0
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
$LN14@collideTT@2:
; Line 737
	mov	edx, DWORD PTR _depth$62446[ebp]
	sub	edx, 1
	mov	DWORD PTR _depth$62446[ebp], edx
	mov	eax, DWORD PTR _depth$62446[ebp]
	push	eax
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _p$62455[ebp], ecx
	mov	DWORD PTR _p$62455[ebp+4], edx
; Line 738
	mov	eax, DWORD PTR _depth$62446[ebp]
	cmp	eax, DWORD PTR _treshold$62447[ebp]
	jle	SHORT $LN11@collideTT@2
; Line 740
	lea	ecx, DWORD PTR $T68884[ebp]
	call	??0sStkNN@btDbvt@@QAE@XZ		; btDbvt::sStkNN::sStkNN
	push	eax
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
	shl	eax, 1
	push	eax
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	?resize@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXHABUsStkNN@btDbvt@@@Z ; btAlignedObjectArray<btDbvt::sStkNN>::resize
; Line 741
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
	sub	eax, 4
	mov	DWORD PTR _treshold$62447[ebp], eax
$LN11@collideTT@2:
; Line 743
	mov	ecx, DWORD PTR _p$62455[ebp]
	cmp	ecx, DWORD PTR _p$62455[ebp+4]
	jne	$LN10@collideTT@2
; Line 745
	mov	ecx, DWORD PTR _p$62455[ebp]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	edx, al
	test	edx, edx
	je	$LN9@collideTT@2
; Line 747
	mov	eax, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR _depth$62446[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62446[ebp], ecx
	mov	edx, DWORD PTR tv139[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$62455[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _p$62455[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	lea	ecx, DWORD PTR $T68885[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 748
	mov	eax, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv153[ebp], eax
	mov	ecx, DWORD PTR _depth$62446[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62446[ebp], ecx
	mov	edx, DWORD PTR tv153[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$62455[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$62455[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR $T68886[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 749
	mov	eax, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv167[ebp], eax
	mov	ecx, DWORD PTR _depth$62446[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62446[ebp], ecx
	mov	edx, DWORD PTR tv167[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$62455[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$62455[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	lea	ecx, DWORD PTR $T68887[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
$LN9@collideTT@2:
; Line 751
	jmp	$LN13@collideTT@2
$LN10@collideTT@2:
; Line 752
	mov	eax, DWORD PTR _p$62455[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$62455[ebp]
	push	ecx
	call	?Intersect@@YA_NABUbtDbvtAabbMm@@0@Z	; Intersect
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	$LN13@collideTT@2
; Line 754
	mov	ecx, DWORD PTR _p$62455[ebp]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	eax, al
	test	eax, eax
	je	$LN6@collideTT@2
; Line 756
	mov	ecx, DWORD PTR _p$62455[ebp+4]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@collideTT@2
; Line 758
	mov	edx, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv194[ebp], edx
	mov	eax, DWORD PTR _depth$62446[ebp]
	add	eax, 1
	mov	DWORD PTR _depth$62446[ebp], eax
	mov	ecx, DWORD PTR tv194[ebp]
	push	ecx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _p$62455[ebp+4]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _p$62455[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	lea	ecx, DWORD PTR $T68888[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 759
	mov	eax, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv208[ebp], eax
	mov	ecx, DWORD PTR _depth$62446[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62446[ebp], ecx
	mov	edx, DWORD PTR tv208[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$62455[ebp+4]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _p$62455[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR $T68889[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 760
	mov	eax, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv222[ebp], eax
	mov	ecx, DWORD PTR _depth$62446[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62446[ebp], ecx
	mov	edx, DWORD PTR tv222[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$62455[ebp+4]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$62455[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	lea	ecx, DWORD PTR $T68890[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 761
	mov	eax, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv236[ebp], eax
	mov	ecx, DWORD PTR _depth$62446[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62446[ebp], ecx
	mov	edx, DWORD PTR tv236[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$62455[ebp+4]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$62455[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR $T68891[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 763
	jmp	$LN4@collideTT@2
$LN5@collideTT@2:
; Line 765
	mov	eax, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv250[ebp], eax
	mov	ecx, DWORD PTR _depth$62446[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62446[ebp], ecx
	mov	edx, DWORD PTR tv250[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$62455[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$62455[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	lea	ecx, DWORD PTR $T68892[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 766
	mov	eax, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv262[ebp], eax
	mov	ecx, DWORD PTR _depth$62446[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62446[ebp], ecx
	mov	edx, DWORD PTR tv262[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$62455[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$62455[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	lea	ecx, DWORD PTR $T68893[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
$LN4@collideTT@2:
; Line 769
	jmp	$LN13@collideTT@2
$LN6@collideTT@2:
; Line 771
	mov	ecx, DWORD PTR _p$62455[ebp+4]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	eax, al
	test	eax, eax
	je	$LN2@collideTT@2
; Line 773
	mov	ecx, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv278[ebp], ecx
	mov	edx, DWORD PTR _depth$62446[ebp]
	add	edx, 1
	mov	DWORD PTR _depth$62446[ebp], edx
	mov	eax, DWORD PTR tv278[ebp]
	push	eax
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _p$62455[ebp+4]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _p$62455[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68894[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 774
	mov	eax, DWORD PTR _depth$62446[ebp]
	mov	DWORD PTR tv290[ebp], eax
	mov	ecx, DWORD PTR _depth$62446[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth$62446[ebp], ecx
	mov	edx, DWORD PTR tv290[ebp]
	push	edx
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _p$62455[ebp+4]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _p$62455[ebp]
	push	edx
	lea	ecx, DWORD PTR $T68895[ebp]
	call	??0sStkNN@btDbvt@@QAE@PBUbtDbvtNode@@0@Z ; btDbvt::sStkNN::sStkNN
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], edx
; Line 776
	jmp	SHORT $LN13@collideTT@2
$LN2@collideTT@2:
; Line 778
	mov	eax, DWORD PTR _p$62455[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _p$62455[ebp]
	push	ecx
	mov	ecx, DWORD PTR _policy$[ebp]
	call	?Process@CollideVF_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z ; btSoftColliders::CollideVF_SS::Process
$LN13@collideTT@2:
; Line 782
	cmp	DWORD PTR _depth$62446[ebp], 0
	jne	$LN14@collideTT@2
; Line 783
	lea	ecx, DWORD PTR _stkStack$62449[ebp]
	call	??1?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAE@XZ ; btAlignedObjectArray<btDbvt::sStkNN>::~btAlignedObjectArray<btDbvt::sStkNN>
$LN16@collideTT@2:
; Line 784
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@collideTT@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN21@collideTT@2:
	DD	2
	DD	$LN20@collideTT@2
$LN20@collideTT@2:
	DD	-36					; ffffffdcH
	DD	20					; 00000014H
	DD	$LN18@collideTT@2
	DD	-52					; ffffffccH
	DD	8
	DD	$LN19@collideTT@2
$LN19@collideTT@2:
	DB	112					; 00000070H
	DB	0
$LN18@collideTT@2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
??$collideTT@UCollideVF_SS@btSoftColliders@@@btDbvt@@QAEXPBUbtDbvtNode@@0AAUCollideVF_SS@btSoftColliders@@@Z ENDP ; btDbvt::collideTT<btSoftColliders::CollideVF_SS>
_TEXT	ENDS
PUBLIC	?push_back@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXABUSContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::SContact>::push_back
PUBLIC	__real@7f7fffff
PUBLIC	__$ArrayPad$
;	COMDAT __real@7f7fffff
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+038
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Process@CollideVF_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z
_TEXT	SEGMENT
$T68903 = -372						; size = 4
$T20067 = -368						; size = 16
_c$20065 = -336						; size = 64
_ms$20063 = -268					; size = 4
_mb$20053 = -264					; size = 4
_ma$20052 = -260					; size = 4
$T20050 = -256						; size = 16
_w$20049 = -224						; size = 16
_n$20048 = -192						; size = 12
$T20046 = -176						; size = 16
_m$ = -148						; size = 4
$T20044 = -144						; size = 16
$T20043 = -128						; size = 16
$T20042 = -112						; size = 16
_d$ = -92						; size = 4
_p$ = -80						; size = 16
_o$ = -48						; size = 16
_face$ = -16						; size = 4
_node$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_lnode$ = 8						; size = 4
_lface$ = 12						; size = 4
?Process@CollideVF_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z PROC ; btSoftColliders::CollideVF_SS::Process, COMDAT
; _this$ = ecx
; Line 905
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-384]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 906
	mov	eax, DWORD PTR _lnode$[ebx]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _node$[ebp], ecx
; Line 907
	mov	edx, DWORD PTR _lface$[ebx]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _face$[ebp], eax
; Line 908
	mov	ecx, DWORD PTR _node$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _o$[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _o$[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _o$[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _o$[ebp+12], eax
; Line 909
	lea	ecx, DWORD PTR _p$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 910
	fld	DWORD PTR __real@7f7fffff
	fstp	DWORD PTR _d$[ebp]
; Line 914
	lea	ecx, DWORD PTR _d$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR _o$[ebp]
	push	eax
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T20044[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _o$[ebp]
	push	ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T20043[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _o$[ebp]
	push	edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T20042[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	call	?ProjectOrigin@@YAXABVbtVector3@@00AAV1@AAM@Z ; ProjectOrigin
	add	esp, 20					; 00000014H
; Line 915
	mov	eax, DWORD PTR _node$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR _o$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T20046[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fadd	ST(0), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR _m$[ebp]
; Line 916
	fld	DWORD PTR _m$[ebp]
	fmul	DWORD PTR _m$[ebp]
	fcomp	DWORD PTR _d$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1@Process@4
; Line 918
	mov	ecx, DWORD PTR _face$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _n$20048[ebp], edx
	mov	eax, DWORD PTR _face$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _n$20048[ebp+4], ecx
	mov	edx, DWORD PTR _face$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _n$20048[ebp+8], eax
; Line 919
	lea	ecx, DWORD PTR _o$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR $T20050[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$20048[ebp+8]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _n$20048[ebp+4]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _n$20048[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _w$20049[ebp]
	push	ecx
	call	?BaryCoord@@YA?AVbtVector3@@ABV1@000@Z	; BaryCoord
	add	esp, 20					; 00000014H
; Line 920
	mov	edx, DWORD PTR _node$[ebp]
	fld	DWORD PTR [edx+96]
	fstp	DWORD PTR _ma$20052[ebp]
; Line 921
	lea	eax, DWORD PTR _w$20049[ebp]
	push	eax
	mov	ecx, DWORD PTR _n$20048[ebp+8]
	add	ecx, 96					; 00000060H
	push	ecx
	mov	edx, DWORD PTR _n$20048[ebp+4]
	add	edx, 96					; 00000060H
	push	edx
	mov	eax, DWORD PTR _n$20048[ebp]
	add	eax, 96					; 00000060H
	push	eax
	call	??$BaryEval@M@@YAMABM00ABVbtVector3@@@Z	; BaryEval<float>
	add	esp, 16					; 00000010H
	fstp	DWORD PTR _mb$20053[ebp]
; Line 924
	mov	ecx, DWORD PTR _n$20048[ebp]
	fldz
	fcomp	DWORD PTR [ecx+96]
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN2@Process@4
	mov	edx, DWORD PTR _n$20048[ebp+4]
	fldz
	fcomp	DWORD PTR [edx+96]
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN2@Process@4
	mov	eax, DWORD PTR _n$20048[ebp+8]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN3@Process@4
$LN2@Process@4:
; Line 926
	fldz
	fstp	DWORD PTR _mb$20053[ebp]
$LN3@Process@4:
; Line 928
	fld	DWORD PTR _ma$20052[ebp]
	fadd	DWORD PTR _mb$20053[ebp]
	fstp	DWORD PTR _ms$20063[ebp]
; Line 929
	fldz
	fcomp	DWORD PTR _ms$20063[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@Process@4
; Line 931
	lea	ecx, DWORD PTR _c$20065[ebp]
	call	??0SContact@btSoftBody@@QAE@XZ
; Line 932
	push	ecx
	fld	DWORD PTR _d$[ebp]
	fstp	DWORD PTR [esp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
	fchs
	fstp	DWORD PTR $T68903[ebp]
	lea	ecx, DWORD PTR $T68903[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	eax, DWORD PTR $T20067[ebp]
	push	eax
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _c$20065[ebp+32], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _c$20065[ebp+36], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _c$20065[ebp+40], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _c$20065[ebp+44], edx
; Line 933
	fld	DWORD PTR _m$[ebp]
	fstp	DWORD PTR _c$20065[ebp+48]
; Line 934
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _c$20065[ebp], eax
; Line 935
	mov	ecx, DWORD PTR _face$[ebp]
	mov	DWORD PTR _c$20065[ebp+4], ecx
; Line 936
	mov	edx, DWORD PTR _w$20049[ebp]
	mov	DWORD PTR _c$20065[ebp+16], edx
	mov	eax, DWORD PTR _w$20049[ebp+4]
	mov	DWORD PTR _c$20065[ebp+20], eax
	mov	ecx, DWORD PTR _w$20049[ebp+8]
	mov	DWORD PTR _c$20065[ebp+24], ecx
	mov	edx, DWORD PTR _w$20049[ebp+12]
	mov	DWORD PTR _c$20065[ebp+28], edx
; Line 937
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 340				; 00000154H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 340				; 00000154H
	push	eax
	call	??$btMax@M@@YAABMABM0@Z			; btMax<float>
	add	esp, 8
	fld	DWORD PTR [eax]
	fstp	DWORD PTR _c$20065[ebp+52]
; Line 938
	fld	DWORD PTR _ma$20052[ebp]
	fdiv	DWORD PTR _ms$20063[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	fmul	DWORD PTR [edx+356]
	fstp	DWORD PTR _c$20065[ebp+56]
; Line 939
	fld	DWORD PTR _mb$20053[ebp]
	fdiv	DWORD PTR _ms$20063[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx+356]
	fstp	DWORD PTR _c$20065[ebp+60]
; Line 940
	lea	edx, DWORD PTR _c$20065[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 852				; 00000354H
	call	?push_back@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXABUSContact@btSoftBody@@@Z ; btAlignedObjectArray<btSoftBody::SContact>::push_back
$LN1@Process@4:
; Line 943
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Process@4
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	2
$LN14@Process@4:
	DD	6
	DD	$LN13@Process@4
$LN13@Process@4:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN7@Process@4
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN8@Process@4
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN9@Process@4
	DD	-192					; ffffff40H
	DD	12					; 0000000cH
	DD	$LN10@Process@4
	DD	-224					; ffffff20H
	DD	16					; 00000010H
	DD	$LN11@Process@4
	DD	-336					; fffffeb0H
	DD	64					; 00000040H
	DD	$LN12@Process@4
$LN12@Process@4:
	DB	99					; 00000063H
	DB	0
$LN11@Process@4:
	DB	119					; 00000077H
	DB	0
$LN10@Process@4:
	DB	110					; 0000006eH
	DB	0
$LN9@Process@4:
	DB	100					; 00000064H
	DB	0
$LN8@Process@4:
	DB	112					; 00000070H
	DB	0
$LN7@Process@4:
	DB	111					; 0000006fH
	DB	0
?Process@CollideVF_SS@btSoftColliders@@QAEXPBUbtDbvtNode@@0@Z ENDP ; btSoftColliders::CollideVF_SS::Process
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ProjectOrigin@@YAXABVbtVector3@@00AAV1@AAM@Z
_TEXT	SEGMENT
$T68916 = -324						; size = 4
$T19537 = -320						; size = 16
$T19536 = -304						; size = 16
$T19535 = -288						; size = 16
$T19534 = -272						; size = 16
$T19533 = -256						; size = 16
$T19532 = -240						; size = 16
$T19531 = -224						; size = 16
$T19530 = -208						; size = 16
$T19529 = -192						; size = 16
_p$19527 = -160						; size = 16
_k2$19525 = -132					; size = 4
_k$19524 = -124						; size = 4
_n$19521 = -112						; size = 16
_m2$ = -88						; size = 4
_$S1$ = -80						; size = 16
$T19516 = -48						; size = 16
$T19515 = -32						; size = 16
_q$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_prj$ = 20						; size = 4
_sqd$ = 24						; size = 4
?ProjectOrigin@@YAXABVbtVector3@@00AAV1@AAM@Z PROC	; ProjectOrigin, COMDAT
; Line 374
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	edi
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 84					; 00000054H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 375
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	mov	ecx, DWORD PTR _c$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19516[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	mov	ecx, DWORD PTR _b$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19515[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _$S1$[ebp]
	push	eax
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR _$S1$[ebp]
	mov	DWORD PTR _q$[ebp], ecx
; Line 376
	mov	ecx, DWORD PTR _q$[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _m2$[ebp]
; Line 377
	fld	DWORD PTR __real@34000000
	fcomp	DWORD PTR _m2$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@ProjectOri
; Line 379
	push	ecx
	fld	DWORD PTR _m2$[ebp]
	fstp	DWORD PTR [esp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
	fstp	DWORD PTR $T68916[ebp]
	lea	edx, DWORD PTR $T68916[ebp]
	push	edx
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	lea	ecx, DWORD PTR _n$19521[ebp]
	push	ecx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
; Line 380
	lea	edx, DWORD PTR _n$19521[ebp]
	push	edx
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fstp	DWORD PTR _k$19524[ebp]
; Line 381
	fld	DWORD PTR _k$19524[ebp]
	fmul	DWORD PTR _k$19524[ebp]
	fstp	DWORD PTR _k2$19525[ebp]
; Line 382
	mov	ecx, DWORD PTR _sqd$[ebx]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR _k2$19525[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN1@ProjectOri
; Line 384
	lea	edx, DWORD PTR _k$19524[ebp]
	push	edx
	lea	eax, DWORD PTR _n$19521[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$19527[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 387
	mov	edx, DWORD PTR _q$[ebp]
	push	edx
	lea	eax, DWORD PTR _p$19527[ebp]
	push	eax
	mov	ecx, DWORD PTR _b$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19530[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _p$19527[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19529[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T19531[ebp]
	push	eax
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN2@ProjectOri
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	lea	edx, DWORD PTR _p$19527[ebp]
	push	edx
	mov	eax, DWORD PTR _c$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T19533[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _p$19527[ebp]
	push	edx
	mov	eax, DWORD PTR _b$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T19532[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T19534[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN2@ProjectOri
	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p$19527[ebp]
	push	ecx
	mov	edx, DWORD PTR _a$[ebx]
	push	edx
	lea	eax, DWORD PTR $T19536[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _p$19527[ebp]
	push	ecx
	mov	edx, DWORD PTR _c$[ebx]
	push	edx
	lea	eax, DWORD PTR $T19535[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T19537[ebp]
	push	ecx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	push	eax
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fcomp	DWORD PTR __real@00000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@ProjectOri
; Line 389
	mov	edx, DWORD PTR _prj$[ebx]
	mov	eax, DWORD PTR _p$19527[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _p$19527[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _p$19527[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _p$19527[ebp+12]
	mov	DWORD PTR [edx+12], ecx
; Line 390
	mov	edx, DWORD PTR _sqd$[ebx]
	fld	DWORD PTR _k2$19525[ebp]
	fstp	DWORD PTR [edx]
; Line 392
	jmp	SHORT $LN1@ProjectOri
$LN2@ProjectOri:
; Line 394
	mov	eax, DWORD PTR _sqd$[ebx]
	push	eax
	mov	ecx, DWORD PTR _prj$[ebx]
	push	ecx
	mov	edx, DWORD PTR _b$[ebx]
	push	edx
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	call	?ProjectOrigin@@YAXABVbtVector3@@0AAV1@AAM@Z ; ProjectOrigin
	add	esp, 16					; 00000010H
; Line 395
	mov	ecx, DWORD PTR _sqd$[ebx]
	push	ecx
	mov	edx, DWORD PTR _prj$[ebx]
	push	edx
	mov	eax, DWORD PTR _c$[ebx]
	push	eax
	mov	ecx, DWORD PTR _b$[ebx]
	push	ecx
	call	?ProjectOrigin@@YAXABVbtVector3@@0AAV1@AAM@Z ; ProjectOrigin
	add	esp, 16					; 00000010H
; Line 396
	mov	edx, DWORD PTR _sqd$[ebx]
	push	edx
	mov	eax, DWORD PTR _prj$[ebx]
	push	eax
	mov	ecx, DWORD PTR _a$[ebx]
	push	ecx
	mov	edx, DWORD PTR _c$[ebx]
	push	edx
	call	?ProjectOrigin@@YAXABVbtVector3@@0AAV1@AAM@Z ; ProjectOrigin
	add	esp, 16					; 00000010H
$LN1@ProjectOri:
; Line 400
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ProjectOri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN12@ProjectOri:
	DD	4
	DD	$LN11@ProjectOri
$LN11@ProjectOri:
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN7@ProjectOri
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN8@ProjectOri
	DD	-124					; ffffff84H
	DD	4
	DD	$LN9@ProjectOri
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN10@ProjectOri
$LN10@ProjectOri:
	DB	112					; 00000070H
	DB	0
$LN9@ProjectOri:
	DB	107					; 0000006bH
	DB	0
$LN8@ProjectOri:
	DB	110					; 0000006eH
	DB	0
$LN7@ProjectOri:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	0
?ProjectOrigin@@YAXABVbtVector3@@00AAV1@AAM@Z ENDP	; ProjectOrigin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ProjectOrigin@@YAXABVbtVector3@@0AAV1@AAM@Z
_TEXT	SEGMENT
$T68927 = -128						; size = 4
$T68926 = -124						; size = 4
$T68925 = -120						; size = 4
_l2$19504 = -116					; size = 4
$T19502 = -112						; size = 16
_p$19501 = -80						; size = 16
_t$19490 = -48						; size = 4
_m2$ = -40						; size = 4
_d$ = -32						; size = 16
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_prj$ = 16						; size = 4
_sqd$ = 20						; size = 4
?ProjectOrigin@@YAXABVbtVector3@@0AAV1@AAM@Z PROC	; ProjectOrigin, COMDAT
; Line 353
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	edi
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 354
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	mov	ecx, DWORD PTR _b$[ebx]
	push	ecx
	lea	edx, DWORD PTR _d$[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 355
	lea	ecx, DWORD PTR _d$[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _m2$[ebp]
; Line 356
	fld	DWORD PTR __real@34000000
	fcomp	DWORD PTR _m2$[ebp]
	fnstsw	ax
	test	ah, 5
	jp	$LN1@ProjectOri@2
; Line 358
	fld1
	fstp	DWORD PTR $T68925[ebp]
	fldz
	fstp	DWORD PTR $T68926[ebp]
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$[ebx]
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	fchs
	fdiv	DWORD PTR _m2$[ebp]
	fstp	DWORD PTR $T68927[ebp]
	lea	edx, DWORD PTR $T68925[ebp]
	push	edx
	lea	eax, DWORD PTR $T68926[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68927[ebp]
	push	ecx
	call	??$Clamp@M@@YAMABM00@Z			; Clamp<float>
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _t$19490[ebp]
; Line 359
	lea	edx, DWORD PTR _t$19490[ebp]
	push	edx
	lea	eax, DWORD PTR _d$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T19502[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _a$[ebx]
	push	edx
	lea	eax, DWORD PTR _p$19501[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 360
	lea	ecx, DWORD PTR _p$19501[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _l2$19504[ebp]
; Line 361
	mov	ecx, DWORD PTR _sqd$[ebx]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR _l2$19504[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@ProjectOri@2
; Line 363
	mov	edx, DWORD PTR _prj$[ebx]
	mov	eax, DWORD PTR _p$19501[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _p$19501[ebp+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _p$19501[ebp+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _p$19501[ebp+12]
	mov	DWORD PTR [edx+12], ecx
; Line 364
	mov	edx, DWORD PTR _sqd$[ebx]
	fld	DWORD PTR _l2$19504[ebp]
	fstp	DWORD PTR [edx]
$LN1@ProjectOri@2:
; Line 367
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ProjectOri@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN9@ProjectOri@2:
	DD	3
	DD	$LN8@ProjectOri@2
$LN8@ProjectOri@2:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN5@ProjectOri@2
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN6@ProjectOri@2
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN7@ProjectOri@2
$LN7@ProjectOri@2:
	DB	112					; 00000070H
	DB	0
$LN6@ProjectOri@2:
	DB	116					; 00000074H
	DB	0
$LN5@ProjectOri@2:
	DB	100					; 00000064H
	DB	0
?ProjectOrigin@@YAXABVbtVector3@@0AAV1@AAM@Z ENDP	; ProjectOrigin
_TEXT	ENDS
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?BaryCoord@@YA?AVbtVector3@@ABV1@000@Z
_TEXT	SEGMENT
$T68938 = -192						; size = 4
$T68937 = -188						; size = 4
$T68936 = -184						; size = 4
_isum$ = -180						; size = 4
$T19561 = -176						; size = 16
$T19560 = -160						; size = 16
$T19559 = -144						; size = 16
$T19558 = -128						; size = 16
$T19557 = -112						; size = 16
$T19556 = -96						; size = 16
$T19555 = -80						; size = 16
$T19554 = -64						; size = 16
$T19553 = -48						; size = 16
_w$ = -20						; size = 12
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_a$ = 12						; size = 4
_b$ = 16						; size = 4
_c$ = 20						; size = 4
_p$ = 24						; size = 4
?BaryCoord@@YA?AVbtVector3@@ABV1@000@Z PROC		; BaryCoord, COMDAT
; Line 416
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 417
	mov	eax, DWORD PTR _p$[ebx]
	push	eax
	mov	ecx, DWORD PTR _b$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19554[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _p$[ebx]
	push	eax
	mov	ecx, DWORD PTR _a$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T19553[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T19555[ebp]
	push	eax
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _w$[ebp]
; Line 418
	mov	ecx, DWORD PTR _p$[ebx]
	push	ecx
	mov	edx, DWORD PTR _c$[ebx]
	push	edx
	lea	eax, DWORD PTR $T19557[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _p$[ebx]
	push	ecx
	mov	edx, DWORD PTR _b$[ebx]
	push	edx
	lea	eax, DWORD PTR $T19556[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T19558[ebp]
	push	ecx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _w$[ebp+4]
; Line 419
	mov	edx, DWORD PTR _p$[ebx]
	push	edx
	mov	eax, DWORD PTR _a$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T19560[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _p$[ebx]
	push	edx
	mov	eax, DWORD PTR _c$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T19559[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T19561[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR _w$[ebp+8]
; Line 420
	fld	DWORD PTR _w$[ebp]
	fadd	DWORD PTR _w$[ebp+4]
	fadd	DWORD PTR _w$[ebp+8]
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _isum$[ebp]
; Line 421
	fld	DWORD PTR _w$[ebp]
	fmul	DWORD PTR _isum$[ebp]
	fstp	DWORD PTR $T68936[ebp]
	fld	DWORD PTR _w$[ebp+8]
	fmul	DWORD PTR _isum$[ebp]
	fstp	DWORD PTR $T68937[ebp]
	fld	DWORD PTR _w$[ebp+4]
	fmul	DWORD PTR _isum$[ebp]
	fstp	DWORD PTR $T68938[ebp]
	lea	eax, DWORD PTR $T68936[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68937[ebp]
	push	ecx
	lea	edx, DWORD PTR $T68938[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 422
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@BaryCoord
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN5@BaryCoord:
	DD	1
	DD	$LN4@BaryCoord
$LN4@BaryCoord:
	DD	-20					; ffffffecH
	DD	12					; 0000000cH
	DD	$LN3@BaryCoord
$LN3@BaryCoord:
	DB	119					; 00000077H
	DB	0
?BaryCoord@@YA?AVbtVector3@@ABV1@000@Z ENDP		; BaryCoord
_TEXT	ENDS
PUBLIC	?allocSize@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::SContact>::allocSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXABUSContact@btSoftBody@@@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T68944 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXABUSContact@btSoftBody@@@Z PROC ; btAlignedObjectArray<btSoftBody::SContact>::push_back, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@17
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@USContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::SContact>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEHH@Z ; btAlignedObjectArray<btSoftBody::SContact>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXH@Z ; btAlignedObjectArray<btSoftBody::SContact>::reserve
$LN1@push_back@17:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 6
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+12]
	push	ecx
	push	64					; 00000040H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68944[ebp], eax
	cmp	DWORD PTR $T68944[ebp], 0
	je	SHORT $LN4@push_back@17
	mov	esi, DWORD PTR __Val$[ebp]
	mov	ecx, 16					; 00000010H
	mov	edi, DWORD PTR $T68944[ebp]
	rep movsd
	mov	eax, DWORD PTR $T68944[ebp]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@push_back@17
$LN4@push_back@17:
	mov	DWORD PTR tv85[ebp], 0
$LN5@push_back@17:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	pop	edi
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@USContact@btSoftBody@@@@QAEXABUSContact@btSoftBody@@@Z ENDP ; btAlignedObjectArray<btSoftBody::SContact>::push_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEHH@Z PROC ; btAlignedObjectArray<btSoftBody::SContact>::allocSize, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@17
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@17
$LN3@allocSize@17:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@17:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@USContact@btSoftBody@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btSoftBody::SContact>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$BaryEval@M@@YAMABM00ABVbtVector3@@@Z
_TEXT	SEGMENT
tv89 = -8						; size = 4
tv87 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_c$ = 16						; size = 4
_coord$ = 20						; size = 4
??$BaryEval@M@@YAMABM00ABVbtVector3@@@Z PROC		; BaryEval<float>, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyinternals.h
; Line 408
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 409
	mov	ecx, DWORD PTR _coord$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	ecx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _coord$[ebp]
	fstp	DWORD PTR tv87[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	edx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [edx]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv87[ebp]
	mov	ecx, DWORD PTR _coord$[ebp]
	fstp	DWORD PTR tv89[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	ecx, DWORD PTR _c$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv89[ebp]
; Line 410
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$BaryEval@M@@YAMABM00ABVbtVector3@@@Z ENDP		; BaryEval<float>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$HsiehHash@$03@@YAIPBX@Z
_TEXT	SEGMENT
_i$62522 = -16						; size = 4
_tmp$ = -12						; size = 4
_hash$ = -8						; size = 4
_data$ = -4						; size = 4
_pdata$ = 8						; size = 4
??$HsiehHash@$03@@YAIPBX@Z PROC				; HsiehHash<4>, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsparsesdf.h
; Line 26
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 27
	mov	eax, DWORD PTR _pdata$[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 28
	mov	DWORD PTR _hash$[ebp], 16		; 00000010H
; Line 29
	mov	DWORD PTR _i$62522[ebp], 0
	jmp	SHORT $LN3@HsiehHash
$LN2@HsiehHash:
	mov	ecx, DWORD PTR _i$62522[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$62522[ebp], ecx
$LN3@HsiehHash:
	cmp	DWORD PTR _i$62522[ebp], 4
	jge	SHORT $LN1@HsiehHash
; Line 31
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, WORD PTR [edx]
	add	eax, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _hash$[ebp], eax
; Line 32
	mov	ecx, DWORD PTR _data$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	shl	edx, 11					; 0000000bH
	xor	edx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _tmp$[ebp], edx
; Line 33
	mov	eax, DWORD PTR _hash$[ebp]
	shl	eax, 16					; 00000010H
	xor	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _hash$[ebp], eax
; Line 34
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, 4
	mov	DWORD PTR _data$[ebp], ecx
; Line 35
	mov	edx, DWORD PTR _hash$[ebp]
	shr	edx, 11					; 0000000bH
	add	edx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _hash$[ebp], edx
; Line 36
	jmp	SHORT $LN2@HsiehHash
$LN1@HsiehHash:
; Line 37
	mov	eax, DWORD PTR _hash$[ebp]
	shl	eax, 3
	xor	eax, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _hash$[ebp], eax
	mov	ecx, DWORD PTR _hash$[ebp]
	shr	ecx, 5
	add	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _hash$[ebp], ecx
; Line 38
	mov	edx, DWORD PTR _hash$[ebp]
	shl	edx, 4
	xor	edx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _hash$[ebp], edx
	mov	eax, DWORD PTR _hash$[ebp]
	shr	eax, 17					; 00000011H
	add	eax, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _hash$[ebp], eax
; Line 39
	mov	ecx, DWORD PTR _hash$[ebp]
	shl	ecx, 25					; 00000019H
	xor	ecx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _hash$[ebp], ecx
	mov	edx, DWORD PTR _hash$[ebp]
	shr	edx, 6
	add	edx, DWORD PTR _hash$[ebp]
	mov	DWORD PTR _hash$[ebp], edx
; Line 40
	mov	eax, DWORD PTR _hash$[ebp]
; Line 41
	mov	esp, ebp
	pop	ebp
	ret	0
??$HsiehHash@$03@@YAIPBX@Z ENDP				; HsiehHash<4>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btSwap@H@@YAXAAH0@Z
_TEXT	SEGMENT
_tmp$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btSwap@H@@YAXAAH0@Z PROC				; btSwap<int>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 536
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 537
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tmp$[ebp], ecx
; Line 538
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
; Line 539
	mov	edx, DWORD PTR _b$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx], eax
; Line 540
	mov	esp, ebp
	pop	ebp
	ret	0
??$btSwap@H@@YAXAAH0@Z ENDP				; btSwap<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z PROC ; btAlignedObjectArray<btDbvt::sStkNN>::operator[], COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@40
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@40:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEAAUsStkNN@btDbvt@@H@Z ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXH@Z ; btAlignedObjectArray<btDbvt::sStkNN>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXHABUsStkNN@btDbvt@@@Z
_TEXT	SEGMENT
tv84 = -24						; size = 4
$T68961 = -20						; size = 4
_i$62650 = -16						; size = 4
_i$62644 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXHABUsStkNN@btDbvt@@@Z PROC ; btAlignedObjectArray<btDbvt::sStkNN>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@11
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$62644[ebp], ecx
	jmp	SHORT $LN8@resize@11
$LN7@resize@11:
	mov	edx, DWORD PTR _i$62644[ebp]
	add	edx, 1
	mov	DWORD PTR _i$62644[ebp], edx
$LN8@resize@11:
	mov	eax, DWORD PTR _i$62644[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@11
; Line 229
	jmp	SHORT $LN7@resize@11
$LN6@resize@11:
; Line 230
	jmp	SHORT $LN5@resize@11
$LN9@resize@11:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@11
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXH@Z ; btAlignedObjectArray<btDbvt::sStkNN>::reserve
$LN4@resize@11:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$62650[ebp], edx
	jmp	SHORT $LN3@resize@11
$LN2@resize@11:
	mov	eax, DWORD PTR _i$62650[ebp]
	add	eax, 1
	mov	DWORD PTR _i$62650[ebp], eax
$LN3@resize@11:
	mov	ecx, DWORD PTR _i$62650[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@11
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$62650[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68961[ebp], eax
	cmp	DWORD PTR $T68961[ebp], 0
	je	SHORT $LN12@resize@11
	mov	eax, DWORD PTR _fillData$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR $T68961[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR $T68961[ebp]
	mov	DWORD PTR tv84[ebp], ecx
	jmp	SHORT $LN13@resize@11
$LN12@resize@11:
	mov	DWORD PTR tv84[ebp], 0
$LN13@resize@11:
; Line 240
	jmp	SHORT $LN2@resize@11
$LN5@resize@11:
; Line 245
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXHABUsStkNN@btDbvt@@@Z ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::resize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z PROC ; btAlignedObjectArray<btDbvtNode const *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@41
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@41:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEAAPBUbtDbvtNode@@H@Z ENDP ; btAlignedObjectArray<btDbvtNode const *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?pop_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?pop_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ PROC ; btAlignedObjectArray<btDbvtNode const *>::pop_back, COMDAT
; _this$ = ecx
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jg	SHORT $LN1@pop_back@5
	push	195					; 000000c3H
	push	OFFSET ??_C@_0FG@HIEJFMJI@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@pop_back@5:
; Line 196
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 198
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pop_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXXZ ENDP ; btAlignedObjectArray<btDbvtNode const *>::pop_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?resize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXHABQBUbtDbvtNode@@@Z
_TEXT	SEGMENT
tv83 = -24						; size = 4
$T68970 = -20						; size = 4
_i$62674 = -16						; size = 4
_i$62668 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXHABQBUbtDbvtNode@@@Z PROC ; btAlignedObjectArray<btDbvtNode const *>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@12
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$62668[ebp], ecx
	jmp	SHORT $LN8@resize@12
$LN7@resize@12:
	mov	edx, DWORD PTR _i$62668[ebp]
	add	edx, 1
	mov	DWORD PTR _i$62668[ebp], edx
$LN8@resize@12:
	mov	eax, DWORD PTR _i$62668[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@12
; Line 229
	jmp	SHORT $LN7@resize@12
$LN6@resize@12:
; Line 230
	jmp	SHORT $LN5@resize@12
$LN9@resize@12:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@12
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXH@Z ; btAlignedObjectArray<btDbvtNode const *>::reserve
$LN4@resize@12:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$62674[ebp], edx
	jmp	SHORT $LN3@resize@12
$LN2@resize@12:
	mov	eax, DWORD PTR _i$62674[ebp]
	add	eax, 1
	mov	DWORD PTR _i$62674[ebp], eax
$LN3@resize@12:
	mov	ecx, DWORD PTR _i$62674[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@12
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$62674[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68970[ebp], eax
	cmp	DWORD PTR $T68970[ebp], 0
	je	SHORT $LN12@resize@12
	mov	eax, DWORD PTR $T68970[ebp]
	mov	ecx, DWORD PTR _fillData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T68970[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN13@resize@12
$LN12@resize@12:
	mov	DWORD PTR tv83[ebp], 0
$LN13@resize@12:
; Line 240
	jmp	SHORT $LN2@resize@12
$LN5@resize@12:
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXHABQBUbtDbvtNode@@@Z ENDP ; btAlignedObjectArray<btDbvtNode const *>::resize
_TEXT	ENDS
PUBLIC	?allocSize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEHH@Z ; btAlignedObjectArray<btDbvtNode const *>::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z
_TEXT	SEGMENT
tv84 = -16						; size = 4
$T68975 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z PROC ; btAlignedObjectArray<btDbvtNode const *>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@18
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEHH@Z ; btAlignedObjectArray<btDbvtNode const *>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXH@Z ; btAlignedObjectArray<btDbvtNode const *>::reserve
$LN1@push_back@18:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68975[ebp], eax
	cmp	DWORD PTR $T68975[ebp], 0
	je	SHORT $LN4@push_back@18
	mov	edx, DWORD PTR $T68975[ebp]
	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T68975[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN5@push_back@18
$LN4@push_back@18:
	mov	DWORD PTR tv84[ebp], 0
$LN5@push_back@18:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXABQBUbtDbvtNode@@@Z ENDP ; btAlignedObjectArray<btDbvtNode const *>::push_back
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IBEXHHPAPBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEPAXH@Z ; btAlignedObjectArray<btDbvtNode const *>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXH@Z
_TEXT	SEGMENT
_s$62693 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXH@Z PROC ; btAlignedObjectArray<btDbvtNode const *>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@22
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEPAXH@Z ; btAlignedObjectArray<btDbvtNode const *>::allocate
	mov	DWORD PTR _s$62693[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$62693[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IBEXHHPAPBUbtDbvtNode@@@Z ; btAlignedObjectArray<btDbvtNode const *>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ; btAlignedObjectArray<btDbvtNode const *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXHH@Z ; btAlignedObjectArray<btDbvtNode const *>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEXXZ ; btAlignedObjectArray<btDbvtNode const *>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$62693[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@22:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btDbvtNode const *>::reserve
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IBEXHHPAUsStkNN@btDbvt@@@Z ; btAlignedObjectArray<btDbvt::sStkNN>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEPAXH@Z ; btAlignedObjectArray<btDbvt::sStkNN>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXH@Z
_TEXT	SEGMENT
_s$62736 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXH@Z PROC ; btAlignedObjectArray<btDbvt::sStkNN>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@23
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEPAXH@Z ; btAlignedObjectArray<btDbvt::sStkNN>::allocate
	mov	DWORD PTR _s$62736[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$62736[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IBEXHHPAUsStkNN@btDbvt@@@Z ; btAlignedObjectArray<btDbvt::sStkNN>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ; btAlignedObjectArray<btDbvt::sStkNN>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXHH@Z ; btAlignedObjectArray<btDbvt::sStkNN>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEXXZ ; btAlignedObjectArray<btDbvt::sStkNN>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$62736[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@23:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEHH@Z PROC ; btAlignedObjectArray<btDbvtNode const *>::allocSize, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@18
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@18
$LN3@allocSize@18:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@18:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btDbvtNode const *>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IBEXHHPAPBUbtDbvtNode@@@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T68988 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IBEXHHPAPBUbtDbvtNode@@@Z PROC ; btAlignedObjectArray<btDbvtNode const *>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@22
$LN2@copy@22:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@22:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@22
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68988[ebp], eax
	cmp	DWORD PTR $T68988[ebp], 0
	je	SHORT $LN6@copy@22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T68988[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T68988[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@22
$LN6@copy@22:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@22:
	jmp	SHORT $LN2@copy@22
$LN4@copy@22:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IBEXHHPAPBUbtDbvtNode@@@Z ENDP ; btAlignedObjectArray<btDbvtNode const *>::copy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEPAPBUbtDbvtNode@@HPAPBQBU2@@Z ; btAlignedAllocator<btDbvtNode const *,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btDbvtNode const *>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@22
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEPAPBUbtDbvtNode@@HPAPBQBU2@@Z ; btAlignedAllocator<btDbvtNode const *,16>::allocate
	jmp	SHORT $LN2@allocate@22
$LN1@allocate@22:
; Line 106
	xor	eax, eax
$LN2@allocate@22:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@PBUbtDbvtNode@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btDbvtNode const *>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ PROC ; btAlignedObjectArray<btDbvtNode const *>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@PBUbtDbvtNode@@@@QBEHXZ ENDP ; btAlignedObjectArray<btDbvtNode const *>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IBEXHHPAUsStkNN@btDbvt@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T68997 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IBEXHHPAUsStkNN@btDbvt@@@Z PROC ; btAlignedObjectArray<btDbvt::sStkNN>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@23
$LN2@copy@23:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@23:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@23
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T68997[ebp], eax
	cmp	DWORD PTR $T68997[ebp], 0
	je	SHORT $LN6@copy@23
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR $T68997[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T68997[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@copy@23
$LN6@copy@23:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@23:
	jmp	SHORT $LN2@copy@23
$LN4@copy@23:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IBEXHHPAUsStkNN@btDbvt@@@Z ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::copy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEPAUsStkNN@btDbvt@@HPAPBU23@@Z ; btAlignedAllocator<btDbvt::sStkNN,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btDbvt::sStkNN>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@23
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEPAUsStkNN@btDbvt@@HPAPBU23@@Z ; btAlignedAllocator<btDbvt::sStkNN,16>::allocate
	jmp	SHORT $LN2@allocate@23
$LN1@allocate@23:
; Line 106
	xor	eax, eax
$LN2@allocate@23:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ PROC ; btAlignedObjectArray<btDbvt::sStkNN>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@UsStkNN@btDbvt@@@@QBEHXZ ENDP ; btAlignedObjectArray<btDbvt::sStkNN>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEPAPBUbtDbvtNode@@HPAPBQBU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEPAPBUbtDbvtNode@@HPAPBQBU2@@Z PROC ; btAlignedAllocator<btDbvtNode const *,16>::allocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@PBUbtDbvtNode@@$0BA@@@QAEPAPBUbtDbvtNode@@HPAPBQBU2@@Z ENDP ; btAlignedAllocator<btDbvtNode const *,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEPAUsStkNN@btDbvt@@HPAPBU23@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEPAUsStkNN@btDbvt@@HPAPBU23@@Z PROC ; btAlignedAllocator<btDbvt::sStkNN,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 3
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@UsStkNN@btDbvt@@$0BA@@@QAEPAUsStkNN@btDbvt@@HPAPBU23@@Z ENDP ; btAlignedAllocator<btDbvt::sStkNN,16>::allocate
_TEXT	ENDS
EXTRN	_atexit:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eold_position@@YAXXZ
text$yc	SEGMENT
??__Eold_position@@YAXXZ PROC				; `dynamic initializer for 'old_position'', COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.cpp
; Line 29
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?old_position@@3V?$btAlignedObjectArray@VbtVector3@@@@A ; old_position
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
	push	OFFSET ??__Fold_position@@YAXXZ		; `dynamic atexit destructor for 'old_position''
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eold_position@@YAXXZ ENDP				; `dynamic initializer for 'old_position''
; Function compile flags: /Odtp /RTCsu
text$yc	ENDS
;	COMDAT ??__Estore_inter@@YAXXZ
text$yc	SEGMENT
??__Estore_inter@@YAXXZ PROC				; `dynamic initializer for 'store_inter'', COMDAT
; Line 1562
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?store_inter@@3VbtVector3@@A ; store_inter
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Estore_inter@@YAXXZ ENDP				; `dynamic initializer for 'store_inter''
; Function compile flags: /Odtp /RTCsu
text$yc	ENDS
;	COMDAT ??__Estart@@YAXXZ
text$yc	SEGMENT
??__Estart@@YAXXZ PROC					; `dynamic initializer for 'start'', COMDAT
; Line 1562
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?start@@3VbtVector3@@A	; start
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Estart@@YAXXZ ENDP					; `dynamic initializer for 'start''
text$yc	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id'', COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id''
; Function compile flags: /Odtp /RTCsu
text$yc	ENDS
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
; Function compile flags: /Odtp /RTCsu
text$yc	ENDS
;	COMDAT ??__Fold_position@@YAXXZ
text$yd	SEGMENT
??__Fold_position@@YAXXZ PROC				; `dynamic atexit destructor for 'old_position'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?old_position@@3V?$btAlignedObjectArray@VbtVector3@@@@A ; old_position
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Fold_position@@YAXXZ ENDP				; `dynamic atexit destructor for 'old_position''
text$yd	ENDS
PUBLIC	?old_position@@3V?$btAlignedObjectArray@VbtVector3@@@@A ; old_position
PUBLIC	?store_inter@@3VbtVector3@@A			; store_inter
PUBLIC	?start@@3VbtVector3@@A				; start
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
_BSS	SEGMENT
?old_position@@3V?$btAlignedObjectArray@VbtVector3@@@@A DB 014H DUP (?) ; old_position
?store_inter@@3VbtVector3@@A DB 010H DUP (?)		; store_inter
?start@@3VbtVector3@@A DB 010H DUP (?)			; start
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
CRT$XCU	SEGMENT
_old_position$initializer$ DD FLAT:??__Eold_position@@YAXXZ
_store_inter$initializer$ DD FLAT:??__Estore_inter@@YAXXZ
_start$initializer$ DD FLAT:??__Estart@@YAXXZ
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
END
