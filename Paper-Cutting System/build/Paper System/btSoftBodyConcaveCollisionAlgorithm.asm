; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\專題\自建專案\自建專案\src\BulletSoftBody\btSoftBodyConcaveCollisionAlgorithm.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG21581 DB	'Assert ..\..\src\BulletSoftBody\btSoftBodyConcaveCollisi'
	DB	'onAlgorithm.cpp:%u (tmp)', 0aH, 00H
	ORG $+6
$SG21583 DB	'Assert ..\..\src\BulletSoftBody\btSoftBodyConcaveCollisi'
	DB	'onAlgorithm.cpp:%u (tmp->m_childShape)', 0aH, 00H
$SG21626 DB	'Assert ..\..\src\BulletSoftBody\btSoftBodyConcaveCollisi'
	DB	'onAlgorithm.cpp:%u (tm)', 0aH, 00H
CONST	ENDS
_DATA	SEGMENT
_btNanMask DD	07f800001H
_btInfinityMask DD 07f800000H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??0btSoftBodyTriangleCallback@@QAE@PAVbtDispatcher@@PBUbtCollisionObjectWrapper@@1_N@Z ; btSoftBodyTriangleCallback::btSoftBodyTriangleCallback
PUBLIC	??_7btSoftBodyConcaveCollisionAlgorithm@@6B@	; btSoftBodyConcaveCollisionAlgorithm::`vftable'
PUBLIC	??0btSoftBodyConcaveCollisionAlgorithm@@QAE@ABUbtCollisionAlgorithmConstructionInfo@@PBUbtCollisionObjectWrapper@@1_N@Z ; btSoftBodyConcaveCollisionAlgorithm::btSoftBodyConcaveCollisionAlgorithm
PUBLIC	?processCollision@btSoftBodyConcaveCollisionAlgorithm@@UAEXPBUbtCollisionObjectWrapper@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z ; btSoftBodyConcaveCollisionAlgorithm::processCollision
PUBLIC	?calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z ; btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact
PUBLIC	?getAllContactManifolds@btSoftBodyConcaveCollisionAlgorithm@@UAEXAAV?$btAlignedObjectArray@PAVbtPersistentManifold@@@@@Z ; btSoftBodyConcaveCollisionAlgorithm::getAllContactManifolds
EXTRN	??0btCollisionAlgorithm@@QAE@ABUbtCollisionAlgorithmConstructionInfo@@@Z:PROC ; btCollisionAlgorithm::btCollisionAlgorithm
EXTRN	??_EbtSoftBodyConcaveCollisionAlgorithm@@UAEPAXI@Z:PROC ; btSoftBodyConcaveCollisionAlgorithm::`vector deleting destructor'
;	COMDAT ??_7btSoftBodyConcaveCollisionAlgorithm@@6B@
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
CONST	SEGMENT
??_7btSoftBodyConcaveCollisionAlgorithm@@6B@ DD FLAT:??_EbtSoftBodyConcaveCollisionAlgorithm@@UAEPAXI@Z ; btSoftBodyConcaveCollisionAlgorithm::`vftable'
	DD	FLAT:?processCollision@btSoftBodyConcaveCollisionAlgorithm@@UAEXPBUbtCollisionObjectWrapper@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z
	DD	FLAT:?calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z
	DD	FLAT:?getAllContactManifolds@btSoftBodyConcaveCollisionAlgorithm@@UAEXAAV?$btAlignedObjectArray@PAVbtPersistentManifold@@@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSoftBodyConcaveCollisionAlgorithm@@QAE@ABUbtCollisionAlgorithmConstructionInfo@@PBUbtCollisionObjectWrapper@@1_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ci$ = 8						; size = 4
_body0Wrap$ = 12					; size = 4
_body1Wrap$ = 16					; size = 4
_isSwapped$ = 20					; size = 1
??0btSoftBodyConcaveCollisionAlgorithm@@QAE@ABUbtCollisionAlgorithmConstructionInfo@@PBUbtCollisionObjectWrapper@@1_N@Z PROC ; btSoftBodyConcaveCollisionAlgorithm::btSoftBodyConcaveCollisionAlgorithm, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _ci$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btCollisionAlgorithm@@QAE@ABUbtCollisionAlgorithmConstructionInfo@@@Z ; btCollisionAlgorithm::btCollisionAlgorithm
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET ??_7btSoftBodyConcaveCollisionAlgorithm@@6B@
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _isSwapped$[ebp]
	mov	BYTE PTR [edx+8], al
	movzx	ecx, BYTE PTR _isSwapped$[ebp]
	push	ecx
	mov	edx, DWORD PTR _body1Wrap$[ebp]
	push	edx
	mov	eax, DWORD PTR _body0Wrap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btSoftBodyTriangleCallback@@QAE@PAVbtDispatcher@@PBUbtCollisionObjectWrapper@@1_N@Z ; btSoftBodyTriangleCallback::btSoftBodyTriangleCallback
; Line 42
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0btSoftBodyConcaveCollisionAlgorithm@@QAE@ABUbtCollisionAlgorithmConstructionInfo@@PBUbtCollisionObjectWrapper@@1_N@Z ENDP ; btSoftBodyConcaveCollisionAlgorithm::btSoftBodyConcaveCollisionAlgorithm
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAllContactManifolds@btSoftBodyConcaveCollisionAlgorithm@@UAEXAAV?$btAlignedObjectArray@PAVbtPersistentManifold@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_manifoldArray$ = 8					; size = 4
?getAllContactManifolds@btSoftBodyConcaveCollisionAlgorithm@@UAEXAAV?$btAlignedObjectArray@PAVbtPersistentManifold@@@@@Z PROC ; btSoftBodyConcaveCollisionAlgorithm::getAllContactManifolds, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.h
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 131
	mov	esp, ebp
	pop	ebp
	ret	4
?getAllContactManifolds@btSoftBodyConcaveCollisionAlgorithm@@UAEXAAV?$btAlignedObjectArray@PAVbtPersistentManifold@@@@@Z ENDP ; btSoftBodyConcaveCollisionAlgorithm::getAllContactManifolds
_TEXT	ENDS
PUBLIC	??1btSoftBodyConcaveCollisionAlgorithm@@UAE@XZ	; btSoftBodyConcaveCollisionAlgorithm::~btSoftBodyConcaveCollisionAlgorithm
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtSoftBodyConcaveCollisionAlgorithm@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtSoftBodyConcaveCollisionAlgorithm@@UAEPAXI@Z PROC	; btSoftBodyConcaveCollisionAlgorithm::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSoftBodyConcaveCollisionAlgorithm@@UAE@XZ ; btSoftBodyConcaveCollisionAlgorithm::~btSoftBodyConcaveCollisionAlgorithm
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtSoftBodyConcaveCollisionAlgorithm@@UAEPAXI@Z ENDP	; btSoftBodyConcaveCollisionAlgorithm::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1btCollisionAlgorithm@@UAE@XZ			; btCollisionAlgorithm::~btCollisionAlgorithm
PUBLIC	??1btSoftBodyTriangleCallback@@UAE@XZ		; btSoftBodyTriangleCallback::~btSoftBodyTriangleCallback
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btSoftBodyConcaveCollisionAlgorithm@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSoftBodyConcaveCollisionAlgorithm@@UAE@XZ PROC	; btSoftBodyConcaveCollisionAlgorithm::~btSoftBodyConcaveCollisionAlgorithm, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBodyConcaveCollisionAlgorithm@@6B@
; Line 48
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1btSoftBodyTriangleCallback@@UAE@XZ	; btSoftBodyTriangleCallback::~btSoftBodyTriangleCallback
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btCollisionAlgorithm@@UAE@XZ		; btCollisionAlgorithm::~btCollisionAlgorithm
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSoftBodyConcaveCollisionAlgorithm@@UAE@XZ ENDP	; btSoftBodyConcaveCollisionAlgorithm::~btSoftBodyConcaveCollisionAlgorithm
_TEXT	ENDS
PUBLIC	??_7btCollisionAlgorithm@@6B@			; btCollisionAlgorithm::`vftable'
EXTRN	??_EbtCollisionAlgorithm@@UAEPAXI@Z:PROC	; btCollisionAlgorithm::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_7btCollisionAlgorithm@@6B@
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btcollisionalgorithm.h
CONST	SEGMENT
??_7btCollisionAlgorithm@@6B@ DD FLAT:??_EbtCollisionAlgorithm@@UAEPAXI@Z ; btCollisionAlgorithm::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??1btCollisionAlgorithm@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btCollisionAlgorithm@@UAE@XZ PROC			; btCollisionAlgorithm::~btCollisionAlgorithm, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btCollisionAlgorithm@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1btCollisionAlgorithm@@UAE@XZ ENDP			; btCollisionAlgorithm::~btCollisionAlgorithm
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GbtCollisionAlgorithm@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtCollisionAlgorithm@@UAEPAXI@Z PROC		; btCollisionAlgorithm::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btCollisionAlgorithm@@UAE@XZ		; btCollisionAlgorithm::~btCollisionAlgorithm
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtCollisionAlgorithm@@UAEPAXI@Z ENDP		; btCollisionAlgorithm::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?clearCache@btSoftBodyTriangleCallback@@QAEXXZ	; btSoftBodyTriangleCallback::clearCache
PUBLIC	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
PUBLIC	??0?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::btHashMap<btHashKey<btTriIndex>,btTriIndex>
PUBLIC	??0btVector3@@QAE@XZ				; btVector3::btVector3
PUBLIC	??_7btSoftBodyTriangleCallback@@6B@		; btSoftBodyTriangleCallback::`vftable'
PUBLIC	??0btTriangleCallback@@QAE@XZ			; btTriangleCallback::btTriangleCallback
PUBLIC	?processTriangle@btSoftBodyTriangleCallback@@UAEXPAVbtVector3@@HH@Z ; btSoftBodyTriangleCallback::processTriangle
EXTRN	??_EbtSoftBodyTriangleCallback@@UAEPAXI@Z:PROC	; btSoftBodyTriangleCallback::`vector deleting destructor'
;	COMDAT ??_7btSoftBodyTriangleCallback@@6B@
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
CONST	SEGMENT
??_7btSoftBodyTriangleCallback@@6B@ DD FLAT:??_EbtSoftBodyTriangleCallback@@UAEPAXI@Z ; btSoftBodyTriangleCallback::`vftable'
	DD	FLAT:?processTriangle@btSoftBodyTriangleCallback@@UAEXPAVbtVector3@@HH@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSoftBodyTriangleCallback@@QAE@PAVbtDispatcher@@PBUbtCollisionObjectWrapper@@1_N@Z
_TEXT	SEGMENT
tv146 = -12						; size = 4
tv138 = -8						; size = 4
_this$ = -4						; size = 4
_dispatcher$ = 8					; size = 4
_body0Wrap$ = 12					; size = 4
_body1Wrap$ = 16					; size = 4
_isSwapped$ = 20					; size = 1
??0btSoftBodyTriangleCallback@@QAE@PAVbtDispatcher@@PBUbtCollisionObjectWrapper@@1_N@Z PROC ; btSoftBodyTriangleCallback::btSoftBodyTriangleCallback, COMDAT
; _this$ = ecx
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btTriangleCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBodyTriangleCallback@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dispatcher$[ebp]
	mov	DWORD PTR [ecx+52], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??0?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ
; Line 56
	movzx	ecx, BYTE PTR _isSwapped$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@btSoftBody
	mov	ecx, DWORD PTR _body1Wrap$[ebp]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN4@btSoftBody
$LN3@btSoftBody:
	mov	ecx, DWORD PTR _body0Wrap$[ebp]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	DWORD PTR tv138[ebp], eax
$LN4@btSoftBody:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv138[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 57
	movzx	ecx, BYTE PTR _isSwapped$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@btSoftBody
	mov	ecx, DWORD PTR _body0Wrap$[ebp]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	DWORD PTR tv146[ebp], eax
	jmp	SHORT $LN6@btSoftBody
$LN5@btSoftBody:
	mov	ecx, DWORD PTR _body1Wrap$[ebp]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	DWORD PTR tv146[ebp], eax
$LN6@btSoftBody:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 64
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clearCache@btSoftBodyTriangleCallback@@QAEXXZ ; btSoftBodyTriangleCallback::clearCache
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0btSoftBodyTriangleCallback@@QAE@PAVbtDispatcher@@PBUbtCollisionObjectWrapper@@1_N@Z ENDP ; btSoftBodyTriangleCallback::btSoftBodyTriangleCallback
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btVector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btVector3@@QAE@XZ PROC				; btVector3::btVector3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0btVector3@@QAE@XZ ENDP				; btVector3::btVector3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ PROC ; btCollisionObjectWrapper::getCollisionObject, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobjectwrapper.h
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ENDP ; btCollisionObjectWrapper::getCollisionObject
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GbtSoftBodyTriangleCallback@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtSoftBodyTriangleCallback@@UAEPAXI@Z PROC		; btSoftBodyTriangleCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSoftBodyTriangleCallback@@UAE@XZ	; btSoftBodyTriangleCallback::~btSoftBodyTriangleCallback
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtSoftBodyTriangleCallback@@UAEPAXI@Z ENDP		; btSoftBodyTriangleCallback::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7btTriangleCallback@@6B@			; btTriangleCallback::`vftable'
EXTRN	??_EbtTriangleCallback@@UAEPAXI@Z:PROC		; btTriangleCallback::`vector deleting destructor'
;	COMDAT ??_7btTriangleCallback@@6B@
CONST	SEGMENT
??_7btTriangleCallback@@6B@ DD FLAT:??_EbtTriangleCallback@@UAEPAXI@Z ; btTriangleCallback::`vftable'
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btTriangleCallback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btTriangleCallback@@QAE@XZ PROC			; btTriangleCallback::btTriangleCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btTriangleCallback@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0btTriangleCallback@@QAE@XZ ENDP			; btTriangleCallback::btTriangleCallback
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::btAlignedObjectArray<btHashKey<btTriIndex> >
PUBLIC	??0?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ	; btAlignedObjectArray<btTriIndex>::btAlignedObjectArray<btTriIndex>
PUBLIC	??0?$btAlignedObjectArray@H@@QAE@XZ		; btAlignedObjectArray<int>::btAlignedObjectArray<int>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::btHashMap<btHashKey<btTriIndex>,btTriIndex>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ ; btAlignedObjectArray<btTriIndex>::btAlignedObjectArray<btTriIndex>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::btAlignedObjectArray<btHashKey<btTriIndex> >
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::btHashMap<btHashKey<btTriIndex>,btTriIndex>
_TEXT	ENDS
EXTRN	??1btTriangleCallback@@UAE@XZ:PROC		; btTriangleCallback::~btTriangleCallback
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtTriangleCallback@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtTriangleCallback@@UAEPAXI@Z PROC			; btTriangleCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btTriangleCallback@@UAE@XZ		; btTriangleCallback::~btTriangleCallback
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtTriangleCallback@@UAEPAXI@Z ENDP			; btTriangleCallback::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::~btHashMap<btHashKey<btTriIndex>,btTriIndex>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btSoftBodyTriangleCallback@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSoftBodyTriangleCallback@@UAE@XZ PROC		; btSoftBodyTriangleCallback::~btSoftBodyTriangleCallback, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSoftBodyTriangleCallback@@6B@
; Line 69
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clearCache@btSoftBodyTriangleCallback@@QAEXXZ ; btSoftBodyTriangleCallback::clearCache
; Line 72
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btTriangleCallback@@UAE@XZ		; btTriangleCallback::~btTriangleCallback
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSoftBodyTriangleCallback@@UAE@XZ ENDP		; btSoftBodyTriangleCallback::~btSoftBodyTriangleCallback
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@H@@QAE@XZ		; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
PUBLIC	??1?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ	; btAlignedObjectArray<btTriIndex>::~btAlignedObjectArray<btTriIndex>
PUBLIC	??1?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::~btAlignedObjectArray<btHashKey<btTriIndex> >
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::~btHashMap<btHashKey<btTriIndex>,btTriIndex>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::~btAlignedObjectArray<btHashKey<btTriIndex> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ ; btAlignedObjectArray<btTriIndex>::~btAlignedObjectArray<btTriIndex>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAE@XZ ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::~btHashMap<btHashKey<btTriIndex>,btTriIndex>
_TEXT	ENDS
PUBLIC	?clear@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXXZ ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::clear
PUBLIC	?RemoveReferences@?$btSparseSdf@$02@@QAEHPAVbtCollisionShape@@@Z ; btSparseSdf<3>::RemoveReferences
PUBLIC	?getWorldInfo@btSoftBody@@QAEPAUbtSoftBodyWorldInfo@@XZ ; btSoftBody::getWorldInfo
PUBLIC	?getAtIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@H@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::getAtIndex
PUBLIC	?size@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHXZ ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::size
EXTRN	_printf:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clearCache@btSoftBodyTriangleCallback@@QAEXXZ
_TEXT	SEGMENT
tv94 = -24						; size = 4
$T23139 = -20						; size = 4
$T23138 = -16						; size = 4
_tmp$21579 = -12					; size = 4
_i$21575 = -8						; size = 4
_this$ = -4						; size = 4
?clearCache@btSoftBodyTriangleCallback@@QAEXXZ PROC	; btSoftBodyTriangleCallback::clearCache, COMDAT
; _this$ = ecx
; Line 76
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	DWORD PTR _i$21575[ebp], 0
	jmp	SHORT $LN5@clearCache
$LN4@clearCache:
	mov	eax, DWORD PTR _i$21575[ebp]
	add	eax, 1
	mov	DWORD PTR _i$21575[ebp], eax
$LN5@clearCache:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?size@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHXZ ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::size
	cmp	DWORD PTR _i$21575[ebp], eax
	jge	$LN3@clearCache
; Line 79
	mov	ecx, DWORD PTR _i$21575[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?getAtIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@H@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::getAtIndex
	mov	DWORD PTR _tmp$21579[ebp], eax
; Line 80
	cmp	DWORD PTR _tmp$21579[ebp], 0
	jne	SHORT $LN2@clearCache
	push	80					; 00000050H
	push	OFFSET $SG21581
	call	_printf
	add	esp, 8
	int	3
$LN2@clearCache:
; Line 81
	mov	edx, DWORD PTR _tmp$21579[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN1@clearCache
	push	81					; 00000051H
	push	OFFSET $SG21583
	call	_printf
	add	esp, 8
	int	3
$LN1@clearCache:
; Line 82
	mov	eax, DWORD PTR _tmp$21579[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	?getWorldInfo@btSoftBody@@QAEPAUbtSoftBodyWorldInfo@@XZ ; btSoftBody::getWorldInfo
	add	eax, 64					; 00000040H
	mov	ecx, eax
	call	?RemoveReferences@?$btSparseSdf@$02@@QAEHPAVbtCollisionShape@@@Z ; btSparseSdf<3>::RemoveReferences
; Line 83
	mov	eax, DWORD PTR _tmp$21579[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T23139[ebp], ecx
	mov	edx, DWORD PTR $T23139[ebp]
	mov	DWORD PTR $T23138[ebp], edx
	cmp	DWORD PTR $T23138[ebp], 0
	je	SHORT $LN8@clearCache
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T23138[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T23138[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN9@clearCache
$LN8@clearCache:
	mov	DWORD PTR tv94[ebp], 0
$LN9@clearCache:
; Line 84
	jmp	$LN4@clearCache
$LN3@clearCache:
; Line 85
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?clear@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXXZ ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::clear
; Line 86
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clearCache@btSoftBodyTriangleCallback@@QAEXXZ ENDP	; btSoftBodyTriangleCallback::clearCache
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldInfo@btSoftBody@@QAEPAUbtSoftBodyWorldInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldInfo@btSoftBody@@QAEPAUbtSoftBodyWorldInfo@@XZ PROC ; btSoftBody::getWorldInfo, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
; Line 701
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 702
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+708]
; Line 703
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldInfo@btSoftBody@@QAEPAUbtSoftBodyWorldInfo@@XZ ENDP ; btSoftBody::getWorldInfo
_TEXT	ENDS
PUBLIC	?insert@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@ABUbtTriIndex@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::insert
PUBLIC	?getX@btVector3@@QBEABMXZ			; btVector3::getX
PUBLIC	??2btConvexHullShape@@SAPAXI@Z			; btConvexHullShape::operator new
PUBLIC	??H@YA?AVbtVector3@@ABV0@0@Z			; operator+
PUBLIC	??XbtVector3@@QAEAAV0@ABM@Z			; btVector3::operator*=
PUBLIC	__real@3d75c28f
PUBLIC	?normalize@btVector3@@QAEAAV1@XZ		; btVector3::normalize
PUBLIC	?cross@btVector3@@QBE?AV1@ABV1@@Z		; btVector3::cross
PUBLIC	??G@YA?AVbtVector3@@ABV0@0@Z			; operator-
PUBLIC	??0btCollisionObjectWrapper@@QAE@PBU0@PBVbtCollisionShape@@PBVbtCollisionObject@@ABVbtTransform@@HH@Z ; btCollisionObjectWrapper::btCollisionObjectWrapper
PUBLIC	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
PUBLIC	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
PUBLIC	?setUserPointer@btCollisionShape@@QAEXPAX@Z	; btCollisionShape::setUserPointer
PUBLIC	?getUserPointer@btCollisionShape@@QBEPAXXZ	; btCollisionShape::getUserPointer
PUBLIC	?getCollisionShape@btCollisionObject@@QBEPBVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
PUBLIC	??A?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::operator[]
PUBLIC	??0?$btHashKey@UbtTriIndex@@@@QAE@H@Z		; btHashKey<btTriIndex>::btHashKey<btTriIndex>
PUBLIC	?getUid@btTriIndex@@QBEHXZ			; btTriIndex::getUid
PUBLIC	??0btTriIndex@@QAE@HHPAVbtCollisionShape@@@Z	; btTriIndex::btTriIndex
PUBLIC	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z	; btTransform::operator()
PUBLIC	?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ; btCollisionObject::getWorldTransform
PUBLIC	??0btVector3@@QAE@ABM00@Z			; btVector3::btVector3
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	??0btCollisionAlgorithmConstructionInfo@@QAE@XZ	; btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo
PUBLIC	__$ArrayPad$
EXTRN	??0btConvexHullShape@@QAE@PBMHH@Z:PROC		; btConvexHullShape::btConvexHullShape
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT __real@3d75c28f
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?processTriangle@btSoftBodyTriangleCallback@@UAEXPAVbtVector3@@HH@Z
_TEXT	SEGMENT
tv319 = -548						; size = 4
$T23151 = -544						; size = 4
$T23150 = -540						; size = 4
$T23149 = -536						; size = 4
$T23148 = -532						; size = 4
$T23147 = -528						; size = 4
_colAlgo$21648 = -524					; size = 4
_triBody$21647 = -516					; size = 24
_softBody$21646 = -484					; size = 24
_tm$21642 = -456					; size = 4
_pts$21635 = -448					; size = 96
$T21632 = -336						; size = 16
$T21631 = -320						; size = 16
_normal$21630 = -288					; size = 16
_colAlgo$21629 = -264					; size = 4
_triBody$21628 = -256					; size = 24
_softBody$21627 = -224					; size = 24
_tm$21624 = -196					; size = 4
_shapeIndex$ = -192					; size = 4
_triKey$ = -184						; size = 4
_triIndex$ = -172					; size = 8
$T21604 = -160						; size = 16
$T21603 = -144						; size = 16
$T21602 = -128						; size = 16
$T21601 = -112						; size = 16
$T21600 = -96						; size = 16
$T21599 = -80						; size = 16
_tr$21598 = -56						; size = 4
_color$21594 = -48					; size = 16
_ci$ = -20						; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_triangle$ = 8						; size = 4
_partId$ = 12						; size = 4
_triangleIndex$ = 16					; size = 4
?processTriangle@btSoftBodyTriangleCallback@@UAEXPAVbtVector3@@HH@Z PROC ; btSoftBodyTriangleCallback::processTriangle, COMDAT
; _this$ = ecx
; Line 90
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-556]
	mov	ecx, 139				; 0000008bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 94
	lea	ecx, DWORD PTR _ci$[ebp]
	call	??0btCollisionAlgorithmConstructionInfo@@QAE@XZ ; btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo
; Line 95
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _ci$[ebp], ecx
; Line 98
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	$LN3@processTri
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	cmp	DWORD PTR [ecx+20], 0
	je	$LN3@processTri
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, edx
	mov	edx, DWORD PTR [eax+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	and	eax, 1
	je	$LN3@processTri
; Line 100
	fldz
	fstp	DWORD PTR $T23147[ebp]
	fld1
	fstp	DWORD PTR $T23148[ebp]
	fld1
	fstp	DWORD PTR $T23149[ebp]
	lea	eax, DWORD PTR $T23147[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23148[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23149[ebp]
	push	edx
	lea	ecx, DWORD PTR _color$21594[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	mov	DWORD PTR _tr$21598[ebp], eax
; Line 102
	mov	esi, esp
	lea	ecx, DWORD PTR _color$21594[ebp]
	push	ecx
	mov	edx, DWORD PTR _triangle$[ebx]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T21600[ebp]
	push	eax
	mov	ecx, DWORD PTR _tr$21598[ebp]
	call	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
	push	eax
	mov	ecx, DWORD PTR _triangle$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T21599[ebp]
	push	edx
	mov	ecx, DWORD PTR _tr$21598[ebp]
	call	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 103
	mov	esi, esp
	lea	ecx, DWORD PTR _color$21594[ebp]
	push	ecx
	mov	edx, DWORD PTR _triangle$[ebx]
	add	edx, 32					; 00000020H
	push	edx
	lea	eax, DWORD PTR $T21602[ebp]
	push	eax
	mov	ecx, DWORD PTR _tr$21598[ebp]
	call	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
	push	eax
	mov	ecx, DWORD PTR _triangle$[ebx]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T21601[ebp]
	push	edx
	mov	ecx, DWORD PTR _tr$21598[ebp]
	call	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 104
	mov	esi, esp
	lea	ecx, DWORD PTR _color$21594[ebp]
	push	ecx
	mov	edx, DWORD PTR _triangle$[ebx]
	push	edx
	lea	eax, DWORD PTR $T21604[ebp]
	push	eax
	mov	ecx, DWORD PTR _tr$21598[ebp]
	call	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
	push	eax
	mov	ecx, DWORD PTR _triangle$[ebx]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	edx, DWORD PTR $T21603[ebp]
	push	edx
	mov	ecx, DWORD PTR _tr$21598[ebp]
	call	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	ecx, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@processTri:
; Line 107
	push	0
	mov	ecx, DWORD PTR _triangleIndex$[ebx]
	push	ecx
	mov	edx, DWORD PTR _partId$[ebx]
	push	edx
	lea	ecx, DWORD PTR _triIndex$[ebp]
	call	??0btTriIndex@@QAE@HHPAVbtCollisionShape@@@Z ; btTriIndex::btTriIndex
; Line 108
	lea	ecx, DWORD PTR _triIndex$[ebp]
	call	?getUid@btTriIndex@@QBEHXZ		; btTriIndex::getUid
	push	eax
	lea	ecx, DWORD PTR _triKey$[ebp]
	call	??0?$btHashKey@UbtTriIndex@@@@QAE@H@Z	; btHashKey<btTriIndex>::btHashKey<btTriIndex>
; Line 111
	lea	eax, DWORD PTR _triKey$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??A?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::operator[]
	mov	DWORD PTR _shapeIndex$[ebp], eax
; Line 112
	cmp	DWORD PTR _shapeIndex$[ebp], 0
	je	$LN2@processTri
; Line 114
	mov	ecx, DWORD PTR _shapeIndex$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _tm$21624[ebp], edx
; Line 115
	cmp	DWORD PTR _tm$21624[ebp], 0
	jne	SHORT $LN1@processTri
	push	115					; 00000073H
	push	OFFSET $SG21626
	call	_printf
	add	esp, 8
	int	3
$LN1@processTri:
; Line 118
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getCollisionShape@btCollisionObject@@QBEPBVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	ecx, eax
	call	?getUserPointer@btCollisionShape@@QBEPAXXZ ; btCollisionShape::getUserPointer
	push	eax
	mov	ecx, DWORD PTR _tm$21624[ebp]
	call	?setUserPointer@btCollisionShape@@QAEXPAX@Z ; btCollisionShape::setUserPointer
; Line 120
	push	-1
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	push	eax
	push	0
	lea	ecx, DWORD PTR _softBody$21627[ebp]
	call	??0btCollisionObjectWrapper@@QAE@PBU0@PBVbtCollisionShape@@PBVbtCollisionObject@@ABVbtTransform@@HH@Z ; btCollisionObjectWrapper::btCollisionObjectWrapper
; Line 122
	mov	edx, DWORD PTR _triangleIndex$[ebx]
	push	edx
	mov	eax, DWORD PTR _partId$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _tm$21624[ebp]
	push	ecx
	push	0
	lea	ecx, DWORD PTR _triBody$21628[ebp]
	call	??0btCollisionObjectWrapper@@QAE@PBU0@PBVbtCollisionShape@@PBVbtCollisionObject@@ABVbtTransform@@HH@Z ; btCollisionObjectWrapper::btCollisionObjectWrapper
; Line 124
	mov	esi, esp
	push	0
	lea	edx, DWORD PTR _triBody$21628[ebp]
	push	edx
	lea	eax, DWORD PTR _softBody$21627[ebp]
	push	eax
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _colAlgo$21629[ebp], eax
; Line 126
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	lea	edx, DWORD PTR _triBody$21628[ebp]
	push	edx
	lea	eax, DWORD PTR _softBody$21627[ebp]
	push	eax
	mov	ecx, DWORD PTR _colAlgo$21629[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _colAlgo$21629[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 127
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _colAlgo$21629[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _colAlgo$21629[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 128
	mov	esi, esp
	mov	ecx, DWORD PTR _colAlgo$21629[ebp]
	push	ecx
	mov	edx, DWORD PTR _ci$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 130
	jmp	$LN4@processTri
$LN2@processTri:
; Line 140
	mov	eax, DWORD PTR _triangle$[ebx]
	push	eax
	mov	ecx, DWORD PTR _triangle$[ebx]
	add	ecx, 32					; 00000020H
	push	ecx
	lea	edx, DWORD PTR $T21632[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _normal$21630[ebp]
	push	eax
	mov	ecx, DWORD PTR _triangle$[ebx]
	push	ecx
	mov	edx, DWORD PTR _triangle$[ebx]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T21631[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
; Line 141
	lea	ecx, DWORD PTR _normal$21630[ebp]
	call	?normalize@btVector3@@QAEAAV1@XZ	; btVector3::normalize
; Line 142
	fld	DWORD PTR __real@3d75c28f
	fstp	DWORD PTR $T23150[ebp]
	lea	ecx, DWORD PTR $T23150[ebp]
	push	ecx
	lea	ecx, DWORD PTR _normal$21630[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 145
	lea	edx, DWORD PTR _normal$21630[ebp]
	push	edx
	mov	eax, DWORD PTR _triangle$[ebx]
	push	eax
	lea	ecx, DWORD PTR _pts$21635[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 146
	lea	edx, DWORD PTR _normal$21630[ebp]
	push	edx
	mov	eax, DWORD PTR _triangle$[ebx]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _pts$21635[ebp+16]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 147
	lea	edx, DWORD PTR _normal$21630[ebp]
	push	edx
	mov	eax, DWORD PTR _triangle$[ebx]
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR _pts$21635[ebp+32]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 148
	lea	edx, DWORD PTR _normal$21630[ebp]
	push	edx
	mov	eax, DWORD PTR _triangle$[ebx]
	push	eax
	lea	ecx, DWORD PTR _pts$21635[ebp+48]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 149
	lea	edx, DWORD PTR _normal$21630[ebp]
	push	edx
	mov	eax, DWORD PTR _triangle$[ebx]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _pts$21635[ebp+64]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 150
	lea	edx, DWORD PTR _normal$21630[ebp]
	push	edx
	mov	eax, DWORD PTR _triangle$[ebx]
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR _pts$21635[ebp+80]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 152
	push	160					; 000000a0H
	call	??2btConvexHullShape@@SAPAXI@Z		; btConvexHullShape::operator new
	add	esp, 4
	mov	DWORD PTR $T23151[ebp], eax
	cmp	DWORD PTR $T23151[ebp], 0
	je	SHORT $LN6@processTri
	push	16					; 00000010H
	push	6
	lea	ecx, DWORD PTR _pts$21635[ebp]
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	eax
	mov	ecx, DWORD PTR $T23151[ebp]
	call	??0btConvexHullShape@@QAE@PBMHH@Z	; btConvexHullShape::btConvexHullShape
	mov	DWORD PTR tv319[ebp], eax
	jmp	SHORT $LN7@processTri
$LN6@processTri:
	mov	DWORD PTR tv319[ebp], 0
$LN7@processTri:
	mov	edx, DWORD PTR tv319[ebp]
	mov	DWORD PTR _tm$21642[ebp], edx
; Line 161
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getCollisionShape@btCollisionObject@@QBEPBVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	ecx, eax
	call	?getUserPointer@btCollisionShape@@QBEPAXXZ ; btCollisionShape::getUserPointer
	push	eax
	mov	ecx, DWORD PTR _tm$21642[ebp]
	call	?setUserPointer@btCollisionShape@@QAEXPAX@Z ; btCollisionShape::setUserPointer
; Line 164
	push	-1
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	push	eax
	push	0
	lea	ecx, DWORD PTR _softBody$21646[ebp]
	call	??0btCollisionObjectWrapper@@QAE@PBU0@PBVbtCollisionShape@@PBVbtCollisionObject@@ABVbtTransform@@HH@Z ; btCollisionObjectWrapper::btCollisionObjectWrapper
; Line 165
	mov	edx, DWORD PTR _triangleIndex$[ebx]
	push	edx
	mov	eax, DWORD PTR _partId$[ebx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	call	?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _tm$21642[ebp]
	push	ecx
	push	0
	lea	ecx, DWORD PTR _triBody$21647[ebp]
	call	??0btCollisionObjectWrapper@@QAE@PBU0@PBVbtCollisionShape@@PBVbtCollisionObject@@ABVbtTransform@@HH@Z ; btCollisionObjectWrapper::btCollisionObjectWrapper
; Line 167
	mov	esi, esp
	push	0
	lea	edx, DWORD PTR _triBody$21647[ebp]
	push	edx
	lea	eax, DWORD PTR _softBody$21646[ebp]
	push	eax
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _colAlgo$21648[ebp], eax
; Line 169
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	lea	edx, DWORD PTR _triBody$21647[ebp]
	push	edx
	lea	eax, DWORD PTR _softBody$21646[ebp]
	push	eax
	mov	ecx, DWORD PTR _colAlgo$21648[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _colAlgo$21648[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 170
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _colAlgo$21648[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _colAlgo$21648[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 171
	mov	esi, esp
	mov	ecx, DWORD PTR _colAlgo$21648[ebp]
	push	ecx
	mov	edx, DWORD PTR _ci$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _ci$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 173
	mov	eax, DWORD PTR _tm$21642[ebp]
	mov	DWORD PTR _triIndex$[ebp+4], eax
; Line 174
	lea	ecx, DWORD PTR _triIndex$[ebp]
	push	ecx
	lea	edx, DWORD PTR _triKey$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?insert@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@ABUbtTriIndex@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::insert
$LN4@processTri:
; Line 180
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@processTri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
	npad	1
$LN19@processTri:
	DD	10					; 0000000aH
	DD	$LN18@processTri
$LN18@processTri:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN8@processTri
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN9@processTri
	DD	-172					; ffffff54H
	DD	8
	DD	$LN10@processTri
	DD	-184					; ffffff48H
	DD	4
	DD	$LN11@processTri
	DD	-224					; ffffff20H
	DD	24					; 00000018H
	DD	$LN12@processTri
	DD	-256					; ffffff00H
	DD	24					; 00000018H
	DD	$LN13@processTri
	DD	-288					; fffffee0H
	DD	16					; 00000010H
	DD	$LN14@processTri
	DD	-448					; fffffe40H
	DD	96					; 00000060H
	DD	$LN15@processTri
	DD	-484					; fffffe1cH
	DD	24					; 00000018H
	DD	$LN16@processTri
	DD	-516					; fffffdfcH
	DD	24					; 00000018H
	DD	$LN17@processTri
$LN17@processTri:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
$LN16@processTri:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
$LN15@processTri:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN14@processTri:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN13@processTri:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
$LN12@processTri:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	0
$LN11@processTri:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	75					; 0000004bH
	DB	101					; 00000065H
	DB	121					; 00000079H
	DB	0
$LN10@processTri:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN9@processTri:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN8@processTri:
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	0
?processTriangle@btSoftBodyTriangleCallback@@UAEXPAVbtVector3@@HH@Z ENDP ; btSoftBodyTriangleCallback::processTriangle
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btCollisionAlgorithmConstructionInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btCollisionAlgorithmConstructionInfo@@QAE@XZ PROC	; btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btcollisionalgorithm.h
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 38
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0btCollisionAlgorithmConstructionInfo@@QAE@XZ ENDP	; btCollisionAlgorithmConstructionInfo::btCollisionAlgorithmConstructionInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btVector3@@QAE@ABM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0btVector3@@QAE@ABM00@Z PROC				; btVector3::btVector3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 134
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 135
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx+8]
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0btVector3@@QAE@ABM00@Z ENDP				; btVector3::btVector3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??XbtVector3@@QAEAAV0@ABM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XbtVector3@@QAEAAV0@ABM@Z PROC			; btVector3::operator*=, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 207
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 208
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 210
	mov	eax, DWORD PTR _this$[ebp]
; Line 211
	mov	esp, ebp
	pop	ebp
	ret	4
??XbtVector3@@QAEAAV0@ABM@Z ENDP			; btVector3::operator*=
_TEXT	ENDS
PUBLIC	??_0btVector3@@QAEAAV0@ABM@Z			; btVector3::operator/=
PUBLIC	?length@btVector3@@QBEMXZ			; btVector3::length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?normalize@btVector3@@QAEAAV1@XZ
_TEXT	SEGMENT
$T23184 = -8						; size = 4
_this$ = -4						; size = 4
?normalize@btVector3@@QAEAAV1@XZ PROC			; btVector3::normalize, COMDAT
; _this$ = ecx
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 338
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR $T23184[ebp]
	lea	eax, DWORD PTR $T23184[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 340
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?normalize@btVector3@@QAEAAV1@XZ ENDP			; btVector3::normalize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_0btVector3@@QAEAAV0@ABM@Z
_TEXT	SEGMENT
$T23187 = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0btVector3@@QAEAAV0@ABM@Z PROC			; btVector3::operator/=, COMDAT
; _this$ = ecx
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 229
	mov	eax, DWORD PTR _s$[ebp]
	fld1
	fdiv	DWORD PTR [eax]
	fstp	DWORD PTR $T23187[ebp]
	lea	ecx, DWORD PTR $T23187[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 231
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_0btVector3@@QAEAAV0@ABM@Z ENDP			; btVector3::operator/=
_TEXT	ENDS
PUBLIC	?btSqrt@@YAMM@Z					; btSqrt
PUBLIC	?length2@btVector3@@QBEMXZ			; btVector3::length2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?length@btVector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length@btVector3@@QBEMXZ PROC				; btVector3::length, COMDAT
; _this$ = ecx
; Line 264
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 265
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	push	ecx
	fstp	DWORD PTR [esp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
; Line 266
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@btVector3@@QBEMXZ ENDP				; btVector3::length
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btSqrt@@YAMM@Z
_TEXT	SEGMENT
_y$ = 8							; size = 4
?btSqrt@@YAMM@Z PROC					; btSqrt, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 388
	push	ebp
	mov	ebp, esp
; Line 404
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
; Line 406
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btSqrt@@YAMM@Z ENDP					; btSqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 434
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	?dot@btVector3@@QBEMABV1@@Z			; btVector3::dot
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?length2@btVector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length2@btVector3@@QBEMXZ PROC				; btVector3::length2, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 258
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 259
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
; Line 260
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length2@btVector3@@QBEMXZ ENDP				; btVector3::length2
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?dot@btVector3@@QBEMABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?dot@btVector3@@QBEMABV1@@Z PROC			; btVector3::dot, COMDAT
; _this$ = ecx
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 252
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
; Line 254
	mov	esp, ebp
	pop	ebp
	ret	4
?dot@btVector3@@QBEMABV1@@Z ENDP			; btVector3::dot
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?cross@btVector3@@QBE?AV1@ABV1@@Z
_TEXT	SEGMENT
$T23202 = -16						; size = 4
$T23201 = -12						; size = 4
$T23200 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?cross@btVector3@@QBE?AV1@ABV1@@Z PROC			; btVector3::cross, COMDAT
; _this$ = ecx
; Line 378
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 412
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T23200[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T23201[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T23202[ebp]
	lea	eax, DWORD PTR $T23200[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23201[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23202[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 414
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?cross@btVector3@@QBE?AV1@ABV1@@Z ENDP			; btVector3::cross
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getX@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getX@btVector3@@QBEABMXZ PROC				; btVector3::getX, COMDAT
; _this$ = ecx
; Line 561
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getX@btVector3@@QBEABMXZ ENDP				; btVector3::getX
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??H@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T23209 = -12						; size = 4
$T23208 = -8						; size = 4
$T23207 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??H@YA?AVbtVector3@@ABV0@0@Z PROC			; operator+, COMDAT
; Line 753
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 762
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T23207[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR $T23208[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR $T23209[ebp]
	lea	eax, DWORD PTR $T23207[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23208[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23209[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 764
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??G@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T23214 = -12						; size = 4
$T23213 = -8						; size = 4
$T23212 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??G@YA?AVbtVector3@@ABV0@0@Z PROC			; operator-, COMDAT
; Line 785
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 798
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T23212[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR $T23213[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR $T23214[ebp]
	lea	eax, DWORD PTR $T23212[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23213[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23214[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 800
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator-
_TEXT	ENDS
PUBLIC	?dot3@btVector3@@QBE?AV1@ABV1@00@Z		; btVector3::dot3
PUBLIC	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z		; btMatrix3x3::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z
_TEXT	SEGMENT
$T9926 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z PROC		; btTransform::operator(), COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 95
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	lea	ecx, DWORD PTR $T9926[ebp]
	push	ecx
	mov	ecx, DWORD PTR _x$[ebx]
	call	?dot3@btVector3@@QBE?AV1@ABV1@00@Z	; btVector3::dot3
	push	eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebx]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 97
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ENDP		; btTransform::operator()
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?dot3@btVector3@@QBE?AV1@ABV1@00@Z
_TEXT	SEGMENT
$T23221 = -16						; size = 4
$T23220 = -12						; size = 4
$T23219 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v0$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
?dot3@btVector3@@QBE?AV1@ABV1@00@Z PROC			; btVector3::dot3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 719
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 745
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T23219[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T23220[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T23221[ebp]
	lea	eax, DWORD PTR $T23219[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23220[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23221[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 747
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?dot3@btVector3@@QBE?AV1@ABV1@00@Z ENDP			; btVector3::dot3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??AbtMatrix3x3@@QBEABVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AbtMatrix3x3@@QBEABVbtVector3@@H@Z PROC		; btMatrix3x3::operator[], COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 161
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
; Line 162
	mov	esp, ebp
	pop	ebp
	ret	4
??AbtMatrix3x3@@QBEABVbtVector3@@H@Z ENDP		; btMatrix3x3::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btTriIndex@@QAE@HHPAVbtCollisionShape@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_partId$ = 8						; size = 4
_triangleIndex$ = 12					; size = 4
_shape$ = 16						; size = 4
??0btTriIndex@@QAE@HHPAVbtCollisionShape@@@Z PROC	; btTriIndex::btTriIndex, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.h
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 41
	mov	eax, DWORD PTR _partId$[ebp]
	shl	eax, 21					; 00000015H
	or	eax, DWORD PTR _triangleIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 42
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _shape$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 43
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0btTriIndex@@QAE@HHPAVbtCollisionShape@@@Z ENDP	; btTriIndex::btTriIndex
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getUid@btTriIndex@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUid@btTriIndex@@QBEHXZ PROC				; btTriIndex::getUid, COMDAT
; _this$ = ecx
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 59
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 60
	mov	esp, ebp
	pop	ebp
	ret	0
?getUid@btTriIndex@@QBEHXZ ENDP				; btTriIndex::getUid
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCollisionShape@btCollisionObject@@QBEPBVbtCollisionShape@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCollisionShape@btCollisionObject@@QBEPBVbtCollisionShape@@XZ PROC ; btCollisionObject::getCollisionShape, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 219
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 220
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+204]
; Line 221
	mov	esp, ebp
	pop	ebp
	ret	0
?getCollisionShape@btCollisionObject@@QBEPBVbtCollisionShape@@XZ ENDP ; btCollisionObject::getCollisionShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ PROC ; btCollisionObject::getCollisionShape, COMDAT
; _this$ = ecx
; Line 224
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+204]
; Line 226
	mov	esp, ebp
	pop	ebp
	ret	0
?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ENDP ; btCollisionObject::getCollisionShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ PROC ; btCollisionObject::getWorldTransform, COMDAT
; _this$ = ecx
; Line 304
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 305
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 306
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ENDP ; btCollisionObject::getWorldTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ PROC ; btCollisionObject::getWorldTransform, COMDAT
; _this$ = ecx
; Line 309
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 310
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 311
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ENDP ; btCollisionObject::getWorldTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setUserPointer@btCollisionShape@@QAEXPAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_userPtr$ = 8						; size = 4
?setUserPointer@btCollisionShape@@QAEXPAX@Z PROC	; btCollisionShape::setUserPointer, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btcollisionshape.h
; Line 125
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 126
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _userPtr$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 127
	mov	esp, ebp
	pop	ebp
	ret	4
?setUserPointer@btCollisionShape@@QAEXPAX@Z ENDP	; btCollisionShape::setUserPointer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getUserPointer@btCollisionShape@@QBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUserPointer@btCollisionShape@@QBEPAXXZ PROC		; btCollisionShape::getUserPointer, COMDAT
; _this$ = ecx
; Line 130
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 131
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 132
	mov	esp, ebp
	pop	ebp
	ret	0
?getUserPointer@btCollisionShape@@QBEPAXXZ ENDP		; btCollisionShape::getUserPointer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btCollisionObjectWrapper@@QAE@PBU0@PBVbtCollisionShape@@PBVbtCollisionObject@@ABVbtTransform@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_parent$ = 8						; size = 4
_shape$ = 12						; size = 4
_collisionObject$ = 16					; size = 4
_worldTransform$ = 20					; size = 4
_partId$ = 24						; size = 4
_index$ = 28						; size = 4
??0btCollisionObjectWrapper@@QAE@PBU0@PBVbtCollisionShape@@PBVbtCollisionObject@@ABVbtTransform@@HH@Z PROC ; btCollisionObjectWrapper::btCollisionObjectWrapper, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobjectwrapper.h
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _shape$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _collisionObject$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _worldTransform$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _partId$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _index$[ebp]
	mov	DWORD PTR [ecx+20], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0btCollisionObjectWrapper@@QAE@PBU0@PBVbtCollisionShape@@PBVbtCollisionObject@@ABVbtTransform@@HH@Z ENDP ; btCollisionObjectWrapper::btCollisionObjectWrapper
_TEXT	ENDS
EXTRN	?btAlignedAllocInternal@@YAPAXIH@Z:PROC		; btAlignedAllocInternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??2btConvexHullShape@@SAPAXI@Z
_TEXT	SEGMENT
_sizeInBytes$ = 8					; size = 4
??2btConvexHullShape@@SAPAXI@Z PROC			; btConvexHullShape::operator new, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconvexhullshape.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _sizeInBytes$[ebp]
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??2btConvexHullShape@@SAPAXI@Z ENDP			; btConvexHullShape::operator new
_TEXT	ENDS
PUBLIC	?btTransformAabb@@YAXABVbtVector3@@MABVbtTransform@@AAV1@2@Z ; btTransformAabb
PUBLIC	??4btTransform@@QAEAAV0@ABV0@@Z			; btTransform::operator=
PUBLIC	??DbtTransform@@QBE?AV0@ABV0@@Z			; btTransform::operator*
PUBLIC	?inverse@btTransform@@QBE?AV1@XZ		; btTransform::inverse
PUBLIC	?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ; btCollisionObjectWrapper::getWorldTransform
PUBLIC	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z	; btTransform::setOrigin
PUBLIC	?setIdentity@btTransform@@QAEXXZ		; btTransform::setIdentity
PUBLIC	??0btTransform@@QAE@XZ				; btTransform::btTransform
PUBLIC	??D@YA?AVbtVector3@@ABV0@ABM@Z			; operator*
PUBLIC	__real@3f000000
PUBLIC	__$ArrayPad$
PUBLIC	?setTimeStepAndCounters@btSoftBodyTriangleCallback@@QAEXMPBUbtCollisionObjectWrapper@@ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z ; btSoftBodyTriangleCallback::setTimeStepAndCounters
;	COMDAT __real@3f000000
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?setTimeStepAndCounters@btSoftBodyTriangleCallback@@QAEXMPBUbtCollisionObjectWrapper@@ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z
_TEXT	SEGMENT
$T23248 = -504						; size = 4
$T23247 = -500						; size = 4
$T21669 = -496						; size = 64
$T21668 = -432						; size = 64
_convexInTriangleSpace$ = -352				; size = 64
_softTransform$ = -272					; size = 64
$T21663 = -192						; size = 16
_softBodyCenter$ = -160					; size = 16
$T21659 = -128						; size = 16
_halfExtents$ = -96					; size = 16
_aabbWorldSpaceMax$ = -64				; size = 16
_aabbWorldSpaceMin$ = -32				; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_collisionMarginTriangle$ = 8				; size = 4
_triBodyWrap$ = 12					; size = 4
_dispatchInfo$ = 16					; size = 4
_resultOut$ = 20					; size = 4
?setTimeStepAndCounters@btSoftBodyTriangleCallback@@QAEXMPBUbtCollisionObjectWrapper@@ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z PROC ; btSoftBodyTriangleCallback::setTimeStepAndCounters, COMDAT
; _this$ = ecx
; Line 185
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 508				; 000001fcH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-508]
	mov	ecx, 127				; 0000007fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dispatchInfo$[ebx]
	mov	DWORD PTR [eax+56], ecx
; Line 187
	fld	DWORD PTR _collisionMarginTriangle$[ebx]
	fadd	DWORD PTR __real@3d75c28f
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+60]
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _resultOut$[ebx]
	mov	DWORD PTR [eax+48], ecx
; Line 191
	lea	ecx, DWORD PTR _aabbWorldSpaceMin$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	lea	ecx, DWORD PTR _aabbWorldSpaceMax$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 192
	mov	esi, esp
	lea	edx, DWORD PTR _aabbWorldSpaceMax$[ebp]
	push	edx
	lea	eax, DWORD PTR _aabbWorldSpaceMin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 193
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR $T23247[ebp]
	lea	ecx, DWORD PTR $T23247[ebp]
	push	ecx
	lea	edx, DWORD PTR _aabbWorldSpaceMin$[ebp]
	push	edx
	lea	eax, DWORD PTR _aabbWorldSpaceMax$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T21659[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _halfExtents$[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 194
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR $T23248[ebp]
	lea	eax, DWORD PTR $T23248[ebp]
	push	eax
	lea	ecx, DWORD PTR _aabbWorldSpaceMin$[ebp]
	push	ecx
	lea	edx, DWORD PTR _aabbWorldSpaceMax$[ebp]
	push	edx
	lea	eax, DWORD PTR $T21663[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _softBodyCenter$[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 196
	lea	ecx, DWORD PTR _softTransform$[ebp]
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
; Line 197
	lea	ecx, DWORD PTR _softTransform$[ebp]
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 198
	lea	edx, DWORD PTR _softBodyCenter$[ebp]
	push	edx
	lea	ecx, DWORD PTR _softTransform$[ebp]
	call	?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ; btTransform::setOrigin
; Line 200
	lea	ecx, DWORD PTR _convexInTriangleSpace$[ebp]
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
; Line 201
	lea	eax, DWORD PTR _softTransform$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T21669[ebp]
	push	ecx
	lea	edx, DWORD PTR $T21668[ebp]
	push	edx
	mov	ecx, DWORD PTR _triBodyWrap$[ebx]
	call	?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ; btCollisionObjectWrapper::getWorldTransform
	mov	ecx, eax
	call	?inverse@btTransform@@QBE?AV1@XZ	; btTransform::inverse
	mov	ecx, eax
	call	??DbtTransform@@QBE?AV0@ABV0@@Z		; btTransform::operator*
	push	eax
	lea	ecx, DWORD PTR _convexInTriangleSpace$[ebp]
	call	??4btTransform@@QAEAAV0@ABV0@@Z		; btTransform::operator=
; Line 202
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _convexInTriangleSpace$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+60]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _halfExtents$[ebp]
	push	ecx
	call	?btTransformAabb@@YAXABVbtVector3@@MABVbtTransform@@AAV1@2@Z ; btTransformAabb
	add	esp, 20					; 00000014H
; Line 203
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@setTimeSte
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	3
$LN10@setTimeSte:
	DD	6
	DD	$LN9@setTimeSte
$LN9@setTimeSte:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@setTimeSte
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN4@setTimeSte
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN5@setTimeSte
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN6@setTimeSte
	DD	-272					; fffffef0H
	DD	64					; 00000040H
	DD	$LN7@setTimeSte
	DD	-352					; fffffea0H
	DD	64					; 00000040H
	DD	$LN8@setTimeSte
$LN8@setTimeSte:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	0
$LN7@setTimeSte:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
$LN6@setTimeSte:
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	121					; 00000079H
	DB	67					; 00000043H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN5@setTimeSte:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	102					; 00000066H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN4@setTimeSte:
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
$LN3@setTimeSte:
	DB	97					; 00000061H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	87					; 00000057H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	77					; 0000004dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
?setTimeStepAndCounters@btSoftBodyTriangleCallback@@QAEXMPBUbtCollisionObjectWrapper@@ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z ENDP ; btSoftBodyTriangleCallback::setTimeStepAndCounters
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??D@YA?AVbtVector3@@ABV0@ABM@Z
_TEXT	SEGMENT
$T23263 = -12						; size = 4
$T23262 = -8						; size = 4
$T23261 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_s$ = 16						; size = 4
??D@YA?AVbtVector3@@ABV0@ABM@Z PROC			; operator*, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 819
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 828
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T23261[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR $T23262[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx]
	fstp	DWORD PTR $T23263[ebp]
	lea	eax, DWORD PTR $T23261[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23262[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23263[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 830
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABV0@ABM@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	??0btMatrix3x3@@QAE@XZ				; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btTransform@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btTransform@@QAE@XZ PROC				; btTransform::btTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btMatrix3x3@@QAE@XZ			; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btTransform@@QAE@XZ ENDP				; btTransform::btTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btMatrix3x3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btMatrix3x3@@QAE@XZ PROC				; btMatrix3x3::btMatrix3x3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btMatrix3x3@@QAE@XZ ENDP				; btMatrix3x3::btMatrix3x3
_TEXT	ENDS
PUBLIC	??4btMatrix3x3@@QAEAAV0@ABV0@@Z			; btMatrix3x3::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4btTransform@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??4btTransform@@QAEAAV0@ABV0@@Z PROC			; btTransform::operator=, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4btMatrix3x3@@QAEAAV0@ABV0@@Z		; btMatrix3x3::operator=
; Line 72
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
; Line 74
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4btTransform@@QAEAAV0@ABV0@@Z ENDP			; btTransform::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4btMatrix3x3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??4btMatrix3x3@@QAEAAV0@ABV0@@Z PROC			; btMatrix3x3::operator=, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 123
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 124
	mov	eax, DWORD PTR _other$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 125
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 126
	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 127
	mov	eax, DWORD PTR _this$[ebp]
; Line 128
	mov	esp, ebp
	pop	ebp
	ret	4
??4btMatrix3x3@@QAEAAV0@ABV0@@Z ENDP			; btMatrix3x3::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setOrigin@btTransform@@QAEXABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_origin$ = 8						; size = 4
?setOrigin@btTransform@@QAEXABVbtVector3@@@Z PROC	; btTransform::setOrigin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 152
	mov	eax, DWORD PTR _origin$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	4
?setOrigin@btTransform@@QAEXABVbtVector3@@@Z ENDP	; btTransform::setOrigin
_TEXT	ENDS
PUBLIC	?setValue@btVector3@@QAEXABM00@Z		; btVector3::setValue
PUBLIC	?setIdentity@btMatrix3x3@@QAEXXZ		; btMatrix3x3::setIdentity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setIdentity@btTransform@@QAEXXZ
_TEXT	SEGMENT
$T23278 = -16						; size = 4
$T23277 = -12						; size = 4
$T23276 = -8						; size = 4
_this$ = -4						; size = 4
?setIdentity@btTransform@@QAEXXZ PROC			; btTransform::setIdentity, COMDAT
; _this$ = ecx
; Line 173
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 174
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setIdentity@btMatrix3x3@@QAEXXZ	; btMatrix3x3::setIdentity
; Line 175
	fldz
	fstp	DWORD PTR $T23276[ebp]
	fldz
	fstp	DWORD PTR $T23277[ebp]
	fldz
	fstp	DWORD PTR $T23278[ebp]
	lea	eax, DWORD PTR $T23276[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23277[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23278[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 176
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setIdentity@btTransform@@QAEXXZ ENDP			; btTransform::setIdentity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setValue@btVector3@@QAEXABM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
?setValue@btVector3@@QAEXABM00@Z PROC			; btVector3::setValue, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 643
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 644
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx+8]
; Line 645
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
; Line 646
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setValue@btVector3@@QAEXABM00@Z ENDP			; btVector3::setValue
_TEXT	ENDS
PUBLIC	?setValue@btMatrix3x3@@QAEXABM00000000@Z	; btMatrix3x3::setValue
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setIdentity@btMatrix3x3@@QAEXXZ
_TEXT	SEGMENT
$T23291 = -40						; size = 4
$T23290 = -36						; size = 4
$T23289 = -32						; size = 4
$T23288 = -28						; size = 4
$T23287 = -24						; size = 4
$T23286 = -20						; size = 4
$T23285 = -16						; size = 4
$T23284 = -12						; size = 4
$T23283 = -8						; size = 4
_this$ = -4						; size = 4
?setIdentity@btMatrix3x3@@QAEXXZ PROC			; btMatrix3x3::setIdentity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 318
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 326
	fld1
	fstp	DWORD PTR $T23283[ebp]
	fldz
	fstp	DWORD PTR $T23284[ebp]
	fldz
	fstp	DWORD PTR $T23285[ebp]
	fldz
	fstp	DWORD PTR $T23286[ebp]
	fld1
	fstp	DWORD PTR $T23287[ebp]
	fldz
	fstp	DWORD PTR $T23288[ebp]
	fldz
	fstp	DWORD PTR $T23289[ebp]
	fldz
	fstp	DWORD PTR $T23290[ebp]
	fld1
	fstp	DWORD PTR $T23291[ebp]
	lea	eax, DWORD PTR $T23283[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23284[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23285[ebp]
	push	edx
	lea	eax, DWORD PTR $T23286[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23287[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23288[ebp]
	push	edx
	lea	eax, DWORD PTR $T23289[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23290[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23291[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btMatrix3x3@@QAEXABM00000000@Z ; btMatrix3x3::setValue
; Line 328
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?setIdentity@btMatrix3x3@@QAEXXZ ENDP			; btMatrix3x3::setIdentity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setValue@btMatrix3x3@@QAEXABM00000000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xx$ = 8						; size = 4
_xy$ = 12						; size = 4
_xz$ = 16						; size = 4
_yx$ = 20						; size = 4
_yy$ = 24						; size = 4
_yz$ = 28						; size = 4
_zx$ = 32						; size = 4
_zy$ = 36						; size = 4
_zz$ = 40						; size = 4
?setValue@btMatrix3x3@@QAEXABM00000000@Z PROC		; btMatrix3x3::setValue, COMDAT
; _this$ = ecx
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 202
	mov	eax, DWORD PTR _xz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 203
	mov	eax, DWORD PTR _yz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 204
	mov	eax, DWORD PTR _zz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _zx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 205
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?setValue@btMatrix3x3@@QAEXABM00000000@Z ENDP		; btMatrix3x3::setValue
_TEXT	ENDS
PUBLIC	??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ; btTransform::btTransform
PUBLIC	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z	; operator*
PUBLIC	??G@YA?AVbtVector3@@ABV0@@Z			; operator-
PUBLIC	?transpose@btMatrix3x3@@QBE?AV1@XZ		; btMatrix3x3::transpose
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?inverse@btTransform@@QBE?AV1@XZ
_TEXT	SEGMENT
$T9973 = -112						; size = 16
$T9972 = -96						; size = 16
_inv$ = -64						; size = 48
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?inverse@btTransform@@QBE?AV1@XZ PROC			; btTransform::inverse, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 189
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 190
	lea	eax, DWORD PTR _inv$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?transpose@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::transpose
; Line 191
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	lea	edx, DWORD PTR $T9972[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@@Z		; operator-
	add	esp, 8
	push	eax
	lea	eax, DWORD PTR _inv$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T9973[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _inv$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ; btTransform::btTransform
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 192
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@inverse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	3
$LN5@inverse:
	DD	1
	DD	$LN4@inverse
$LN4@inverse:
	DD	-64					; ffffffc0H
	DD	48					; 00000030H
	DD	$LN3@inverse
$LN3@inverse:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
?inverse@btTransform@@QBE?AV1@XZ ENDP			; btTransform::inverse
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??G@YA?AVbtVector3@@ABV0@@Z
_TEXT	SEGMENT
$T23304 = -12						; size = 4
$T23303 = -8						; size = 4
$T23302 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??G@YA?AVbtVector3@@ABV0@@Z PROC			; operator-, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 805
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 812
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fchs
	fstp	DWORD PTR $T23302[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fchs
	fstp	DWORD PTR $T23303[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx]
	fchs
	fstp	DWORD PTR $T23304[ebp]
	lea	eax, DWORD PTR $T23302[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23303[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23304[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 814
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVbtVector3@@ABV0@@Z ENDP			; operator-
_TEXT	ENDS
PUBLIC	??0btMatrix3x3@@QAE@ABM00000000@Z		; btMatrix3x3::btMatrix3x3
PUBLIC	?x@btVector3@@QBEABMXZ				; btVector3::x
PUBLIC	?y@btVector3@@QBEABMXZ				; btVector3::y
PUBLIC	?z@btVector3@@QBEABMXZ				; btVector3::z
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?transpose@btMatrix3x3@@QBE?AV1@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?transpose@btMatrix3x3@@QBE?AV1@XZ PROC			; btMatrix3x3::transpose, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 981
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1012
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1014
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?transpose@btMatrix3x3@@QBE?AV1@XZ ENDP			; btMatrix3x3::transpose
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?x@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?x@btVector3@@QBEABMXZ PROC				; btVector3::x, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 575
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?x@btVector3@@QBEABMXZ ENDP				; btVector3::x
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?y@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?y@btVector3@@QBEABMXZ PROC				; btVector3::y, COMDAT
; _this$ = ecx
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?y@btVector3@@QBEABMXZ ENDP				; btVector3::y
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?z@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?z@btVector3@@QBEABMXZ PROC				; btVector3::z, COMDAT
; _this$ = ecx
; Line 579
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?z@btVector3@@QBEABMXZ ENDP				; btVector3::z
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btMatrix3x3@@QAE@ABM00000000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xx$ = 8						; size = 4
_xy$ = 12						; size = 4
_xz$ = 16						; size = 4
_yx$ = 20						; size = 4
_yy$ = 24						; size = 4
_yz$ = 28						; size = 4
_zx$ = 32						; size = 4
_zy$ = 36						; size = 4
_zz$ = 40						; size = 4
??0btMatrix3x3@@QAE@ABM00000000@Z PROC			; btMatrix3x3::btMatrix3x3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
; Line 75
	mov	ecx, DWORD PTR _zz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _zy$[ebp]
	push	edx
	mov	eax, DWORD PTR _zx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yy$[ebp]
	push	edx
	mov	eax, DWORD PTR _yx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xy$[ebp]
	push	edx
	mov	eax, DWORD PTR _xx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btMatrix3x3@@QAEXABM00000000@Z ; btMatrix3x3::setValue
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0btMatrix3x3@@QAE@ABM00000000@Z ENDP			; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z
_TEXT	SEGMENT
$T23319 = -12						; size = 4
$T23318 = -8						; size = 4
$T23317 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z PROC	; operator*, COMDAT
; Line 1147
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1151
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T23317[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T23318[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T23319[ebp]
	lea	eax, DWORD PTR $T23317[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23318[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23319[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1153
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ENDP	; operator*
_TEXT	ENDS
PUBLIC	??0btMatrix3x3@@QAE@ABV0@@Z			; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 4
_c$ = 12						; size = 4
??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z PROC ; btTransform::btTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 61
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ENDP ; btTransform::btTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btMatrix3x3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??0btMatrix3x3@@QAE@ABV0@@Z PROC			; btMatrix3x3::btMatrix3x3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
; Line 116
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 117
	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 118
	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 119
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btMatrix3x3@@QAE@ABV0@@Z ENDP			; btMatrix3x3::btMatrix3x3
_TEXT	ENDS
PUBLIC	??D@YA?AVbtMatrix3x3@@ABV0@0@Z			; operator*
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DbtTransform@@QBE?AV0@ABV0@@Z
_TEXT	SEGMENT
$T10010 = -80						; size = 16
$T10009 = -64						; size = 48
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_t$ = 12						; size = 4
??DbtTransform@@QBE?AV0@ABV0@@Z PROC			; btTransform::operator*, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 239
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 241
	mov	eax, DWORD PTR _t$[ebx]
	add	eax, 48					; 00000030H
	push	eax
	lea	ecx, DWORD PTR $T10010[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
	push	eax
	mov	edx, DWORD PTR _t$[ebx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T10009[ebp]
	push	ecx
	call	??D@YA?AVbtMatrix3x3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	call	??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ; btTransform::btTransform
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 242
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
??DbtTransform@@QBE?AV0@ABV0@@Z ENDP			; btTransform::operator*
_TEXT	ENDS
PUBLIC	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z	; btMatrix3x3::tdotx
PUBLIC	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z	; btMatrix3x3::tdoty
PUBLIC	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z	; btMatrix3x3::tdotz
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??D@YA?AVbtMatrix3x3@@ABV0@0@Z
_TEXT	SEGMENT
$T23337 = -36						; size = 4
$T23336 = -32						; size = 4
$T23335 = -28						; size = 4
$T23334 = -24						; size = 4
$T23333 = -20						; size = 4
$T23332 = -16						; size = 4
$T23331 = -12						; size = 4
$T23330 = -8						; size = 4
$T23329 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??D@YA?AVbtMatrix3x3@@ABV0@0@Z PROC			; operator*, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 1198
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1277
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T23329[ebp]
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T23330[ebp]
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T23331[ebp]
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T23332[ebp]
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T23333[ebp]
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T23334[ebp]
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T23335[ebp]
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T23336[ebp]
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T23337[ebp]
	lea	eax, DWORD PTR $T23329[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23330[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23331[ebp]
	push	edx
	lea	eax, DWORD PTR $T23332[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23333[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23334[ebp]
	push	edx
	lea	eax, DWORD PTR $T23335[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23336[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23337[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1279
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtMatrix3x3@@ABV0@0@Z ENDP			; operator*
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z PROC		; btMatrix3x3::tdotx, COMDAT
; _this$ = ecx
; Line 617
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 618
	mov	ecx, DWORD PTR _this$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	fstp	DWORD PTR tv128[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR tv130[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv130[ebp]
; Line 619
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ENDP		; btMatrix3x3::tdotx
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z PROC		; btMatrix3x3::tdoty, COMDAT
; _this$ = ecx
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 622
	mov	ecx, DWORD PTR _this$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	fstp	DWORD PTR tv128[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR tv130[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv130[ebp]
; Line 623
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ENDP		; btMatrix3x3::tdoty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z PROC		; btMatrix3x3::tdotz, COMDAT
; _this$ = ecx
; Line 625
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	fstp	DWORD PTR tv128[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR tv130[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv130[ebp]
; Line 627
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ENDP		; btMatrix3x3::tdotz
_TEXT	ENDS
PUBLIC	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z		; btMatrix3x3::operator[]
PUBLIC	?getOrigin@btTransform@@QBEABVbtVector3@@XZ	; btTransform::getOrigin
PUBLIC	?absolute@btMatrix3x3@@QBE?AV1@XZ		; btMatrix3x3::absolute
PUBLIC	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ	; btTransform::getBasis
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btTransformAabb@@YAXABVbtVector3@@MABVbtTransform@@AAV1@2@Z
_TEXT	SEGMENT
$T12942 = -240						; size = 16
$T12941 = -224						; size = 16
_extent$ = -192						; size = 16
_center$ = -160						; size = 16
_abs_b$ = -128						; size = 48
$T12934 = -64						; size = 16
_halfExtentsWithMargin$ = -32				; size = 16
__$ArrayPad$ = -4					; size = 4
_halfExtents$ = 8					; size = 4
_margin$ = 12						; size = 4
_t$ = 16						; size = 4
_aabbMinOut$ = 20					; size = 4
_aabbMaxOut$ = 24					; size = 4
?btTransformAabb@@YAXABVbtVector3@@MABVbtTransform@@AAV1@2@Z PROC ; btTransformAabb, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btaabbutil2.h
; Line 183
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 184
	lea	eax, DWORD PTR _margin$[ebx]
	push	eax
	lea	ecx, DWORD PTR _margin$[ebx]
	push	ecx
	lea	edx, DWORD PTR _margin$[ebx]
	push	edx
	lea	ecx, DWORD PTR $T12934[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	eax, DWORD PTR _halfExtents$[ebx]
	push	eax
	lea	ecx, DWORD PTR _halfExtentsWithMargin$[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 185
	lea	edx, DWORD PTR _abs_b$[ebp]
	push	edx
	mov	ecx, DWORD PTR _t$[ebx]
	call	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
	mov	ecx, eax
	call	?absolute@btMatrix3x3@@QBE?AV1@XZ	; btMatrix3x3::absolute
; Line 186
	mov	ecx, DWORD PTR _t$[ebx]
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _center$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _center$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _center$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _center$[ebp+12], edx
; Line 187
	push	2
	lea	ecx, DWORD PTR _abs_b$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	1
	lea	ecx, DWORD PTR _abs_b$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	0
	lea	ecx, DWORD PTR _abs_b$[ebp]
	call	??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	lea	eax, DWORD PTR _extent$[ebp]
	push	eax
	lea	ecx, DWORD PTR _halfExtentsWithMargin$[ebp]
	call	?dot3@btVector3@@QBE?AV1@ABV1@00@Z	; btVector3::dot3
; Line 188
	lea	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	lea	eax, DWORD PTR $T12941[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _aabbMinOut$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 189
	lea	ecx, DWORD PTR _extent$[ebp]
	push	ecx
	lea	edx, DWORD PTR _center$[ebp]
	push	edx
	lea	eax, DWORD PTR $T12942[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _aabbMaxOut$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 190
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@btTransfor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN8@btTransfor:
	DD	4
	DD	$LN7@btTransfor
$LN7@btTransfor:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@btTransfor
	DD	-128					; ffffff80H
	DD	48					; 00000030H
	DD	$LN4@btTransfor
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN5@btTransfor
	DD	-192					; ffffff40H
	DD	16					; 00000010H
	DD	$LN6@btTransfor
$LN6@btTransfor:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN5@btTransfor:
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN4@btTransfor:
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	0
$LN3@btTransfor:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	102					; 00000066H
	DB	69					; 00000045H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	87					; 00000057H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
?btTransformAabb@@YAXABVbtVector3@@MABVbtTransform@@AAV1@2@Z ENDP ; btTransformAabb
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z PROC		; btMatrix3x3::operator[], COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 151
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 153
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
; Line 154
	mov	esp, ebp
	pop	ebp
	ret	4
??AbtMatrix3x3@@QAEAAVbtVector3@@H@Z ENDP		; btMatrix3x3::operator[]
_TEXT	ENDS
PUBLIC	?btFabs@@YAMM@Z					; btFabs
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?absolute@btMatrix3x3@@QBE?AV1@XZ
_TEXT	SEGMENT
$T23365 = -40						; size = 4
$T23364 = -36						; size = 4
$T23363 = -32						; size = 4
$T23362 = -28						; size = 4
$T23361 = -24						; size = 4
$T23360 = -20						; size = 4
$T23359 = -16						; size = 4
$T23358 = -12						; size = 4
$T23357 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?absolute@btMatrix3x3@@QBE?AV1@XZ PROC			; btMatrix3x3::absolute, COMDAT
; _this$ = ecx
; Line 960
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 975
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fstp	DWORD PTR $T23357[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fstp	DWORD PTR $T23358[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fstp	DWORD PTR $T23359[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fstp	DWORD PTR $T23360[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fstp	DWORD PTR $T23361[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fstp	DWORD PTR $T23362[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fstp	DWORD PTR $T23363[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fstp	DWORD PTR $T23364[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	?btFabs@@YAMM@Z				; btFabs
	add	esp, 4
	fstp	DWORD PTR $T23365[ebp]
	lea	eax, DWORD PTR $T23357[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23358[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23359[ebp]
	push	edx
	lea	eax, DWORD PTR $T23360[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23361[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23362[ebp]
	push	edx
	lea	eax, DWORD PTR $T23363[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23364[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23365[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 977
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?absolute@btMatrix3x3@@QBE?AV1@XZ ENDP			; btMatrix3x3::absolute
_TEXT	ENDS
PUBLIC	_fabsf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btFabs@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?btFabs@@YAMM@Z PROC					; btFabs, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 407
	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	_fabsf
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btFabs@@YAMM@Z ENDP					; btFabs
_TEXT	ENDS
EXTRN	_fabs:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _fabsf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 395
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ PROC	; btTransform::getBasis, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ENDP	; btTransform::getBasis
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getOrigin@btTransform@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOrigin@btTransform@@QBEABVbtVector3@@XZ PROC	; btTransform::getOrigin, COMDAT
; _this$ = ecx
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esp, ebp
	pop	ebp
	ret	0
?getOrigin@btTransform@@QBEABVbtVector3@@XZ ENDP	; btTransform::getOrigin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ PROC ; btCollisionObjectWrapper::getWorldTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobjectwrapper.h
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldTransform@btCollisionObjectWrapper@@QBEABVbtTransform@@XZ ENDP ; btCollisionObjectWrapper::getWorldTransform
_TEXT	ENDS
PUBLIC	?clearCache@btSoftBodyConcaveCollisionAlgorithm@@QAEXXZ ; btSoftBodyConcaveCollisionAlgorithm::clearCache
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clearCache@btSoftBodyConcaveCollisionAlgorithm@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clearCache@btSoftBodyConcaveCollisionAlgorithm@@QAEXXZ PROC ; btSoftBodyConcaveCollisionAlgorithm::clearCache, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 207
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?clearCache@btSoftBodyTriangleCallback@@QAEXXZ ; btSoftBodyTriangleCallback::clearCache
; Line 209
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clearCache@btSoftBodyConcaveCollisionAlgorithm@@QAEXXZ ENDP ; btSoftBodyConcaveCollisionAlgorithm::clearCache
_TEXT	ENDS
PUBLIC	?getAabbMin@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ ; btSoftBodyTriangleCallback::getAabbMin
PUBLIC	?getAabbMax@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ ; btSoftBodyTriangleCallback::getAabbMax
PUBLIC	?isConcave@btCollisionShape@@QBE_NXZ		; btCollisionShape::isConcave
PUBLIC	?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ; btCollisionObjectWrapper::getCollisionShape
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?processCollision@btSoftBodyConcaveCollisionAlgorithm@@UAEXPBUbtCollisionObjectWrapper@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z
_TEXT	SEGMENT
tv67 = -24						; size = 4
_collisionMarginTriangle$21685 = -20			; size = 4
_concaveShape$21683 = -16				; size = 4
_triOb$21682 = -12					; size = 4
_triBody$ = -8						; size = 4
_this$ = -4						; size = 4
_body0Wrap$ = 8						; size = 4
_body1Wrap$ = 12					; size = 4
_dispatchInfo$ = 16					; size = 4
_resultOut$ = 20					; size = 4
?processCollision@btSoftBodyConcaveCollisionAlgorithm@@UAEXPBUbtCollisionObjectWrapper@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z PROC ; btSoftBodyConcaveCollisionAlgorithm::processCollision, COMDAT
; _this$ = ecx
; Line 212
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 216
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN4@processCol
	mov	edx, DWORD PTR _body0Wrap$[ebp]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN5@processCol
$LN4@processCol:
	mov	eax, DWORD PTR _body1Wrap$[ebp]
	mov	DWORD PTR tv67[ebp], eax
$LN5@processCol:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _triBody$[ebp], ecx
; Line 218
	mov	ecx, DWORD PTR _triBody$[ebp]
	call	?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ; btCollisionObjectWrapper::getCollisionShape
	mov	ecx, eax
	call	?isConcave@btCollisionShape@@QBE_NXZ	; btCollisionShape::isConcave
	movzx	edx, al
	test	edx, edx
	je	$LN1@processCol
; Line 222
	mov	ecx, DWORD PTR _triBody$[ebp]
	call	?getCollisionObject@btCollisionObjectWrapper@@QBEPBVbtCollisionObject@@XZ ; btCollisionObjectWrapper::getCollisionObject
	mov	DWORD PTR _triOb$21682[ebp], eax
; Line 223
	mov	ecx, DWORD PTR _triOb$21682[ebp]
	call	?getCollisionShape@btCollisionObject@@QBEPBVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR _concaveShape$21683[ebp], eax
; Line 227
	mov	eax, DWORD PTR _concaveShape$21683[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _concaveShape$21683[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _collisionMarginTriangle$21685[ebp]
; Line 230
	mov	ecx, DWORD PTR _resultOut$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dispatchInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _triBody$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _collisionMarginTriangle$21685[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?setTimeStepAndCounters@btSoftBodyTriangleCallback@@QAEXMPBUbtCollisionObjectWrapper@@ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z ; btSoftBodyTriangleCallback::setTimeStepAndCounters
; Line 233
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?getAabbMax@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ ; btSoftBodyTriangleCallback::getAabbMax
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?getAabbMin@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ ; btSoftBodyTriangleCallback::getAabbMin
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _concaveShape$21683[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _concaveShape$21683[ebp]
	mov	edx, DWORD PTR [eax+60]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@processCol:
; Line 241
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?processCollision@btSoftBodyConcaveCollisionAlgorithm@@UAEXPBUbtCollisionObjectWrapper@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z ENDP ; btSoftBodyConcaveCollisionAlgorithm::processCollision
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAabbMin@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAabbMin@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ PROC ; btSoftBodyTriangleCallback::getAabbMin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.h
; Line 97
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 99
	mov	esp, ebp
	pop	ebp
	ret	0
?getAabbMin@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ ENDP ; btSoftBodyTriangleCallback::getAabbMin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAabbMax@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getAabbMax@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ PROC ; btSoftBodyTriangleCallback::getAabbMax, COMDAT
; _this$ = ecx
; Line 101
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 102
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
; Line 103
	mov	esp, ebp
	pop	ebp
	ret	0
?getAabbMax@btSoftBodyTriangleCallback@@QBEABVbtVector3@@XZ ENDP ; btSoftBodyTriangleCallback::getAabbMax
_TEXT	ENDS
PUBLIC	?isConcave@btBroadphaseProxy@@SA_NH@Z		; btBroadphaseProxy::isConcave
PUBLIC	?getShapeType@btCollisionShape@@QBEHXZ		; btCollisionShape::getShapeType
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?isConcave@btCollisionShape@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isConcave@btCollisionShape@@QBE_NXZ PROC		; btCollisionShape::isConcave, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btcollisionshape.h
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getShapeType@btCollisionShape@@QBEHXZ	; btCollisionShape::getShapeType
	push	eax
	call	?isConcave@btBroadphaseProxy@@SA_NH@Z	; btBroadphaseProxy::isConcave
	add	esp, 4
; Line 83
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isConcave@btCollisionShape@@QBE_NXZ ENDP		; btCollisionShape::isConcave
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?isConcave@btBroadphaseProxy@@SA_NH@Z
_TEXT	SEGMENT
tv66 = -4						; size = 4
_proxyType$ = 8						; size = 4
?isConcave@btBroadphaseProxy@@SA_NH@Z PROC		; btBroadphaseProxy::isConcave, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btbroadphaseproxy.h
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 152
	cmp	DWORD PTR _proxyType$[ebp], 20		; 00000014H
	jle	SHORT $LN3@isConcave
	cmp	DWORD PTR _proxyType$[ebp], 30		; 0000001eH
	jge	SHORT $LN3@isConcave
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@isConcave
$LN3@isConcave:
	mov	DWORD PTR tv66[ebp], 0
$LN4@isConcave:
	mov	al, BYTE PTR tv66[ebp]
; Line 153
	mov	esp, ebp
	pop	ebp
	ret	0
?isConcave@btBroadphaseProxy@@SA_NH@Z ENDP		; btBroadphaseProxy::isConcave
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getShapeType@btCollisionShape@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getShapeType@btCollisionShape@@QBEHXZ PROC		; btCollisionShape::getShapeType, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btcollisionshape.h
; Line 111
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?getShapeType@btCollisionShape@@QBEHXZ ENDP		; btCollisionShape::getShapeType
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ PROC ; btCollisionObjectWrapper::getCollisionShape, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobjectwrapper.h
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?getCollisionShape@btCollisionObjectWrapper@@QBEPBVbtCollisionShape@@XZ ENDP ; btCollisionObjectWrapper::getCollisionShape
_TEXT	ENDS
PUBLIC	??1LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAE@XZ ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::~LocalTriangleSphereCastCallback
PUBLIC	?setHitFraction@btCollisionObject@@QAEXM@Z	; btCollisionObject::setHitFraction
PUBLIC	?getHitFraction@btCollisionObject@@QBEMXZ	; btCollisionObject::getHitFraction
PUBLIC	??YbtVector3@@QAEAAV0@ABV0@@Z			; btVector3::operator+=
PUBLIC	??ZbtVector3@@QAEAAV0@ABV0@@Z			; btVector3::operator-=
PUBLIC	?getCcdSweptSphereRadius@btCollisionObject@@QBEMXZ ; btCollisionObject::getCcdSweptSphereRadius
PUBLIC	?setMax@btVector3@@QAEXABV1@@Z			; btVector3::setMax
PUBLIC	?setMin@btVector3@@QAEXABV1@@Z			; btVector3::setMin
PUBLIC	?getCcdSquareMotionThreshold@btCollisionObject@@QBEMXZ ; btCollisionObject::getCcdSquareMotionThreshold
PUBLIC	?getInterpolationWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getInterpolationWorldTransform
PUBLIC	?getOrigin@btTransform@@QAEAAVbtVector3@@XZ	; btTransform::getOrigin
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z
_TEXT	SEGMENT
tv71 = -664						; size = 4
tv67 = -660						; size = 4
$T23403 = -656						; size = 4
_triangleMesh$21741 = -652				; size = 4
_concavebody$21740 = -648				; size = 4
_raycastCallback$21739 = -640				; size = 224
_curHitFraction$21738 = -404				; size = 4
$T21737 = -400						; size = 16
$T21736 = -384						; size = 16
_ccdRadius0$21735 = -364				; size = 4
_rayAabbMax$21734 = -352				; size = 16
_rayAabbMin$21733 = -320				; size = 16
_convexToLocal$ = -288					; size = 64
_convexFromLocal$ = -208				; size = 64
_triInv$ = -128						; size = 64
$T21698 = -48						; size = 16
_squareMot0$ = -20					; size = 4
_triBody$ = -16						; size = 4
_convexbody$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_body0$ = 8						; size = 4
_body1$ = 12						; size = 4
_dispatchInfo$ = 16					; size = 4
_resultOut$ = 20					; size = 4
?calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z PROC ; btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
; Line 245
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 668				; 0000029cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-668]
	mov	ecx, 167				; 000000a7H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 248
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN7@calculateT
	mov	edx, DWORD PTR _body1$[ebx]
	mov	DWORD PTR tv67[ebp], edx
	jmp	SHORT $LN8@calculateT
$LN7@calculateT:
	mov	eax, DWORD PTR _body0$[ebx]
	mov	DWORD PTR tv67[ebp], eax
$LN8@calculateT:
	mov	ecx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _convexbody$[ebp], ecx
; Line 249
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	test	eax, eax
	je	SHORT $LN9@calculateT
	mov	ecx, DWORD PTR _body0$[ebx]
	mov	DWORD PTR tv71[ebp], ecx
	jmp	SHORT $LN10@calculateT
$LN9@calculateT:
	mov	edx, DWORD PTR _body1$[ebx]
	mov	DWORD PTR tv71[ebp], edx
$LN10@calculateT:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _triBody$[ebp], eax
; Line 256
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?getInterpolationWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getInterpolationWorldTransform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	lea	ecx, DWORD PTR $T21698[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	fstp	DWORD PTR _squareMot0$[ebp]
; Line 257
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?getCcdSquareMotionThreshold@btCollisionObject@@QBEMXZ ; btCollisionObject::getCcdSquareMotionThreshold
	fcomp	DWORD PTR _squareMot0$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@calculateT
; Line 259
	fld1
	jmp	$LN5@calculateT
$LN4@calculateT:
; Line 266
	lea	edx, DWORD PTR _triInv$[ebp]
	push	edx
	mov	ecx, DWORD PTR _triBody$[ebp]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	mov	ecx, eax
	call	?inverse@btTransform@@QBE?AV1@XZ	; btTransform::inverse
; Line 267
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	push	eax
	lea	eax, DWORD PTR _convexFromLocal$[ebp]
	push	eax
	lea	ecx, DWORD PTR _triInv$[ebp]
	call	??DbtTransform@@QBE?AV0@ABV0@@Z		; btTransform::operator*
; Line 268
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?getInterpolationWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getInterpolationWorldTransform
	push	eax
	lea	ecx, DWORD PTR _convexToLocal$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _triInv$[ebp]
	call	??DbtTransform@@QBE?AV0@ABV0@@Z		; btTransform::operator*
; Line 321
	mov	ecx, DWORD PTR _triBody$[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	ecx, eax
	call	?isConcave@btCollisionShape@@QBE_NXZ	; btCollisionShape::isConcave
	movzx	edx, al
	test	edx, edx
	je	$LN3@calculateT
; Line 323
	lea	ecx, DWORD PTR _convexFromLocal$[ebp]
	call	?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rayAabbMin$21733[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rayAabbMin$21733[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rayAabbMin$21733[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rayAabbMin$21733[ebp+12], edx
; Line 324
	lea	ecx, DWORD PTR _convexToLocal$[ebp]
	call	?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	lea	ecx, DWORD PTR _rayAabbMin$21733[ebp]
	call	?setMin@btVector3@@QAEXABV1@@Z		; btVector3::setMin
; Line 325
	lea	ecx, DWORD PTR _convexFromLocal$[ebp]
	call	?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rayAabbMax$21734[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _rayAabbMax$21734[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _rayAabbMax$21734[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _rayAabbMax$21734[ebp+12], edx
; Line 326
	lea	ecx, DWORD PTR _convexToLocal$[ebp]
	call	?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	lea	ecx, DWORD PTR _rayAabbMax$21734[ebp]
	call	?setMax@btVector3@@QAEXABV1@@Z		; btVector3::setMax
; Line 327
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?getCcdSweptSphereRadius@btCollisionObject@@QBEMXZ ; btCollisionObject::getCcdSweptSphereRadius
	fstp	DWORD PTR _ccdRadius0$21735[ebp]
; Line 328
	lea	eax, DWORD PTR _ccdRadius0$21735[ebp]
	push	eax
	lea	ecx, DWORD PTR _ccdRadius0$21735[ebp]
	push	ecx
	lea	edx, DWORD PTR _ccdRadius0$21735[ebp]
	push	edx
	lea	ecx, DWORD PTR $T21736[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	ecx, DWORD PTR _rayAabbMin$21733[ebp]
	call	??ZbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator-=
; Line 329
	lea	eax, DWORD PTR _ccdRadius0$21735[ebp]
	push	eax
	lea	ecx, DWORD PTR _ccdRadius0$21735[ebp]
	push	ecx
	lea	edx, DWORD PTR _ccdRadius0$21735[ebp]
	push	edx
	lea	ecx, DWORD PTR $T21737[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	ecx, DWORD PTR _rayAabbMax$21734[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 331
	fld1
	fstp	DWORD PTR _curHitFraction$21738[ebp]
; Line 333
	push	ecx
	fld	DWORD PTR _curHitFraction$21738[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?getCcdSweptSphereRadius@btCollisionObject@@QBEMXZ ; btCollisionObject::getCcdSweptSphereRadius
	push	ecx
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _convexToLocal$[ebp]
	push	eax
	lea	ecx, DWORD PTR _convexFromLocal$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _raycastCallback$21739[ebp]
	call	??0LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@QAE@ABVbtTransform@@3MM@Z ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::LocalTriangleSphereCastCallback
; Line 335
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?getHitFraction@btCollisionObject@@QBEMXZ ; btCollisionObject::getHitFraction
	fstp	DWORD PTR _raycastCallback$21739[ebp+212]
; Line 337
	mov	edx, DWORD PTR _triBody$[ebp]
	mov	DWORD PTR _concavebody$21740[ebp], edx
; Line 339
	mov	ecx, DWORD PTR _concavebody$21740[ebp]
	call	?getCollisionShape@btCollisionObject@@QAEPAVbtCollisionShape@@XZ ; btCollisionObject::getCollisionShape
	mov	DWORD PTR _triangleMesh$21741[ebp], eax
; Line 341
	cmp	DWORD PTR _triangleMesh$21741[ebp], 0
	je	SHORT $LN2@calculateT
; Line 343
	mov	esi, esp
	lea	eax, DWORD PTR _rayAabbMax$21734[ebp]
	push	eax
	lea	ecx, DWORD PTR _rayAabbMin$21733[ebp]
	push	ecx
	lea	edx, DWORD PTR _raycastCallback$21739[ebp]
	push	edx
	mov	eax, DWORD PTR _triangleMesh$21741[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _triangleMesh$21741[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@calculateT:
; Line 348
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?getHitFraction@btCollisionObject@@QBEMXZ ; btCollisionObject::getHitFraction
	fcomp	DWORD PTR _raycastCallback$21739[ebp+212]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@calculateT
; Line 350
	push	ecx
	fld	DWORD PTR _raycastCallback$21739[ebp+212]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _convexbody$[ebp]
	call	?setHitFraction@btCollisionObject@@QAEXM@Z ; btCollisionObject::setHitFraction
; Line 351
	fld	DWORD PTR _raycastCallback$21739[ebp+212]
	fstp	DWORD PTR $T23403[ebp]
	lea	ecx, DWORD PTR _raycastCallback$21739[ebp]
	call	??1LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAE@XZ
	fld	DWORD PTR $T23403[ebp]
	jmp	SHORT $LN5@calculateT
$LN1@calculateT:
; Line 353
	lea	ecx, DWORD PTR _raycastCallback$21739[ebp]
	call	??1LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAE@XZ
$LN3@calculateT:
; Line 355
	fld1
$LN5@calculateT:
; Line 357
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@calculateT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	16					; 00000010H
	npad	3
$LN19@calculateT:
	DD	7
	DD	$LN18@calculateT
$LN18@calculateT:
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN11@calculateT
	DD	-208					; ffffff30H
	DD	64					; 00000040H
	DD	$LN12@calculateT
	DD	-288					; fffffee0H
	DD	64					; 00000040H
	DD	$LN13@calculateT
	DD	-320					; fffffec0H
	DD	16					; 00000010H
	DD	$LN14@calculateT
	DD	-352					; fffffea0H
	DD	16					; 00000010H
	DD	$LN15@calculateT
	DD	-364					; fffffe94H
	DD	4
	DD	$LN16@calculateT
	DD	-640					; fffffd80H
	DD	224					; 000000e0H
	DD	$LN17@calculateT
$LN17@calculateT:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN16@calculateT:
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	82					; 00000052H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	117					; 00000075H
	DB	115					; 00000073H
	DB	48					; 00000030H
	DB	0
$LN15@calculateT:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	65					; 00000041H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
$LN14@calculateT:
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	65					; 00000041H
	DB	97					; 00000061H
	DB	98					; 00000062H
	DB	98					; 00000062H
	DB	77					; 0000004dH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	0
$LN13@calculateT:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN12@calculateT:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN11@calculateT:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	0
?calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z ENDP ; btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??YbtVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YbtVector3@@QAEAAV0@ABV0@@Z PROC			; btVector3::operator+=, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 165
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 171
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 173
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
; Line 176
	mov	esp, ebp
	pop	ebp
	ret	4
??YbtVector3@@QAEAAV0@ABV0@@Z ENDP			; btVector3::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??ZbtVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??ZbtVector3@@QAEAAV0@ABV0@@Z PROC			; btVector3::operator-=, COMDAT
; _this$ = ecx
; Line 182
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fsub	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 189
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fsub	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 190
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 192
	mov	eax, DWORD PTR _this$[ebp]
; Line 193
	mov	esp, ebp
	pop	ebp
	ret	4
??ZbtVector3@@QAEAAV0@ABV0@@Z ENDP			; btVector3::operator-=
_TEXT	ENDS
PUBLIC	?w@btVector3@@QBEABMXZ				; btVector3::w
PUBLIC	??$btSetMax@M@@YAXAAMABM@Z			; btSetMax<float>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setMax@btVector3@@QAEXABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?setMax@btVector3@@QAEXABV1@@Z PROC			; btVector3::setMax, COMDAT
; _this$ = ecx
; Line 610
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 616
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$btSetMax@M@@YAXAAMABM@Z		; btSetMax<float>
	add	esp, 8
; Line 617
	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$btSetMax@M@@YAXAAMABM@Z		; btSetMax<float>
	add	esp, 8
; Line 618
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$btSetMax@M@@YAXAAMABM@Z		; btSetMax<float>
	add	esp, 8
; Line 619
	mov	ecx, DWORD PTR _other$[ebp]
	call	?w@btVector3@@QBEABMXZ			; btVector3::w
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$btSetMax@M@@YAXAAMABM@Z		; btSetMax<float>
	add	esp, 8
; Line 621
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setMax@btVector3@@QAEXABV1@@Z ENDP			; btVector3::setMax
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?w@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?w@btVector3@@QBEABMXZ PROC				; btVector3::w, COMDAT
; _this$ = ecx
; Line 581
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esp, ebp
	pop	ebp
	ret	0
?w@btVector3@@QBEABMXZ ENDP				; btVector3::w
_TEXT	ENDS
PUBLIC	??$btSetMin@M@@YAXAAMABM@Z			; btSetMin<float>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setMin@btVector3@@QAEXABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?setMin@btVector3@@QAEXABV1@@Z PROC			; btVector3::setMin, COMDAT
; _this$ = ecx
; Line 627
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 633
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$btSetMin@M@@YAXAAMABM@Z		; btSetMin<float>
	add	esp, 8
; Line 634
	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	??$btSetMin@M@@YAXAAMABM@Z		; btSetMin<float>
	add	esp, 8
; Line 635
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 8
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$btSetMin@M@@YAXAAMABM@Z		; btSetMin<float>
	add	esp, 8
; Line 636
	mov	ecx, DWORD PTR _other$[ebp]
	call	?w@btVector3@@QBEABMXZ			; btVector3::w
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	??$btSetMin@M@@YAXAAMABM@Z		; btSetMin<float>
	add	esp, 8
; Line 638
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setMin@btVector3@@QAEXABV1@@Z ENDP			; btVector3::setMin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getOrigin@btTransform@@QAEAAVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOrigin@btTransform@@QAEAAVbtVector3@@XZ PROC	; btTransform::getOrigin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 117
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esp, ebp
	pop	ebp
	ret	0
?getOrigin@btTransform@@QAEAAVbtVector3@@XZ ENDP	; btTransform::getOrigin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getInterpolationWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getInterpolationWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ PROC ; btCollisionObject::getInterpolationWorldTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 342
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 343
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H
; Line 344
	mov	esp, ebp
	pop	ebp
	ret	0
?getInterpolationWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ENDP ; btCollisionObject::getInterpolationWorldTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getHitFraction@btCollisionObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getHitFraction@btCollisionObject@@QBEMXZ PROC		; btCollisionObject::getHitFraction, COMDAT
; _this$ = ecx
; Line 395
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 396
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+256]
; Line 397
	mov	esp, ebp
	pop	ebp
	ret	0
?getHitFraction@btCollisionObject@@QBEMXZ ENDP		; btCollisionObject::getHitFraction
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setHitFraction@btCollisionObject@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hitFraction$ = 8					; size = 4
?setHitFraction@btCollisionObject@@QAEXM@Z PROC		; btCollisionObject::setHitFraction, COMDAT
; _this$ = ecx
; Line 400
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 401
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _hitFraction$[ebp]
	fstp	DWORD PTR [eax+256]
; Line 402
	mov	esp, ebp
	pop	ebp
	ret	4
?setHitFraction@btCollisionObject@@QAEXM@Z ENDP		; btCollisionObject::setHitFraction
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCcdSweptSphereRadius@btCollisionObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCcdSweptSphereRadius@btCollisionObject@@QBEMXZ PROC	; btCollisionObject::getCcdSweptSphereRadius, COMDAT
; _this$ = ecx
; Line 417
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 418
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+260]
; Line 419
	mov	esp, ebp
	pop	ebp
	ret	0
?getCcdSweptSphereRadius@btCollisionObject@@QBEMXZ ENDP	; btCollisionObject::getCcdSweptSphereRadius
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getCcdSquareMotionThreshold@btCollisionObject@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getCcdSquareMotionThreshold@btCollisionObject@@QBEMXZ PROC ; btCollisionObject::getCcdSquareMotionThreshold, COMDAT
; _this$ = ecx
; Line 433
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 434
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+264]
	fmul	DWORD PTR [ecx+264]
; Line 435
	mov	esp, ebp
	pop	ebp
	ret	0
?getCcdSquareMotionThreshold@btCollisionObject@@QBEMXZ ENDP ; btCollisionObject::getCcdSquareMotionThreshold
_TEXT	ENDS
PUBLIC	??0btTransform@@QAE@ABV0@@Z			; btTransform::btTransform
PUBLIC	??_7LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@6B@ ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::`vftable'
EXTRN	??_ELocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAEPAXI@Z:PROC ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::`vector deleting destructor'
;	COMDAT ??_7LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@6B@
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
CONST	SEGMENT
??_7LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@6B@ DD FLAT:??_ELocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAEPAXI@Z ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::`vftable'
	DD	FLAT:?processTriangle@LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAEXPAVbtVector3@@HH@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@QAE@ABVbtTransform@@3MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_from$ = 8						; size = 4
_to$ = 12						; size = 4
_ccdSphereRadius$ = 16					; size = 4
_hitFraction$ = 20					; size = 4
??0LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@QAE@ABVbtTransform@@3MM@Z PROC ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::LocalTriangleSphereCastCallback, COMDAT
; _this$ = ecx
; Line 285
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btTriangleCallback@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@6B@
	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btTransform@@QAE@ABV0@@Z		; btTransform::btTransform
	mov	edx, DWORD PTR _to$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0btTransform@@QAE@ABV0@@Z		; btTransform::btTransform
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _ccdSphereRadius$[ebp]
	fstp	DWORD PTR [eax+208]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _hitFraction$[ebp]
	fstp	DWORD PTR [ecx+212]
; Line 286
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@QAE@ABVbtTransform@@3MM@Z ENDP ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::LocalTriangleSphereCastCallback
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btTransform@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??0btTransform@@QAE@ABV0@@Z PROC			; btTransform::btTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btTransform@@QAE@ABV0@@Z ENDP			; btTransform::btTransform
_TEXT	ENDS
PUBLIC	??1CastResult@btConvexCast@@UAE@XZ		; btConvexCast::CastResult::~CastResult
PUBLIC	??1btSphereShape@@UAE@XZ			; btSphereShape::~btSphereShape
PUBLIC	??1btTriangleShape@@UAE@XZ			; btTriangleShape::~btTriangleShape
PUBLIC	??1btSubsimplexConvexCast@@UAE@XZ		; btSubsimplexConvexCast::~btSubsimplexConvexCast
PUBLIC	??0btVoronoiSimplexSolver@@QAE@XZ		; btVoronoiSimplexSolver::btVoronoiSimplexSolver
PUBLIC	??0btTriangleShape@@QAE@ABVbtVector3@@00@Z	; btTriangleShape::btTriangleShape
PUBLIC	??0btSphereShape@@QAE@M@Z			; btSphereShape::btSphereShape
PUBLIC	??0CastResult@btConvexCast@@QAE@XZ		; btConvexCast::CastResult::CastResult
PUBLIC	__$ArrayPad$
EXTRN	?calcTimeOfImpact@btSubsimplexConvexCast@@UAE_NABVbtTransform@@000AAUCastResult@btConvexCast@@@Z:PROC ; btSubsimplexConvexCast::calcTimeOfImpact
EXTRN	??0btSubsimplexConvexCast@@QAE@PBVbtConvexShape@@0PAVbtVoronoiSimplexSolver@@@Z:PROC ; btSubsimplexConvexCast::btSubsimplexConvexCast
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?processTriangle@LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAEXPAVbtVector3@@HH@Z
_TEXT	SEGMENT
_convexCaster$ = -952					; size = 16
_simplexSolver$ = -928					; size = 400
_triShape$ = -512					; size = 128
_pointShape$ = -368					; size = 64
_castResult$ = -288					; size = 192
_ident$ = -80						; size = 64
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_triangle$ = 8						; size = 4
_partId$ = 12						; size = 4
_triangleIndex$ = 16					; size = 4
?processTriangle@LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAEXPAVbtVector3@@HH@Z PROC ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::processTriangle, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyconcavecollisionalgorithm.cpp
; Line 290
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 960				; 000003c0H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-960]
	mov	ecx, 240				; 000000f0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 294
	lea	ecx, DWORD PTR _ident$[ebp]
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
; Line 295
	lea	ecx, DWORD PTR _ident$[ebp]
	call	?setIdentity@btTransform@@QAEXXZ	; btTransform::setIdentity
; Line 296
	lea	ecx, DWORD PTR _castResult$[ebp]
	call	??0CastResult@btConvexCast@@QAE@XZ	; btConvexCast::CastResult::CastResult
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+212]
	fstp	DWORD PTR _castResult$[ebp+176]
; Line 298
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+208]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _pointShape$[ebp]
	call	??0btSphereShape@@QAE@M@Z		; btSphereShape::btSphereShape
; Line 299
	mov	edx, DWORD PTR _triangle$[ebx]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _triangle$[ebx]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _triangle$[ebx]
	push	ecx
	lea	ecx, DWORD PTR _triShape$[ebp]
	call	??0btTriangleShape@@QAE@ABVbtVector3@@00@Z ; btTriangleShape::btTriangleShape
; Line 300
	lea	ecx, DWORD PTR _simplexSolver$[ebp]
	call	??0btVoronoiSimplexSolver@@QAE@XZ	; btVoronoiSimplexSolver::btVoronoiSimplexSolver
; Line 301
	lea	edx, DWORD PTR _simplexSolver$[ebp]
	push	edx
	lea	eax, DWORD PTR _triShape$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pointShape$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _convexCaster$[ebp]
	call	??0btSubsimplexConvexCast@@QAE@PBVbtConvexShape@@0PAVbtVoronoiSimplexSolver@@@Z ; btSubsimplexConvexCast::btSubsimplexConvexCast
; Line 307
	lea	edx, DWORD PTR _castResult$[ebp]
	push	edx
	lea	eax, DWORD PTR _ident$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ident$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _convexCaster$[ebp]
	call	?calcTimeOfImpact@btSubsimplexConvexCast@@UAE_NABVbtTransform@@000AAUCastResult@btConvexCast@@@Z ; btSubsimplexConvexCast::calcTimeOfImpact
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@processTri@2
; Line 309
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _castResult$[ebp+176]
	fcomp	DWORD PTR [edx+212]
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@processTri@2
; Line 310
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _castResult$[ebp+176]
	fstp	DWORD PTR [eax+212]
$LN1@processTri@2:
; Line 313
	lea	ecx, DWORD PTR _convexCaster$[ebp]
	call	??1btSubsimplexConvexCast@@UAE@XZ
	lea	ecx, DWORD PTR _triShape$[ebp]
	call	??1btTriangleShape@@UAE@XZ
	lea	ecx, DWORD PTR _pointShape$[ebp]
	call	??1btSphereShape@@UAE@XZ
	lea	ecx, DWORD PTR _castResult$[ebp]
	call	??1CastResult@btConvexCast@@UAE@XZ	; btConvexCast::CastResult::~CastResult
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@processTri@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
$LN12@processTri@2:
	DD	6
	DD	$LN11@processTri@2
$LN11@processTri@2:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN5@processTri@2
	DD	-288					; fffffee0H
	DD	192					; 000000c0H
	DD	$LN6@processTri@2
	DD	-368					; fffffe90H
	DD	64					; 00000040H
	DD	$LN7@processTri@2
	DD	-512					; fffffe00H
	DD	128					; 00000080H
	DD	$LN8@processTri@2
	DD	-928					; fffffc60H
	DD	400					; 00000190H
	DD	$LN9@processTri@2
	DD	-952					; fffffc48H
	DD	16					; 00000010H
	DD	$LN10@processTri@2
$LN10@processTri@2:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN9@processTri@2:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	83					; 00000053H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN8@processTri@2:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN7@processTri@2:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN6@processTri@2:
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
$LN5@processTri@2:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
?processTriangle@LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAEXPAVbtVector3@@HH@Z ENDP ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::processTriangle
_TEXT	ENDS
PUBLIC	??_7btTriangleShape@@6B@			; btTriangleShape::`vftable'
PUBLIC	?getAabb@btTriangleShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ; btTriangleShape::getAabb
PUBLIC	?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ ; btConvexInternalShape::getLocalScaling
PUBLIC	?calculateLocalInertia@btTriangleShape@@UBEXMAAVbtVector3@@@Z ; btTriangleShape::calculateLocalInertia
PUBLIC	?getName@btTriangleShape@@UBEPBDXZ		; btTriangleShape::getName
PUBLIC	?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ ; btCollisionShape::getAnisotropicRollingFrictionDirection
PUBLIC	?setMargin@btConvexInternalShape@@UAEXM@Z	; btConvexInternalShape::setMargin
PUBLIC	?getMargin@btConvexInternalShape@@UBEMXZ	; btConvexInternalShape::getMargin
PUBLIC	?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ ; btConvexInternalShape::calculateSerializeBufferSize
PUBLIC	?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z ; btConvexInternalShape::serialize
PUBLIC	?localGetSupportingVertexWithoutMargin@btTriangleShape@@UBE?AVbtVector3@@ABV2@@Z ; btTriangleShape::localGetSupportingVertexWithoutMargin
PUBLIC	?batchedUnitVectorGetSupportingVertexWithoutMargin@btTriangleShape@@UBEXPBVbtVector3@@PAV2@H@Z ; btTriangleShape::batchedUnitVectorGetSupportingVertexWithoutMargin
PUBLIC	?getNumPreferredPenetrationDirections@btTriangleShape@@UBEHXZ ; btTriangleShape::getNumPreferredPenetrationDirections
PUBLIC	?getPreferredPenetrationDirection@btTriangleShape@@UBEXHAAVbtVector3@@@Z ; btTriangleShape::getPreferredPenetrationDirection
PUBLIC	?getNumVertices@btTriangleShape@@UBEHXZ		; btTriangleShape::getNumVertices
PUBLIC	?getNumEdges@btTriangleShape@@UBEHXZ		; btTriangleShape::getNumEdges
PUBLIC	?getEdge@btTriangleShape@@UBEXHAAVbtVector3@@0@Z ; btTriangleShape::getEdge
PUBLIC	?getVertex@btTriangleShape@@UBEXHAAVbtVector3@@@Z ; btTriangleShape::getVertex
PUBLIC	?getNumPlanes@btTriangleShape@@UBEHXZ		; btTriangleShape::getNumPlanes
PUBLIC	?getPlane@btTriangleShape@@UBEXAAVbtVector3@@0H@Z ; btTriangleShape::getPlane
PUBLIC	?isInside@btTriangleShape@@UBE_NABVbtVector3@@M@Z ; btTriangleShape::isInside
PUBLIC	?getPlaneEquation@btTriangleShape@@UBEXHAAVbtVector3@@0@Z ; btTriangleShape::getPlaneEquation
EXTRN	??0btPolyhedralConvexShape@@QAE@XZ:PROC		; btPolyhedralConvexShape::btPolyhedralConvexShape
EXTRN	??_EbtTriangleShape@@UAEPAXI@Z:PROC		; btTriangleShape::`vector deleting destructor'
EXTRN	?getBoundingSphere@btCollisionShape@@UBEXAAVbtVector3@@AAM@Z:PROC ; btCollisionShape::getBoundingSphere
EXTRN	?getAngularMotionDisc@btCollisionShape@@UBEMXZ:PROC ; btCollisionShape::getAngularMotionDisc
EXTRN	?getContactBreakingThreshold@btCollisionShape@@UBEMM@Z:PROC ; btCollisionShape::getContactBreakingThreshold
EXTRN	?setLocalScaling@btConvexInternalShape@@UAEXABVbtVector3@@@Z:PROC ; btConvexInternalShape::setLocalScaling
EXTRN	?serializeSingleShape@btCollisionShape@@UBEXPAVbtSerializer@@@Z:PROC ; btCollisionShape::serializeSingleShape
EXTRN	?localGetSupportingVertex@btConvexInternalShape@@UBE?AVbtVector3@@ABV2@@Z:PROC ; btConvexInternalShape::localGetSupportingVertex
EXTRN	?project@btConvexShape@@UBEXABVbtTransform@@ABVbtVector3@@AAM2@Z:PROC ; btConvexShape::project
EXTRN	?getAabbSlow@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z:PROC ; btConvexInternalShape::getAabbSlow
EXTRN	?initializePolyhedralFeatures@btPolyhedralConvexShape@@UAE_NH@Z:PROC ; btPolyhedralConvexShape::initializePolyhedralFeatures
;	COMDAT ??_7btTriangleShape@@6B@
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\bttriangleshape.h
CONST	SEGMENT
??_7btTriangleShape@@6B@ DD FLAT:??_EbtTriangleShape@@UAEPAXI@Z ; btTriangleShape::`vftable'
	DD	FLAT:?getAabb@btTriangleShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getBoundingSphere@btCollisionShape@@UBEXAAVbtVector3@@AAM@Z
	DD	FLAT:?getAngularMotionDisc@btCollisionShape@@UBEMXZ
	DD	FLAT:?getContactBreakingThreshold@btCollisionShape@@UBEMM@Z
	DD	FLAT:?setLocalScaling@btConvexInternalShape@@UAEXABVbtVector3@@@Z
	DD	FLAT:?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ
	DD	FLAT:?calculateLocalInertia@btTriangleShape@@UBEXMAAVbtVector3@@@Z
	DD	FLAT:?getName@btTriangleShape@@UBEPBDXZ
	DD	FLAT:?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ
	DD	FLAT:?setMargin@btConvexInternalShape@@UAEXM@Z
	DD	FLAT:?getMargin@btConvexInternalShape@@UBEMXZ
	DD	FLAT:?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ
	DD	FLAT:?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z
	DD	FLAT:?serializeSingleShape@btCollisionShape@@UBEXPAVbtSerializer@@@Z
	DD	FLAT:?localGetSupportingVertex@btConvexInternalShape@@UBE?AVbtVector3@@ABV2@@Z
	DD	FLAT:?localGetSupportingVertexWithoutMargin@btTriangleShape@@UBE?AVbtVector3@@ABV2@@Z
	DD	FLAT:?project@btConvexShape@@UBEXABVbtTransform@@ABVbtVector3@@AAM2@Z
	DD	FLAT:?batchedUnitVectorGetSupportingVertexWithoutMargin@btTriangleShape@@UBEXPBVbtVector3@@PAV2@H@Z
	DD	FLAT:?getAabbSlow@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getNumPreferredPenetrationDirections@btTriangleShape@@UBEHXZ
	DD	FLAT:?getPreferredPenetrationDirection@btTriangleShape@@UBEXHAAVbtVector3@@@Z
	DD	FLAT:?initializePolyhedralFeatures@btPolyhedralConvexShape@@UAE_NH@Z
	DD	FLAT:?getNumVertices@btTriangleShape@@UBEHXZ
	DD	FLAT:?getNumEdges@btTriangleShape@@UBEHXZ
	DD	FLAT:?getEdge@btTriangleShape@@UBEXHAAVbtVector3@@0@Z
	DD	FLAT:?getVertex@btTriangleShape@@UBEXHAAVbtVector3@@@Z
	DD	FLAT:?getNumPlanes@btTriangleShape@@UBEHXZ
	DD	FLAT:?getPlane@btTriangleShape@@UBEXAAVbtVector3@@0H@Z
	DD	FLAT:?isInside@btTriangleShape@@UBE_NABVbtVector3@@M@Z
	DD	FLAT:?getPlaneEquation@btTriangleShape@@UBEXHAAVbtVector3@@0@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btTriangleShape@@QAE@ABVbtVector3@@00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p0$ = 8						; size = 4
_p1$ = 12						; size = 4
_p2$ = 16						; size = 4
??0btTriangleShape@@QAE@ABVbtVector3@@00@Z PROC		; btTriangleShape::btTriangleShape, COMDAT
; _this$ = ecx
; Line 93
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btPolyhedralConvexShape@@QAE@XZ	; btPolyhedralConvexShape::btPolyhedralConvexShape
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btTriangleShape@@6B@
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
; Line 94
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 1
; Line 95
	mov	eax, DWORD PTR _p0$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 96
	mov	ecx, DWORD PTR _p1$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 97
	mov	edx, DWORD PTR _p2$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0btTriangleShape@@QAE@ABVbtVector3@@00@Z ENDP		; btTriangleShape::btTriangleShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ
_TEXT	SEGMENT
$T23456 = -16						; size = 4
$T23455 = -12						; size = 4
$T23454 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ PROC ; btCollisionShape::getAnisotropicRollingFrictionDirection, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btcollisionshape.h
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 117
	fld1
	fstp	DWORD PTR $T23454[ebp]
	fld1
	fstp	DWORD PTR $T23455[ebp]
	fld1
	fstp	DWORD PTR $T23456[ebp]
	lea	eax, DWORD PTR $T23454[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23455[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23456[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 118
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ ENDP ; btCollisionShape::getAnisotropicRollingFrictionDirection
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ PROC ; btConvexInternalShape::getLocalScaling, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconvexinternalshape.h
; Line 100
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 102
	mov	esp, ebp
	pop	ebp
	ret	0
?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ ENDP ; btConvexInternalShape::getLocalScaling
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setMargin@btConvexInternalShape@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_margin$ = 8						; size = 4
?setMargin@btConvexInternalShape@@UAEXM@Z PROC		; btConvexInternalShape::setMargin, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _margin$[ebp]
	fstp	DWORD PTR [eax+48]
; Line 112
	mov	esp, ebp
	pop	ebp
	ret	4
?setMargin@btConvexInternalShape@@UAEXM@Z ENDP		; btConvexInternalShape::setMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getMargin@btConvexInternalShape@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMargin@btConvexInternalShape@@UBEMXZ PROC		; btConvexInternalShape::getMargin, COMDAT
; _this$ = ecx
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
; Line 116
	mov	esp, ebp
	pop	ebp
	ret	0
?getMargin@btConvexInternalShape@@UBEMXZ ENDP		; btConvexInternalShape::getMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ PROC ; btConvexInternalShape::calculateSerializeBufferSize, COMDAT
; _this$ = ecx
; Line 161
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 162
	mov	eax, 52					; 00000034H
; Line 163
	mov	esp, ebp
	pop	ebp
	ret	0
?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ ENDP ; btConvexInternalShape::calculateSerializeBufferSize
_TEXT	ENDS
PUBLIC	??_C@_0BK@ILJDJEOD@btConvexInternalShapeData?$AA@ ; `string'
PUBLIC	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
EXTRN	?serialize@btCollisionShape@@UBEPBDPAXPAVbtSerializer@@@Z:PROC ; btCollisionShape::serialize
;	COMDAT ??_C@_0BK@ILJDJEOD@btConvexInternalShapeData?$AA@
CONST	SEGMENT
??_C@_0BK@ILJDJEOD@btConvexInternalShapeData?$AA@ DB 'btConvexInternalSha'
	DB	'peData', 00H				; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z
_TEXT	SEGMENT
_shapeData$ = -8					; size = 4
_this$ = -4						; size = 4
_dataBuffer$ = 8					; size = 4
_serializer$ = 12					; size = 4
?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z PROC ; btConvexInternalShape::serialize, COMDAT
; _this$ = ecx
; Line 167
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 168
	mov	eax, DWORD PTR _dataBuffer$[ebp]
	mov	DWORD PTR _shapeData$[ebp], eax
; Line 169
	mov	ecx, DWORD PTR _serializer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _shapeData$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?serialize@btCollisionShape@@UBEPBDPAXPAVbtSerializer@@@Z ; btCollisionShape::serialize
; Line 171
	mov	eax, DWORD PTR _shapeData$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 172
	mov	ecx, DWORD PTR _shapeData$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ; btVector3::serializeFloat
; Line 173
	mov	edx, DWORD PTR _shapeData$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+48]
	fstp	DWORD PTR [edx+44]
; Line 175
	mov	eax, OFFSET ??_C@_0BK@ILJDJEOD@btConvexInternalShapeData?$AA@
; Line 176
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z ENDP ; btConvexInternalShape::serialize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z
_TEXT	SEGMENT
_i$8338 = -8						; size = 4
_this$ = -4						; size = 4
_dataOut$ = 8						; size = 4
?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z PROC ; btVector3::serializeFloat, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 1312
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1314
	mov	DWORD PTR _i$8338[ebp], 0
	jmp	SHORT $LN3@serializeF
$LN2@serializeF:
	mov	eax, DWORD PTR _i$8338[ebp]
	add	eax, 1
	mov	DWORD PTR _i$8338[ebp], eax
$LN3@serializeF:
	cmp	DWORD PTR _i$8338[ebp], 4
	jge	SHORT $LN1@serializeF
; Line 1315
	mov	ecx, DWORD PTR _i$8338[ebp]
	mov	edx, DWORD PTR _dataOut$[ebp]
	mov	eax, DWORD PTR _i$8338[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	fld	DWORD PTR [esi+eax*4]
	fstp	DWORD PTR [edx+ecx*4]
	jmp	SHORT $LN2@serializeF
$LN1@serializeF:
; Line 1316
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
?serializeFloat@btVector3@@QBEXAAUbtVector3FloatData@@@Z ENDP ; btVector3::serializeFloat
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getNumVertices@btTriangleShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumVertices@btTriangleShape@@UBEHXZ PROC		; btTriangleShape::getNumVertices, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\bttriangleshape.h
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 34
	mov	eax, 3
; Line 35
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumVertices@btTriangleShape@@UBEHXZ ENDP		; btTriangleShape::getNumVertices
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getVertex@btTriangleShape@@UBEXHAAVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_vert$ = 12						; size = 4
?getVertex@btTriangleShape@@UBEXHAAVbtVector3@@@Z PROC	; btTriangleShape::getVertex, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 48
	mov	eax, DWORD PTR _index$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+80]
	mov	eax, DWORD PTR _vert$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	8
?getVertex@btTriangleShape@@UBEXHAAVbtVector3@@@Z ENDP	; btTriangleShape::getVertex
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getNumEdges@btTriangleShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumEdges@btTriangleShape@@UBEHXZ PROC		; btTriangleShape::getNumEdges, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	mov	eax, 3
; Line 54
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumEdges@btTriangleShape@@UBEHXZ ENDP		; btTriangleShape::getNumEdges
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getEdge@btTriangleShape@@UBEXHAAVbtVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_pa$ = 12						; size = 4
_pb$ = 16						; size = 4
?getEdge@btTriangleShape@@UBEXHAAVbtVector3@@0@Z PROC	; btTriangleShape::getEdge, COMDAT
; _this$ = ecx
; Line 57
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 58
	mov	esi, esp
	mov	eax, DWORD PTR _pa$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+104]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 59
	mov	esi, esp
	mov	eax, DWORD PTR _pb$[ebp]
	push	eax
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	cdq
	mov	ecx, 3
	idiv	ecx
	push	edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+104]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 60
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getEdge@btTriangleShape@@UBEXHAAVbtVector3@@0@Z ENDP	; btTriangleShape::getEdge
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAabb@btTriangleShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_aabbMin$ = 12						; size = 4
_aabbMax$ = 16						; size = 4
?getAabb@btTriangleShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z PROC ; btTriangleShape::getAabb, COMDAT
; _this$ = ecx
; Line 64
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 66
	mov	esi, esp
	mov	eax, DWORD PTR _aabbMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aabbMin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 67
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getAabb@btTriangleShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ENDP ; btTriangleShape::getAabb
_TEXT	ENDS
PUBLIC	?maxAxis@btVector3@@QBEHXZ			; btVector3::maxAxis
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?localGetSupportingVertexWithoutMargin@btTriangleShape@@UBE?AVbtVector3@@ABV2@@Z
_TEXT	SEGMENT
_dots$ = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_dir$ = 12						; size = 4
?localGetSupportingVertexWithoutMargin@btTriangleShape@@UBE?AVbtVector3@@ABV2@@Z PROC ; btTriangleShape::localGetSupportingVertexWithoutMargin, COMDAT
; _this$ = ecx
; Line 70
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	lea	eax, DWORD PTR _dots$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dir$[ebx]
	call	?dot3@btVector3@@QBE?AV1@ABV1@00@Z	; btVector3::dot3
; Line 72
	lea	ecx, DWORD PTR _dots$[ebp]
	call	?maxAxis@btVector3@@QBEHXZ		; btVector3::maxAxis
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+80]
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 74
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@localGetSu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
$LN5@localGetSu:
	DD	1
	DD	$LN4@localGetSu
$LN4@localGetSu:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@localGetSu
$LN3@localGetSu:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?localGetSupportingVertexWithoutMargin@btTriangleShape@@UBE?AVbtVector3@@ABV2@@Z ENDP ; btTriangleShape::localGetSupportingVertexWithoutMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?maxAxis@btVector3@@QBEHXZ
_TEXT	SEGMENT
tv72 = -16						; size = 4
tv73 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
?maxAxis@btVector3@@QBEHXZ PROC				; btVector3::maxAxis, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 476
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 477
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@maxAxis
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR [edx+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@maxAxis
	mov	DWORD PTR tv69[ebp], 2
	jmp	SHORT $LN4@maxAxis
$LN3@maxAxis:
	mov	DWORD PTR tv69[ebp], 1
$LN4@maxAxis:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN8@maxAxis
$LN7@maxAxis:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR [edx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@maxAxis
	mov	DWORD PTR tv72[ebp], 2
	jmp	SHORT $LN6@maxAxis
$LN5@maxAxis:
	mov	DWORD PTR tv72[ebp], 0
$LN6@maxAxis:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR tv73[ebp], ecx
$LN8@maxAxis:
	mov	eax, DWORD PTR tv73[ebp]
; Line 478
	mov	esp, ebp
	pop	ebp
	ret	0
?maxAxis@btVector3@@QBEHXZ ENDP				; btVector3::maxAxis
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?batchedUnitVectorGetSupportingVertexWithoutMargin@btTriangleShape@@UBEXPBVbtVector3@@PAV2@H@Z
_TEXT	SEGMENT
_dots$14424 = -32					; size = 16
_dir$14423 = -12					; size = 4
_i$14419 = -8						; size = 4
_this$ = -4						; size = 4
_vectors$ = 8						; size = 4
_supportVerticesOut$ = 12				; size = 4
_numVectors$ = 16					; size = 4
?batchedUnitVectorGetSupportingVertexWithoutMargin@btTriangleShape@@UBEXPBVbtVector3@@PAV2@H@Z PROC ; btTriangleShape::batchedUnitVectorGetSupportingVertexWithoutMargin, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\bttriangleshape.h
; Line 77
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 78
	mov	DWORD PTR _i$14419[ebp], 0
	jmp	SHORT $LN3@batchedUni
$LN2@batchedUni:
	mov	eax, DWORD PTR _i$14419[ebp]
	add	eax, 1
	mov	DWORD PTR _i$14419[ebp], eax
$LN3@batchedUni:
	mov	ecx, DWORD PTR _i$14419[ebp]
	cmp	ecx, DWORD PTR _numVectors$[ebx]
	jge	SHORT $LN4@batchedUni
; Line 80
	mov	edx, DWORD PTR _i$14419[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _vectors$[ebx]
	mov	DWORD PTR _dir$14423[ebp], edx
; Line 81
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	lea	eax, DWORD PTR _dots$14424[ebp]
	push	eax
	mov	ecx, DWORD PTR _dir$14423[ebp]
	call	?dot3@btVector3@@QBE?AV1@ABV1@00@Z	; btVector3::dot3
; Line 82
	lea	ecx, DWORD PTR _dots$14424[ebp]
	call	?maxAxis@btVector3@@QBEHXZ		; btVector3::maxAxis
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+80]
	mov	eax, DWORD PTR _i$14419[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _supportVerticesOut$[ebx]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 83
	jmp	SHORT $LN2@batchedUni
$LN4@batchedUni:
; Line 85
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@batchedUni
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	12					; 0000000cH
	npad	1
$LN8@batchedUni:
	DD	1
	DD	$LN7@batchedUni
$LN7@batchedUni:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN6@batchedUni
$LN6@batchedUni:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?batchedUnitVectorGetSupportingVertexWithoutMargin@btTriangleShape@@UBEXPBVbtVector3@@PAV2@H@Z ENDP ; btTriangleShape::batchedUnitVectorGetSupportingVertexWithoutMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getPlane@btTriangleShape@@UBEXAAVbtVector3@@0H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_planeNormal$ = 8					; size = 4
_planeSupport$ = 12					; size = 4
_i$ = 16						; size = 4
?getPlane@btTriangleShape@@UBEXAAVbtVector3@@0H@Z PROC	; btTriangleShape::getPlane, COMDAT
; _this$ = ecx
; Line 102
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 103
	mov	esi, esp
	mov	eax, DWORD PTR _planeSupport$[ebp]
	push	eax
	mov	ecx, DWORD PTR _planeNormal$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 104
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getPlane@btTriangleShape@@UBEXAAVbtVector3@@0H@Z ENDP	; btTriangleShape::getPlane
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getNumPlanes@btTriangleShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumPlanes@btTriangleShape@@UBEHXZ PROC		; btTriangleShape::getNumPlanes, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, 1
; Line 109
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumPlanes@btTriangleShape@@UBEHXZ ENDP		; btTriangleShape::getNumPlanes
_TEXT	ENDS
PUBLIC	?calcNormal@btTriangleShape@@QBEXAAVbtVector3@@@Z ; btTriangleShape::calcNormal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getPlaneEquation@btTriangleShape@@UBEXHAAVbtVector3@@0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
_planeNormal$ = 12					; size = 4
_planeSupport$ = 16					; size = 4
?getPlaneEquation@btTriangleShape@@UBEXHAAVbtVector3@@0@Z PROC ; btTriangleShape::getPlaneEquation, COMDAT
; _this$ = ecx
; Line 118
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 120
	mov	eax, DWORD PTR _planeNormal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?calcNormal@btTriangleShape@@QBEXAAVbtVector3@@@Z ; btTriangleShape::calcNormal
; Line 121
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	mov	edx, DWORD PTR _planeSupport$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 122
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getPlaneEquation@btTriangleShape@@UBEXHAAVbtVector3@@0@Z ENDP ; btTriangleShape::getPlaneEquation
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?calcNormal@btTriangleShape@@QBEXAAVbtVector3@@@Z
_TEXT	SEGMENT
$T14440 = -64						; size = 16
$T14439 = -48						; size = 16
$T14438 = -32						; size = 16
_this$ = -4						; size = 4
_normal$ = 8						; size = 4
?calcNormal@btTriangleShape@@QBEXAAVbtVector3@@@Z PROC	; btTriangleShape::calcNormal, COMDAT
; _this$ = ecx
; Line 112
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 113
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	lea	edx, DWORD PTR $T14439[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T14440[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 96					; 00000060H
	push	edx
	lea	eax, DWORD PTR $T14438[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
	mov	ecx, DWORD PTR _normal$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 114
	mov	ecx, DWORD PTR _normal$[ebx]
	call	?normalize@btVector3@@QAEAAV1@XZ	; btVector3::normalize
; Line 115
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?calcNormal@btTriangleShape@@QBEXAAVbtVector3@@@Z ENDP	; btTriangleShape::calcNormal
_TEXT	ENDS
PUBLIC	??_C@_0FP@ENEHIPED@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FP@ENEHIPED@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FP@ENEHIPED@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\BulletCollision/CollisionShapes/btTriangleShape.h:%u (0)'
	DB	0aH, 00H					; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?calculateLocalInertia@btTriangleShape@@UBEXMAAVbtVector3@@@Z
_TEXT	SEGMENT
$T23509 = -16						; size = 4
$T23508 = -12						; size = 4
$T23507 = -8						; size = 4
_this$ = -4						; size = 4
_mass$ = 8						; size = 4
_inertia$ = 12						; size = 4
?calculateLocalInertia@btTriangleShape@@UBEXMAAVbtVector3@@@Z PROC ; btTriangleShape::calculateLocalInertia, COMDAT
; _this$ = ecx
; Line 125
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 127
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN1@calculateL
	push	127					; 0000007fH
	push	OFFSET ??_C@_0FP@ENEHIPED@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@calculateL:
; Line 128
	fldz
	fstp	DWORD PTR $T23507[ebp]
	fldz
	fstp	DWORD PTR $T23508[ebp]
	fldz
	fstp	DWORD PTR $T23509[ebp]
	lea	ecx, DWORD PTR $T23507[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23508[ebp]
	push	edx
	lea	eax, DWORD PTR $T23509[ebp]
	push	eax
	mov	ecx, DWORD PTR _inertia$[ebp]
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 129
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?calculateLocalInertia@btTriangleShape@@UBEXMAAVbtVector3@@@Z ENDP ; btTriangleShape::calculateLocalInertia
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?isInside@btTriangleShape@@UBE_NABVbtVector3@@M@Z
_TEXT	SEGMENT
_edgeConst$14469 = -188					; size = 4
_dist$14468 = -184					; size = 4
_edgeNormal$14466 = -176				; size = 16
_edge$14464 = -144					; size = 16
_pb$14463 = -112					; size = 16
_pa$14462 = -80						; size = 16
_i$14458 = -48						; size = 4
_planeconst$ = -44					; size = 4
_dist$ = -40						; size = 4
_normal$ = -32						; size = 16
_this$ = -4						; size = 4
_pt$ = 8						; size = 4
_tolerance$ = 12					; size = 4
?isInside@btTriangleShape@@UBE_NABVbtVector3@@M@Z PROC	; btTriangleShape::isInside, COMDAT
; _this$ = ecx
; Line 132
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 188				; 000000bcH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-188]
	mov	ecx, 47					; 0000002fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	lea	ecx, DWORD PTR _normal$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 134
	lea	eax, DWORD PTR _normal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?calcNormal@btTriangleShape@@QBEXAAVbtVector3@@@Z ; btTriangleShape::calcNormal
; Line 136
	lea	ecx, DWORD PTR _normal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pt$[ebx]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR _dist$[ebp]
; Line 137
	lea	edx, DWORD PTR _normal$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR _planeconst$[ebp]
; Line 138
	fld	DWORD PTR _dist$[ebp]
	fsub	DWORD PTR _planeconst$[ebp]
	fstp	DWORD PTR _dist$[ebp]
; Line 139
	fld	DWORD PTR _tolerance$[ebx]
	fchs
	fcomp	DWORD PTR _dist$[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$LN5@isInside
	fld	DWORD PTR _tolerance$[ebx]
	fcomp	DWORD PTR _dist$[ebp]
	fnstsw	ax
	test	ah, 1
	jne	$LN5@isInside
; Line 143
	mov	DWORD PTR _i$14458[ebp], 0
	jmp	SHORT $LN4@isInside
$LN3@isInside:
	mov	eax, DWORD PTR _i$14458[ebp]
	add	eax, 1
	mov	DWORD PTR _i$14458[ebp], eax
$LN4@isInside:
	cmp	DWORD PTR _i$14458[ebp], 3
	jge	$LN2@isInside
; Line 145
	lea	ecx, DWORD PTR _pa$14462[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	lea	ecx, DWORD PTR _pb$14463[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
; Line 146
	mov	esi, esp
	lea	ecx, DWORD PTR _pb$14463[ebp]
	push	ecx
	lea	edx, DWORD PTR _pa$14462[ebp]
	push	edx
	mov	eax, DWORD PTR _i$14458[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 147
	lea	ecx, DWORD PTR _pa$14462[ebp]
	push	ecx
	lea	edx, DWORD PTR _pb$14463[ebp]
	push	edx
	lea	eax, DWORD PTR _edge$14464[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 148
	lea	ecx, DWORD PTR _normal$[ebp]
	push	ecx
	lea	edx, DWORD PTR _edgeNormal$14466[ebp]
	push	edx
	lea	ecx, DWORD PTR _edge$14464[ebp]
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
; Line 149
	lea	ecx, DWORD PTR _edgeNormal$14466[ebp]
	call	?normalize@btVector3@@QAEAAV1@XZ	; btVector3::normalize
; Line 150
	lea	eax, DWORD PTR _edgeNormal$14466[ebp]
	push	eax
	mov	ecx, DWORD PTR _pt$[ebx]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR _dist$14468[ebp]
; Line 151
	lea	ecx, DWORD PTR _edgeNormal$14466[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pa$14462[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR _edgeConst$14469[ebp]
; Line 152
	fld	DWORD PTR _dist$14468[ebp]
	fsub	DWORD PTR _edgeConst$14469[ebp]
	fstp	DWORD PTR _dist$14468[ebp]
; Line 153
	fld	DWORD PTR _tolerance$[ebx]
	fchs
	fcomp	DWORD PTR _dist$14468[ebp]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@isInside
; Line 154
	xor	al, al
	jmp	SHORT $LN6@isInside
$LN1@isInside:
; Line 155
	jmp	$LN3@isInside
$LN2@isInside:
; Line 157
	mov	al, 1
	jmp	SHORT $LN6@isInside
$LN5@isInside:
; Line 160
	xor	al, al
$LN6@isInside:
; Line 161
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@isInside
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
	npad	2
$LN14@isInside:
	DD	5
	DD	$LN13@isInside
$LN13@isInside:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN8@isInside
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN9@isInside
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN10@isInside
	DD	-144					; ffffff70H
	DD	16					; 00000010H
	DD	$LN11@isInside
	DD	-176					; ffffff50H
	DD	16					; 00000010H
	DD	$LN12@isInside
$LN12@isInside:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	78					; 0000004eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
$LN11@isInside:
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN10@isInside:
	DB	112					; 00000070H
	DB	98					; 00000062H
	DB	0
$LN9@isInside:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	0
$LN8@isInside:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
?isInside@btTriangleShape@@UBE_NABVbtVector3@@M@Z ENDP	; btTriangleShape::isInside
_TEXT	ENDS
PUBLIC	??_C@_08NMAPBDDP@Triangle?$AA@			; `string'
;	COMDAT ??_C@_08NMAPBDDP@Triangle?$AA@
CONST	SEGMENT
??_C@_08NMAPBDDP@Triangle?$AA@ DB 'Triangle', 00H	; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?getName@btTriangleShape@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@btTriangleShape@@UBEPBDXZ PROC			; btTriangleShape::getName, COMDAT
; _this$ = ecx
; Line 164
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 165
	mov	eax, OFFSET ??_C@_08NMAPBDDP@Triangle?$AA@
; Line 166
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@btTriangleShape@@UBEPBDXZ ENDP			; btTriangleShape::getName
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getNumPreferredPenetrationDirections@btTriangleShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumPreferredPenetrationDirections@btTriangleShape@@UBEHXZ PROC ; btTriangleShape::getNumPreferredPenetrationDirections, COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	mov	eax, 2
; Line 171
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumPreferredPenetrationDirections@btTriangleShape@@UBEHXZ ENDP ; btTriangleShape::getNumPreferredPenetrationDirections
_TEXT	ENDS
PUBLIC	__real@bf800000
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?getPreferredPenetrationDirection@btTriangleShape@@UBEXHAAVbtVector3@@@Z
_TEXT	SEGMENT
$T23525 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_penetrationVector$ = 12				; size = 4
?getPreferredPenetrationDirection@btTriangleShape@@UBEXHAAVbtVector3@@@Z PROC ; btTriangleShape::getPreferredPenetrationDirection, COMDAT
; _this$ = ecx
; Line 174
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 175
	mov	eax, DWORD PTR _penetrationVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?calcNormal@btTriangleShape@@QBEXAAVbtVector3@@@Z ; btTriangleShape::calcNormal
; Line 176
	cmp	DWORD PTR _index$[ebp], 0
	je	SHORT $LN1@getPreferr
; Line 177
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR $T23525[ebp]
	lea	ecx, DWORD PTR $T23525[ebp]
	push	ecx
	mov	ecx, DWORD PTR _penetrationVector$[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
$LN1@getPreferr:
; Line 178
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?getPreferredPenetrationDirection@btTriangleShape@@UBEXHAAVbtVector3@@@Z ENDP ; btTriangleShape::getPreferredPenetrationDirection
_TEXT	ENDS
PUBLIC	??3btTriangleShape@@SAXPAX@Z			; btTriangleShape::operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtTriangleShape@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtTriangleShape@@UAEPAXI@Z PROC			; btTriangleShape::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btTriangleShape@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3btTriangleShape@@SAXPAX@Z		; btTriangleShape::operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtTriangleShape@@UAEPAXI@Z ENDP			; btTriangleShape::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	?btAlignedFreeInternal@@YAXPAX@Z:PROC		; btAlignedFreeInternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??3btTriangleShape@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??3btTriangleShape@@SAXPAX@Z PROC			; btTriangleShape::operator delete, COMDAT
; Line 28
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??3btTriangleShape@@SAXPAX@Z ENDP			; btTriangleShape::operator delete
_TEXT	ENDS
EXTRN	??1btPolyhedralConvexShape@@UAE@XZ:PROC		; btPolyhedralConvexShape::~btPolyhedralConvexShape
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btTriangleShape@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btTriangleShape@@UAE@XZ PROC				; btTriangleShape::~btTriangleShape, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btPolyhedralConvexShape@@UAE@XZ	; btPolyhedralConvexShape::~btPolyhedralConvexShape
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btTriangleShape@@UAE@XZ ENDP				; btTriangleShape::~btTriangleShape
_TEXT	ENDS
PUBLIC	?setX@btVector3@@QAEXM@Z			; btVector3::setX
PUBLIC	??_7btSphereShape@@6B@				; btSphereShape::`vftable'
PUBLIC	?getName@btSphereShape@@UBEPBDXZ		; btSphereShape::getName
PUBLIC	?setMargin@btSphereShape@@UAEXM@Z		; btSphereShape::setMargin
PUBLIC	?getMargin@btSphereShape@@UBEMXZ		; btSphereShape::getMargin
PUBLIC	?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ ; btConvexInternalShape::getNumPreferredPenetrationDirections
PUBLIC	?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z ; btConvexInternalShape::getPreferredPenetrationDirection
EXTRN	??0btConvexInternalShape@@IAE@XZ:PROC		; btConvexInternalShape::btConvexInternalShape
EXTRN	??_EbtSphereShape@@UAEPAXI@Z:PROC		; btSphereShape::`vector deleting destructor'
EXTRN	?getAabb@btSphereShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z:PROC ; btSphereShape::getAabb
EXTRN	?calculateLocalInertia@btSphereShape@@UBEXMAAVbtVector3@@@Z:PROC ; btSphereShape::calculateLocalInertia
EXTRN	?localGetSupportingVertex@btSphereShape@@UBE?AVbtVector3@@ABV2@@Z:PROC ; btSphereShape::localGetSupportingVertex
EXTRN	?localGetSupportingVertexWithoutMargin@btSphereShape@@UBE?AVbtVector3@@ABV2@@Z:PROC ; btSphereShape::localGetSupportingVertexWithoutMargin
EXTRN	?batchedUnitVectorGetSupportingVertexWithoutMargin@btSphereShape@@UBEXPBVbtVector3@@PAV2@H@Z:PROC ; btSphereShape::batchedUnitVectorGetSupportingVertexWithoutMargin
;	COMDAT ??_7btSphereShape@@6B@
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btsphereshape.h
CONST	SEGMENT
??_7btSphereShape@@6B@ DD FLAT:??_EbtSphereShape@@UAEPAXI@Z ; btSphereShape::`vftable'
	DD	FLAT:?getAabb@btSphereShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getBoundingSphere@btCollisionShape@@UBEXAAVbtVector3@@AAM@Z
	DD	FLAT:?getAngularMotionDisc@btCollisionShape@@UBEMXZ
	DD	FLAT:?getContactBreakingThreshold@btCollisionShape@@UBEMM@Z
	DD	FLAT:?setLocalScaling@btConvexInternalShape@@UAEXABVbtVector3@@@Z
	DD	FLAT:?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ
	DD	FLAT:?calculateLocalInertia@btSphereShape@@UBEXMAAVbtVector3@@@Z
	DD	FLAT:?getName@btSphereShape@@UBEPBDXZ
	DD	FLAT:?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ
	DD	FLAT:?setMargin@btSphereShape@@UAEXM@Z
	DD	FLAT:?getMargin@btSphereShape@@UBEMXZ
	DD	FLAT:?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ
	DD	FLAT:?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z
	DD	FLAT:?serializeSingleShape@btCollisionShape@@UBEXPAVbtSerializer@@@Z
	DD	FLAT:?localGetSupportingVertex@btSphereShape@@UBE?AVbtVector3@@ABV2@@Z
	DD	FLAT:?localGetSupportingVertexWithoutMargin@btSphereShape@@UBE?AVbtVector3@@ABV2@@Z
	DD	FLAT:?project@btConvexShape@@UBEXABVbtTransform@@ABVbtVector3@@AAM2@Z
	DD	FLAT:?batchedUnitVectorGetSupportingVertexWithoutMargin@btSphereShape@@UBEXPBVbtVector3@@PAV2@H@Z
	DD	FLAT:?getAabbSlow@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ
	DD	FLAT:?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btSphereShape@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_radius$ = 8						; size = 4
??0btSphereShape@@QAE@M@Z PROC				; btSphereShape::btSphereShape, COMDAT
; _this$ = ecx
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btConvexInternalShape@@IAE@XZ	; btConvexInternalShape::btConvexInternalShape
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btSphereShape@@6B@
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 8
; Line 32
	push	ecx
	fld	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR _radius$[ebp]
	fstp	DWORD PTR [edx+48]
; Line 34
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btSphereShape@@QAE@M@Z ENDP				; btSphereShape::btSphereShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setX@btVector3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
?setX@btVector3@@QAEXM@Z PROC				; btVector3::setX, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 567
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	4
?setX@btVector3@@QAEXM@Z ENDP				; btVector3::setX
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ PROC ; btConvexInternalShape::getNumPreferredPenetrationDirections, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconvexinternalshape.h
; Line 124
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 125
	xor	eax, eax
; Line 126
	mov	esp, ebp
	pop	ebp
	ret	0
?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ ENDP ; btConvexInternalShape::getNumPreferredPenetrationDirections
_TEXT	ENDS
PUBLIC	??_C@_0GF@INEBHDND@Assert?5d?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0GF@INEBHDND@Assert?5d?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0GF@INEBHDND@Assert?5d?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert d:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\bulletcollision\collisionshapes\btConvexInternalShape.h:'
	DB	'%u (0)', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_penetrationVector$ = 12				; size = 4
?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z PROC ; btConvexInternalShape::getPreferredPenetrationDirection, COMDAT
; _this$ = ecx
; Line 129
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 132
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN2@getPreferr@2
	push	132					; 00000084H
	push	OFFSET ??_C@_0GF@INEBHDND@Assert?5d?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@getPreferr@2:
; Line 133
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z ENDP ; btConvexInternalShape::getPreferredPenetrationDirection
_TEXT	ENDS
PUBLIC	??_C@_06FKFPCBEF@SPHERE?$AA@			; `string'
;	COMDAT ??_C@_06FKFPCBEF@SPHERE?$AA@
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btsphereshape.h
CONST	SEGMENT
??_C@_06FKFPCBEF@SPHERE?$AA@ DB 'SPHERE', 00H		; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?getName@btSphereShape@@UBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getName@btSphereShape@@UBEPBDXZ PROC			; btSphereShape::getName, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_06FKFPCBEF@SPHERE?$AA@
	mov	esp, ebp
	pop	ebp
	ret	0
?getName@btSphereShape@@UBEPBDXZ ENDP			; btSphereShape::getName
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setMargin@btSphereShape@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_margin$ = 8						; size = 4
?setMargin@btSphereShape@@UAEXM@Z PROC			; btSphereShape::setMargin, COMDAT
; _this$ = ecx
; Line 59
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 60
	push	ecx
	fld	DWORD PTR _margin$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setMargin@btConvexInternalShape@@UAEXM@Z ; btConvexInternalShape::setMargin
; Line 61
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setMargin@btSphereShape@@UAEXM@Z ENDP			; btSphereShape::setMargin
_TEXT	ENDS
PUBLIC	?getRadius@btSphereShape@@QBEMXZ		; btSphereShape::getRadius
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getMargin@btSphereShape@@UBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getMargin@btSphereShape@@UBEMXZ PROC			; btSphereShape::getMargin, COMDAT
; _this$ = ecx
; Line 63
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 66
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getRadius@btSphereShape@@QBEMXZ	; btSphereShape::getRadius
; Line 67
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getMargin@btSphereShape@@UBEMXZ ENDP			; btSphereShape::getMargin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getRadius@btSphereShape@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getRadius@btSphereShape@@QBEMXZ PROC			; btSphereShape::getRadius, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getRadius@btSphereShape@@QBEMXZ ENDP			; btSphereShape::getRadius
_TEXT	ENDS
PUBLIC	??3btSphereShape@@SAXPAX@Z			; btSphereShape::operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtSphereShape@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtSphereShape@@UAEPAXI@Z PROC			; btSphereShape::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btSphereShape@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3btSphereShape@@SAXPAX@Z		; btSphereShape::operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtSphereShape@@UAEPAXI@Z ENDP			; btSphereShape::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??3btSphereShape@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??3btSphereShape@@SAXPAX@Z PROC				; btSphereShape::operator delete, COMDAT
; Line 27
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??3btSphereShape@@SAXPAX@Z ENDP				; btSphereShape::operator delete
_TEXT	ENDS
PUBLIC	??1btConvexInternalShape@@UAE@XZ		; btConvexInternalShape::~btConvexInternalShape
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btSphereShape@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSphereShape@@UAE@XZ PROC				; btSphereShape::~btSphereShape, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btConvexInternalShape@@UAE@XZ	; btConvexInternalShape::~btConvexInternalShape
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSphereShape@@UAE@XZ ENDP				; btSphereShape::~btSphereShape
_TEXT	ENDS
PUBLIC	??_7btConvexInternalShape@@6B@			; btConvexInternalShape::`vftable'
PUBLIC	?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ; btConvexInternalShape::getAabb
EXTRN	??1btConvexShape@@UAE@XZ:PROC			; btConvexShape::~btConvexShape
EXTRN	??_EbtConvexInternalShape@@UAEPAXI@Z:PROC	; btConvexInternalShape::`vector deleting destructor'
;	COMDAT ??_7btConvexInternalShape@@6B@
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisionshapes\btconvexinternalshape.h
CONST	SEGMENT
??_7btConvexInternalShape@@6B@ DD FLAT:??_EbtConvexInternalShape@@UAEPAXI@Z ; btConvexInternalShape::`vftable'
	DD	FLAT:?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getBoundingSphere@btCollisionShape@@UBEXAAVbtVector3@@AAM@Z
	DD	FLAT:?getAngularMotionDisc@btCollisionShape@@UBEMXZ
	DD	FLAT:?getContactBreakingThreshold@btCollisionShape@@UBEMM@Z
	DD	FLAT:?setLocalScaling@btConvexInternalShape@@UAEXABVbtVector3@@@Z
	DD	FLAT:?getLocalScaling@btConvexInternalShape@@UBEABVbtVector3@@XZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:?getAnisotropicRollingFrictionDirection@btCollisionShape@@UBE?AVbtVector3@@XZ
	DD	FLAT:?setMargin@btConvexInternalShape@@UAEXM@Z
	DD	FLAT:?getMargin@btConvexInternalShape@@UBEMXZ
	DD	FLAT:?calculateSerializeBufferSize@btConvexInternalShape@@UBEHXZ
	DD	FLAT:?serialize@btConvexInternalShape@@UBEPBDPAXPAVbtSerializer@@@Z
	DD	FLAT:?serializeSingleShape@btCollisionShape@@UBEXPAVbtSerializer@@@Z
	DD	FLAT:?localGetSupportingVertex@btConvexInternalShape@@UBE?AVbtVector3@@ABV2@@Z
	DD	FLAT:__purecall
	DD	FLAT:?project@btConvexShape@@UBEXABVbtTransform@@ABVbtVector3@@AAM2@Z
	DD	FLAT:__purecall
	DD	FLAT:?getAabbSlow@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
	DD	FLAT:?getNumPreferredPenetrationDirections@btConvexInternalShape@@UBEHXZ
	DD	FLAT:?getPreferredPenetrationDirection@btConvexInternalShape@@UBEXHAAVbtVector3@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??1btConvexInternalShape@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btConvexInternalShape@@UAE@XZ PROC			; btConvexInternalShape::~btConvexInternalShape, COMDAT
; _this$ = ecx
; Line 50
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7btConvexInternalShape@@6B@
; Line 52
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btConvexShape@@UAE@XZ		; btConvexShape::~btConvexShape
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btConvexInternalShape@@UAE@XZ ENDP			; btConvexInternalShape::~btConvexInternalShape
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_t$ = 8							; size = 4
_aabbMin$ = 12						; size = 4
_aabbMax$ = 16						; size = 4
?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z PROC ; btConvexInternalShape::getAabb, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	esi, esp
	mov	eax, DWORD PTR _aabbMax$[ebp]
	push	eax
	mov	ecx, DWORD PTR _aabbMin$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 91
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?getAabb@btConvexInternalShape@@UBEXABVbtTransform@@AAVbtVector3@@1@Z ENDP ; btConvexInternalShape::getAabb
_TEXT	ENDS
PUBLIC	??3btConvexInternalShape@@SAXPAX@Z		; btConvexInternalShape::operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GbtConvexInternalShape@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GbtConvexInternalShape@@UAEPAXI@Z PROC		; btConvexInternalShape::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btConvexInternalShape@@UAE@XZ	; btConvexInternalShape::~btConvexInternalShape
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3btConvexInternalShape@@SAXPAX@Z	; btConvexInternalShape::operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GbtConvexInternalShape@@UAEPAXI@Z ENDP		; btConvexInternalShape::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??3btConvexInternalShape@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??3btConvexInternalShape@@SAXPAX@Z PROC			; btConvexInternalShape::operator delete, COMDAT
; Line 47
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??3btConvexInternalShape@@SAXPAX@Z ENDP			; btConvexInternalShape::operator delete
_TEXT	ENDS
PUBLIC	__real@5d5e0b6b
PUBLIC	??_7CastResult@btConvexCast@@6B@		; btConvexCast::CastResult::`vftable'
PUBLIC	?DebugDraw@CastResult@btConvexCast@@UAEXM@Z	; btConvexCast::CastResult::DebugDraw
PUBLIC	?drawCoordSystem@CastResult@btConvexCast@@UAEXABVbtTransform@@@Z ; btConvexCast::CastResult::drawCoordSystem
PUBLIC	?reportFailure@CastResult@btConvexCast@@UAEXHH@Z ; btConvexCast::CastResult::reportFailure
EXTRN	??_ECastResult@btConvexCast@@UAEPAXI@Z:PROC	; btConvexCast::CastResult::`vector deleting destructor'
;	COMDAT __real@5d5e0b6b
; File d:\專題\自建專案\自建專案\src\bulletcollision\narrowphasecollision\btconvexcast.h
CONST	SEGMENT
__real@5d5e0b6b DD 05d5e0b6br			; 1e+018
CONST	ENDS
;	COMDAT ??_7CastResult@btConvexCast@@6B@
CONST	SEGMENT
??_7CastResult@btConvexCast@@6B@ DD FLAT:?DebugDraw@CastResult@btConvexCast@@UAEXM@Z ; btConvexCast::CastResult::`vftable'
	DD	FLAT:?drawCoordSystem@CastResult@btConvexCast@@UAEXABVbtTransform@@@Z
	DD	FLAT:?reportFailure@CastResult@btConvexCast@@UAEXHH@Z
	DD	FLAT:??_ECastResult@btConvexCast@@UAEPAXI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CastResult@btConvexCast@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CastResult@btConvexCast@@QAE@XZ PROC			; btConvexCast::CastResult::CastResult, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CastResult@btConvexCast@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??0btTransform@@QAE@XZ			; btTransform::btTransform
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@5d5e0b6b
	fstp	DWORD PTR [ecx+176]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+180], 0
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+184]
; Line 48
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CastResult@btConvexCast@@QAE@XZ ENDP			; btConvexCast::CastResult::CastResult
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DebugDraw@CastResult@btConvexCast@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fraction$ = 8						; size = 4
?DebugDraw@CastResult@btConvexCast@@UAEXM@Z PROC	; btConvexCast::CastResult::DebugDraw, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?DebugDraw@CastResult@btConvexCast@@UAEXM@Z ENDP	; btConvexCast::CastResult::DebugDraw
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?drawCoordSystem@CastResult@btConvexCast@@UAEXABVbtTransform@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_trans$ = 8						; size = 4
?drawCoordSystem@CastResult@btConvexCast@@UAEXABVbtTransform@@@Z PROC ; btConvexCast::CastResult::drawCoordSystem, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?drawCoordSystem@CastResult@btConvexCast@@UAEXABVbtTransform@@@Z ENDP ; btConvexCast::CastResult::drawCoordSystem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?reportFailure@CastResult@btConvexCast@@UAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_errNo$ = 8						; size = 4
_numIterations$ = 12					; size = 4
?reportFailure@CastResult@btConvexCast@@UAEXHH@Z PROC	; btConvexCast::CastResult::reportFailure, COMDAT
; _this$ = ecx
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	8
?reportFailure@CastResult@btConvexCast@@UAEXHH@Z ENDP	; btConvexCast::CastResult::reportFailure
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CastResult@btConvexCast@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CastResult@btConvexCast@@UAE@XZ PROC			; btConvexCast::CastResult::~CastResult, COMDAT
; _this$ = ecx
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CastResult@btConvexCast@@6B@
	mov	esp, ebp
	pop	ebp
	ret	0
??1CastResult@btConvexCast@@UAE@XZ ENDP			; btConvexCast::CastResult::~CastResult
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCastResult@btConvexCast@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCastResult@btConvexCast@@UAEPAXI@Z PROC		; btConvexCast::CastResult::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CastResult@btConvexCast@@UAE@XZ	; btConvexCast::CastResult::~CastResult
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@8
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@8:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCastResult@btConvexCast@@UAEPAXI@Z ENDP		; btConvexCast::CastResult::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0btSubSimplexClosestResult@@QAE@XZ		; btSubSimplexClosestResult::btSubSimplexClosestResult
PUBLIC	__real@38d1b717
;	COMDAT __real@38d1b717
; File d:\專題\自建專案\自建專案\src\bulletcollision\narrowphasecollision\btvoronoisimplexsolver.h
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0btVoronoiSimplexSolver@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btVoronoiSimplexSolver@@QAE@XZ PROC			; btVoronoiSimplexSolver::btVoronoiSimplexSolver, COMDAT
; _this$ = ecx
; Line 137
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	5
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	5
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	5
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	push	edx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 256				; 00000100H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 288				; 00000120H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 304				; 00000130H
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@38d1b717
	fstp	DWORD PTR [eax+320]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 336				; 00000150H
	call	??0btSubSimplexClosestResult@@QAE@XZ
; Line 138
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btVoronoiSimplexSolver@@QAE@XZ ENDP			; btVoronoiSimplexSolver::btVoronoiSimplexSolver
_TEXT	ENDS
PUBLIC	??0btUsageBitfield@@QAE@XZ			; btUsageBitfield::btUsageBitfield
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btSubSimplexClosestResult@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btSubSimplexClosestResult@@QAE@XZ PROC		; btSubSimplexClosestResult::btSubSimplexClosestResult, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0btUsageBitfield@@QAE@XZ		; btUsageBitfield::btUsageBitfield
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btSubSimplexClosestResult@@QAE@XZ ENDP		; btSubSimplexClosestResult::btSubSimplexClosestResult
_TEXT	ENDS
PUBLIC	?reset@btUsageBitfield@@QAEXXZ			; btUsageBitfield::reset
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btUsageBitfield@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btUsageBitfield@@QAE@XZ PROC				; btUsageBitfield::btUsageBitfield, COMDAT
; _this$ = ecx
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 35
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reset@btUsageBitfield@@QAEXXZ		; btUsageBitfield::reset
; Line 36
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btUsageBitfield@@QAE@XZ ENDP				; btUsageBitfield::btUsageBitfield
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?reset@btUsageBitfield@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?reset@btUsageBitfield@@QAEXXZ PROC			; btUsageBitfield::reset, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 40
	mov	eax, 65534				; 0000fffeH
	mov	ecx, DWORD PTR _this$[ebp]
	and	ax, WORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx], ax
; Line 41
	mov	eax, 65533				; 0000fffdH
	mov	ecx, DWORD PTR _this$[ebp]
	and	ax, WORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx], ax
; Line 42
	mov	eax, 65531				; 0000fffbH
	mov	ecx, DWORD PTR _this$[ebp]
	and	ax, WORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx], ax
; Line 43
	mov	eax, 65527				; 0000fff7H
	mov	ecx, DWORD PTR _this$[ebp]
	and	ax, WORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx], ax
; Line 44
	mov	esp, ebp
	pop	ebp
	ret	0
?reset@btUsageBitfield@@QAEXXZ ENDP			; btUsageBitfield::reset
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAE@XZ PROC ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::~LocalTriangleSphereCastCallback, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btTriangleCallback@@UAE@XZ		; btTriangleCallback::~btTriangleCallback
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAE@XZ ENDP ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::~LocalTriangleSphereCastCallback
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GLocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GLocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAEPAXI@Z PROC ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1LocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@9
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@9:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GLocalTriangleSphereCastCallback@?4??calculateTimeOfImpact@btSoftBodyConcaveCollisionAlgorithm@@UAEMPAVbtCollisionObject@@0ABUbtDispatcherInfo@@PAVbtManifoldResult@@@Z@UAEPAXI@Z ENDP ; `btSoftBodyConcaveCollisionAlgorithm::calculateTimeOfImpact'::`5'::LocalTriangleSphereCastCallback::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1btConvexCast@@UAE@XZ:PROC			; btConvexCast::~btConvexCast
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btSubsimplexConvexCast@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btSubsimplexConvexCast@@UAE@XZ PROC			; btSubsimplexConvexCast::~btSubsimplexConvexCast, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1btConvexCast@@UAE@XZ			; btConvexCast::~btConvexCast
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btSubsimplexConvexCast@@UAE@XZ ENDP			; btSubsimplexConvexCast::~btSubsimplexConvexCast
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@H@@IAEXXZ		; btAlignedObjectArray<int>::init
PUBLIC	??0?$btAlignedAllocator@H$0BA@@@QAE@XZ		; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@H@@QAE@XZ PROC		; btAlignedObjectArray<int>::btAlignedObjectArray<int>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@H$0BA@@@QAE@XZ	; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@H@@QAE@XZ ENDP		; btAlignedObjectArray<int>::btAlignedObjectArray<int>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@H@@QAEXXZ		; btAlignedObjectArray<int>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@H@@QAE@XZ PROC		; btAlignedObjectArray<int>::~btAlignedObjectArray<int>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@H@@QAEXXZ	; btAlignedObjectArray<int>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@H@@QAE@XZ ENDP		; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@H@@QAEAAHH@Z		; btAlignedObjectArray<int>::operator[]
PUBLIC	?growTables@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@IAEXABV?$btHashKey@UbtTriIndex@@@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::growTables
PUBLIC	?push_back@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::push_back
PUBLIC	?push_back@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXABUbtTriIndex@@@Z ; btAlignedObjectArray<btTriIndex>::push_back
PUBLIC	?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::size
PUBLIC	??A?$btAlignedObjectArray@UbtTriIndex@@@@QAEAAUbtTriIndex@@H@Z ; btAlignedObjectArray<btTriIndex>::operator[]
PUBLIC	?findIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHABV?$btHashKey@UbtTriIndex@@@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::findIndex
PUBLIC	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
PUBLIC	?getHash@?$btHashKey@UbtTriIndex@@@@QBEIXZ	; btHashKey<btTriIndex>::getHash
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?insert@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@ABUbtTriIndex@@@Z
_TEXT	SEGMENT
_newCapacity$ = -24					; size = 4
_oldCapacity$ = -20					; size = 4
_count$ = -16						; size = 4
_index$ = -12						; size = 4
_hash$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
_value$ = 12						; size = 4
?insert@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@ABUbtTriIndex@@@Z PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::insert, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 269
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 270
	mov	ecx, DWORD PTR _key$[ebp]
	call	?getHash@?$btHashKey@UbtTriIndex@@@@QBEIXZ ; btHashKey<btTriIndex>::getHash
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
	sub	eax, 1
	and	esi, eax
	mov	DWORD PTR _hash$[ebp], esi
; Line 273
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHABV?$btHashKey@UbtTriIndex@@@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::findIndex
	mov	DWORD PTR _index$[ebp], eax
; Line 274
	cmp	DWORD PTR _index$[ebp], -1
	je	SHORT $LN2@insert
; Line 276
	mov	ecx, DWORD PTR _value$[ebp]
	mov	esi, DWORD PTR [ecx]
	mov	edi, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@UbtTriIndex@@@@QAEAAUbtTriIndex@@H@Z ; btAlignedObjectArray<btTriIndex>::operator[]
	mov	DWORD PTR [eax], esi
	mov	DWORD PTR [eax+4], edi
; Line 277
	jmp	$LN3@insert
$LN2@insert:
; Line 280
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::size
	mov	DWORD PTR _count$[ebp], eax
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
	mov	DWORD PTR _oldCapacity$[ebp], eax
; Line 282
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?push_back@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXABUbtTriIndex@@@Z ; btAlignedObjectArray<btTriIndex>::push_back
; Line 283
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?push_back@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::push_back
; Line 285
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
	mov	DWORD PTR _newCapacity$[ebp], eax
; Line 286
	mov	edx, DWORD PTR _oldCapacity$[ebp]
	cmp	edx, DWORD PTR _newCapacity$[ebp]
	jge	SHORT $LN1@insert
; Line 288
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?growTables@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@IAEXABV?$btHashKey@UbtTriIndex@@@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::growTables
; Line 290
	mov	ecx, DWORD PTR _key$[ebp]
	call	?getHash@?$btHashKey@UbtTriIndex@@@@QBEIXZ ; btHashKey<btTriIndex>::getHash
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
	sub	eax, 1
	and	esi, eax
	mov	DWORD PTR _hash$[ebp], esi
$LN1@insert:
; Line 292
	mov	ecx, DWORD PTR _hash$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _count$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
; Line 293
	mov	edx, DWORD PTR _hash$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@insert:
; Line 294
	pop	edi
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?insert@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@ABUbtTriIndex@@@Z ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::insert
_TEXT	ENDS
PUBLIC	??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
CONST	SEGMENT
??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (n>=0)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??A?$btAlignedObjectArray@H@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@H@@QAEAAHH@Z PROC		; btAlignedObjectArray<int>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@H@@QAEAAHH@Z ENDP		; btAlignedObjectArray<int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHXZ PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::size, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 380
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 381
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::size
; Line 382
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHXZ ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::size
_TEXT	ENDS
PUBLIC	??_C@_0FO@JBEIABOL@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FO@JBEIABOL@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FO@JBEIABOL@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btHashMap.h:%u (index < m_valueArray.size())', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?getAtIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?getAtIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@H@Z PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::getAtIndex, COMDAT
; _this$ = ecx
; Line 392
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 393
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::size
	cmp	DWORD PTR _index$[ebp], eax
	jl	SHORT $LN1@getAtIndex
	push	393					; 00000189H
	push	OFFSET ??_C@_0FO@JBEIABOL@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@getAtIndex:
; Line 395
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@UbtTriIndex@@@@QAEAAUbtTriIndex@@H@Z ; btAlignedObjectArray<btTriIndex>::operator[]
; Line 396
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getAtIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@H@Z ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::getAtIndex
_TEXT	ENDS
PUBLIC	?find@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::find
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_key$ = 8						; size = 4
??A?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::operator[], COMDAT
; _this$ = ecx
; Line 398
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 399
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?find@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::find
; Line 400
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::operator[]
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::clear
PUBLIC	?clear@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXXZ ; btAlignedObjectArray<btTriIndex>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXXZ PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::clear, COMDAT
; _this$ = ecx
; Line 441
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 442
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@H@@QAEXXZ	; btAlignedObjectArray<int>::clear
; Line 443
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?clear@?$btAlignedObjectArray@H@@QAEXXZ	; btAlignedObjectArray<int>::clear
; Line 444
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?clear@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXXZ ; btAlignedObjectArray<btTriIndex>::clear
; Line 445
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?clear@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::clear
; Line 446
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEXXZ ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::clear
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ ; btAlignedObjectArray<btTriIndex>::init
PUBLIC	??0?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAE@XZ ; btAlignedAllocator<btTriIndex,16>::btAlignedAllocator<btTriIndex,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ PROC	; btAlignedObjectArray<btTriIndex>::btAlignedObjectArray<btTriIndex>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAE@XZ ; btAlignedAllocator<btTriIndex,16>::btAlignedAllocator<btTriIndex,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ ; btAlignedObjectArray<btTriIndex>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ ENDP	; btAlignedObjectArray<btTriIndex>::btAlignedObjectArray<btTriIndex>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ PROC	; btAlignedObjectArray<btTriIndex>::~btAlignedObjectArray<btTriIndex>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXXZ ; btAlignedObjectArray<btTriIndex>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@UbtTriIndex@@@@QAE@XZ ENDP	; btAlignedObjectArray<btTriIndex>::~btAlignedObjectArray<btTriIndex>
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::init
PUBLIC	??0?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAE@XZ ; btAlignedAllocator<btHashKey<btTriIndex>,16>::btAlignedAllocator<btHashKey<btTriIndex>,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::btAlignedObjectArray<btHashKey<btTriIndex> >, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAE@XZ ; btAlignedAllocator<btHashKey<btTriIndex>,16>::btAlignedAllocator<btHashKey<btTriIndex>,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::btAlignedObjectArray<btHashKey<btTriIndex> >
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::~btAlignedObjectArray<btHashKey<btTriIndex> >, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAE@XZ ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::~btAlignedObjectArray<btHashKey<btTriIndex> >
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?RemoveReferences@?$btSparseSdf@$02@@QAEHPAVbtCollisionShape@@@Z
_TEXT	SEGMENT
$T23620 = -32						; size = 4
_pn$21886 = -28						; size = 4
_pc$21882 = -24						; size = 4
_pp$21881 = -20						; size = 4
_root$21880 = -16					; size = 4
_i$21876 = -12						; size = 4
_refcount$ = -8						; size = 4
_this$ = -4						; size = 4
_pcs$ = 8						; size = 4
?RemoveReferences@?$btSparseSdf@$02@@QAEHPAVbtCollisionShape@@@Z PROC ; btSparseSdf<3>::RemoveReferences, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsparsesdf.h
; Line 137
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 138
	mov	DWORD PTR _refcount$[ebp], 0
; Line 139
	mov	DWORD PTR _i$21876[ebp], 0
	jmp	SHORT $LN8@RemoveRefe
$LN7@RemoveRefe:
	mov	eax, DWORD PTR _i$21876[ebp]
	add	eax, 1
	mov	DWORD PTR _i$21876[ebp], eax
$LN8@RemoveRefe:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
	cmp	DWORD PTR _i$21876[ebp], eax
	jge	$LN6@RemoveRefe
; Line 141
	mov	ecx, DWORD PTR _i$21876[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
	mov	DWORD PTR _root$21880[ebp], eax
; Line 142
	mov	DWORD PTR _pp$21881[ebp], 0
; Line 143
	mov	edx, DWORD PTR _root$21880[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pc$21882[ebp], eax
$LN5@RemoveRefe:
; Line 144
	cmp	DWORD PTR _pc$21882[ebp], 0
	je	SHORT $LN4@RemoveRefe
; Line 146
	mov	ecx, DWORD PTR _pc$21882[ebp]
	mov	edx, DWORD PTR [ecx+280]
	mov	DWORD PTR _pn$21886[ebp], edx
; Line 147
	mov	eax, DWORD PTR _pc$21882[ebp]
	mov	ecx, DWORD PTR [eax+276]
	cmp	ecx, DWORD PTR _pcs$[ebp]
	jne	SHORT $LN3@RemoveRefe
; Line 149
	cmp	DWORD PTR _pp$21881[ebp], 0
	je	SHORT $LN2@RemoveRefe
	mov	edx, DWORD PTR _pp$21881[ebp]
	mov	eax, DWORD PTR _pn$21886[ebp]
	mov	DWORD PTR [edx+280], eax
	jmp	SHORT $LN1@RemoveRefe
$LN2@RemoveRefe:
	mov	ecx, DWORD PTR _root$21880[ebp]
	mov	edx, DWORD PTR _pn$21886[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@RemoveRefe:
; Line 150
	mov	eax, DWORD PTR _pc$21882[ebp]
	mov	DWORD PTR $T23620[ebp], eax
	mov	ecx, DWORD PTR $T23620[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	edx, DWORD PTR _pp$21881[ebp]
	mov	DWORD PTR _pc$21882[ebp], edx
	mov	eax, DWORD PTR _refcount$[ebp]
	add	eax, 1
	mov	DWORD PTR _refcount$[ebp], eax
$LN3@RemoveRefe:
; Line 152
	mov	ecx, DWORD PTR _pc$21882[ebp]
	mov	DWORD PTR _pp$21881[ebp], ecx
	mov	edx, DWORD PTR _pn$21886[ebp]
	mov	DWORD PTR _pc$21882[ebp], edx
; Line 153
	jmp	SHORT $LN5@RemoveRefe
$LN4@RemoveRefe:
; Line 154
	jmp	$LN7@RemoveRefe
$LN6@RemoveRefe:
; Line 155
	mov	eax, DWORD PTR _refcount$[ebp]
; Line 156
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveReferences@?$btSparseSdf@$02@@QAEHPAVbtCollisionShape@@@Z ENDP ; btSparseSdf<3>::RemoveReferences
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btHashKey@UbtTriIndex@@@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_uid$ = 8						; size = 4
??0?$btHashKey@UbtTriIndex@@@@QAE@H@Z PROC		; btHashKey<btTriIndex>::btHashKey<btTriIndex>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 194
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _uid$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 195
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$btHashKey@UbtTriIndex@@@@QAE@H@Z ENDP		; btHashKey<btTriIndex>::btHashKey<btTriIndex>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@H@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@H@@IAEXXZ PROC		; btAlignedObjectArray<int>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@H@@IAEXXZ ENDP		; btAlignedObjectArray<int>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z	; btAlignedObjectArray<int>::destroy
PUBLIC	?size@?$btAlignedObjectArray@H@@QBEHXZ		; btAlignedObjectArray<int>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@H@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@H@@QAEXXZ PROC		; btAlignedObjectArray<int>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z ; btAlignedObjectArray<int>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@H@@IAEXXZ ; btAlignedObjectArray<int>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@H@@QAEXXZ ENDP		; btAlignedObjectArray<int>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@H@@QBEHXZ PROC		; btAlignedObjectArray<int>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@H@@QBEHXZ ENDP		; btAlignedObjectArray<int>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@H$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@H$0BA@@@QAE@XZ PROC		; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@H$0BA@@@QAE@XZ ENDP		; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
_TEXT	ENDS
PUBLIC	??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEAAV?$btHashKey@UbtTriIndex@@@@H@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::operator[]
PUBLIC	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z	; btAlignedObjectArray<int>::resize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?growTables@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@IAEXABV?$btHashKey@UbtTriIndex@@@@@Z
_TEXT	SEGMENT
$T23634 = -28						; size = 4
$T23633 = -24						; size = 4
_hashValue$21941 = -20					; size = 4
_i$21931 = -16						; size = 4
_curHashtableSize$21927 = -12				; size = 4
_newCapacity$ = -8					; size = 4
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?growTables@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@IAEXABV?$btHashKey@UbtTriIndex@@@@@Z PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::growTables, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 231
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
	mov	DWORD PTR _newCapacity$[ebp], eax
; Line 234
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	eax, DWORD PTR _newCapacity$[ebp]
	jge	$LN11@growTables
; Line 237
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	mov	DWORD PTR _curHashtableSize$21927[ebp], eax
; Line 239
	mov	DWORD PTR $T23633[ebp], 0
	lea	eax, DWORD PTR $T23633[ebp]
	push	eax
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
; Line 240
	mov	DWORD PTR $T23634[ebp], 0
	lea	edx, DWORD PTR $T23634[ebp]
	push	edx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ; btAlignedObjectArray<int>::resize
; Line 244
	mov	DWORD PTR _i$21931[ebp], 0
	jmp	SHORT $LN9@growTables
$LN8@growTables:
	mov	ecx, DWORD PTR _i$21931[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$21931[ebp], ecx
$LN9@growTables:
	mov	edx, DWORD PTR _i$21931[ebp]
	cmp	edx, DWORD PTR _newCapacity$[ebp]
	jge	SHORT $LN7@growTables
; Line 246
	mov	eax, DWORD PTR _i$21931[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR [eax], -1
; Line 247
	jmp	SHORT $LN8@growTables
$LN7@growTables:
; Line 248
	mov	DWORD PTR _i$21931[ebp], 0
	jmp	SHORT $LN6@growTables
$LN5@growTables:
	mov	ecx, DWORD PTR _i$21931[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$21931[ebp], ecx
$LN6@growTables:
	mov	edx, DWORD PTR _i$21931[ebp]
	cmp	edx, DWORD PTR _newCapacity$[ebp]
	jge	SHORT $LN4@growTables
; Line 250
	mov	eax, DWORD PTR _i$21931[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	DWORD PTR [eax], -1
; Line 251
	jmp	SHORT $LN5@growTables
$LN4@growTables:
; Line 253
	mov	DWORD PTR _i$21931[ebp], 0
	jmp	SHORT $LN3@growTables
$LN2@growTables:
	mov	ecx, DWORD PTR _i$21931[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$21931[ebp], ecx
$LN3@growTables:
	mov	edx, DWORD PTR _i$21931[ebp]
	cmp	edx, DWORD PTR _curHashtableSize$21927[ebp]
	jge	SHORT $LN11@growTables
; Line 258
	mov	eax, DWORD PTR _i$21931[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEAAV?$btHashKey@UbtTriIndex@@@@H@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::operator[]
	mov	ecx, eax
	call	?getHash@?$btHashKey@UbtTriIndex@@@@QBEIXZ ; btHashKey<btTriIndex>::getHash
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
	sub	eax, 1
	and	esi, eax
	mov	DWORD PTR _hashValue$21941[ebp], esi
; Line 259
	mov	ecx, DWORD PTR _hashValue$21941[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	esi, eax
	mov	edx, DWORD PTR _i$21931[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
; Line 260
	mov	edx, DWORD PTR _hashValue$21941[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR _i$21931[ebp]
	mov	DWORD PTR [eax], ecx
; Line 261
	jmp	SHORT $LN2@growTables
$LN11@growTables:
; Line 265
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?growTables@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@IAEXABV?$btHashKey@UbtTriIndex@@@@@Z ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::growTables
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?find@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z
_TEXT	SEGMENT
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?find@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::find, COMDAT
; _this$ = ecx
; Line 413
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 414
	mov	eax, DWORD PTR _key$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?findIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHABV?$btHashKey@UbtTriIndex@@@@@Z ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::findIndex
	mov	DWORD PTR _index$[ebp], eax
; Line 415
	cmp	DWORD PTR _index$[ebp], -1
	jne	SHORT $LN1@find
; Line 417
	xor	eax, eax
	jmp	SHORT $LN2@find
$LN1@find:
; Line 419
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$btAlignedObjectArray@UbtTriIndex@@@@QAEAAUbtTriIndex@@H@Z ; btAlignedObjectArray<btTriIndex>::operator[]
$LN2@find:
; Line 420
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?find@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QAEPAUbtTriIndex@@ABV?$btHashKey@UbtTriIndex@@@@@Z ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::find
_TEXT	ENDS
PUBLIC	?equals@?$btHashKey@UbtTriIndex@@@@QBE_NABV1@@Z	; btHashKey<btTriIndex>::equals
PUBLIC	??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEABV?$btHashKey@UbtTriIndex@@@@H@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::operator[]
PUBLIC	??A?$btAlignedObjectArray@H@@QBEABHH@Z		; btAlignedObjectArray<int>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?findIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHABV?$btHashKey@UbtTriIndex@@@@@Z
_TEXT	SEGMENT
_index$ = -12						; size = 4
_hash$ = -8						; size = 4
_this$ = -4						; size = 4
_key$ = 8						; size = 4
?findIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHABV?$btHashKey@UbtTriIndex@@@@@Z PROC ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::findIndex, COMDAT
; _this$ = ecx
; Line 424
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 425
	mov	ecx, DWORD PTR _key$[ebp]
	call	?getHash@?$btHashKey@UbtTriIndex@@@@QBEIXZ ; btHashKey<btTriIndex>::getHash
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
	sub	eax, 1
	and	esi, eax
	mov	DWORD PTR _hash$[ebp], esi
; Line 427
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _hash$[ebp], eax
	jb	SHORT $LN3@findIndex
; Line 429
	or	eax, -1
	jmp	SHORT $LN4@findIndex
$LN3@findIndex:
; Line 432
	mov	eax, DWORD PTR _hash$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$btAlignedObjectArray@H@@QBEABHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _index$[ebp], ecx
$LN2@findIndex:
; Line 433
	cmp	DWORD PTR _index$[ebp], -1
	je	SHORT $LN1@findIndex
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEABV?$btHashKey@UbtTriIndex@@@@H@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::operator[]
	push	eax
	mov	ecx, DWORD PTR _key$[ebp]
	call	?equals@?$btHashKey@UbtTriIndex@@@@QBE_NABV1@@Z ; btHashKey<btTriIndex>::equals
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@findIndex
; Line 435
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@H@@QBEABHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _index$[ebp], edx
; Line 436
	jmp	SHORT $LN2@findIndex
$LN1@findIndex:
; Line 437
	mov	eax, DWORD PTR _index$[ebp]
$LN4@findIndex:
; Line 438
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?findIndex@?$btHashMap@V?$btHashKey@UbtTriIndex@@@@UbtTriIndex@@@@QBEHABV?$btHashKey@UbtTriIndex@@@@@Z ENDP ; btHashMap<btHashKey<btTriIndex>,btTriIndex>::findIndex
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ PROC	; btAlignedObjectArray<btTriIndex>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ ENDP	; btAlignedObjectArray<btTriIndex>::init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ PROC	; btAlignedObjectArray<btTriIndex>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ENDP	; btAlignedObjectArray<btTriIndex>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UbtTriIndex@@@@QAEAAUbtTriIndex@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UbtTriIndex@@@@QAEAAUbtTriIndex@@H@Z PROC ; btAlignedObjectArray<btTriIndex>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@2
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@2:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UbtTriIndex@@@@QAEAAUbtTriIndex@@H@Z ENDP ; btAlignedObjectArray<btTriIndex>::operator[]
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ ; btAlignedObjectArray<btTriIndex>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXHH@Z ; btAlignedObjectArray<btTriIndex>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXXZ PROC ; btAlignedObjectArray<btTriIndex>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXHH@Z ; btAlignedObjectArray<btTriIndex>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ ; btAlignedObjectArray<btTriIndex>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ ; btAlignedObjectArray<btTriIndex>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXXZ ENDP ; btAlignedObjectArray<btTriIndex>::clear
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?reserve@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXH@Z ; btAlignedObjectArray<btTriIndex>::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@UbtTriIndex@@@@IAEHH@Z ; btAlignedObjectArray<btTriIndex>::allocSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXABUbtTriIndex@@@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T23649 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXABUbtTriIndex@@@Z PROC ; btAlignedObjectArray<btTriIndex>::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@UbtTriIndex@@@@IAEHH@Z ; btAlignedObjectArray<btTriIndex>::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXH@Z ; btAlignedObjectArray<btTriIndex>::reserve
$LN1@push_back:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*8]
	push	ecx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T23649[ebp], eax
	cmp	DWORD PTR $T23649[ebp], 0
	je	SHORT $LN4@push_back
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx+4]
	mov	edx, DWORD PTR $T23649[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T23649[ebp]
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN5@push_back
$LN4@push_back:
	mov	DWORD PTR tv85[ebp], 0
$LN5@push_back:
; Line 290
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXABUbtTriIndex@@@Z ENDP ; btAlignedObjectArray<btTriIndex>::push_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
; Line 56
	push	ebp
	mov	ebp, esp
; Line 57
	mov	eax, DWORD PTR __Where$[ebp]
; Line 58
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ PROC ; btAlignedObjectArray<btTriIndex>::capacity, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ENDP ; btAlignedObjectArray<btTriIndex>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAE@XZ PROC	; btAlignedAllocator<btTriIndex,16>::btAlignedAllocator<btTriIndex,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAE@XZ ENDP	; btAlignedAllocator<btTriIndex,16>::btAlignedAllocator<btTriIndex,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXHH@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::destroy
PUBLIC	?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXXZ PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXHH@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXXZ ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::clear
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXH@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::reserve
PUBLIC	?allocSize@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEHH@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::allocSize
PUBLIC	?capacity@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?push_back@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@@Z
_TEXT	SEGMENT
tv85 = -16						; size = 4
$T23664 = -12						; size = 4
_sz$ = -8						; size = 4
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
?push_back@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@@Z PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::push_back, COMDAT
; _this$ = ecx
; Line 277
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::size
	mov	DWORD PTR _sz$[ebp], eax
; Line 279
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::capacity
	cmp	DWORD PTR _sz$[ebp], eax
	jne	SHORT $LN1@push_back@2
; Line 281
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocSize@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEHH@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::allocSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXH@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::reserve
$LN1@push_back@2:
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	lea	ecx, DWORD PTR [eax+ecx*4]
	push	ecx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T23664[ebp], eax
	cmp	DWORD PTR $T23664[ebp], 0
	je	SHORT $LN4@push_back@2
	mov	edx, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T23664[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR $T23664[ebp]
	mov	DWORD PTR tv85[ebp], edx
	jmp	SHORT $LN5@push_back@2
$LN4@push_back@2:
	mov	DWORD PTR tv85[ebp], 0
$LN5@push_back@2:
; Line 290
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 291
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXABV?$btHashKey@UbtTriIndex@@@@@Z ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::push_back
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btHashKey<btTriIndex>,16>::btAlignedAllocator<btHashKey<btTriIndex>,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btHashKey<btTriIndex>,16>::btAlignedAllocator<btHashKey<btTriIndex>,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z PROC ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@3
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@3:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUCell@?$btSparseSdf@$02@@@@QAEAAPAUCell@?$btSparseSdf@$02@@H@Z ENDP ; btAlignedObjectArray<btSparseSdf<3>::Cell *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getHash@?$btHashKey@UbtTriIndex@@@@QBEIXZ
_TEXT	SEGMENT
_key$ = -8						; size = 4
_this$ = -4						; size = 4
?getHash@?$btHashKey@UbtTriIndex@@@@QBEIXZ PROC		; btHashKey<btTriIndex>::getHash, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 208
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 209
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _key$[ebp], ecx
; Line 211
	mov	edx, DWORD PTR _key$[ebp]
	shl	edx, 15					; 0000000fH
	not	edx
	add	edx, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], edx
	mov	eax, DWORD PTR _key$[ebp]
	sar	eax, 10					; 0000000aH
	xor	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], eax
	mov	ecx, DWORD PTR _key$[ebp]
	mov	edx, DWORD PTR _key$[ebp]
	lea	eax, DWORD PTR [edx+ecx*8]
	mov	DWORD PTR _key$[ebp], eax
	mov	ecx, DWORD PTR _key$[ebp]
	sar	ecx, 6
	xor	ecx, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], ecx
	mov	edx, DWORD PTR _key$[ebp]
	shl	edx, 11					; 0000000bH
	not	edx
	add	edx, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], edx
	mov	eax, DWORD PTR _key$[ebp]
	sar	eax, 16					; 00000010H
	xor	eax, DWORD PTR _key$[ebp]
	mov	DWORD PTR _key$[ebp], eax
; Line 212
	mov	eax, DWORD PTR _key$[ebp]
; Line 213
	mov	esp, ebp
	pop	ebp
	ret	0
?getHash@?$btHashKey@UbtTriIndex@@@@QBEIXZ ENDP		; btHashKey<btTriIndex>::getHash
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z PROC	; btAlignedObjectArray<int>::destroy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy
$LN2@destroy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy
; Line 99
	jmp	SHORT $LN2@destroy
$LN4@destroy:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z ENDP	; btAlignedObjectArray<int>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z ; btAlignedAllocator<int,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@H@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@H@@IAEXXZ PROC	; btAlignedObjectArray<int>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z ; btAlignedAllocator<int,16>::deallocate
$LN1@deallocate:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@H@@IAEXXZ ENDP	; btAlignedObjectArray<int>::deallocate
_TEXT	ENDS
PUBLIC	??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (n<size())', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??A?$btAlignedObjectArray@H@@QBEABHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@H@@QBEABHH@Z PROC		; btAlignedObjectArray<int>::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@4
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@4:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@4
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@4:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@H@@QBEABHH@Z ENDP		; btAlignedObjectArray<int>::operator[]
_TEXT	ENDS
PUBLIC	?reserve@?$btAlignedObjectArray@H@@QAEXH@Z	; btAlignedObjectArray<int>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z
_TEXT	SEGMENT
tv83 = -24						; size = 4
$T23683 = -20						; size = 4
_i$22071 = -16						; size = 4
_i$22065 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z PROC	; btAlignedObjectArray<int>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$22065[ebp], ecx
	jmp	SHORT $LN8@resize
$LN7@resize:
	mov	edx, DWORD PTR _i$22065[ebp]
	add	edx, 1
	mov	DWORD PTR _i$22065[ebp], edx
$LN8@resize:
	mov	eax, DWORD PTR _i$22065[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize
; Line 229
	jmp	SHORT $LN7@resize
$LN6@resize:
; Line 230
	jmp	SHORT $LN5@resize
$LN9@resize:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@H@@QAEXH@Z ; btAlignedObjectArray<int>::reserve
$LN4@resize:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$22071[ebp], edx
	jmp	SHORT $LN3@resize
$LN2@resize:
	mov	eax, DWORD PTR _i$22071[ebp]
	add	eax, 1
	mov	DWORD PTR _i$22071[ebp], eax
$LN3@resize:
	mov	ecx, DWORD PTR _i$22071[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _i$22071[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T23683[ebp], eax
	cmp	DWORD PTR $T23683[ebp], 0
	je	SHORT $LN12@resize
	mov	eax, DWORD PTR $T23683[ebp]
	mov	ecx, DWORD PTR _fillData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR $T23683[ebp]
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN13@resize
$LN12@resize:
	mov	DWORD PTR tv83[ebp], 0
$LN13@resize:
; Line 240
	jmp	SHORT $LN2@resize
$LN5@resize:
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@H@@QAEXHABH@Z ENDP	; btAlignedObjectArray<int>::resize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@UbtTriIndex@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@UbtTriIndex@@@@IAEHH@Z PROC ; btAlignedObjectArray<btTriIndex>::allocSize, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize
$LN3@allocSize:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@UbtTriIndex@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btTriIndex>::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btTriIndex>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@2
$LN2@destroy@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@2
; Line 99
	jmp	SHORT $LN2@destroy@2
$LN4@destroy@2:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btTriIndex>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEXPAUbtTriIndex@@@Z ; btAlignedAllocator<btTriIndex,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ PROC ; btAlignedObjectArray<btTriIndex>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@2
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@2
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEXPAUbtTriIndex@@@Z ; btAlignedAllocator<btTriIndex,16>::deallocate
$LN1@deallocate@2:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@2:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ ENDP ; btAlignedObjectArray<btTriIndex>::deallocate
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@UbtTriIndex@@@@IBEXHHPAUbtTriIndex@@@Z ; btAlignedObjectArray<btTriIndex>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEPAXH@Z ; btAlignedObjectArray<btTriIndex>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXH@Z
_TEXT	SEGMENT
_s$22094 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXH@Z PROC ; btAlignedObjectArray<btTriIndex>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEPAXH@Z ; btAlignedObjectArray<btTriIndex>::allocate
	mov	DWORD PTR _s$22094[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$22094[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@UbtTriIndex@@@@IBEXHHPAUbtTriIndex@@@Z ; btAlignedObjectArray<btTriIndex>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@UbtTriIndex@@@@QBEHXZ ; btAlignedObjectArray<btTriIndex>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXHH@Z ; btAlignedObjectArray<btTriIndex>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEXXZ ; btAlignedObjectArray<btTriIndex>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$22094[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@UbtTriIndex@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btTriIndex>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocSize@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEHH@Z
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocSize@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEHH@Z PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::allocSize, COMDAT
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@allocSize@2
	mov	eax, DWORD PTR _size$[ebp]
	shl	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	jmp	SHORT $LN4@allocSize@2
$LN3@allocSize@2:
	mov	DWORD PTR tv66[ebp], 1
$LN4@allocSize@2:
	mov	eax, DWORD PTR tv66[ebp]
; Line 73
	mov	esp, ebp
	pop	ebp
	ret	4
?allocSize@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEHH@Z ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::allocSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@3
$LN2@destroy@3:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@3:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@3
; Line 99
	jmp	SHORT $LN2@destroy@3
$LN4@destroy@3:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEXPAV?$btHashKey@UbtTriIndex@@@@@Z ; btAlignedAllocator<btHashKey<btTriIndex>,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@3
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@3
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEXPAV?$btHashKey@UbtTriIndex@@@@@Z ; btAlignedAllocator<btHashKey<btTriIndex>,16>::deallocate
$LN1@deallocate@3:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@3:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEABV?$btHashKey@UbtTriIndex@@@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEABV?$btHashKey@UbtTriIndex@@@@H@Z PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::operator[], COMDAT
; _this$ = ecx
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN2@operator@5
	push	170					; 000000aaH
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN2@operator@5:
; Line 171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::size
	cmp	DWORD PTR _n$[ebp], eax
	jl	SHORT $LN1@operator@5
	push	171					; 000000abH
	push	OFFSET ??_C@_0FG@BJMKPPNN@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@5:
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 173
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEABV?$btHashKey@UbtTriIndex@@@@H@Z ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEAAV?$btHashKey@UbtTriIndex@@@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEAAV?$btHashKey@UbtTriIndex@@@@H@Z PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@6
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@6:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEAAV?$btHashKey@UbtTriIndex@@@@H@Z ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::capacity
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IBEXHHPAV?$btHashKey@UbtTriIndex@@@@@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::copy
PUBLIC	?allocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEPAXH@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXH@Z
_TEXT	SEGMENT
_s$22122 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXH@Z PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@2
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEPAXH@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::allocate
	mov	DWORD PTR _s$22122[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$22122[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IBEXHHPAV?$btHashKey@UbtTriIndex@@@@@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QBEHXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXHH@Z ; btAlignedObjectArray<btHashKey<btTriIndex> >::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEXXZ ; btAlignedObjectArray<btHashKey<btTriIndex> >::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$22122[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@2:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::reserve
_TEXT	ENDS
PUBLIC	?getUid1@?$btHashKey@UbtTriIndex@@@@QBEHXZ	; btHashKey<btTriIndex>::getUid1
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?equals@?$btHashKey@UbtTriIndex@@@@QBE_NABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
?equals@?$btHashKey@UbtTriIndex@@@@QBE_NABV1@@Z PROC	; btHashKey<btTriIndex>::equals, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 203
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 204
	mov	ecx, DWORD PTR _this$[ebp]
	call	?getUid1@?$btHashKey@UbtTriIndex@@@@QBEHXZ ; btHashKey<btTriIndex>::getUid1
	mov	esi, eax
	mov	ecx, DWORD PTR _other$[ebp]
	call	?getUid1@?$btHashKey@UbtTriIndex@@@@QBEHXZ ; btHashKey<btTriIndex>::getUid1
	xor	ecx, ecx
	cmp	esi, eax
	sete	cl
	mov	al, cl
; Line 205
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?equals@?$btHashKey@UbtTriIndex@@@@QBE_NABV1@@Z ENDP	; btHashKey<btTriIndex>::equals
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z	; btAlignedObjectArray<int>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z	; btAlignedObjectArray<int>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@H@@QAEXH@Z
_TEXT	SEGMENT
_s$22230 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@H@@QAEXH@Z PROC		; btAlignedObjectArray<int>::reserve, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@H@@QBEHXZ ; btAlignedObjectArray<int>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@3
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z ; btAlignedObjectArray<int>::allocate
	mov	DWORD PTR _s$22230[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$22230[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z ; btAlignedObjectArray<int>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z ; btAlignedObjectArray<int>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@H@@IAEXXZ ; btAlignedObjectArray<int>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$22230[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@3:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@H@@QAEXH@Z ENDP		; btAlignedObjectArray<int>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z PROC	; btAlignedAllocator<int,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z ENDP	; btAlignedAllocator<int,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@UbtTriIndex@@@@IBEXHHPAUbtTriIndex@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T23722 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@UbtTriIndex@@@@IBEXHHPAUbtTriIndex@@@Z PROC ; btAlignedObjectArray<btTriIndex>::copy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy
$LN2@copy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*8]
	push	edx
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T23722[ebp], eax
	cmp	DWORD PTR $T23722[ebp], 0
	je	SHORT $LN6@copy
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*8]
	mov	ecx, DWORD PTR [ecx+edx*8+4]
	mov	edx, DWORD PTR $T23722[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR $T23722[ebp]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN7@copy
$LN6@copy:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy:
	jmp	SHORT $LN2@copy
$LN4@copy:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@UbtTriIndex@@@@IBEXHHPAUbtTriIndex@@@Z ENDP ; btAlignedObjectArray<btTriIndex>::copy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEPAUbtTriIndex@@HPAPBU2@@Z ; btAlignedAllocator<btTriIndex,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btTriIndex>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEPAUbtTriIndex@@HPAPBU2@@Z ; btAlignedAllocator<btTriIndex,16>::allocate
	jmp	SHORT $LN2@allocate
$LN1@allocate:
; Line 106
	xor	eax, eax
$LN2@allocate:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@UbtTriIndex@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btTriIndex>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEXPAUbtTriIndex@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEXPAUbtTriIndex@@@Z PROC ; btAlignedAllocator<btTriIndex,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEXPAUbtTriIndex@@@Z ENDP ; btAlignedAllocator<btTriIndex,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IBEXHHPAV?$btHashKey@UbtTriIndex@@@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T23731 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IBEXHHPAV?$btHashKey@UbtTriIndex@@@@@Z PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::copy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@2
$LN2@copy@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@2
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T23731[ebp], eax
	cmp	DWORD PTR $T23731[ebp], 0
	je	SHORT $LN6@copy@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR $T23731[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR $T23731[ebp]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN7@copy@2
$LN6@copy@2:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy@2:
	jmp	SHORT $LN2@copy@2
$LN4@copy@2:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IBEXHHPAV?$btHashKey@UbtTriIndex@@@@@Z ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::copy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEPAV?$btHashKey@UbtTriIndex@@@@HPAPBV2@@Z ; btAlignedAllocator<btHashKey<btTriIndex>,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btHashKey<btTriIndex> >::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@2
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEPAV?$btHashKey@UbtTriIndex@@@@HPAPBV2@@Z ; btAlignedAllocator<btHashKey<btTriIndex>,16>::allocate
	jmp	SHORT $LN2@allocate@2
$LN1@allocate@2:
; Line 106
	xor	eax, eax
$LN2@allocate@2:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@V?$btHashKey@UbtTriIndex@@@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btHashKey<btTriIndex> >::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEXPAV?$btHashKey@UbtTriIndex@@@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEXPAV?$btHashKey@UbtTriIndex@@@@@Z PROC ; btAlignedAllocator<btHashKey<btTriIndex>,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEXPAV?$btHashKey@UbtTriIndex@@@@@Z ENDP ; btAlignedAllocator<btHashKey<btTriIndex>,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getUid1@?$btHashKey@UbtTriIndex@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getUid1@?$btHashKey@UbtTriIndex@@@@QBEHXZ PROC		; btHashKey<btTriIndex>::getUid1, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bthashmap.h
; Line 198
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 200
	mov	esp, ebp
	pop	ebp
	ret	0
?getUid1@?$btHashKey@UbtTriIndex@@@@QBEHXZ ENDP		; btHashKey<btTriIndex>::getUid1
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z
_TEXT	SEGMENT
tv75 = -16						; size = 4
$T23742 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z PROC	; btAlignedObjectArray<int>::copy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@3
$LN2@copy@3:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@3:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@3
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T23742[ebp], eax
	cmp	DWORD PTR $T23742[ebp], 0
	je	SHORT $LN6@copy@3
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR $T23742[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR [edx], ecx
	mov	edx, DWORD PTR $T23742[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN7@copy@3
$LN6@copy@3:
	mov	DWORD PTR tv75[ebp], 0
$LN7@copy@3:
	jmp	SHORT $LN2@copy@3
$LN4@copy@3:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@H@@IBEXHHPAH@Z ENDP	; btAlignedObjectArray<int>::copy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z ; btAlignedAllocator<int,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z PROC	; btAlignedObjectArray<int>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@3
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z ; btAlignedAllocator<int,16>::allocate
	jmp	SHORT $LN2@allocate@3
$LN1@allocate@3:
; Line 106
	xor	eax, eax
$LN2@allocate@3:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@H@@IAEPAXH@Z ENDP	; btAlignedObjectArray<int>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@H@@QBEHXZ PROC		; btAlignedObjectArray<int>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@H@@QBEHXZ ENDP		; btAlignedObjectArray<int>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEPAUbtTriIndex@@HPAPBU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEPAUbtTriIndex@@HPAPBU2@@Z PROC ; btAlignedAllocator<btTriIndex,16>::allocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 3
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@UbtTriIndex@@$0BA@@@QAEPAUbtTriIndex@@HPAPBU2@@Z ENDP ; btAlignedAllocator<btTriIndex,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEPAV?$btHashKey@UbtTriIndex@@@@HPAPBV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEPAV?$btHashKey@UbtTriIndex@@@@HPAPBV2@@Z PROC ; btAlignedAllocator<btHashKey<btTriIndex>,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@V?$btHashKey@UbtTriIndex@@@@$0BA@@@QAEPAV?$btHashKey@UbtTriIndex@@@@HPAPBV2@@Z ENDP ; btAlignedAllocator<btHashKey<btTriIndex>,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z PROC ; btAlignedAllocator<int,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 2
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@H$0BA@@@QAEPAHHPAPBH@Z ENDP ; btAlignedAllocator<int,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btSetMax@M@@YAXAAMABM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btSetMax@M@@YAXAAMABM@Z PROC				; btSetMax<float>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btminmax.h
; Line 51
	push	ebp
	mov	ebp, esp
; Line 52
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@btSetMax
; Line 54
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx]
$LN1@btSetMax:
; Line 56
	pop	ebp
	ret	0
??$btSetMax@M@@YAXAAMABM@Z ENDP				; btSetMax<float>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btSetMin@M@@YAXAAMABM@Z
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btSetMin@M@@YAXAAMABM@Z PROC				; btSetMin<float>, COMDAT
; Line 42
	push	ebp
	mov	ebp, esp
; Line 43
	mov	eax, DWORD PTR _b$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	fld	DWORD PTR [ecx]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@btSetMin
; Line 45
	mov	edx, DWORD PTR _a$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx]
$LN1@btSetMin:
; Line 47
	pop	ebp
	ret	0
??$btSetMin@M@@YAXAAMABM@Z ENDP				; btSetMin<float>
_TEXT	ENDS
END
