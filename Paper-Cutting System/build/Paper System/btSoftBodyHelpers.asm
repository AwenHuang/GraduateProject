; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\專題\自建專案\自建專案\src\BulletSoftBody\btSoftBodyHelpers.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@D@std@@2HB	; std::numeric_limits<char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_W@std@@2HB	; std::numeric_limits<wchar_t>::max_digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_N@std@@2HB	; std::numeric_limits<bool>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@C@std@@2HB	; std::numeric_limits<signed char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?max_digits10@?$numeric_limits@E@std@@2HB	; std::numeric_limits<unsigned char>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@F@std@@2HB	; std::numeric_limits<short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?max_digits10@?$numeric_limits@G@std@@2HB	; std::numeric_limits<unsigned short>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@H@std@@2HB	; std::numeric_limits<int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?max_digits10@?$numeric_limits@I@std@@2HB	; std::numeric_limits<unsigned int>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@J@std@@2HB	; std::numeric_limits<long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?max_digits10@?$numeric_limits@K@std@@2HB	; std::numeric_limits<unsigned long>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_J@std@@2HB	; std::numeric_limits<__int64>::max_digits10
PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?max_digits10@?$numeric_limits@_K@std@@2HB	; std::numeric_limits<unsigned __int64>::max_digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
PUBLIC	?collate@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::collate
PUBLIC	?ctype@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::ctype
PUBLIC	?monetary@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::monetary
PUBLIC	?numeric@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::numeric
PUBLIC	?time@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::time
PUBLIC	?messages@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::messages
PUBLIC	?all@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::all
PUBLIC	?none@?$_Locbase@H@std@@2HB			; std::_Locbase<int>::none
PUBLIC	?table_size@?$ctype@D@std@@2IB			; std::ctype<char>::table_size
PUBLIC	?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::skipws
PUBLIC	?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::unitbuf
PUBLIC	?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::uppercase
PUBLIC	?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showbase
PUBLIC	?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpoint
PUBLIC	?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::showpos
PUBLIC	?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::left
PUBLIC	?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::right
PUBLIC	?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::internal
PUBLIC	?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::dec
PUBLIC	?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::oct
PUBLIC	?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::hex
PUBLIC	?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::scientific
PUBLIC	?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B		; std::_Iosb<int>::fixed
PUBLIC	?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::hexfloat
PUBLIC	?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::boolalpha
PUBLIC	?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::_Stdio
PUBLIC	?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::adjustfield
PUBLIC	?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::basefield
PUBLIC	?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B	; std::_Iosb<int>::floatfield
PUBLIC	?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::goodbit
PUBLIC	?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::eofbit
PUBLIC	?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::failbit
PUBLIC	?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B		; std::_Iosb<int>::badbit
PUBLIC	?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B	; std::_Iosb<int>::_Hardfail
PUBLIC	?in@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::in
PUBLIC	?out@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::out
PUBLIC	?ate@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::ate
PUBLIC	?app@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::app
PUBLIC	?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B		; std::_Iosb<int>::trunc
PUBLIC	?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Nocreate
PUBLIC	?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::_Noreplace
PUBLIC	?binary@?$_Iosb@H@std@@2W4_Openmode@12@B	; std::_Iosb<int>::binary
PUBLIC	?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::beg
PUBLIC	?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::cur
PUBLIC	?end@?$_Iosb@H@std@@2W4_Seekdir@12@B		; std::_Iosb<int>::end
CONST	SEGMENT
_PI	DD	040490fdbr			; 3.14159
_EPSILON DD	034000000r			; 1.19209e-007
$SG51062 DB	' M(%.2f)', 00H
	ORG $+3
$SG51064 DB	' A(%.2f)', 00H
	ORG $+3
$SG51524 DB	'%d %d %d %d', 00H
$SG51525 DB	'%d %d %d %d', 00H
$SG51535 DB	'%d %f %f %f', 00H
$SG51544 DB	'%d %d %d', 00H
	ORG $+3
$SG51551 DB	'%d %d %d %d %d', 00H
	ORG $+1
$SG51553 DB	'Nodes:  %u', 0dH, 0aH, 00H
	ORG $+3
$SG51554 DB	'Links:  %u', 0dH, 0aH, 00H
	ORG $+3
$SG51555 DB	'Faces:  %u', 0dH, 0aH, 00H
	ORG $+3
$SG51556 DB	'Tetras: %u', 0dH, 0aH, 00H
CONST	ENDS
;	COMDAT ?end@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?end@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 02H		; std::_Iosb<int>::end
CONST	ENDS
;	COMDAT ?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?cur@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 01H		; std::_Iosb<int>::cur
CONST	ENDS
;	COMDAT ?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B
CONST	SEGMENT
?beg@?$_Iosb@H@std@@2W4_Seekdir@12@B DD 00H		; std::_Iosb<int>::beg
CONST	ENDS
;	COMDAT ?binary@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?binary@?$_Iosb@H@std@@2W4_Openmode@12@B DD 020H	; std::_Iosb<int>::binary
CONST	ENDS
;	COMDAT ?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Noreplace@?$_Iosb@H@std@@2W4_Openmode@12@B DD 080H	; std::_Iosb<int>::_Noreplace
CONST	ENDS
;	COMDAT ?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 040H	; std::_Iosb<int>::_Nocreate
CONST	ENDS
;	COMDAT ?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?trunc@?$_Iosb@H@std@@2W4_Openmode@12@B DD 010H		; std::_Iosb<int>::trunc
CONST	ENDS
;	COMDAT ?app@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?app@?$_Iosb@H@std@@2W4_Openmode@12@B DD 08H		; std::_Iosb<int>::app
CONST	ENDS
;	COMDAT ?ate@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?ate@?$_Iosb@H@std@@2W4_Openmode@12@B DD 04H		; std::_Iosb<int>::ate
CONST	ENDS
;	COMDAT ?out@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?out@?$_Iosb@H@std@@2W4_Openmode@12@B DD 02H		; std::_Iosb<int>::out
CONST	ENDS
;	COMDAT ?in@?$_Iosb@H@std@@2W4_Openmode@12@B
CONST	SEGMENT
?in@?$_Iosb@H@std@@2W4_Openmode@12@B DD 01H		; std::_Iosb<int>::in
CONST	ENDS
;	COMDAT ?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?_Hardfail@?$_Iosb@H@std@@2W4_Iostate@12@B DD 010H	; std::_Iosb<int>::_Hardfail
CONST	ENDS
;	COMDAT ?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?badbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 04H		; std::_Iosb<int>::badbit
CONST	ENDS
;	COMDAT ?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?failbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 02H		; std::_Iosb<int>::failbit
CONST	ENDS
;	COMDAT ?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?eofbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 01H		; std::_Iosb<int>::eofbit
CONST	ENDS
;	COMDAT ?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B
CONST	SEGMENT
?goodbit@?$_Iosb@H@std@@2W4_Iostate@12@B DD 00H		; std::_Iosb<int>::goodbit
CONST	ENDS
;	COMDAT ?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?floatfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::floatfield
CONST	ENDS
;	COMDAT ?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?basefield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0e00H	; std::_Iosb<int>::basefield
CONST	ENDS
;	COMDAT ?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?adjustfield@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01c0H	; std::_Iosb<int>::adjustfield
CONST	ENDS
;	COMDAT ?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?_Stdio@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08000H	; std::_Iosb<int>::_Stdio
CONST	ENDS
;	COMDAT ?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?boolalpha@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04000H	; std::_Iosb<int>::boolalpha
CONST	ENDS
;	COMDAT ?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hexfloat@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 03000H	; std::_Iosb<int>::hexfloat
CONST	ENDS
;	COMDAT ?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?fixed@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02000H	; std::_Iosb<int>::fixed
CONST	ENDS
;	COMDAT ?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?scientific@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01000H	; std::_Iosb<int>::scientific
CONST	ENDS
;	COMDAT ?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?hex@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0800H		; std::_Iosb<int>::hex
CONST	ENDS
;	COMDAT ?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?oct@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0400H		; std::_Iosb<int>::oct
CONST	ENDS
;	COMDAT ?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?dec@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0200H		; std::_Iosb<int>::dec
CONST	ENDS
;	COMDAT ?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?internal@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 0100H	; std::_Iosb<int>::internal
CONST	ENDS
;	COMDAT ?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?right@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 080H		; std::_Iosb<int>::right
CONST	ENDS
;	COMDAT ?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?left@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 040H		; std::_Iosb<int>::left
CONST	ENDS
;	COMDAT ?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpos@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 020H	; std::_Iosb<int>::showpos
CONST	ENDS
;	COMDAT ?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showpoint@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 010H	; std::_Iosb<int>::showpoint
CONST	ENDS
;	COMDAT ?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?showbase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 08H	; std::_Iosb<int>::showbase
CONST	ENDS
;	COMDAT ?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?uppercase@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 04H	; std::_Iosb<int>::uppercase
CONST	ENDS
;	COMDAT ?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?unitbuf@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 02H	; std::_Iosb<int>::unitbuf
CONST	ENDS
;	COMDAT ?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B
CONST	SEGMENT
?skipws@?$_Iosb@H@std@@2W4_Fmtflags@12@B DD 01H		; std::_Iosb<int>::skipws
CONST	ENDS
;	COMDAT ?table_size@?$ctype@D@std@@2IB
CONST	SEGMENT
?table_size@?$ctype@D@std@@2IB DD 0100H			; std::ctype<char>::table_size
CONST	ENDS
;	COMDAT ?none@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?none@?$_Locbase@H@std@@2HB DD 00H			; std::_Locbase<int>::none
CONST	ENDS
;	COMDAT ?all@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?all@?$_Locbase@H@std@@2HB DD 03fH			; std::_Locbase<int>::all
CONST	ENDS
;	COMDAT ?messages@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?messages@?$_Locbase@H@std@@2HB DD 020H			; std::_Locbase<int>::messages
CONST	ENDS
;	COMDAT ?time@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?time@?$_Locbase@H@std@@2HB DD 010H			; std::_Locbase<int>::time
CONST	ENDS
;	COMDAT ?numeric@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?numeric@?$_Locbase@H@std@@2HB DD 08H			; std::_Locbase<int>::numeric
CONST	ENDS
;	COMDAT ?monetary@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?monetary@?$_Locbase@H@std@@2HB DD 04H			; std::_Locbase<int>::monetary
CONST	ENDS
;	COMDAT ?ctype@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?ctype@?$_Locbase@H@std@@2HB DD 02H			; std::_Locbase<int>::ctype
CONST	ENDS
;	COMDAT ?collate@?$_Locbase@H@std@@2HB
CONST	SEGMENT
?collate@?$_Locbase@H@std@@2HB DD 01H			; std::_Locbase<int>::collate
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 08H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_K@std@@2HB DD 015H	; std::numeric_limits<unsigned __int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_J@std@@2HB DD 014H	; std::numeric_limits<__int64>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@K@std@@2HB DD 0bH	; std::numeric_limits<unsigned long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@J@std@@2HB DD 0bH	; std::numeric_limits<long>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@I@std@@2HB DD 0bH	; std::numeric_limits<unsigned int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@H@std@@2HB DD 0bH	; std::numeric_limits<int>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@G@std@@2HB DD 06H	; std::numeric_limits<unsigned short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@F@std@@2HB DD 06H	; std::numeric_limits<short>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@E@std@@2HB DD 04H	; std::numeric_limits<unsigned char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@C@std@@2HB DD 04H	; std::numeric_limits<signed char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_N@std@@2HB DD 00H	; std::numeric_limits<bool>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@_W@std@@2HB DD 06H	; std::numeric_limits<wchar_t>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@D@std@@2HB DD 04H	; std::numeric_limits<char>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 01H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
_DATA	SEGMENT
_btNanMask DD	07f800001H
_btInfinityMask DD 07f800000H
_DATA	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	__real@41200000
PUBLIC	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z	; operator*
PUBLIC	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ	; btTransform::getBasis
PUBLIC	?getOrigin@btTransform@@QBEABVbtVector3@@XZ	; btTransform::getOrigin
PUBLIC	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ	; btSoftBody::Body::xform
PUBLIC	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
PUBLIC	?DrawClusterTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ; btSoftBodyHelpers::DrawClusterTree
PUBLIC	?DrawFaceTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ; btSoftBodyHelpers::DrawFaceTree
PUBLIC	?DrawNodeTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ; btSoftBodyHelpers::DrawNodeTree
PUBLIC	??YbtVector3@@QAEAAV0@ABV0@@Z			; btVector3::operator+=
PUBLIC	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
PUBLIC	__real@40800000
PUBLIC	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
PUBLIC	__real@3e99999a
PUBLIC	__real@3f333333
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3fa999999999999a
PUBLIC	?getY@btVector3@@QBEABMXZ			; btVector3::getY
PUBLIC	?getZ@btVector3@@QBEABMXZ			; btVector3::getZ
PUBLIC	??K@YA?AVbtVector3@@ABV0@ABM@Z			; operator/
PUBLIC	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
PUBLIC	__real@3e800000
PUBLIC	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z	; btTransform::operator*
PUBLIC	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
PUBLIC	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
PUBLIC	__real@40400000
PUBLIC	?btCross@@YA?AVbtVector3@@ABV1@0@Z		; btCross
PUBLIC	?minAxis@btVector3@@QBEHXZ			; btVector3::minAxis
PUBLIC	?btDot@@YAMABVbtVector3@@0@Z			; btDot
PUBLIC	??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::RContact>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
PUBLIC	__real@3f000000
PUBLIC	??G@YA?AVbtVector3@@ABV0@0@Z			; operator-
PUBLIC	??H@YA?AVbtVector3@@ABV0@0@Z			; operator+
PUBLIC	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
PUBLIC	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ	; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
PUBLIC	??1btConvexHullComputer@@QAE@XZ			; btConvexHullComputer::~btConvexHullComputer
PUBLIC	?getTargetVertex@Edge@btConvexHullComputer@@QBEHXZ ; btConvexHullComputer::Edge::getTargetVertex
PUBLIC	?getSourceVertex@Edge@btConvexHullComputer@@QBEHXZ ; btConvexHullComputer::Edge::getSourceVertex
PUBLIC	?getNextEdgeOfFace@Edge@btConvexHullComputer@@QBEPBV12@XZ ; btConvexHullComputer::Edge::getNextEdgeOfFace
PUBLIC	??A?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEAAVEdge@btConvexHullComputer@@H@Z ; btAlignedObjectArray<btConvexHullComputer::Edge>::operator[]
PUBLIC	??A?$btAlignedObjectArray@H@@QAEAAHH@Z		; btAlignedObjectArray<int>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@H@@QBEHXZ		; btAlignedObjectArray<int>::size
PUBLIC	?compute@btConvexHullComputer@@QAEMPBMHHMM@Z	; btConvexHullComputer::compute
PUBLIC	?getX@btVector3@@QBEABMXZ			; btVector3::getX
PUBLIC	??0btConvexHullComputer@@QAE@XZ			; btConvexHullComputer::btConvexHullComputer
PUBLIC	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
PUBLIC	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
PUBLIC	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
PUBLIC	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
PUBLIC	??0btVector3@@QAE@XZ				; btVector3::btVector3
PUBLIC	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ	; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
PUBLIC	??D@YA?AVbtVector3@@ABV0@ABM@Z			; operator*
PUBLIC	?normalized@btVector3@@QBE?AV1@XZ		; btVector3::normalized
PUBLIC	__real@3f400000
PUBLIC	__real@46fffe00
PUBLIC	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
PUBLIC	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
PUBLIC	__real@3f800000
PUBLIC	??0btVector3@@QAE@ABM00@Z			; btVector3::btVector3
PUBLIC	__real@00000000
PUBLIC	__real@40a00000
PUBLIC	__real@3dcccccd
PUBLIC	__$ArrayPad$
PUBLIC	?Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z ; btSoftBodyHelpers::Draw
EXTRN	__imp__glPopMatrix@0:PROC
EXTRN	_gluSphere@20:PROC
EXTRN	__imp__glTranslatef@12:PROC
EXTRN	__imp__glColor4f@16:PROC
EXTRN	__imp__glPushMatrix@0:PROC
EXTRN	_gluNewQuadric@0:PROC
EXTRN	?ApplyRightFrustum@@YAXH@Z:PROC			; ApplyRightFrustum
EXTRN	__imp__glClear@4:PROC
EXTRN	_gluLookAt@72:PROC
EXTRN	?cp@@3PAMA:BYTE					; cp
EXTRN	?ctp@@3PAMA:BYTE				; ctp
EXTRN	?cu@@3PAMA:BYTE					; cu
EXTRN	__imp__glColorMask@16:PROC
EXTRN	?ApplyLeftFrustum@@YAXH@Z:PROC			; ApplyLeftFrustum
EXTRN	_rand:PROC
EXTRN	_srand:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ?axis@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4QBVbtVector3@@B
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
_BSS	SEGMENT
?axis@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4QBVbtVector3@@B DB 030H DUP (?) ; `btSoftBodyHelpers::Draw'::`35'::axis
_BSS	ENDS
;	COMDAT ?$S6@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4IA
_BSS	SEGMENT
?$S6@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4IA DD 01H DUP (?) ; `btSoftBodyHelpers::Draw'::`35'::$S6
_BSS	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z
_TEXT	SEGMENT
tv1473 = -3652						; size = 4
tv1814 = -3648						; size = 4
tv1812 = -3644						; size = 4
tv1810 = -3640						; size = 4
$T57734 = -3636						; size = 4
$T57733 = -3632						; size = 4
$T57732 = -3628						; size = 4
$T57731 = -3624						; size = 4
$T57730 = -3620						; size = 4
$T57729 = -3616						; size = 4
$T57728 = -3612						; size = 4
$T57727 = -3608						; size = 4
$T57726 = -3604						; size = 4
$T57725 = -3600						; size = 4
$T57724 = -3596						; size = 4
$T57723 = -3592						; size = 4
$T57722 = -3588						; size = 4
$T57721 = -3584						; size = 4
$T57720 = -3580						; size = 4
$T57719 = -3576						; size = 4
$T57718 = -3572						; size = 4
$T57717 = -3568						; size = 4
$T57716 = -3564						; size = 4
$T57715 = -3560						; size = 4
$T57714 = -3556						; size = 4
$T57713 = -3552						; size = 4
$T57712 = -3548						; size = 4
$T57711 = -3544						; size = 4
$T57710 = -3540						; size = 4
$T57709 = -3536						; size = 4
$T57708 = -3532						; size = 4
$T57707 = -3528						; size = 4
$T57706 = -3524						; size = 4
$T57705 = -3520						; size = 4
$T57704 = -3516						; size = 4
$T57703 = -3512						; size = 4
$T57702 = -3508						; size = 4
$T57701 = -3504						; size = 4
$T57700 = -3500						; size = 4
$T57699 = -3496						; size = 4
$T57698 = -3492						; size = 4
$T57697 = -3488						; size = 4
$T57696 = -3484						; size = 4
$T57695 = -3480						; size = 4
$T57694 = -3476						; size = 4
$T57693 = -3472						; size = 4
$T57692 = -3468						; size = 4
$T57691 = -3464						; size = 4
$T57690 = -3460						; size = 4
$T57689 = -3456						; size = 4
$T57688 = -3452						; size = 4
$T57687 = -3448						; size = 4
$T57686 = -3444						; size = 4
$T57685 = -3440						; size = 4
$T57684 = -3436						; size = 4
$T57683 = -3432						; size = 4
$T57682 = -3428						; size = 4
$T57681 = -3424						; size = 4
$T57680 = -3420						; size = 4
$T57679 = -3416						; size = 4
$T57678 = -3412						; size = 4
$T57677 = -3408						; size = 4
$T57676 = -3404						; size = 4
$T57675 = -3400						; size = 4
$T57674 = -3396						; size = 4
$T57673 = -3392						; size = 4
$T57672 = -3388						; size = 4
$T57671 = -3384						; size = 4
$T57670 = -3380						; size = 4
$T57669 = -3376						; size = 4
$T57668 = -3372						; size = 4
$T57667 = -3368						; size = 4
$T57666 = -3364						; size = 4
$T57665 = -3360						; size = 4
$T57664 = -3356						; size = 4
$T57663 = -3352						; size = 4
$T57662 = -3348						; size = 4
$T57661 = -3344						; size = 4
$T57660 = -3340						; size = 4
$T57659 = -3336						; size = 4
$T57658 = -3332						; size = 4
$T57657 = -3328						; size = 4
$T57656 = -3324						; size = 4
$T57655 = -3320						; size = 4
$T57654 = -3316						; size = 4
$T57653 = -3312						; size = 4
$T57652 = -3308						; size = 4
$T57651 = -3304						; size = 4
$T57650 = -3300						; size = 4
$T57649 = -3296						; size = 16
$T57648 = -3268						; size = 4
$T57647 = -3264						; size = 4
$T57646 = -3260						; size = 4
$T57645 = -3256						; size = 4
$T57644 = -3252						; size = 4
$T57643 = -3248						; size = 4
$T57642 = -3244						; size = 4
$T57641 = -3240						; size = 4
$T57640 = -3236						; size = 4
$T57639 = -3232						; size = 4
$T57638 = -3228						; size = 4
$T57637 = -3224						; size = 4
$T57636 = -3220						; size = 4
$T51038 = -3216						; size = 16
$T51037 = -3200						; size = 16
$T51036 = -3184						; size = 16
$T51031 = -3168						; size = 16
$T51030 = -3152						; size = 16
$T51029 = -3136						; size = 16
$T51024 = -3120						; size = 16
$T51023 = -3104						; size = 16
$T51022 = -3088						; size = 16
$T51017 = -3072						; size = 16
$T51016 = -3056						; size = 16
$T51015 = -3040						; size = 16
_a1$51012 = -3008					; size = 16
_a0$51010 = -2976					; size = 16
_o1$51009 = -2944					; size = 16
_o0$51008 = -2912					; size = 16
$T51003 = -2880						; size = 16
$T50999 = -2864						; size = 16
$T50995 = -2848						; size = 16
$T50991 = -2832						; size = 16
_a1$50989 = -2800					; size = 16
_a0$50987 = -2768					; size = 16
_pjl$50985 = -2744					; size = 4
_pj$50979 = -2740					; size = 4
$T50971 = -2736						; size = 16
_j$50967 = -2712					; size = 4
_p$50966 = -2704					; size = 16
_n$50965 = -2676					; size = 4
$T50960 = -2672						; size = 16
$T50959 = -2656						; size = 16
$T50958 = -2640						; size = 16
$T50957 = -2624						; size = 16
$T50956 = -2608						; size = 16
$T50955 = -2592						; size = 16
$T50954 = -2576						; size = 16
$T50953 = -2560						; size = 16
$T50952 = -2544						; size = 16
$T50951 = -2528						; size = 16
$T50950 = -2512						; size = 16
$T50949 = -2496						; size = 16
$T50948 = -2480						; size = 16
$T50947 = -2464						; size = 16
$T50946 = -2448						; size = 16
$T50945 = -2432						; size = 16
$T50944 = -2416						; size = 16
$T50943 = -2400						; size = 16
$T50942 = -2384						; size = 16
$T50941 = -2368						; size = 16
$T50940 = -2352						; size = 16
$T50939 = -2336						; size = 16
$T50938 = -2320						; size = 16
$T50937 = -2304						; size = 16
$T50936 = -2288						; size = 16
$T50935 = -2272						; size = 16
$T50934 = -2256						; size = 16
$T50933 = -2240						; size = 16
$T50932 = -2224						; size = 16
$T50931 = -2208						; size = 16
$T50930 = -2192						; size = 16
$T50929 = -2176						; size = 16
$T50928 = -2160						; size = 16
$T50927 = -2144						; size = 16
$T50926 = -2128						; size = 16
$T50925 = -2112						; size = 16
$T50922 = -2096						; size = 16
$T50921 = -2080						; size = 16
$T50920 = -2064						; size = 16
_c$50919 = -2032					; size = 16
_x$50918 = -2000					; size = 64
_t$50916 = -1932					; size = 4
_i$50912 = -1928					; size = 4
_col$50908 = -1920					; size = 16
_alp$50903 = -1888					; size = 4
_scl$50901 = -1880					; size = 4
_myQuad$50899 = -1872					; size = 4
_myQuad$50897 = -1868					; size = 4
_myQuad$50895 = -1864					; size = 4
_n$50892 = -1860					; size = 4
$T50888 = -1856						; size = 16
$T50887 = -1840						; size = 16
$T50886 = -1824						; size = 16
$T50885 = -1808						; size = 16
$T50884 = -1792						; size = 16
$T50883 = -1776						; size = 16
$T50882 = -1760						; size = 16
$T50881 = -1744						; size = 16
$T50880 = -1728						; size = 16
$T50877 = -1712						; size = 16
$T50876 = -1696						; size = 16
_c$50875 = -1664					; size = 16
_x$50874 = -1632					; size = 48
_f$50872 = -1572					; size = 4
$T50868 = -1568						; size = 16
$T50867 = -1552						; size = 16
$T50866 = -1536						; size = 16
$T50865 = -1520						; size = 16
$T50864 = -1504						; size = 16
$T50863 = -1488						; size = 16
$T50862 = -1472						; size = 16
$T50861 = -1456						; size = 16
$T50860 = -1440						; size = 16
$T50857 = -1424						; size = 16
$T50856 = -1408						; size = 16
_c$50855 = -1376					; size = 16
_x$50854 = -1344					; size = 48
_f$50852 = -1288					; size = 4
_col$50845 = -1280					; size = 16
_alp$50842 = -1248					; size = 4
_scl$50840 = -1240					; size = 4
$T50835 = -1232						; size = 16
_n$50832 = -1204					; size = 4
$T50825 = -1200						; size = 16
$T50821 = -1184						; size = 16
$T50817 = -1168						; size = 16
_q$50815 = -1136					; size = 16
_a$50814 = -1108					; size = 4
$T50806 = -1104						; size = 16
$T50805 = -1088						; size = 16
$T50804 = -1072						; size = 16
$T50802 = -1056						; size = 16
$T50801 = -1040						; size = 16
$T50800 = -1024						; size = 16
$T50799 = -1008						; size = 16
$T50798 = -992						; size = 16
$T50797 = -976						; size = 16
$T50796 = -960						; size = 16
$T50795 = -944						; size = 16
$T50794 = -928						; size = 16
$T50792 = -912						; size = 16
_y$50791 = -880						; size = 16
$T50789 = -848						; size = 16
_x$50788 = -816						; size = 16
$T50786 = -784						; size = 16
_o$50784 = -752						; size = 16
_c$50783 = -724						; size = 4
$T50761 = -720						; size = 16
$T50759 = -704						; size = 16
$T50758 = -688						; size = 16
_d$50756 = -656						; size = 16
_n$50754 = -628						; size = 4
$T50746 = -624						; size = 16
$T50745 = -608						; size = 16
$T50742 = -592						; size = 16
$T50741 = -576						; size = 16
$T50738 = -560						; size = 16
$T50734 = -544						; size = 16
$T50733 = -528						; size = 16
$T50730 = -512						; size = 16
$T50729 = -496						; size = 16
$T50726 = -480						; size = 16
$T50722 = -464						; size = 16
$T50721 = -448						; size = 16
$T50718 = -432						; size = 16
$T50717 = -416						; size = 16
$T50714 = -400						; size = 16
_n$50712 = -372						; size = 4
_v2$50706 = -368					; size = 4
_v1$50702 = -364					; size = 4
_v0$50701 = -360					; size = 4
_edge$50700 = -356					; size = 4
_firstEdge$50699 = -352					; size = 4
_face$50698 = -348					; size = 4
_i$50694 = -344						; size = 4
_shrinkClamp$50693 = -340				; size = 4
_shrink$50692 = -336					; size = 4
_count$50691 = -332					; size = 4
_stride$50689 = -328					; size = 4
_computer$50688 = -320					; size = 60
_vertices$50682 = -232					; size = 20
$T50680 = -208						; size = 16
$T50678 = -192						; size = 16
_color$50674 = -160					; size = 16
_nj$ = -128						; size = 4
_j$ = -124						; size = 4
_i$ = -120						; size = 4
_ccolor$ = -112						; size = 16
_ncolor$ = -80						; size = 16
_lcolor$ = -48						; size = 16
_nscl$ = -24						; size = 4
_scl$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_psb$ = 8						; size = 4
_idraw$ = 12						; size = 4
_drawflags$ = 16					; size = 4
?Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z PROC ; btSoftBodyHelpers::Draw, COMDAT
; Line 169
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 3660				; 00000e4cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3660]
	mov	ecx, 915				; 00000393H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 170
	fld	DWORD PTR __real@3dcccccd
	fstp	DWORD PTR _scl$[ebp]
; Line 171
	fld	DWORD PTR _scl$[ebp]
	fmul	DWORD PTR __real@40a00000
	fstp	DWORD PTR _nscl$[ebp]
; Line 172
	fldz
	fstp	DWORD PTR $T57636[ebp]
	fldz
	fstp	DWORD PTR $T57637[ebp]
	fldz
	fstp	DWORD PTR $T57638[ebp]
	lea	eax, DWORD PTR $T57636[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57637[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57638[ebp]
	push	edx
	lea	ecx, DWORD PTR _lcolor$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 173
	fld1
	fstp	DWORD PTR $T57639[ebp]
	fld1
	fstp	DWORD PTR $T57640[ebp]
	fld1
	fstp	DWORD PTR $T57641[ebp]
	lea	eax, DWORD PTR $T57639[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57640[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57641[ebp]
	push	edx
	lea	ecx, DWORD PTR _ncolor$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 174
	fldz
	fstp	DWORD PTR $T57642[ebp]
	fldz
	fstp	DWORD PTR $T57643[ebp]
	fld1
	fstp	DWORD PTR $T57644[ebp]
	lea	eax, DWORD PTR $T57642[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57643[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57644[ebp]
	push	edx
	lea	ecx, DWORD PTR _ccolor$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 178
	mov	eax, DWORD PTR _drawflags$[ebx]
	and	eax, 256				; 00000100H
	je	$LN78@Draw
; Line 180
	push	1806					; 0000070eH
	call	_srand
	add	esp, 4
; Line 181
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN77@Draw
$LN76@Draw:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN77@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 1144				; 00000478H
	call	?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Cluster *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN75@Draw
; Line 183
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	eax, DWORD PTR [eax]
	movzx	ecx, BYTE PTR [eax+397]
	test	ecx, ecx
	je	$LN74@Draw
; Line 187
	call	_rand
	mov	DWORD PTR tv1810[ebp], eax
	fild	DWORD PTR tv1810[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fstp	DWORD PTR $T57645[ebp]
	call	_rand
	mov	DWORD PTR tv1812[ebp], eax
	fild	DWORD PTR tv1812[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fstp	DWORD PTR $T57646[ebp]
	call	_rand
	mov	DWORD PTR tv1814[ebp], eax
	fild	DWORD PTR tv1814[ebp]
	fdiv	DWORD PTR __real@46fffe00
	fstp	DWORD PTR $T57647[ebp]
	lea	edx, DWORD PTR $T57645[ebp]
	push	edx
	lea	eax, DWORD PTR $T57646[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57647[ebp]
	push	ecx
	lea	ecx, DWORD PTR _color$50674[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 188
	fld	DWORD PTR __real@3f400000
	fstp	DWORD PTR $T57648[ebp]
	lea	edx, DWORD PTR $T57648[ebp]
	push	edx
	lea	eax, DWORD PTR $T50678[ebp]
	push	eax
	lea	ecx, DWORD PTR _color$50674[ebp]
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
	push	eax
	lea	ecx, DWORD PTR $T50680[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _color$50674[ebp], edx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _color$50674[ebp+4], ecx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _color$50674[ebp+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR _color$50674[ebp+12], eax
; Line 189
	lea	ecx, DWORD PTR _vertices$50682[ebp]
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
; Line 190
	lea	ecx, DWORD PTR $T57649[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node *>::size
	push	eax
	lea	ecx, DWORD PTR _vertices$50682[ebp]
	call	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
; Line 191
	mov	DWORD PTR _j$[ebp], 0
	lea	ecx, DWORD PTR _vertices$50682[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	mov	DWORD PTR _nj$[ebp], eax
	jmp	SHORT $LN73@Draw
$LN72@Draw:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN73@Draw:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _nj$[ebp]
	jge	SHORT $LN71@Draw
; Line 193
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 1144				; 00000478H
	call	??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 20					; 00000014H
	call	??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
	mov	esi, DWORD PTR [eax]
	add	esi, 16					; 00000010H
	mov	eax, DWORD PTR _j$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vertices$50682[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
; Line 194
	jmp	SHORT $LN72@Draw
$LN71@Draw:
; Line 197
	lea	ecx, DWORD PTR _computer$50688[ebp]
	call	??0btConvexHullComputer@@QAE@XZ
; Line 198
	mov	DWORD PTR _stride$50689[ebp], 16	; 00000010H
; Line 199
	lea	ecx, DWORD PTR _vertices$50682[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	mov	DWORD PTR _count$50691[ebp], eax
; Line 200
	fldz
	fstp	DWORD PTR _shrink$50692[ebp]
; Line 201
	fldz
	fstp	DWORD PTR _shrinkClamp$50693[ebp]
; Line 202
	push	ecx
	fld	DWORD PTR _shrinkClamp$50693[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _shrink$50692[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _count$50691[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride$50689[ebp]
	push	ecx
	push	0
	lea	ecx, DWORD PTR _vertices$50682[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	ecx, eax
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	eax
	lea	ecx, DWORD PTR _computer$50688[ebp]
	call	?compute@btConvexHullComputer@@QAEMPBMHHMM@Z ; btConvexHullComputer::compute
	fstp	ST(0)
; Line 203
	mov	DWORD PTR _i$50694[ebp], 0
	jmp	SHORT $LN70@Draw
$LN69@Draw:
	mov	edx, DWORD PTR _i$50694[ebp]
	add	edx, 1
	mov	DWORD PTR _i$50694[ebp], edx
$LN70@Draw:
	lea	ecx, DWORD PTR _computer$50688[ebp+40]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	cmp	DWORD PTR _i$50694[ebp], eax
	jge	$LN68@Draw
; Line 206
	mov	eax, DWORD PTR _i$50694[ebp]
	push	eax
	lea	ecx, DWORD PTR _computer$50688[ebp+40]
	call	??A?$btAlignedObjectArray@H@@QAEAAHH@Z	; btAlignedObjectArray<int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _face$50698[ebp], ecx
; Line 208
	mov	edx, DWORD PTR _face$50698[ebp]
	push	edx
	lea	ecx, DWORD PTR _computer$50688[ebp+20]
	call	??A?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEAAVEdge@btConvexHullComputer@@H@Z ; btAlignedObjectArray<btConvexHullComputer::Edge>::operator[]
	mov	DWORD PTR _firstEdge$50699[ebp], eax
; Line 209
	mov	ecx, DWORD PTR _firstEdge$50699[ebp]
	call	?getNextEdgeOfFace@Edge@btConvexHullComputer@@QBEPBV12@XZ ; btConvexHullComputer::Edge::getNextEdgeOfFace
	mov	DWORD PTR _edge$50700[ebp], eax
; Line 211
	mov	ecx, DWORD PTR _firstEdge$50699[ebp]
	call	?getSourceVertex@Edge@btConvexHullComputer@@QBEHXZ ; btConvexHullComputer::Edge::getSourceVertex
	mov	DWORD PTR _v0$50701[ebp], eax
; Line 212
	mov	ecx, DWORD PTR _firstEdge$50699[ebp]
	call	?getTargetVertex@Edge@btConvexHullComputer@@QBEHXZ ; btConvexHullComputer::Edge::getTargetVertex
	mov	DWORD PTR _v1$50702[ebp], eax
$LN67@Draw:
; Line 213
	mov	eax, DWORD PTR _edge$50700[ebp]
	cmp	eax, DWORD PTR _firstEdge$50699[ebp]
	je	$LN66@Draw
; Line 215
	mov	ecx, DWORD PTR _edge$50700[ebp]
	call	?getTargetVertex@Edge@btConvexHullComputer@@QBEHXZ ; btConvexHullComputer::Edge::getTargetVertex
	mov	DWORD PTR _v2$50706[ebp], eax
; Line 216
	mov	esi, esp
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _color$50674[ebp]
	push	ecx
	mov	edx, DWORD PTR _v2$50706[ebp]
	push	edx
	lea	ecx, DWORD PTR _computer$50688[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	mov	eax, DWORD PTR _v1$50702[ebp]
	push	eax
	lea	ecx, DWORD PTR _computer$50688[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	mov	ecx, DWORD PTR _v0$50701[ebp]
	push	ecx
	lea	ecx, DWORD PTR _computer$50688[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 217
	mov	ecx, DWORD PTR _edge$50700[ebp]
	call	?getNextEdgeOfFace@Edge@btConvexHullComputer@@QBEPBV12@XZ ; btConvexHullComputer::Edge::getNextEdgeOfFace
	mov	DWORD PTR _edge$50700[ebp], eax
; Line 218
	mov	eax, DWORD PTR _v1$50702[ebp]
	mov	DWORD PTR _v0$50701[ebp], eax
; Line 219
	mov	ecx, DWORD PTR _v2$50706[ebp]
	mov	DWORD PTR _v1$50702[ebp], ecx
; Line 220
	jmp	$LN67@Draw
$LN66@Draw:
; Line 221
	jmp	$LN69@Draw
$LN68@Draw:
; Line 244
	lea	ecx, DWORD PTR _computer$50688[ebp]
	call	??1btConvexHullComputer@@QAE@XZ
	lea	ecx, DWORD PTR _vertices$50682[ebp]
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
$LN74@Draw:
; Line 260
	jmp	$LN76@Draw
$LN75@Draw:
; Line 262
	jmp	$LN21@Draw
$LN78@Draw:
; Line 265
	mov	edx, DWORD PTR _drawflags$[ebx]
	and	edx, 1
	je	$LN61@Draw
; Line 267
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN63@Draw
$LN62@Draw:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN63@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN61@Draw
; Line 269
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$50712[ebp], eax
; Line 270
	mov	edx, DWORD PTR _n$50712[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	jne	SHORT $LN60@Draw
	jmp	SHORT $LN62@Draw
$LN60@Draw:
; Line 271
	fldz
	fstp	DWORD PTR $T57650[ebp]
	fldz
	fstp	DWORD PTR $T57651[ebp]
	fld1
	fstp	DWORD PTR $T57652[ebp]
	fldz
	fstp	DWORD PTR $T57653[ebp]
	fldz
	fstp	DWORD PTR $T57654[ebp]
	fldz
	fstp	DWORD PTR $T57655[ebp]
	fldz
	fstp	DWORD PTR $T57656[ebp]
	lea	edx, DWORD PTR $T57650[ebp]
	push	edx
	lea	eax, DWORD PTR $T57651[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57652[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T50722[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	edx, DWORD PTR $T57653[ebp]
	push	edx
	lea	eax, DWORD PTR $T57654[ebp]
	push	eax
	lea	ecx, DWORD PTR _scl$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T50718[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	edx, DWORD PTR _n$50712[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T50721[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T57655[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57656[ebp]
	push	edx
	lea	eax, DWORD PTR _scl$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50714[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	ecx, DWORD PTR _n$50712[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T50717[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 272
	fldz
	fstp	DWORD PTR $T57657[ebp]
	fld1
	fstp	DWORD PTR $T57658[ebp]
	fldz
	fstp	DWORD PTR $T57659[ebp]
	fldz
	fstp	DWORD PTR $T57660[ebp]
	fldz
	fstp	DWORD PTR $T57661[ebp]
	fldz
	fstp	DWORD PTR $T57662[ebp]
	fldz
	fstp	DWORD PTR $T57663[ebp]
	lea	ecx, DWORD PTR $T57657[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57658[ebp]
	push	edx
	lea	eax, DWORD PTR $T57659[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50734[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR $T57660[ebp]
	push	ecx
	lea	edx, DWORD PTR _scl$[ebp]
	push	edx
	lea	eax, DWORD PTR $T57661[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50730[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	ecx, DWORD PTR _n$50712[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T50733[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T57662[ebp]
	push	eax
	lea	ecx, DWORD PTR _scl$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57663[ebp]
	push	edx
	lea	ecx, DWORD PTR $T50726[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	eax, DWORD PTR _n$50712[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T50729[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 273
	fld1
	fstp	DWORD PTR $T57664[ebp]
	fldz
	fstp	DWORD PTR $T57665[ebp]
	fldz
	fstp	DWORD PTR $T57666[ebp]
	fldz
	fstp	DWORD PTR $T57667[ebp]
	fldz
	fstp	DWORD PTR $T57668[ebp]
	fldz
	fstp	DWORD PTR $T57669[ebp]
	fldz
	fstp	DWORD PTR $T57670[ebp]
	lea	eax, DWORD PTR $T57664[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57665[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57666[ebp]
	push	edx
	lea	ecx, DWORD PTR $T50746[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	eax, DWORD PTR _scl$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57667[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57668[ebp]
	push	edx
	lea	ecx, DWORD PTR $T50742[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	eax, DWORD PTR _n$50712[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T50745[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _scl$[ebp]
	push	edx
	lea	eax, DWORD PTR $T57669[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57670[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T50738[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	edx, DWORD PTR _n$50712[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T50741[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 274
	jmp	$LN62@Draw
$LN61@Draw:
; Line 290
	mov	ecx, DWORD PTR _drawflags$[ebx]
	and	ecx, 16					; 00000010H
	je	$LN56@Draw
; Line 292
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN58@Draw
$LN57@Draw:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN58@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN56@Draw
; Line 294
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$50754[ebp], eax
; Line 295
	mov	ecx, DWORD PTR _n$50754[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+16]
	and	eax, 1
	jne	SHORT $LN55@Draw
	jmp	SHORT $LN57@Draw
$LN55@Draw:
; Line 296
	lea	ecx, DWORD PTR _nscl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$50754[ebp]
	add	edx, 80					; 00000050H
	push	edx
	lea	eax, DWORD PTR _d$50756[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 297
	mov	esi, esp
	lea	ecx, DWORD PTR _ncolor$[ebp]
	push	ecx
	lea	edx, DWORD PTR _d$50756[ebp]
	push	edx
	mov	eax, DWORD PTR _n$50754[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T50758[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _n$50754[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 298
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR $T57671[ebp]
	lea	ecx, DWORD PTR $T57671[ebp]
	push	ecx
	lea	edx, DWORD PTR _ncolor$[ebp]
	push	edx
	lea	eax, DWORD PTR $T50761[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _d$50756[ebp]
	push	ecx
	mov	edx, DWORD PTR _n$50754[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T50759[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _n$50754[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 299
	jmp	$LN57@Draw
$LN56@Draw:
; Line 302
	mov	eax, DWORD PTR _drawflags$[ebx]
	and	eax, 32					; 00000020H
	je	$LN50@Draw
; Line 304
	mov	ecx, DWORD PTR ?$S6@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4IA
	and	ecx, 1
	jne	$LN53@Draw
	mov	edx, DWORD PTR ?$S6@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4IA
	or	edx, 1
	mov	DWORD PTR ?$S6@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4IA, edx
	fldz
	fstp	DWORD PTR $T57672[ebp]
	fldz
	fstp	DWORD PTR $T57673[ebp]
	fld1
	fstp	DWORD PTR $T57674[ebp]
	lea	eax, DWORD PTR $T57672[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57673[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57674[ebp]
	push	edx
	mov	ecx, OFFSET ?axis@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4QBVbtVector3@@B
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 305
	fldz
	fstp	DWORD PTR $T57675[ebp]
	fld1
	fstp	DWORD PTR $T57676[ebp]
	fldz
	fstp	DWORD PTR $T57677[ebp]
	lea	eax, DWORD PTR $T57675[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57676[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57677[ebp]
	push	edx
	mov	ecx, OFFSET ?axis@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4QBVbtVector3@@B+16
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 307
	fld1
	fstp	DWORD PTR $T57678[ebp]
	fldz
	fstp	DWORD PTR $T57679[ebp]
	fldz
	fstp	DWORD PTR $T57680[ebp]
	lea	eax, DWORD PTR $T57678[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57679[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57680[ebp]
	push	edx
	mov	ecx, OFFSET ?axis@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4QBVbtVector3@@B+32
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
$LN53@Draw:
; Line 308
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN52@Draw
$LN51@Draw:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN52@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 832				; 00000340H
	call	?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::RContact>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN50@Draw
; Line 310
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 832				; 00000340H
	call	??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::RContact>::operator[]
	mov	DWORD PTR _c$50783[ebp], eax
; Line 312
	mov	edx, DWORD PTR _c$50783[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _c$50783[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 16					; 00000010H
	push	ecx
	call	?btDot@@YAMABVbtVector3@@0@Z		; btDot
	add	esp, 8
	mov	edx, DWORD PTR _c$50783[ebp]
	fadd	DWORD PTR [edx+32]
	fstp	DWORD PTR $T57681[ebp]
	lea	eax, DWORD PTR $T57681[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$50783[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T50786[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _c$50783[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _o$50784[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 313
	lea	eax, DWORD PTR _x$50788[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$50783[ebp]
	add	ecx, 16					; 00000010H
	call	?minAxis@btVector3@@QBEHXZ		; btVector3::minAxis
	shl	eax, 4
	add	eax, OFFSET ?axis@?CD@??Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z@4QBVbtVector3@@B
	push	eax
	mov	ecx, DWORD PTR _c$50783[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR $T50789[ebp]
	push	edx
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
; Line 314
	lea	eax, DWORD PTR _y$50791[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$50783[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _x$50788[ebp]
	push	edx
	lea	eax, DWORD PTR $T50792[ebp]
	push	eax
	call	?btCross@@YA?AVbtVector3@@ABV1@0@Z	; btCross
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
; Line 315
	mov	esi, esp
	lea	ecx, DWORD PTR _ccolor$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nscl$[ebp]
	push	edx
	lea	eax, DWORD PTR _x$50788[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50796[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _o$50784[ebp]
	push	edx
	lea	eax, DWORD PTR $T50797[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _nscl$[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$50788[ebp]
	push	edx
	lea	eax, DWORD PTR $T50794[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _o$50784[ebp]
	push	ecx
	lea	edx, DWORD PTR $T50795[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 316
	mov	esi, esp
	lea	ecx, DWORD PTR _ccolor$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nscl$[ebp]
	push	edx
	lea	eax, DWORD PTR _y$50791[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50800[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _o$50784[ebp]
	push	edx
	lea	eax, DWORD PTR $T50801[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _nscl$[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$50791[ebp]
	push	edx
	lea	eax, DWORD PTR $T50798[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _o$50784[ebp]
	push	ecx
	lea	edx, DWORD PTR $T50799[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 317
	fldz
	fstp	DWORD PTR $T57682[ebp]
	fld1
	fstp	DWORD PTR $T57683[ebp]
	fld1
	fstp	DWORD PTR $T57684[ebp]
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T57685[ebp]
	lea	ecx, DWORD PTR $T57682[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57683[ebp]
	push	edx
	lea	eax, DWORD PTR $T57684[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50806[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR $T57685[ebp]
	push	ecx
	lea	edx, DWORD PTR _nscl$[ebp]
	push	edx
	mov	eax, DWORD PTR _c$50783[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T50802[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50804[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _o$50784[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50805[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _o$50784[ebp]
	push	edx
	mov	eax, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 318
	jmp	$LN51@Draw
$LN50@Draw:
; Line 321
	mov	ecx, DWORD PTR _drawflags$[ebx]
	and	ecx, 64					; 00000040H
	je	$LN43@Draw
; Line 323
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN48@Draw
$LN47@Draw:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN48@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 812				; 0000032cH
	call	?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Anchor>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN46@Draw
; Line 325
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 812				; 0000032cH
	call	??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
	mov	DWORD PTR _a$50814[ebp], eax
; Line 326
	mov	ecx, DWORD PTR _a$50814[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _q$50815[ebp]
	push	edx
	mov	eax, DWORD PTR _a$50814[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	mov	ecx, eax
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 327
	fldz
	fstp	DWORD PTR $T57686[ebp]
	fldz
	fstp	DWORD PTR $T57687[ebp]
	fld1
	fstp	DWORD PTR $T57688[ebp]
	lea	ecx, DWORD PTR $T57686[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57687[ebp]
	push	edx
	lea	eax, DWORD PTR $T57688[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50817[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	push	ecx
	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _a$50814[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _idraw$[ebx]
	push	eax
	call	?drawVertex@@YAXPAVbtIDebugDraw@@ABVbtVector3@@M1@Z ; drawVertex
	add	esp, 16					; 00000010H
; Line 328
	fldz
	fstp	DWORD PTR $T57689[ebp]
	fld1
	fstp	DWORD PTR $T57690[ebp]
	fldz
	fstp	DWORD PTR $T57691[ebp]
	lea	ecx, DWORD PTR $T57689[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57690[ebp]
	push	edx
	lea	eax, DWORD PTR $T57691[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50821[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	push	ecx
	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _q$50815[ebp]
	push	ecx
	mov	edx, DWORD PTR _idraw$[ebx]
	push	edx
	call	?drawVertex@@YAXPAVbtIDebugDraw@@ABVbtVector3@@M1@Z ; drawVertex
	add	esp, 16					; 00000010H
; Line 329
	fld1
	fstp	DWORD PTR $T57692[ebp]
	fld1
	fstp	DWORD PTR $T57693[ebp]
	fld1
	fstp	DWORD PTR $T57694[ebp]
	lea	eax, DWORD PTR $T57692[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57693[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57694[ebp]
	push	edx
	lea	ecx, DWORD PTR $T50825[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	eax, DWORD PTR _q$50815[ebp]
	push	eax
	mov	ecx, DWORD PTR _a$50814[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 330
	jmp	$LN47@Draw
$LN46@Draw:
; Line 331
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN45@Draw
$LN44@Draw:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN45@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN43@Draw
; Line 333
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$50832[ebp], eax
; Line 334
	mov	eax, DWORD PTR _n$50832[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1
	jne	SHORT $LN42@Draw
	jmp	SHORT $LN44@Draw
$LN42@Draw:
; Line 335
	mov	eax, DWORD PTR _n$50832[ebp]
	fldz
	fcomp	DWORD PTR [eax+96]
	fnstsw	ax
	test	ah, 1
	jne	SHORT $LN41@Draw
; Line 337
	fldz
	fstp	DWORD PTR $T57695[ebp]
	fldz
	fstp	DWORD PTR $T57696[ebp]
	fld1
	fstp	DWORD PTR $T57697[ebp]
	lea	ecx, DWORD PTR $T57695[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57696[ebp]
	push	edx
	lea	eax, DWORD PTR $T57697[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50835[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	push	ecx
	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _n$50832[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _idraw$[ebx]
	push	edx
	call	?drawVertex@@YAXPAVbtIDebugDraw@@ABVbtVector3@@M1@Z ; drawVertex
	add	esp, 16					; 00000010H
$LN41@Draw:
; Line 339
	jmp	$LN44@Draw
$LN43@Draw:
; Line 344
	mov	eax, DWORD PTR _drawflags$[ebx]
	and	eax, 4
	je	$LN40@Draw
; Line 346
	fld1
	fstp	DWORD PTR _scl$50840[ebp]
; Line 347
	fld1
	fstp	DWORD PTR _alp$50842[ebp]
; Line 348
	fld1
	fstp	DWORD PTR $T57698[ebp]
	fld1
	fstp	DWORD PTR $T57699[ebp]
	fld1
	fstp	DWORD PTR $T57700[ebp]
	lea	ecx, DWORD PTR $T57698[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57699[ebp]
	push	edx
	lea	eax, DWORD PTR $T57700[ebp]
	push	eax
	lea	ecx, DWORD PTR _col$50845[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 352
	push	1
	call	?ApplyLeftFrustum@@YAXH@Z		; ApplyLeftFrustum
	add	esp, 4
; Line 353
	mov	esi, esp
	push	1
	push	0
	push	0
	push	1
	call	DWORD PTR __imp__glColorMask@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 354
	fld	DWORD PTR ?cu@@3PAMA+8
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cu@@3PAMA+4
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cu@@3PAMA
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?ctp@@3PAMA+8
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?ctp@@3PAMA+4
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?ctp@@3PAMA
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cp@@3PAMA+8
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cp@@3PAMA+4
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cp@@3PAMA
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_gluLookAt@72
; Line 355
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN39@Draw
$LN38@Draw:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN39@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN37@Draw
; Line 357
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$50852[ebp], eax
; Line 358
	mov	eax, DWORD PTR _f$50852[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1
	jne	SHORT $LN36@Draw
	jmp	SHORT $LN38@Draw
$LN36@Draw:
; Line 359
	mov	eax, DWORD PTR _f$50852[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _x$50854[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _x$50854[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _x$50854[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _x$50854[ebp+12], eax
	mov	ecx, DWORD PTR _f$50852[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _x$50854[ebp+16], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _x$50854[ebp+20], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _x$50854[ebp+24], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _x$50854[ebp+28], ecx
	mov	edx, DWORD PTR _f$50852[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$50854[ebp+32], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$50854[ebp+36], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$50854[ebp+40], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _x$50854[ebp+44], edx
; Line 360
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T57701[ebp]
	lea	eax, DWORD PTR $T57701[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$50854[ebp+32]
	push	ecx
	lea	edx, DWORD PTR _x$50854[ebp+16]
	push	edx
	lea	eax, DWORD PTR _x$50854[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50856[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50857[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _c$50855[ebp]
	push	eax
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
; Line 364
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _alp$50842[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _col$50845[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$50855[ebp]
	push	edx
	lea	eax, DWORD PTR _scl$50840[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$50855[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$50854[ebp+32]
	push	edx
	lea	eax, DWORD PTR $T50866[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50867[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50868[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _c$50855[ebp]
	push	eax
	lea	ecx, DWORD PTR _scl$50840[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$50855[ebp]
	push	edx
	lea	eax, DWORD PTR _x$50854[ebp+16]
	push	eax
	lea	ecx, DWORD PTR $T50863[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50864[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50865[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _c$50855[ebp]
	push	ecx
	lea	edx, DWORD PTR _scl$50840[ebp]
	push	edx
	lea	eax, DWORD PTR _c$50855[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$50854[ebp]
	push	ecx
	lea	edx, DWORD PTR $T50860[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50861[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50862[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 365
	jmp	$LN38@Draw
$LN37@Draw:
; Line 367
	mov	esi, esp
	push	256					; 00000100H
	call	DWORD PTR __imp__glClear@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 372
	push	1
	call	?ApplyRightFrustum@@YAXH@Z		; ApplyRightFrustum
	add	esp, 4
; Line 373
	mov	esi, esp
	push	1
	push	1
	push	1
	push	0
	call	DWORD PTR __imp__glColorMask@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 374
	fld	DWORD PTR ?cu@@3PAMA+8
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cu@@3PAMA+4
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cu@@3PAMA
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?ctp@@3PAMA+8
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?ctp@@3PAMA+4
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?ctp@@3PAMA
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cp@@3PAMA+8
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cp@@3PAMA+4
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR ?cp@@3PAMA
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_gluLookAt@72
; Line 376
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN35@Draw
$LN34@Draw:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN35@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN33@Draw
; Line 378
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 772				; 00000304H
	call	??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Face>::operator[]
	mov	DWORD PTR _f$50872[ebp], eax
; Line 379
	mov	edx, DWORD PTR _f$50872[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+16]
	and	ecx, 1
	jne	SHORT $LN32@Draw
	jmp	SHORT $LN34@Draw
$LN32@Draw:
; Line 380
	mov	edx, DWORD PTR _f$50872[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$50874[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$50874[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$50874[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _x$50874[ebp+12], edx
	mov	eax, DWORD PTR _f$50872[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _x$50874[ebp+16], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _x$50874[ebp+20], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _x$50874[ebp+24], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _x$50874[ebp+28], eax
	mov	ecx, DWORD PTR _f$50872[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _x$50874[ebp+32], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _x$50874[ebp+36], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _x$50874[ebp+40], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _x$50874[ebp+44], ecx
; Line 381
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR $T57702[ebp]
	lea	edx, DWORD PTR $T57702[ebp]
	push	edx
	lea	eax, DWORD PTR _x$50874[ebp+32]
	push	eax
	lea	ecx, DWORD PTR _x$50874[ebp+16]
	push	ecx
	lea	edx, DWORD PTR _x$50874[ebp]
	push	edx
	lea	eax, DWORD PTR $T50876[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50877[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _c$50875[ebp]
	push	edx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
; Line 385
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _alp$50842[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _col$50845[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$50875[ebp]
	push	ecx
	lea	edx, DWORD PTR _scl$50840[ebp]
	push	edx
	lea	eax, DWORD PTR _c$50875[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$50874[ebp+32]
	push	ecx
	lea	edx, DWORD PTR $T50886[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50887[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50888[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _c$50875[ebp]
	push	edx
	lea	eax, DWORD PTR _scl$50840[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$50875[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$50874[ebp+16]
	push	edx
	lea	eax, DWORD PTR $T50883[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50884[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50885[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _c$50875[ebp]
	push	eax
	lea	ecx, DWORD PTR _scl$50840[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$50875[ebp]
	push	edx
	lea	eax, DWORD PTR _x$50874[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50880[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50881[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50882[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 386
	jmp	$LN34@Draw
$LN33@Draw:
; Line 389
	mov	esi, esp
	push	1
	push	1
	push	1
	push	1
	call	DWORD PTR __imp__glColorMask@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN40@Draw:
; Line 394
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN31@Draw
$LN30@Draw:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN31@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN29@Draw
; Line 396
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$50892[ebp], eax
; Line 397
	mov	eax, DWORD PTR _n$50892[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1
	jne	SHORT $LN28@Draw
	jmp	SHORT $LN30@Draw
$LN28@Draw:
; Line 398
	mov	eax, DWORD PTR _n$50892[ebp]
	cmp	DWORD PTR [eax+120], 1
	jne	$LN27@Draw
; Line 401
	call	_gluNewQuadric@0
	mov	DWORD PTR _myQuad$50895[ebp], eax
; Line 403
	mov	esi, esp
	call	DWORD PTR __imp__glPushMatrix@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 404
	mov	esi, esp
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glColor4f@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 405
	mov	ecx, DWORD PTR _n$50892[ebp]
	add	ecx, 16					; 00000010H
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	mov	esi, esp
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _n$50892[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _n$50892[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glTranslatef@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 406
	push	100					; 00000064H
	push	100					; 00000064H
	sub	esp, 8
	fld	QWORD PTR __real@3fa999999999999a
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _myQuad$50895[ebp]
	push	ecx
	call	_gluSphere@20
; Line 407
	mov	esi, esp
	call	DWORD PTR __imp__glPopMatrix@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN27@Draw:
; Line 410
	mov	edx, DWORD PTR _n$50892[ebp]
	cmp	DWORD PTR [edx+112], 1
	jne	$LN26@Draw
; Line 413
	call	_gluNewQuadric@0
	mov	DWORD PTR _myQuad$50897[ebp], eax
; Line 415
	mov	esi, esp
	call	DWORD PTR __imp__glPushMatrix@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 416
	mov	esi, esp
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glColor4f@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 417
	mov	ecx, DWORD PTR _n$50892[ebp]
	add	ecx, 16					; 00000010H
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	mov	esi, esp
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _n$50892[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _n$50892[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glTranslatef@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 418
	push	100					; 00000064H
	push	100					; 00000064H
	sub	esp, 8
	fld	QWORD PTR __real@3fa999999999999a
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _myQuad$50897[ebp]
	push	eax
	call	_gluSphere@20
; Line 419
	mov	esi, esp
	call	DWORD PTR __imp__glPopMatrix@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@Draw:
; Line 423
	mov	ecx, DWORD PTR _n$50892[ebp]
	cmp	DWORD PTR [ecx+116], 1
	jne	$LN25@Draw
; Line 426
	call	_gluNewQuadric@0
	mov	DWORD PTR _myQuad$50899[ebp], eax
; Line 428
	mov	esi, esp
	call	DWORD PTR __imp__glPushMatrix@0
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 429
	mov	esi, esp
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glColor4f@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 430
	mov	ecx, DWORD PTR _n$50892[ebp]
	add	ecx, 16					; 00000010H
	call	?getZ@btVector3@@QBEABMXZ		; btVector3::getZ
	mov	esi, esp
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _n$50892[ebp]
	add	ecx, 16					; 00000010H
	call	?getY@btVector3@@QBEABMXZ		; btVector3::getY
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _n$50892[ebp]
	add	ecx, 16					; 00000010H
	call	?getX@btVector3@@QBEABMXZ		; btVector3::getX
	push	ecx
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [esp]
	call	DWORD PTR __imp__glTranslatef@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 431
	push	100					; 00000064H
	push	100					; 00000064H
	sub	esp, 8
	fld	QWORD PTR __real@3fa999999999999a
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _myQuad$50899[ebp]
	push	edx
	call	_gluSphere@20
; Line 432
	mov	esi, esp
	call	DWORD PTR __imp__glPopMatrix@0
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@Draw:
; Line 435
	jmp	$LN30@Draw
$LN29@Draw:
; Line 440
	mov	eax, DWORD PTR _drawflags$[ebx]
	and	eax, 8
	je	$LN21@Draw
; Line 442
	fld	DWORD PTR __real@3f4ccccd
	fstp	DWORD PTR _scl$50901[ebp]
; Line 443
	fld1
	fstp	DWORD PTR _alp$50903[ebp]
; Line 444
	fld	DWORD PTR __real@3f333333
	fstp	DWORD PTR $T57703[ebp]
	fld	DWORD PTR __real@3e99999a
	fstp	DWORD PTR $T57704[ebp]
	fld	DWORD PTR __real@3e99999a
	fstp	DWORD PTR $T57705[ebp]
	lea	ecx, DWORD PTR $T57703[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57704[ebp]
	push	edx
	lea	eax, DWORD PTR $T57705[ebp]
	push	eax
	lea	ecx, DWORD PTR _col$50908[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 445
	mov	DWORD PTR _i$50912[ebp], 0
	jmp	SHORT $LN23@Draw
$LN22@Draw:
	mov	ecx, DWORD PTR _i$50912[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$50912[ebp], ecx
$LN23@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	cmp	DWORD PTR _i$50912[ebp], eax
	jge	$LN21@Draw
; Line 447
	mov	edx, DWORD PTR _i$50912[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 792				; 00000318H
	call	??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
	mov	DWORD PTR _t$50916[ebp], eax
; Line 448
	mov	eax, DWORD PTR _t$50916[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+16]
	and	edx, 1
	jne	SHORT $LN20@Draw
	jmp	SHORT $LN22@Draw
$LN20@Draw:
; Line 449
	mov	eax, DWORD PTR _t$50916[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _x$50918[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _x$50918[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _x$50918[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _x$50918[ebp+12], eax
	mov	ecx, DWORD PTR _t$50916[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _x$50918[ebp+16], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _x$50918[ebp+20], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _x$50918[ebp+24], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _x$50918[ebp+28], ecx
	mov	edx, DWORD PTR _t$50916[ebp]
	mov	eax, DWORD PTR [edx+16]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _x$50918[ebp+32], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$50918[ebp+36], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _x$50918[ebp+40], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _x$50918[ebp+44], edx
	mov	eax, DWORD PTR _t$50916[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _x$50918[ebp+48], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _x$50918[ebp+52], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _x$50918[ebp+56], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _x$50918[ebp+60], eax
; Line 450
	fld	DWORD PTR __real@40800000
	fstp	DWORD PTR $T57706[ebp]
	lea	ecx, DWORD PTR $T57706[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$50918[ebp+48]
	push	edx
	lea	eax, DWORD PTR _x$50918[ebp+32]
	push	eax
	lea	ecx, DWORD PTR _x$50918[ebp+16]
	push	ecx
	lea	edx, DWORD PTR _x$50918[ebp]
	push	edx
	lea	eax, DWORD PTR $T50920[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50921[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50922[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _c$50919[ebp]
	push	eax
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
; Line 451
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _alp$50903[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _col$50908[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$50919[ebp]
	push	edx
	lea	eax, DWORD PTR _scl$50901[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$50919[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$50918[ebp+32]
	push	edx
	lea	eax, DWORD PTR $T50931[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50932[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50933[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _c$50919[ebp]
	push	eax
	lea	ecx, DWORD PTR _scl$50901[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$50919[ebp]
	push	edx
	lea	eax, DWORD PTR _x$50918[ebp+16]
	push	eax
	lea	ecx, DWORD PTR $T50928[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50929[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50930[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _c$50919[ebp]
	push	ecx
	lea	edx, DWORD PTR _scl$50901[ebp]
	push	edx
	lea	eax, DWORD PTR _c$50919[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$50918[ebp]
	push	ecx
	lea	edx, DWORD PTR $T50925[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50926[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50927[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 452
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _alp$50903[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _col$50908[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$50919[ebp]
	push	ecx
	lea	edx, DWORD PTR _scl$50901[ebp]
	push	edx
	lea	eax, DWORD PTR _c$50919[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$50918[ebp+48]
	push	ecx
	lea	edx, DWORD PTR $T50940[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50941[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50942[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _c$50919[ebp]
	push	edx
	lea	eax, DWORD PTR _scl$50901[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$50919[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$50918[ebp+16]
	push	edx
	lea	eax, DWORD PTR $T50937[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50938[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50939[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _c$50919[ebp]
	push	eax
	lea	ecx, DWORD PTR _scl$50901[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$50919[ebp]
	push	edx
	lea	eax, DWORD PTR _x$50918[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50934[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50935[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50936[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 453
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _alp$50903[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _col$50908[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$50919[ebp]
	push	edx
	lea	eax, DWORD PTR _scl$50901[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$50919[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$50918[ebp+48]
	push	edx
	lea	eax, DWORD PTR $T50949[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50950[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50951[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _c$50919[ebp]
	push	eax
	lea	ecx, DWORD PTR _scl$50901[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$50919[ebp]
	push	edx
	lea	eax, DWORD PTR _x$50918[ebp+32]
	push	eax
	lea	ecx, DWORD PTR $T50946[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50947[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50948[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _c$50919[ebp]
	push	ecx
	lea	edx, DWORD PTR _scl$50901[ebp]
	push	edx
	lea	eax, DWORD PTR _c$50919[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$50918[ebp+16]
	push	ecx
	lea	edx, DWORD PTR $T50943[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50944[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50945[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 454
	mov	esi, esp
	push	ecx
	fld	DWORD PTR _alp$50903[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _col$50908[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$50919[ebp]
	push	ecx
	lea	edx, DWORD PTR _scl$50901[ebp]
	push	edx
	lea	eax, DWORD PTR _c$50919[ebp]
	push	eax
	lea	ecx, DWORD PTR _x$50918[ebp+48]
	push	ecx
	lea	edx, DWORD PTR $T50958[ebp]
	push	edx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50959[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50960[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _c$50919[ebp]
	push	edx
	lea	eax, DWORD PTR _scl$50901[ebp]
	push	eax
	lea	ecx, DWORD PTR _c$50919[ebp]
	push	ecx
	lea	edx, DWORD PTR _x$50918[ebp]
	push	edx
	lea	eax, DWORD PTR $T50955[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T50956[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50957[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _c$50919[ebp]
	push	eax
	lea	ecx, DWORD PTR _scl$50901[ebp]
	push	ecx
	lea	edx, DWORD PTR _c$50919[ebp]
	push	edx
	lea	eax, DWORD PTR _x$50918[ebp+32]
	push	eax
	lea	ecx, DWORD PTR $T50952[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T50953[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T50954[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 455
	jmp	$LN22@Draw
$LN21@Draw:
; Line 462
	mov	ecx, DWORD PTR _drawflags$[ebx]
	and	ecx, 128				; 00000080H
	je	$LN16@Draw
; Line 464
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@Draw
$LN17@Draw:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN18@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 712				; 000002c8H
	call	?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Note>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN16@Draw
; Line 466
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 712				; 000002c8H
	call	??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Note>::operator[]
	mov	DWORD PTR _n$50965[ebp], eax
; Line 467
	mov	ecx, DWORD PTR _n$50965[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _p$50966[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _p$50966[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _p$50966[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _p$50966[ebp+12], eax
; Line 468
	mov	DWORD PTR _j$50967[ebp], 0
	jmp	SHORT $LN15@Draw
$LN14@Draw:
	mov	ecx, DWORD PTR _j$50967[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$50967[ebp], ecx
$LN15@Draw:
	mov	edx, DWORD PTR _n$50965[ebp]
	mov	eax, DWORD PTR _j$50967[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jge	SHORT $LN13@Draw
; Line 470
	mov	ecx, DWORD PTR _j$50967[ebp]
	mov	edx, DWORD PTR _n$50965[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+52]
	push	eax
	mov	ecx, DWORD PTR _j$50967[ebp]
	mov	edx, DWORD PTR _n$50965[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+36]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR $T50971[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _p$50966[ebp]
	call	??YbtVector3@@QAEAAV0@ABV0@@Z		; btVector3::operator+=
; Line 471
	jmp	SHORT $LN14@Draw
$LN13@Draw:
; Line 472
	mov	esi, esp
	mov	edx, DWORD PTR _n$50965[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	lea	ecx, DWORD PTR _p$50966[ebp]
	push	ecx
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+36]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 473
	jmp	$LN17@Draw
$LN16@Draw:
; Line 476
	mov	eax, DWORD PTR _drawflags$[ebx]
	and	eax, 512				; 00000200H
	je	SHORT $LN12@Draw
	push	-1
	push	0
	mov	ecx, DWORD PTR _idraw$[ebx]
	push	ecx
	mov	edx, DWORD PTR _psb$[ebx]
	push	edx
	call	?DrawNodeTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ; btSoftBodyHelpers::DrawNodeTree
	add	esp, 16					; 00000010H
$LN12@Draw:
; Line 478
	mov	eax, DWORD PTR _drawflags$[ebx]
	and	eax, 1024				; 00000400H
	je	SHORT $LN11@Draw
	push	-1
	push	0
	mov	ecx, DWORD PTR _idraw$[ebx]
	push	ecx
	mov	edx, DWORD PTR _psb$[ebx]
	push	edx
	call	?DrawFaceTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ; btSoftBodyHelpers::DrawFaceTree
	add	esp, 16					; 00000010H
$LN11@Draw:
; Line 480
	mov	eax, DWORD PTR _drawflags$[ebx]
	and	eax, 2048				; 00000800H
	je	SHORT $LN10@Draw
	push	-1
	push	0
	mov	ecx, DWORD PTR _idraw$[ebx]
	push	ecx
	mov	edx, DWORD PTR _psb$[ebx]
	push	edx
	call	?DrawClusterTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ; btSoftBodyHelpers::DrawClusterTree
	add	esp, 16					; 00000010H
$LN10@Draw:
; Line 482
	mov	eax, DWORD PTR _drawflags$[ebx]
	and	eax, 4096				; 00001000H
	je	$LN6@Draw
; Line 484
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@Draw
$LN7@Draw:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@Draw:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 872				; 00000368H
	call	?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Joint *>::size
	cmp	DWORD PTR _i$[ebp], eax
	jge	$LN6@Draw
; Line 486
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 872				; 00000368H
	call	??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _pj$50979[ebp], eax
; Line 487
	mov	ecx, DWORD PTR _pj$50979[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR _pj$50979[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv1473[ebp], eax
	cmp	DWORD PTR tv1473[ebp], 0
	je	SHORT $LN3@Draw
	cmp	DWORD PTR tv1473[ebp], 1
	je	$LN2@Draw
	jmp	$LN1@Draw
$LN3@Draw:
; Line 491
	mov	ecx, DWORD PTR _pj$50979[ebp]
	mov	DWORD PTR _pjl$50985[ebp], ecx
; Line 492
	mov	edx, DWORD PTR _pjl$50985[ebp]
	add	edx, 48					; 00000030H
	push	edx
	lea	eax, DWORD PTR _a0$50987[ebp]
	push	eax
	mov	ecx, DWORD PTR _pj$50979[ebp]
	add	ecx, 16					; 00000010H
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 493
	mov	ecx, DWORD PTR _pjl$50985[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	lea	edx, DWORD PTR _a1$50989[ebp]
	push	edx
	mov	ecx, DWORD PTR _pj$50979[ebp]
	add	ecx, 28					; 0000001cH
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator*
; Line 494
	fldz
	fstp	DWORD PTR $T57707[ebp]
	fld1
	fstp	DWORD PTR $T57708[ebp]
	fld1
	fstp	DWORD PTR $T57709[ebp]
	lea	eax, DWORD PTR $T57707[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57708[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57709[ebp]
	push	edx
	lea	ecx, DWORD PTR $T50991[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	eax, DWORD PTR _a0$50987[ebp]
	push	eax
	mov	ecx, DWORD PTR _pj$50979[ebp]
	add	ecx, 16					; 00000010H
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 495
	fld1
	fstp	DWORD PTR $T57710[ebp]
	fld1
	fstp	DWORD PTR $T57711[ebp]
	fldz
	fstp	DWORD PTR $T57712[ebp]
	lea	ecx, DWORD PTR $T57710[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57711[ebp]
	push	edx
	lea	eax, DWORD PTR $T57712[ebp]
	push	eax
	lea	ecx, DWORD PTR $T50995[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _a1$50989[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pj$50979[ebp]
	add	ecx, 28					; 0000001cH
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	push	eax
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 496
	fldz
	fstp	DWORD PTR $T57713[ebp]
	fld1
	fstp	DWORD PTR $T57714[ebp]
	fld1
	fstp	DWORD PTR $T57715[ebp]
	lea	eax, DWORD PTR $T57713[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57714[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57715[ebp]
	push	edx
	lea	ecx, DWORD PTR $T50999[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	push	ecx
	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _a0$50987[ebp]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	push	ecx
	call	?drawVertex@@YAXPAVbtIDebugDraw@@ABVbtVector3@@M1@Z ; drawVertex
	add	esp, 16					; 00000010H
; Line 497
	fld1
	fstp	DWORD PTR $T57716[ebp]
	fld1
	fstp	DWORD PTR $T57717[ebp]
	fldz
	fstp	DWORD PTR $T57718[ebp]
	lea	edx, DWORD PTR $T57716[ebp]
	push	edx
	lea	eax, DWORD PTR $T57717[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57718[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T51003[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	push	ecx
	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR [esp]
	lea	edx, DWORD PTR _a1$50989[ebp]
	push	edx
	mov	eax, DWORD PTR _idraw$[ebx]
	push	eax
	call	?drawVertex@@YAXPAVbtIDebugDraw@@ABVbtVector3@@M1@Z ; drawVertex
	add	esp, 16					; 00000010H
; Line 499
	jmp	$LN4@Draw
$LN2@Draw:
; Line 503
	mov	ecx, DWORD PTR _pj$50979[ebp]
	add	ecx, 16					; 00000010H
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _o0$51008[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _o0$51008[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _o0$51008[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _o0$51008[ebp+12], edx
; Line 504
	mov	ecx, DWORD PTR _pj$50979[ebp]
	add	ecx, 28					; 0000001cH
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getOrigin@btTransform@@QBEABVbtVector3@@XZ ; btTransform::getOrigin
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _o1$51009[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _o1$51009[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _o1$51009[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _o1$51009[ebp+12], edx
; Line 505
	mov	eax, DWORD PTR _pj$50979[ebp]
	add	eax, 48					; 00000030H
	push	eax
	mov	ecx, DWORD PTR _pj$50979[ebp]
	add	ecx, 16					; 00000010H
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	ecx, DWORD PTR _a0$51010[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
; Line 506
	mov	edx, DWORD PTR _pj$50979[ebp]
	add	edx, 64					; 00000040H
	push	edx
	mov	ecx, DWORD PTR _pj$50979[ebp]
	add	ecx, 28					; 0000001cH
	call	?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ; btSoftBody::Body::xform
	mov	ecx, eax
	call	?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ; btTransform::getBasis
	push	eax
	lea	eax, DWORD PTR _a1$51012[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
; Line 507
	fldz
	fstp	DWORD PTR $T57719[ebp]
	fld1
	fstp	DWORD PTR $T57720[ebp]
	fld1
	fstp	DWORD PTR $T57721[ebp]
	fld	DWORD PTR __real@41200000
	fstp	DWORD PTR $T57722[ebp]
	lea	ecx, DWORD PTR $T57719[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57720[ebp]
	push	edx
	lea	eax, DWORD PTR $T57721[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51017[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR $T57722[ebp]
	push	ecx
	lea	edx, DWORD PTR _a0$51010[ebp]
	push	edx
	lea	eax, DWORD PTR $T51015[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _o0$51008[ebp]
	push	ecx
	lea	edx, DWORD PTR $T51016[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _o0$51008[ebp]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 508
	fldz
	fstp	DWORD PTR $T57723[ebp]
	fld1
	fstp	DWORD PTR $T57724[ebp]
	fld1
	fstp	DWORD PTR $T57725[ebp]
	fld	DWORD PTR __real@41200000
	fstp	DWORD PTR $T57726[ebp]
	lea	ecx, DWORD PTR $T57723[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57724[ebp]
	push	edx
	lea	eax, DWORD PTR $T57725[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51024[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR $T57726[ebp]
	push	ecx
	lea	edx, DWORD PTR _a1$51012[ebp]
	push	edx
	lea	eax, DWORD PTR $T51022[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _o0$51008[ebp]
	push	ecx
	lea	edx, DWORD PTR $T51023[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _o0$51008[ebp]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 509
	fld1
	fstp	DWORD PTR $T57727[ebp]
	fld1
	fstp	DWORD PTR $T57728[ebp]
	fldz
	fstp	DWORD PTR $T57729[ebp]
	fld	DWORD PTR __real@41200000
	fstp	DWORD PTR $T57730[ebp]
	lea	ecx, DWORD PTR $T57727[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57728[ebp]
	push	edx
	lea	eax, DWORD PTR $T57729[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51031[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR $T57730[ebp]
	push	ecx
	lea	edx, DWORD PTR _a0$51010[ebp]
	push	edx
	lea	eax, DWORD PTR $T51029[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _o1$51009[ebp]
	push	ecx
	lea	edx, DWORD PTR $T51030[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _o1$51009[ebp]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 510
	fld1
	fstp	DWORD PTR $T57731[ebp]
	fld1
	fstp	DWORD PTR $T57732[ebp]
	fldz
	fstp	DWORD PTR $T57733[ebp]
	fld	DWORD PTR __real@41200000
	fstp	DWORD PTR $T57734[ebp]
	lea	ecx, DWORD PTR $T57731[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57732[ebp]
	push	edx
	lea	eax, DWORD PTR $T57733[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51038[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR $T57734[ebp]
	push	ecx
	lea	edx, DWORD PTR _a1$51012[ebp]
	push	edx
	lea	eax, DWORD PTR $T51036[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _o1$51009[ebp]
	push	ecx
	lea	edx, DWORD PTR $T51037[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _o1$51009[ebp]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Draw:
$LN4@Draw:
; Line 518
	jmp	$LN7@Draw
$LN6@Draw:
; Line 520
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN112@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN112@Draw:
	DD	30					; 0000001eH
	DD	$LN111@Draw
$LN111@Draw:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN81@Draw
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN82@Draw
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN83@Draw
	DD	-80					; ffffffb0H
	DD	16					; 00000010H
	DD	$LN84@Draw
	DD	-112					; ffffff90H
	DD	16					; 00000010H
	DD	$LN85@Draw
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN86@Draw
	DD	-232					; ffffff18H
	DD	20					; 00000014H
	DD	$LN87@Draw
	DD	-320					; fffffec0H
	DD	60					; 0000003cH
	DD	$LN88@Draw
	DD	-656					; fffffd70H
	DD	16					; 00000010H
	DD	$LN89@Draw
	DD	-752					; fffffd10H
	DD	16					; 00000010H
	DD	$LN90@Draw
	DD	-816					; fffffcd0H
	DD	16					; 00000010H
	DD	$LN91@Draw
	DD	-880					; fffffc90H
	DD	16					; 00000010H
	DD	$LN92@Draw
	DD	-1136					; fffffb90H
	DD	16					; 00000010H
	DD	$LN93@Draw
	DD	-1240					; fffffb28H
	DD	4
	DD	$LN94@Draw
	DD	-1280					; fffffb00H
	DD	16					; 00000010H
	DD	$LN95@Draw
	DD	-1344					; fffffac0H
	DD	48					; 00000030H
	DD	$LN96@Draw
	DD	-1376					; fffffaa0H
	DD	16					; 00000010H
	DD	$LN97@Draw
	DD	-1632					; fffff9a0H
	DD	48					; 00000030H
	DD	$LN98@Draw
	DD	-1664					; fffff980H
	DD	16					; 00000010H
	DD	$LN99@Draw
	DD	-1880					; fffff8a8H
	DD	4
	DD	$LN100@Draw
	DD	-1920					; fffff880H
	DD	16					; 00000010H
	DD	$LN101@Draw
	DD	-2000					; fffff830H
	DD	64					; 00000040H
	DD	$LN102@Draw
	DD	-2032					; fffff810H
	DD	16					; 00000010H
	DD	$LN103@Draw
	DD	-2704					; fffff570H
	DD	16					; 00000010H
	DD	$LN104@Draw
	DD	-2768					; fffff530H
	DD	16					; 00000010H
	DD	$LN105@Draw
	DD	-2800					; fffff510H
	DD	16					; 00000010H
	DD	$LN106@Draw
	DD	-2912					; fffff4a0H
	DD	16					; 00000010H
	DD	$LN107@Draw
	DD	-2944					; fffff480H
	DD	16					; 00000010H
	DD	$LN108@Draw
	DD	-2976					; fffff460H
	DD	16					; 00000010H
	DD	$LN109@Draw
	DD	-3008					; fffff440H
	DD	16					; 00000010H
	DD	$LN110@Draw
$LN110@Draw:
	DB	97					; 00000061H
	DB	49					; 00000031H
	DB	0
$LN109@Draw:
	DB	97					; 00000061H
	DB	48					; 00000030H
	DB	0
$LN108@Draw:
	DB	111					; 0000006fH
	DB	49					; 00000031H
	DB	0
$LN107@Draw:
	DB	111					; 0000006fH
	DB	48					; 00000030H
	DB	0
$LN106@Draw:
	DB	97					; 00000061H
	DB	49					; 00000031H
	DB	0
$LN105@Draw:
	DB	97					; 00000061H
	DB	48					; 00000030H
	DB	0
$LN104@Draw:
	DB	112					; 00000070H
	DB	0
$LN103@Draw:
	DB	99					; 00000063H
	DB	0
$LN102@Draw:
	DB	120					; 00000078H
	DB	0
$LN101@Draw:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN100@Draw:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN99@Draw:
	DB	99					; 00000063H
	DB	0
$LN98@Draw:
	DB	120					; 00000078H
	DB	0
$LN97@Draw:
	DB	99					; 00000063H
	DB	0
$LN96@Draw:
	DB	120					; 00000078H
	DB	0
$LN95@Draw:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	0
$LN94@Draw:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN93@Draw:
	DB	113					; 00000071H
	DB	0
$LN92@Draw:
	DB	121					; 00000079H
	DB	0
$LN91@Draw:
	DB	120					; 00000078H
	DB	0
$LN90@Draw:
	DB	111					; 0000006fH
	DB	0
$LN89@Draw:
	DB	100					; 00000064H
	DB	0
$LN88@Draw:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN87@Draw:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN86@Draw:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN85@Draw:
	DB	99					; 00000063H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN84@Draw:
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN83@Draw:
	DB	108					; 0000006cH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN82@Draw:
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
$LN81@Draw:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
?Draw@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@H@Z ENDP ; btSoftBodyHelpers::Draw
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btVector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btVector3@@QAE@XZ PROC				; btVector3::btVector3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0btVector3@@QAE@XZ ENDP				; btVector3::btVector3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btVector3@@QAE@ABM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
??0btVector3@@QAE@ABM00@Z PROC				; btVector3::btVector3, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 134
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 135
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx+8]
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0btVector3@@QAE@ABM00@Z ENDP				; btVector3::btVector3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??YbtVector3@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
??YbtVector3@@QAEAAV0@ABV0@@Z PROC			; btVector3::operator+=, COMDAT
; _this$ = ecx
; Line 165
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 171
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fadd	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 172
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+4]
	fadd	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 173
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 175
	mov	eax, DWORD PTR _this$[ebp]
; Line 176
	mov	esp, ebp
	pop	ebp
	ret	4
??YbtVector3@@QAEAAV0@ABV0@@Z ENDP			; btVector3::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?minAxis@btVector3@@QBEHXZ
_TEXT	SEGMENT
tv72 = -16						; size = 4
tv73 = -12						; size = 4
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?minAxis@btVector3@@QBEHXZ PROC				; btVector3::minAxis, COMDAT
; _this$ = ecx
; Line 469
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 470
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fcomp	DWORD PTR [eax]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@minAxis
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR [edx]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@minAxis
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@minAxis
$LN3@minAxis:
	mov	DWORD PTR tv68[ebp], 2
$LN4@minAxis:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN8@minAxis
$LN7@minAxis:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fcomp	DWORD PTR [edx+4]
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN5@minAxis
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN6@minAxis
$LN5@minAxis:
	mov	DWORD PTR tv72[ebp], 2
$LN6@minAxis:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR tv73[ebp], ecx
$LN8@minAxis:
	mov	eax, DWORD PTR tv73[ebp]
; Line 471
	mov	esp, ebp
	pop	ebp
	ret	0
?minAxis@btVector3@@QBEHXZ ENDP				; btVector3::minAxis
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getX@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getX@btVector3@@QBEABMXZ PROC				; btVector3::getX, COMDAT
; _this$ = ecx
; Line 561
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getX@btVector3@@QBEABMXZ ENDP				; btVector3::getX
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getY@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getY@btVector3@@QBEABMXZ PROC				; btVector3::getY, COMDAT
; _this$ = ecx
; Line 563
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?getY@btVector3@@QBEABMXZ ENDP				; btVector3::getY
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getZ@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getZ@btVector3@@QBEABMXZ PROC				; btVector3::getZ, COMDAT
; _this$ = ecx
; Line 565
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?getZ@btVector3@@QBEABMXZ ENDP				; btVector3::getZ
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??H@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T57825 = -12						; size = 4
$T57824 = -8						; size = 4
$T57823 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??H@YA?AVbtVector3@@ABV0@0@Z PROC			; operator+, COMDAT
; Line 753
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 762
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T57823[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+4]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR $T57824[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR $T57825[ebp]
	lea	eax, DWORD PTR $T57823[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57824[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57825[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 764
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??H@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??G@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T57830 = -12						; size = 4
$T57829 = -8						; size = 4
$T57828 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??G@YA?AVbtVector3@@ABV0@0@Z PROC			; operator-, COMDAT
; Line 785
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 798
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T57828[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+4]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR $T57829[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR $T57830[ebp]
	lea	eax, DWORD PTR $T57828[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57829[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57830[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 800
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??G@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator-
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??D@YA?AVbtVector3@@ABV0@ABM@Z
_TEXT	SEGMENT
$T57835 = -12						; size = 4
$T57834 = -8						; size = 4
$T57833 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_s$ = 16						; size = 4
??D@YA?AVbtVector3@@ABV0@ABM@Z PROC			; operator*, COMDAT
; Line 819
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 828
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx]
	fstp	DWORD PTR $T57833[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _s$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax]
	fstp	DWORD PTR $T57834[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx]
	fstp	DWORD PTR $T57835[ebp]
	lea	eax, DWORD PTR $T57833[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57834[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57835[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 830
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABV0@ABM@Z ENDP			; operator*
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??K@YA?AVbtVector3@@ABV0@ABM@Z
_TEXT	SEGMENT
$T57838 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_s$ = 16						; size = 4
??K@YA?AVbtVector3@@ABV0@ABM@Z PROC			; operator/, COMDAT
; Line 842
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 852
	mov	eax, DWORD PTR _s$[ebp]
	fld1
	fdiv	DWORD PTR [eax]
	fstp	DWORD PTR $T57838[ebp]
	lea	ecx, DWORD PTR $T57838[ebp]
	push	ecx
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 854
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??K@YA?AVbtVector3@@ABV0@ABM@Z ENDP			; operator/
_TEXT	ENDS
PUBLIC	?dot@btVector3@@QBEMABV1@@Z			; btVector3::dot
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btDot@@YAMABVbtVector3@@0@Z
_TEXT	SEGMENT
_v1$ = 8						; size = 4
_v2$ = 12						; size = 4
?btDot@@YAMABVbtVector3@@0@Z PROC			; btDot, COMDAT
; Line 889
	push	ebp
	mov	ebp, esp
; Line 890
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v1$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
; Line 891
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btDot@@YAMABVbtVector3@@0@Z ENDP			; btDot
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?dot@btVector3@@QBEMABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?dot@btVector3@@QBEMABV1@@Z PROC			; btVector3::dot, COMDAT
; _this$ = ecx
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 252
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
; Line 254
	mov	esp, ebp
	pop	ebp
	ret	4
?dot@btVector3@@QBEMABV1@@Z ENDP			; btVector3::dot
_TEXT	ENDS
PUBLIC	?cross@btVector3@@QBE?AV1@ABV1@@Z		; btVector3::cross
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btCross@@YA?AVbtVector3@@ABV1@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
?btCross@@YA?AVbtVector3@@ABV1@0@Z PROC			; btCross, COMDAT
; Line 919
	push	ebp
	mov	ebp, esp
; Line 920
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v1$[ebp]
	call	?cross@btVector3@@QBE?AV1@ABV1@@Z	; btVector3::cross
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 921
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btCross@@YA?AVbtVector3@@ABV1@0@Z ENDP			; btCross
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?cross@btVector3@@QBE?AV1@ABV1@@Z
_TEXT	SEGMENT
$T57849 = -16						; size = 4
$T57848 = -12						; size = 4
$T57847 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
?cross@btVector3@@QBE?AV1@ABV1@@Z PROC			; btVector3::cross, COMDAT
; _this$ = ecx
; Line 378
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 412
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T57847[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T57848[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fmul	DWORD PTR [edx+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR $T57849[ebp]
	lea	eax, DWORD PTR $T57847[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57848[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57849[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 414
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?cross@btVector3@@QBE?AV1@ABV1@@Z ENDP			; btVector3::cross
_TEXT	ENDS
PUBLIC	?normalize@btVector3@@QAEAAV1@XZ		; btVector3::normalize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?normalized@btVector3@@QBE?AV1@XZ
_TEXT	SEGMENT
_norm$ = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?normalized@btVector3@@QBE?AV1@XZ PROC			; btVector3::normalized, COMDAT
; _this$ = ecx
; Line 952
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 953
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _norm$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _norm$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _norm$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _norm$[ebp+12], edx
; Line 955
	lea	ecx, DWORD PTR _norm$[ebp]
	call	?normalize@btVector3@@QAEAAV1@XZ	; btVector3::normalize
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 956
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@normalized
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
	npad	1
$LN5@normalized:
	DD	1
	DD	$LN4@normalized
$LN4@normalized:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN3@normalized
$LN3@normalized:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	109					; 0000006dH
	DB	0
?normalized@btVector3@@QBE?AV1@XZ ENDP			; btVector3::normalized
_TEXT	ENDS
PUBLIC	??_0btVector3@@QAEAAV0@ABM@Z			; btVector3::operator/=
PUBLIC	?length@btVector3@@QBEMXZ			; btVector3::length
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?normalize@btVector3@@QAEAAV1@XZ
_TEXT	SEGMENT
$T57857 = -8						; size = 4
_this$ = -4						; size = 4
?normalize@btVector3@@QAEAAV1@XZ PROC			; btVector3::normalize, COMDAT
; _this$ = ecx
; Line 298
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 338
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@btVector3@@QBEMXZ		; btVector3::length
	fstp	DWORD PTR $T57857[ebp]
	lea	eax, DWORD PTR $T57857[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??_0btVector3@@QAEAAV0@ABM@Z		; btVector3::operator/=
; Line 340
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?normalize@btVector3@@QAEAAV1@XZ ENDP			; btVector3::normalize
_TEXT	ENDS
PUBLIC	??XbtVector3@@QAEAAV0@ABM@Z			; btVector3::operator*=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_0btVector3@@QAEAAV0@ABM@Z
_TEXT	SEGMENT
$T57860 = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??_0btVector3@@QAEAAV0@ABM@Z PROC			; btVector3::operator/=, COMDAT
; _this$ = ecx
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 229
	mov	eax, DWORD PTR _s$[ebp]
	fld1
	fdiv	DWORD PTR [eax]
	fstp	DWORD PTR $T57860[ebp]
	lea	ecx, DWORD PTR $T57860[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??XbtVector3@@QAEAAV0@ABM@Z		; btVector3::operator*=
; Line 231
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_0btVector3@@QAEAAV0@ABM@Z ENDP			; btVector3::operator/=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??XbtVector3@@QAEAAV0@ABM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??XbtVector3@@QAEAAV0@ABM@Z PROC			; btVector3::operator*=, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx]
; Line 207
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+4]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+4]
; Line 208
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+8]
; Line 210
	mov	eax, DWORD PTR _this$[ebp]
; Line 211
	mov	esp, ebp
	pop	ebp
	ret	4
??XbtVector3@@QAEAAV0@ABM@Z ENDP			; btVector3::operator*=
_TEXT	ENDS
PUBLIC	?btSqrt@@YAMM@Z					; btSqrt
PUBLIC	?length2@btVector3@@QBEMXZ			; btVector3::length2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?length@btVector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length@btVector3@@QBEMXZ PROC				; btVector3::length, COMDAT
; _this$ = ecx
; Line 264
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 265
	mov	ecx, DWORD PTR _this$[ebp]
	call	?length2@btVector3@@QBEMXZ		; btVector3::length2
	push	ecx
	fstp	DWORD PTR [esp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
; Line 266
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@btVector3@@QBEMXZ ENDP				; btVector3::length
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btSqrt@@YAMM@Z
_TEXT	SEGMENT
_y$ = 8							; size = 4
?btSqrt@@YAMM@Z PROC					; btSqrt, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 388
	push	ebp
	mov	ebp, esp
; Line 404
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
; Line 406
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btSqrt@@YAMM@Z ENDP					; btSqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 434
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?length2@btVector3@@QBEMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?length2@btVector3@@QBEMXZ PROC				; btVector3::length2, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 258
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 259
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
; Line 260
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length2@btVector3@@QBEMXZ ENDP				; btVector3::length2
_TEXT	ENDS
PUBLIC	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z		; btMatrix3x3::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z
_TEXT	SEGMENT
$T57875 = -12						; size = 4
$T57874 = -8						; size = 4
$T57873 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m$ = 12						; size = 4
_v$ = 16						; size = 4
??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z PROC	; operator*, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 1147
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1151
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T57873[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	push	1
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T57874[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	push	edx
	push	0
	mov	ecx, DWORD PTR _m$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	mov	ecx, eax
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T57875[ebp]
	lea	eax, DWORD PTR $T57873[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57874[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57875[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1153
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ENDP	; operator*
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??AbtMatrix3x3@@QBEABVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_i$ = 8							; size = 4
??AbtMatrix3x3@@QBEABVbtVector3@@H@Z PROC		; btMatrix3x3::operator[], COMDAT
; _this$ = ecx
; Line 159
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 161
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _this$[ebp]
; Line 162
	mov	esp, ebp
	pop	ebp
	ret	4
??AbtMatrix3x3@@QBEABVbtVector3@@H@Z ENDP		; btMatrix3x3::operator[]
_TEXT	ENDS
PUBLIC	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z	; btTransform::operator()
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z PROC		; btTransform::operator*, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 101
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 102
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ; btTransform::operator()
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 103
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??DbtTransform@@QBE?AVbtVector3@@ABV1@@Z ENDP		; btTransform::operator*
_TEXT	ENDS
PUBLIC	?dot3@btVector3@@QBE?AV1@ABV1@00@Z		; btVector3::dot3
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z
_TEXT	SEGMENT
$T9423 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_x$ = 12						; size = 4
??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z PROC		; btTransform::operator(), COMDAT
; _this$ = ecx
; Line 95
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	lea	ecx, DWORD PTR $T9423[ebp]
	push	ecx
	mov	ecx, DWORD PTR _x$[ebx]
	call	?dot3@btVector3@@QBE?AV1@ABV1@00@Z	; btVector3::dot3
	push	eax
	mov	edx, DWORD PTR ___$ReturnUdt$[ebx]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
; Line 97
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
??RbtTransform@@QBE?AVbtVector3@@ABV1@@Z ENDP		; btTransform::operator()
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?dot3@btVector3@@QBE?AV1@ABV1@00@Z
_TEXT	SEGMENT
$T57886 = -16						; size = 4
$T57885 = -12						; size = 4
$T57884 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v0$ = 12						; size = 4
_v1$ = 16						; size = 4
_v2$ = 20						; size = 4
?dot3@btVector3@@QBE?AV1@ABV1@00@Z PROC			; btVector3::dot3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 719
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 745
	mov	eax, DWORD PTR _v2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T57884[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T57885[ebp]
	mov	edx, DWORD PTR _v0$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?dot@btVector3@@QBEMABV1@@Z		; btVector3::dot
	fstp	DWORD PTR $T57886[ebp]
	lea	eax, DWORD PTR $T57884[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57885[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57886[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 747
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?dot3@btVector3@@QBE?AV1@ABV1@00@Z ENDP			; btVector3::dot3
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ PROC	; btTransform::getBasis, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?getBasis@btTransform@@QBEABVbtMatrix3x3@@XZ ENDP	; btTransform::getBasis
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getOrigin@btTransform@@QBEABVbtVector3@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getOrigin@btTransform@@QBEABVbtVector3@@XZ PROC	; btTransform::getOrigin, COMDAT
; _this$ = ecx
; Line 119
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esp, ebp
	pop	ebp
	ret	0
?getOrigin@btTransform@@QBEABVbtVector3@@XZ ENDP	; btTransform::getOrigin
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ PROC ; btCollisionObject::getWorldTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 304
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 305
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 306
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldTransform@btCollisionObject@@QAEAAVbtTransform@@XZ ENDP ; btCollisionObject::getWorldTransform
_TEXT	ENDS
PUBLIC	?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ; btCollisionObject::getWorldTransform
PUBLIC	??0btTransform@@QAE@ABV0@@Z			; btTransform::btTransform
PUBLIC	?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B ; `btSoftBody::Body::xform'::`2'::identity
PUBLIC	?getIdentity@btTransform@@SAABV1@XZ		; btTransform::getIdentity
PUBLIC	??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51 ; `btSoftBody::Body::xform'::`2'::`local static guard'
;	COMDAT ?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbody.h
_BSS	SEGMENT
?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B DB 040H DUP (?) ; `btSoftBody::Body::xform'::`2'::identity
_BSS	ENDS
;	COMDAT ??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51
_BSS	SEGMENT
??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51 DD 01H DUP (?) ; `btSoftBody::Body::xform'::`2'::`local static guard'
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ PROC	; btSoftBody::Body::xform, COMDAT
; _this$ = ecx
; Line 413
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 414
	mov	eax, DWORD PTR ??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51
	and	eax, 1
	jne	SHORT $LN3@xform
	mov	ecx, DWORD PTR ??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51
	or	ecx, 1
	mov	DWORD PTR ??_B?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@51, ecx
	call	?getIdentity@btTransform@@SAABV1@XZ	; btTransform::getIdentity
	push	eax
	mov	ecx, OFFSET ?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B ; `btSoftBody::Body::xform'::`2'::identity
	call	??0btTransform@@QAE@ABV0@@Z		; btTransform::btTransform
$LN3@xform:
; Line 415
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@xform
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	call	?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ; btCollisionObject::getWorldTransform
	jmp	SHORT $LN4@xform
$LN2@xform:
; Line 416
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@xform
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 64					; 00000040H
	jmp	SHORT $LN4@xform
$LN1@xform:
; Line 417
	mov	eax, OFFSET ?identity@?1??xform@Body@btSoftBody@@QBEABVbtTransform@@XZ@4V4@B ; `btSoftBody::Body::xform'::`2'::identity
$LN4@xform:
; Line 418
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?xform@Body@btSoftBody@@QBEABVbtTransform@@XZ ENDP	; btSoftBody::Body::xform
_TEXT	ENDS
PUBLIC	??0btMatrix3x3@@QAE@ABV0@@Z			; btMatrix3x3::btMatrix3x3
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btTransform@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??0btTransform@@QAE@ABV0@@Z PROC			; btTransform::btTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _other$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _other$[ebp]
	add	ecx, 48					; 00000030H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btTransform@@QAE@ABV0@@Z ENDP			; btTransform::btTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btMatrix3x3@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_other$ = 8						; size = 4
??0btMatrix3x3@@QAE@ABV0@@Z PROC			; btMatrix3x3::btMatrix3x3, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 114
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
; Line 116
	mov	ecx, DWORD PTR _other$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
; Line 117
	mov	edx, DWORD PTR _other$[ebp]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax+4], ecx
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+12], edx
; Line 118
	mov	eax, DWORD PTR _other$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 119
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0btMatrix3x3@@QAE@ABV0@@Z ENDP			; btMatrix3x3::btMatrix3x3
_TEXT	ENDS
PUBLIC	??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ; btTransform::btTransform
PUBLIC	?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B ; `btTransform::getIdentity'::`2'::identityTransform
PUBLIC	?getIdentity@btMatrix3x3@@SAABV1@XZ		; btMatrix3x3::getIdentity
PUBLIC	??_B?1??getIdentity@btTransform@@SAABV1@XZ@51	; `btTransform::getIdentity'::`2'::`local static guard'
;	COMDAT ?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
_BSS	SEGMENT
?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B DB 040H DUP (?) ; `btTransform::getIdentity'::`2'::identityTransform
_BSS	ENDS
;	COMDAT ??_B?1??getIdentity@btTransform@@SAABV1@XZ@51
_BSS	SEGMENT
??_B?1??getIdentity@btTransform@@SAABV1@XZ@51 DD 01H DUP (?) ; `btTransform::getIdentity'::`2'::`local static guard'
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?getIdentity@btTransform@@SAABV1@XZ
_TEXT	SEGMENT
$T57904 = -44						; size = 4
$T57903 = -40						; size = 4
$T57902 = -36						; size = 4
$T57901 = -32						; size = 16
?getIdentity@btTransform@@SAABV1@XZ PROC		; btTransform::getIdentity, COMDAT
; Line 204
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 205
	mov	eax, DWORD PTR ??_B?1??getIdentity@btTransform@@SAABV1@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getIdentit
	mov	ecx, DWORD PTR ??_B?1??getIdentity@btTransform@@SAABV1@XZ@51
	or	ecx, 1
	mov	DWORD PTR ??_B?1??getIdentity@btTransform@@SAABV1@XZ@51, ecx
	fldz
	fstp	DWORD PTR $T57902[ebp]
	fldz
	fstp	DWORD PTR $T57903[ebp]
	fldz
	fstp	DWORD PTR $T57904[ebp]
	lea	edx, DWORD PTR $T57902[ebp]
	push	edx
	lea	eax, DWORD PTR $T57903[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57904[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T57901[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	call	?getIdentity@btMatrix3x3@@SAABV1@XZ	; btMatrix3x3::getIdentity
	push	eax
	mov	ecx, OFFSET ?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B ; `btTransform::getIdentity'::`2'::identityTransform
	call	??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ; btTransform::btTransform
$LN1@getIdentit:
; Line 206
	mov	eax, OFFSET ?identityTransform@?1??getIdentity@btTransform@@SAABV2@XZ@4V2@B ; `btTransform::getIdentity'::`2'::identityTransform
; Line 207
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?getIdentity@btTransform@@SAABV1@XZ ENDP		; btTransform::getIdentity
_TEXT	ENDS
PUBLIC	??0btMatrix3x3@@QAE@ABM00000000@Z		; btMatrix3x3::btMatrix3x3
PUBLIC	?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B ; `btMatrix3x3::getIdentity'::`2'::identityMatrix
PUBLIC	??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51	; `btMatrix3x3::getIdentity'::`2'::`local static guard'
;	COMDAT ?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
_BSS	SEGMENT
?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B DB 030H DUP (?) ; `btMatrix3x3::getIdentity'::`2'::identityMatrix
_BSS	ENDS
;	COMDAT ??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51
_BSS	SEGMENT
??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51 DD 01H DUP (?) ; `btMatrix3x3::getIdentity'::`2'::`local static guard'
; Function compile flags: /Odtp /RTCsu
_BSS	ENDS
;	COMDAT ?getIdentity@btMatrix3x3@@SAABV1@XZ
_TEXT	SEGMENT
$T57915 = -36						; size = 4
$T57914 = -32						; size = 4
$T57913 = -28						; size = 4
$T57912 = -24						; size = 4
$T57911 = -20						; size = 4
$T57910 = -16						; size = 4
$T57909 = -12						; size = 4
$T57908 = -8						; size = 4
$T57907 = -4						; size = 4
?getIdentity@btMatrix3x3@@SAABV1@XZ PROC		; btMatrix3x3::getIdentity, COMDAT
; Line 331
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 340
	mov	eax, DWORD PTR ??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51
	and	eax, 1
	jne	SHORT $LN1@getIdentit@2
	mov	ecx, DWORD PTR ??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51
	or	ecx, 1
	mov	DWORD PTR ??_B?1??getIdentity@btMatrix3x3@@SAABV1@XZ@51, ecx
	fld1
	fstp	DWORD PTR $T57907[ebp]
	fldz
	fstp	DWORD PTR $T57908[ebp]
	fldz
	fstp	DWORD PTR $T57909[ebp]
	fldz
	fstp	DWORD PTR $T57910[ebp]
	fld1
	fstp	DWORD PTR $T57911[ebp]
	fldz
	fstp	DWORD PTR $T57912[ebp]
	fldz
	fstp	DWORD PTR $T57913[ebp]
	fldz
	fstp	DWORD PTR $T57914[ebp]
	fld1
	fstp	DWORD PTR $T57915[ebp]
	lea	edx, DWORD PTR $T57907[ebp]
	push	edx
	lea	eax, DWORD PTR $T57908[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57909[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57910[ebp]
	push	edx
	lea	eax, DWORD PTR $T57911[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57912[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57913[ebp]
	push	edx
	lea	eax, DWORD PTR $T57914[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57915[ebp]
	push	ecx
	mov	ecx, OFFSET ?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B ; `btMatrix3x3::getIdentity'::`2'::identityMatrix
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
$LN1@getIdentit@2:
; Line 342
	mov	eax, OFFSET ?identityMatrix@?1??getIdentity@btMatrix3x3@@SAABV2@XZ@4V2@B ; `btMatrix3x3::getIdentity'::`2'::identityMatrix
; Line 343
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getIdentity@btMatrix3x3@@SAABV1@XZ ENDP		; btMatrix3x3::getIdentity
_TEXT	ENDS
PUBLIC	?setValue@btMatrix3x3@@QAEXABM00000000@Z	; btMatrix3x3::setValue
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btMatrix3x3@@QAE@ABM00000000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xx$ = 8						; size = 4
_xy$ = 12						; size = 4
_xz$ = 16						; size = 4
_yx$ = 20						; size = 4
_yy$ = 24						; size = 4
_yz$ = 28						; size = 4
_zx$ = 32						; size = 4
_zy$ = 36						; size = 4
_zz$ = 40						; size = 4
??0btMatrix3x3@@QAE@ABM00000000@Z PROC			; btMatrix3x3::btMatrix3x3, COMDAT
; _this$ = ecx
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	push	3
	push	16					; 00000010H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
; Line 75
	mov	ecx, DWORD PTR _zz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _zy$[ebp]
	push	edx
	mov	eax, DWORD PTR _zx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yy$[ebp]
	push	edx
	mov	eax, DWORD PTR _yx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xz$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xy$[ebp]
	push	edx
	mov	eax, DWORD PTR _xx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btMatrix3x3@@QAEXABM00000000@Z ; btMatrix3x3::setValue
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
??0btMatrix3x3@@QAE@ABM00000000@Z ENDP			; btMatrix3x3::btMatrix3x3
_TEXT	ENDS
PUBLIC	?setValue@btVector3@@QAEXABM00@Z		; btVector3::setValue
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?setValue@btMatrix3x3@@QAEXABM00000000@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_xx$ = 8						; size = 4
_xy$ = 12						; size = 4
_xz$ = 16						; size = 4
_yx$ = 20						; size = 4
_yy$ = 24						; size = 4
_yz$ = 28						; size = 4
_zx$ = 32						; size = 4
_zy$ = 36						; size = 4
_zz$ = 40						; size = 4
?setValue@btMatrix3x3@@QAEXABM00000000@Z PROC		; btMatrix3x3::setValue, COMDAT
; _this$ = ecx
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 202
	mov	eax, DWORD PTR _xz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 203
	mov	eax, DWORD PTR _yz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _yy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _yx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 204
	mov	eax, DWORD PTR _zz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _zy$[ebp]
	push	ecx
	mov	edx, DWORD PTR _zx$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?setValue@btVector3@@QAEXABM00@Z	; btVector3::setValue
; Line 205
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?setValue@btMatrix3x3@@QAEXABM00000000@Z ENDP		; btMatrix3x3::setValue
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setValue@btVector3@@QAEXABM00@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
?setValue@btVector3@@QAEXABM00@Z PROC			; btVector3::setValue, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 641
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 642
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __x$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 643
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __y$[ebp]
	fld	DWORD PTR [eax]
	fstp	DWORD PTR [edx+4]
; Line 644
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR __z$[ebp]
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [ecx+8]
; Line 645
	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
; Line 646
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?setValue@btVector3@@QAEXABM00@Z ENDP			; btVector3::setValue
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 4
_c$ = 12						; size = 4
??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z PROC ; btTransform::btTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\bttransform.h
; Line 61
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0btMatrix3x3@@QAE@ABV0@@Z		; btMatrix3x3::btMatrix3x3
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0btTransform@@QAE@ABVbtMatrix3x3@@ABVbtVector3@@@Z ENDP ; btTransform::btTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ PROC ; btCollisionObject::getWorldTransform, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 309
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 310
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
; Line 311
	mov	esp, ebp
	pop	ebp
	ret	0
?getWorldTransform@btCollisionObject@@QBEABVbtTransform@@XZ ENDP ; btCollisionObject::getWorldTransform
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getSourceVertex@Edge@btConvexHullComputer@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getSourceVertex@Edge@btConvexHullComputer@@QBEHXZ PROC	; btConvexHullComputer::Edge::getSourceVertex, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btconvexhullcomputer.h
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 43
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+8]
; Line 44
	mov	esp, ebp
	pop	ebp
	ret	0
?getSourceVertex@Edge@btConvexHullComputer@@QBEHXZ ENDP	; btConvexHullComputer::Edge::getSourceVertex
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getTargetVertex@Edge@btConvexHullComputer@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getTargetVertex@Edge@btConvexHullComputer@@QBEHXZ PROC	; btConvexHullComputer::Edge::getTargetVertex, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 48
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?getTargetVertex@Edge@btConvexHullComputer@@QBEHXZ ENDP	; btConvexHullComputer::Edge::getTargetVertex
_TEXT	ENDS
PUBLIC	?getNextEdgeOfVertex@Edge@btConvexHullComputer@@QBEPBV12@XZ ; btConvexHullComputer::Edge::getNextEdgeOfVertex
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?getNextEdgeOfFace@Edge@btConvexHullComputer@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNextEdgeOfFace@Edge@btConvexHullComputer@@QBEPBV12@XZ PROC ; btConvexHullComputer::Edge::getNextEdgeOfFace, COMDAT
; _this$ = ecx
; Line 57
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 58
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	add	ecx, DWORD PTR _this$[ebp]
	call	?getNextEdgeOfVertex@Edge@btConvexHullComputer@@QBEPBV12@XZ ; btConvexHullComputer::Edge::getNextEdgeOfVertex
; Line 59
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?getNextEdgeOfFace@Edge@btConvexHullComputer@@QBEPBV12@XZ ENDP ; btConvexHullComputer::Edge::getNextEdgeOfFace
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?getNextEdgeOfVertex@Edge@btConvexHullComputer@@QBEPBV12@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?getNextEdgeOfVertex@Edge@btConvexHullComputer@@QBEPBV12@XZ PROC ; btConvexHullComputer::Edge::getNextEdgeOfVertex, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	imul	eax, 12					; 0000000cH
	add	eax, DWORD PTR _this$[ebp]
; Line 54
	mov	esp, ebp
	pop	ebp
	ret	0
?getNextEdgeOfVertex@Edge@btConvexHullComputer@@QBEPBV12@XZ ENDP ; btConvexHullComputer::Edge::getNextEdgeOfVertex
_TEXT	ENDS
EXTRN	?compute@btConvexHullComputer@@AAEMPBX_NHHMM@Z:PROC ; btConvexHullComputer::compute
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?compute@btConvexHullComputer@@QAEMPBMHHMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_coords$ = 8						; size = 4
_stride$ = 12						; size = 4
_count$ = 16						; size = 4
_shrink$ = 20						; size = 4
_shrinkClamp$ = 24					; size = 4
?compute@btConvexHullComputer@@QAEMPBMHHMM@Z PROC	; btConvexHullComputer::compute, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	push	ecx
	fld	DWORD PTR _shrinkClamp$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _shrink$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _coords$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?compute@btConvexHullComputer@@AAEMPBX_NHHMM@Z ; btConvexHullComputer::compute
; Line 92
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?compute@btConvexHullComputer@@QAEMPBMHHMM@Z ENDP	; btConvexHullComputer::compute
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?drawVertex@@YAXPAVbtIDebugDraw@@ABVbtVector3@@M1@Z
_TEXT	SEGMENT
$T57949 = -240						; size = 4
$T57948 = -236						; size = 4
$T57947 = -232						; size = 4
$T57946 = -228						; size = 4
$T57945 = -224						; size = 4
$T57944 = -220						; size = 4
$T57943 = -216						; size = 4
$T57942 = -212						; size = 4
$T57941 = -208						; size = 4
$T57940 = -204						; size = 4
$T57939 = -200						; size = 4
$T57938 = -196						; size = 4
$T23055 = -192						; size = 16
$T23052 = -176						; size = 16
$T23051 = -160						; size = 16
$T23048 = -144						; size = 16
$T23047 = -128						; size = 16
$T23044 = -112						; size = 16
$T23043 = -96						; size = 16
$T23040 = -80						; size = 16
$T23039 = -64						; size = 16
$T23036 = -48						; size = 16
$T23035 = -32						; size = 16
$T23032 = -16						; size = 16
_idraw$ = 8						; size = 4
_x$ = 12						; size = 4
_s$ = 16						; size = 4
_c$ = 20						; size = 4
?drawVertex@@YAXPAVbtIDebugDraw@@ABVbtVector3@@M1@Z PROC ; drawVertex, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
; Line 29
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 30
	fldz
	fstp	DWORD PTR $T57938[ebp]
	fldz
	fstp	DWORD PTR $T57939[ebp]
	fldz
	fstp	DWORD PTR $T57940[ebp]
	fldz
	fstp	DWORD PTR $T57941[ebp]
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T57938[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57939[ebp]
	push	edx
	lea	eax, DWORD PTR _s$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T23036[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	ecx, DWORD PTR _x$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T23039[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T57940[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57941[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebx]
	push	edx
	lea	ecx, DWORD PTR $T23032[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	eax, DWORD PTR _x$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T23035[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 31
	fldz
	fstp	DWORD PTR $T57942[ebp]
	fldz
	fstp	DWORD PTR $T57943[ebp]
	fldz
	fstp	DWORD PTR $T57944[ebp]
	fldz
	fstp	DWORD PTR $T57945[ebp]
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T57942[ebp]
	push	ecx
	lea	edx, DWORD PTR _s$[ebx]
	push	edx
	lea	eax, DWORD PTR $T57943[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23044[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	ecx, DWORD PTR _x$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T23047[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T57944[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T57945[ebp]
	push	edx
	lea	ecx, DWORD PTR $T23040[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	eax, DWORD PTR _x$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T23043[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 32
	fldz
	fstp	DWORD PTR $T57946[ebp]
	fldz
	fstp	DWORD PTR $T57947[ebp]
	fldz
	fstp	DWORD PTR $T57948[ebp]
	fldz
	fstp	DWORD PTR $T57949[ebp]
	mov	esi, esp
	mov	eax, DWORD PTR _c$[ebx]
	push	eax
	lea	ecx, DWORD PTR _s$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T57946[ebp]
	push	edx
	lea	eax, DWORD PTR $T57947[ebp]
	push	eax
	lea	ecx, DWORD PTR $T23052[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	ecx, DWORD PTR _x$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T23055[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _s$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T57948[ebp]
	push	ecx
	lea	edx, DWORD PTR $T57949[ebp]
	push	edx
	lea	ecx, DWORD PTR $T23048[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	mov	eax, DWORD PTR _x$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T23051[ebp]
	push	ecx
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 33
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?drawVertex@@YAXPAVbtIDebugDraw@@ABVbtVector3@@M1@Z ENDP ; drawVertex
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@H@@QAE@XZ		; btAlignedObjectArray<int>::btAlignedObjectArray<int>
PUBLIC	??0?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::btAlignedObjectArray<btConvexHullComputer::Edge>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0btConvexHullComputer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0btConvexHullComputer@@QAE@XZ PROC			; btConvexHullComputer::btConvexHullComputer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::btAlignedObjectArray<btConvexHullComputer::Edge>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0btConvexHullComputer@@QAE@XZ ENDP			; btConvexHullComputer::btConvexHullComputer
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::~btAlignedObjectArray<btConvexHullComputer::Edge>
PUBLIC	??1?$btAlignedObjectArray@H@@QAE@XZ		; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1btConvexHullComputer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1btConvexHullComputer@@QAE@XZ PROC			; btConvexHullComputer::~btConvexHullComputer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::~btAlignedObjectArray<btConvexHullComputer::Edge>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1btConvexHullComputer@@QAE@XZ ENDP			; btConvexHullComputer::~btConvexHullComputer
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?DrawInfos@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@_N22@Z ; btSoftBodyHelpers::DrawInfos
EXTRN	_strcat:PROC
EXTRN	_sprintf:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?DrawInfos@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@_N22@Z
_TEXT	SEGMENT
_buff$51060 = -3096					; size = 1024
_text$51059 = -2064					; size = 2048
_n$51058 = -12						; size = 4
_i$51054 = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_psb$ = 8						; size = 4
_idraw$ = 12						; size = 4
_masses$ = 16						; size = 1
_areas$ = 20						; size = 1
___formal$ = 24						; size = 1
?DrawInfos@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@_N22@Z PROC ; btSoftBodyHelpers::DrawInfos, COMDAT
; Line 528
	push	ebp
	mov	ebp, esp
	sub	esp, 3100				; 00000c1cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-3100]
	mov	ecx, 775				; 00000307H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 529
	mov	DWORD PTR _i$51054[ebp], 0
	jmp	SHORT $LN6@DrawInfos
$LN5@DrawInfos:
	mov	eax, DWORD PTR _i$51054[ebp]
	add	eax, 1
	mov	DWORD PTR _i$51054[ebp], eax
$LN6@DrawInfos:
	mov	ecx, DWORD PTR _psb$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	cmp	DWORD PTR _i$51054[ebp], eax
	jge	$LN4@DrawInfos
; Line 531
	mov	ecx, DWORD PTR _i$51054[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	add	ecx, 732				; 000002dcH
	call	??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ; btAlignedObjectArray<btSoftBody::Node>::operator[]
	mov	DWORD PTR _n$51058[ebp], eax
; Line 532
	mov	BYTE PTR _text$51059[ebp], 0
	push	2047					; 000007ffH
	push	0
	lea	edx, DWORD PTR _text$51059[ebp+1]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 534
	movzx	eax, BYTE PTR _masses$[ebp]
	test	eax, eax
	je	SHORT $LN3@DrawInfos
; Line 536
	mov	ecx, DWORD PTR _n$51058[ebp]
	fld1
	fdiv	DWORD PTR [ecx+96]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG51062
	lea	edx, DWORD PTR _buff$51060[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 537
	lea	eax, DWORD PTR _buff$51060[ebp]
	push	eax
	lea	ecx, DWORD PTR _text$51059[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
$LN3@DrawInfos:
; Line 539
	movzx	edx, BYTE PTR _areas$[ebp]
	test	edx, edx
	je	SHORT $LN2@DrawInfos
; Line 541
	mov	eax, DWORD PTR _n$51058[ebp]
	fld	DWORD PTR [eax+100]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET $SG51064
	lea	ecx, DWORD PTR _buff$51060[ebp]
	push	ecx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 542
	lea	edx, DWORD PTR _buff$51060[ebp]
	push	edx
	lea	eax, DWORD PTR _text$51059[ebp]
	push	eax
	call	_strcat
	add	esp, 8
$LN2@DrawInfos:
; Line 544
	movsx	ecx, BYTE PTR _text$51059[ebp]
	test	ecx, ecx
	je	SHORT $LN1@DrawInfos
	mov	esi, esp
	lea	edx, DWORD PTR _text$51059[ebp]
	push	edx
	mov	eax, DWORD PTR _n$51058[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawInfos:
; Line 545
	jmp	$LN5@DrawInfos
$LN4@DrawInfos:
; Line 546
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@DrawInfos
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 3100				; 00000c1cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@DrawInfos:
	DD	2
	DD	$LN11@DrawInfos
$LN11@DrawInfos:
	DD	-2064					; fffff7f0H
	DD	2048					; 00000800H
	DD	$LN9@DrawInfos
	DD	-3096					; fffff3e8H
	DD	1024					; 00000400H
	DD	$LN10@DrawInfos
$LN10@DrawInfos:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	0
$LN9@DrawInfos:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
?DrawInfos@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@_N22@Z ENDP ; btSoftBodyHelpers::DrawInfos
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DrawNodeTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z
_TEXT	SEGMENT
$T57969 = -56						; size = 4
$T57968 = -52						; size = 4
$T57967 = -48						; size = 4
$T57966 = -44						; size = 4
$T57965 = -40						; size = 4
$T57964 = -36						; size = 4
$T51076 = -32						; size = 16
$T51072 = -16						; size = 16
_psb$ = 8						; size = 4
_idraw$ = 12						; size = 4
_mindepth$ = 16						; size = 4
_maxdepth$ = 20						; size = 4
?DrawNodeTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z PROC ; btSoftBodyHelpers::DrawNodeTree, COMDAT
; Line 553
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 554
	fld1
	fstp	DWORD PTR $T57964[ebp]
	fld1
	fstp	DWORD PTR $T57965[ebp]
	fld1
	fstp	DWORD PTR $T57966[ebp]
	fld1
	fstp	DWORD PTR $T57967[ebp]
	fldz
	fstp	DWORD PTR $T57968[ebp]
	fld1
	fstp	DWORD PTR $T57969[ebp]
	mov	eax, DWORD PTR _maxdepth$[ebx]
	push	eax
	mov	ecx, DWORD PTR _mindepth$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T57964[ebp]
	push	edx
	lea	eax, DWORD PTR $T57965[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57966[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T51076[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	edx, DWORD PTR $T57967[ebp]
	push	edx
	lea	eax, DWORD PTR $T57968[ebp]
	push	eax
	lea	ecx, DWORD PTR $T57969[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T51072[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	push	0
	mov	edx, DWORD PTR _psb$[ebx]
	mov	eax, DWORD PTR [edx+964]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	push	ecx
	call	?drawTree@@YAXPAVbtIDebugDraw@@PBUbtDbvtNode@@HABVbtVector3@@2HH@Z ; drawTree
	add	esp, 28					; 0000001cH
; Line 555
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?DrawNodeTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ENDP ; btSoftBodyHelpers::DrawNodeTree
_TEXT	ENDS
PUBLIC	?isleaf@btDbvtNode@@QBE_NXZ			; btDbvtNode::isleaf
PUBLIC	?Center@btDbvtAabbMm@@QBE?AVbtVector3@@XZ	; btDbvtAabbMm::Center
PUBLIC	?Extents@btDbvtAabbMm@@QBE?AVbtVector3@@XZ	; btDbvtAabbMm::Extents
PUBLIC	?isinternal@btDbvtNode@@QBE_NXZ			; btDbvtNode::isinternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?drawTree@@YAXPAVbtIDebugDraw@@PBUbtDbvtNode@@HABVbtVector3@@2HH@Z
_TEXT	SEGMENT
tv160 = -204						; size = 4
tv188 = -200						; size = 4
$T57972 = -196						; size = 4
$T23094 = -192						; size = 16
$T23093 = -176						; size = 16
$T23092 = -160						; size = 16
_mx$23091 = -128					; size = 16
$T23089 = -96						; size = 16
$T23088 = -80						; size = 16
$T23087 = -64						; size = 16
_mi$23086 = -32						; size = 16
_scl$23084 = -8						; size = 4
_idraw$ = 8						; size = 4
_node$ = 12						; size = 4
_depth$ = 16						; size = 4
_ncolor$ = 20						; size = 4
_lcolor$ = 24						; size = 4
_mindepth$ = 28						; size = 4
_maxdepth$ = 32						; size = 4
?drawTree@@YAXPAVbtIDebugDraw@@PBUbtDbvtNode@@HABVbtVector3@@2HH@Z PROC ; drawTree, COMDAT
; Line 66
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 67
	cmp	DWORD PTR _node$[ebx], 0
	je	$LN1@drawTree
; Line 69
	mov	ecx, DWORD PTR _node$[ebx]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@drawTree
	mov	ecx, DWORD PTR _depth$[ebx]
	cmp	ecx, DWORD PTR _maxdepth$[ebx]
	jl	SHORT $LN2@drawTree
	cmp	DWORD PTR _maxdepth$[ebx], 0
	jge	SHORT $LN3@drawTree
$LN2@drawTree:
; Line 71
	mov	edx, DWORD PTR _maxdepth$[ebx]
	push	edx
	mov	eax, DWORD PTR _mindepth$[ebx]
	push	eax
	mov	ecx, DWORD PTR _lcolor$[ebx]
	push	ecx
	mov	edx, DWORD PTR _ncolor$[ebx]
	push	edx
	mov	eax, DWORD PTR _depth$[ebx]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _node$[ebx]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _idraw$[ebx]
	push	eax
	call	?drawTree@@YAXPAVbtIDebugDraw@@PBUbtDbvtNode@@HABVbtVector3@@2HH@Z ; drawTree
	add	esp, 28					; 0000001cH
; Line 72
	mov	ecx, DWORD PTR _maxdepth$[ebx]
	push	ecx
	mov	edx, DWORD PTR _mindepth$[ebx]
	push	edx
	mov	eax, DWORD PTR _lcolor$[ebx]
	push	eax
	mov	ecx, DWORD PTR _ncolor$[ebx]
	push	ecx
	mov	edx, DWORD PTR _depth$[ebx]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _node$[ebx]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _idraw$[ebx]
	push	edx
	call	?drawTree@@YAXPAVbtIDebugDraw@@PBUbtDbvtNode@@HABVbtVector3@@2HH@Z ; drawTree
	add	esp, 28					; 0000001cH
$LN3@drawTree:
; Line 74
	mov	eax, DWORD PTR _depth$[ebx]
	cmp	eax, DWORD PTR _mindepth$[ebx]
	jl	$LN1@drawTree
; Line 76
	mov	ecx, DWORD PTR _node$[ebx]
	call	?isinternal@btDbvtNode@@QBE_NXZ		; btDbvtNode::isinternal
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 0
	add	ecx, 1
	mov	DWORD PTR tv188[ebp], ecx
	fild	DWORD PTR tv188[ebp]
	fstp	DWORD PTR _scl$23084[ebp]
; Line 77
	lea	edx, DWORD PTR _scl$23084[ebp]
	push	edx
	lea	eax, DWORD PTR $T23088[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebx]
	call	?Extents@btDbvtAabbMm@@QBE?AVbtVector3@@XZ ; btDbvtAabbMm::Extents
	push	eax
	lea	ecx, DWORD PTR $T23089[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR $T23087[ebp]
	push	edx
	mov	ecx, DWORD PTR _node$[ebx]
	call	?Center@btDbvtAabbMm@@QBE?AVbtVector3@@XZ ; btDbvtAabbMm::Center
	push	eax
	lea	eax, DWORD PTR _mi$23086[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
; Line 78
	lea	ecx, DWORD PTR _scl$23084[ebp]
	push	ecx
	lea	edx, DWORD PTR $T23093[ebp]
	push	edx
	mov	ecx, DWORD PTR _node$[ebx]
	call	?Extents@btDbvtAabbMm@@QBE?AVbtVector3@@XZ ; btDbvtAabbMm::Extents
	push	eax
	lea	eax, DWORD PTR $T23094[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR $T23092[ebp]
	push	ecx
	mov	ecx, DWORD PTR _node$[ebx]
	call	?Center@btDbvtAabbMm@@QBE?AVbtVector3@@XZ ; btDbvtAabbMm::Center
	push	eax
	lea	edx, DWORD PTR _mx$23091[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 79
	mov	ecx, DWORD PTR _node$[ebx]
	call	?isleaf@btDbvtNode@@QBE_NXZ		; btDbvtNode::isleaf
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@drawTree
	mov	ecx, DWORD PTR _lcolor$[ebx]
	mov	DWORD PTR tv160[ebp], ecx
	jmp	SHORT $LN8@drawTree
$LN7@drawTree:
	mov	edx, DWORD PTR _ncolor$[ebx]
	mov	DWORD PTR tv160[ebp], edx
$LN8@drawTree:
	mov	eax, DWORD PTR tv160[ebp]
	mov	DWORD PTR $T57972[ebp], eax
	mov	ecx, DWORD PTR $T57972[ebp]
	push	ecx
	lea	edx, DWORD PTR _mx$23091[ebp]
	push	edx
	lea	eax, DWORD PTR _mi$23086[ebp]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	push	ecx
	call	?drawBox@@YAXPAVbtIDebugDraw@@ABVbtVector3@@11@Z ; drawBox
	add	esp, 16					; 00000010H
$LN1@drawTree:
; Line 82
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@drawTree
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN13@drawTree:
	DD	3
	DD	$LN12@drawTree
$LN12@drawTree:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN9@drawTree
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN10@drawTree
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN11@drawTree
$LN11@drawTree:
	DB	109					; 0000006dH
	DB	120					; 00000078H
	DB	0
$LN10@drawTree:
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
$LN9@drawTree:
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	0
?drawTree@@YAXPAVbtIDebugDraw@@PBUbtDbvtNode@@HABVbtVector3@@2HH@Z ENDP ; drawTree
_TEXT	ENDS
PUBLIC	__real@40000000
;	COMDAT __real@40000000
; File d:\專題\自建專案\自建專案\src\bulletcollision\broadphasecollision\btdbvt.h
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Center@btDbvtAabbMm@@QBE?AVbtVector3@@XZ
_TEXT	SEGMENT
$T57982 = -36						; size = 4
$T12713 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Center@btDbvtAabbMm@@QBE?AVbtVector3@@XZ PROC		; btDbvtAabbMm::Center, COMDAT
; _this$ = ecx
; Line 132
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR $T57982[ebp]
	lea	eax, DWORD PTR $T57982[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	eax, DWORD PTR $T12713[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	push	ecx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?Center@btDbvtAabbMm@@QBE?AVbtVector3@@XZ ENDP		; btDbvtAabbMm::Center
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Extents@btDbvtAabbMm@@QBE?AVbtVector3@@XZ
_TEXT	SEGMENT
$T57987 = -36						; size = 4
$T12723 = -32						; size = 16
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Extents@btDbvtAabbMm@@QBE?AVbtVector3@@XZ PROC		; btDbvtAabbMm::Extents, COMDAT
; _this$ = ecx
; Line 134
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR $T57987[ebp]
	lea	eax, DWORD PTR $T57987[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	lea	eax, DWORD PTR $T12723[ebp]
	push	eax
	call	??G@YA?AVbtVector3@@ABV0@0@Z		; operator-
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebx]
	push	ecx
	call	??K@YA?AVbtVector3@@ABV0@ABM@Z		; operator/
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR ___$ReturnUdt$[ebx]
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
?Extents@btDbvtAabbMm@@QBE?AVbtVector3@@XZ ENDP		; btDbvtAabbMm::Extents
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?isleaf@btDbvtNode@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isleaf@btDbvtNode@@QBE_NXZ PROC			; btDbvtNode::isleaf, COMDAT
; _this$ = ecx
; Line 181
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+40], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?isleaf@btDbvtNode@@QBE_NXZ ENDP			; btDbvtNode::isleaf
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?isinternal@btDbvtNode@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?isinternal@btDbvtNode@@QBE_NXZ PROC			; btDbvtNode::isinternal, COMDAT
; _this$ = ecx
; Line 182
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isleaf@btDbvtNode@@QBE_NXZ		; btDbvtNode::isleaf
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isinternal@btDbvtNode@@QBE_NXZ ENDP			; btDbvtNode::isinternal
_TEXT	ENDS
PUBLIC	?x@btVector3@@QBEABMXZ				; btVector3::x
PUBLIC	?y@btVector3@@QBEABMXZ				; btVector3::y
PUBLIC	?z@btVector3@@QBEABMXZ				; btVector3::z
PUBLIC	__$ArrayPad$
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?drawBox@@YAXPAVbtIDebugDraw@@ABVbtVector3@@11@Z
_TEXT	SEGMENT
_c$ = -144						; size = 128
__$ArrayPad$ = -4					; size = 4
_idraw$ = 8						; size = 4
_mins$ = 12						; size = 4
_maxs$ = 16						; size = 4
_color$ = 20						; size = 4
?drawBox@@YAXPAVbtIDebugDraw@@ABVbtVector3@@11@Z PROC	; drawBox, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
; Line 40
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 39					; 00000027H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 41
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR _c$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 42
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR _c$[ebp+16]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 43
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR _c$[ebp+32]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 44
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR _c$[ebp+48]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 45
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR _c$[ebp+64]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 46
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR _c$[ebp+80]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 47
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR _c$[ebp+96]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 49
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	push	eax
	mov	ecx, DWORD PTR _maxs$[ebx]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	push	eax
	mov	ecx, DWORD PTR _mins$[ebx]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	push	eax
	lea	ecx, DWORD PTR _c$[ebp+112]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
; Line 50
	mov	esi, esp
	mov	eax, DWORD PTR _color$[ebx]
	push	eax
	lea	ecx, DWORD PTR _c$[ebp+16]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+32]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 51
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+48]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+32]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+48]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 52
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+80]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+64]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+96]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+80]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 53
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+112]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+96]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+64]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+112]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 54
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+64]
	push	edx
	lea	eax, DWORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+80]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 55
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+96]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+32]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	mov	ecx, DWORD PTR _color$[ebx]
	push	ecx
	lea	edx, DWORD PTR _c$[ebp+112]
	push	edx
	lea	eax, DWORD PTR _c$[ebp+48]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 56
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@drawBox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN5@drawBox:
	DD	1
	DD	$LN4@drawBox
$LN4@drawBox:
	DD	-144					; ffffff70H
	DD	128					; 00000080H
	DD	$LN3@drawBox
$LN3@drawBox:
	DB	99					; 00000063H
	DB	0
?drawBox@@YAXPAVbtIDebugDraw@@ABVbtVector3@@11@Z ENDP	; drawBox
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?x@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?x@btVector3@@QBEABMXZ PROC				; btVector3::x, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 575
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?x@btVector3@@QBEABMXZ ENDP				; btVector3::x
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?y@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?y@btVector3@@QBEABMXZ PROC				; btVector3::y, COMDAT
; _this$ = ecx
; Line 577
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	esp, ebp
	pop	ebp
	ret	0
?y@btVector3@@QBEABMXZ ENDP				; btVector3::y
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?z@btVector3@@QBEABMXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?z@btVector3@@QBEABMXZ PROC				; btVector3::z, COMDAT
; _this$ = ecx
; Line 579
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esp, ebp
	pop	ebp
	ret	0
?z@btVector3@@QBEABMXZ ENDP				; btVector3::z
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DrawFaceTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z
_TEXT	SEGMENT
$T58011 = -56						; size = 4
$T58010 = -52						; size = 4
$T58009 = -48						; size = 4
$T58008 = -44						; size = 4
$T58007 = -40						; size = 4
$T58006 = -36						; size = 4
$T51090 = -32						; size = 16
$T51086 = -16						; size = 16
_psb$ = 8						; size = 4
_idraw$ = 12						; size = 4
_mindepth$ = 16						; size = 4
_maxdepth$ = 20						; size = 4
?DrawFaceTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z PROC ; btSoftBodyHelpers::DrawFaceTree, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
; Line 562
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 563
	fldz
	fstp	DWORD PTR $T58006[ebp]
	fldz
	fstp	DWORD PTR $T58007[ebp]
	fld1
	fstp	DWORD PTR $T58008[ebp]
	fldz
	fstp	DWORD PTR $T58009[ebp]
	fld1
	fstp	DWORD PTR $T58010[ebp]
	fldz
	fstp	DWORD PTR $T58011[ebp]
	mov	eax, DWORD PTR _maxdepth$[ebx]
	push	eax
	mov	ecx, DWORD PTR _mindepth$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T58006[ebp]
	push	edx
	lea	eax, DWORD PTR $T58007[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58008[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T51090[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	edx, DWORD PTR $T58009[ebp]
	push	edx
	lea	eax, DWORD PTR $T58010[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58011[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T51086[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	push	0
	mov	edx, DWORD PTR _psb$[ebx]
	mov	eax, DWORD PTR [edx+1024]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	push	ecx
	call	?drawTree@@YAXPAVbtIDebugDraw@@PBUbtDbvtNode@@HABVbtVector3@@2HH@Z ; drawTree
	add	esp, 28					; 0000001cH
; Line 564
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?DrawFaceTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ENDP ; btSoftBodyHelpers::DrawFaceTree
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DrawClusterTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z
_TEXT	SEGMENT
$T58019 = -56						; size = 4
$T58018 = -52						; size = 4
$T58017 = -48						; size = 4
$T58016 = -44						; size = 4
$T58015 = -40						; size = 4
$T58014 = -36						; size = 4
$T51104 = -32						; size = 16
$T51100 = -16						; size = 16
_psb$ = 8						; size = 4
_idraw$ = 12						; size = 4
_mindepth$ = 16						; size = 4
_maxdepth$ = 20						; size = 4
?DrawClusterTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z PROC ; btSoftBodyHelpers::DrawClusterTree, COMDAT
; Line 571
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 572
	fldz
	fstp	DWORD PTR $T58014[ebp]
	fldz
	fstp	DWORD PTR $T58015[ebp]
	fld1
	fstp	DWORD PTR $T58016[ebp]
	fld1
	fstp	DWORD PTR $T58017[ebp]
	fld1
	fstp	DWORD PTR $T58018[ebp]
	fldz
	fstp	DWORD PTR $T58019[ebp]
	mov	eax, DWORD PTR _maxdepth$[ebx]
	push	eax
	mov	ecx, DWORD PTR _mindepth$[ebx]
	push	ecx
	lea	edx, DWORD PTR $T58014[ebp]
	push	edx
	lea	eax, DWORD PTR $T58015[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58016[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T51104[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	edx, DWORD PTR $T58017[ebp]
	push	edx
	lea	eax, DWORD PTR $T58018[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58019[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T51100[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	push	0
	mov	edx, DWORD PTR _psb$[ebx]
	mov	eax, DWORD PTR [edx+1084]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	push	ecx
	call	?drawTree@@YAXPAVbtIDebugDraw@@PBUbtDbvtNode@@HABVbtVector3@@2HH@Z ; drawTree
	add	esp, 28					; 0000001cH
; Line 573
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?DrawClusterTree@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@HH@Z ENDP ; btSoftBodyHelpers::DrawClusterTree
_TEXT	ENDS
PUBLIC	??D@YA?AVbtMatrix3x3@@ABV0@0@Z			; operator*
PUBLIC	__$ArrayPad$
PUBLIC	?DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z ; btSoftBodyHelpers::DrawFrame
;	COMDAT ?nscl@?4??DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z@4MB
CONST	SEGMENT
?nscl@?4??DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z@4MB DD 03dcccccdr ; 0.1 ; `btSoftBodyHelpers::DrawFrame'::`5'::nscl
CONST	ENDS
;	COMDAT ?ascl@?4??DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z@4MB
CONST	SEGMENT
?ascl@?4??DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z@4MB DD 041200000r ; 10 ; `btSoftBodyHelpers::DrawFrame'::`5'::ascl
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z
_TEXT	SEGMENT
$T58043 = -644						; size = 4
$T58042 = -640						; size = 4
$T58041 = -636						; size = 4
$T58040 = -632						; size = 4
$T58039 = -628						; size = 4
$T58038 = -624						; size = 4
$T58037 = -620						; size = 4
$T58036 = -616						; size = 4
$T58035 = -612						; size = 4
$T58034 = -608						; size = 4
$T58033 = -604						; size = 4
$T58032 = -600						; size = 4
$T58031 = -596						; size = 4
$T58030 = -592						; size = 4
$T58029 = -588						; size = 4
$T58028 = -584						; size = 4
$T58027 = -580						; size = 4
$T58026 = -576						; size = 4
$T58025 = -572						; size = 4
$T58024 = -568						; size = 4
$T58023 = -564						; size = 4
$T51167 = -560						; size = 16
$T51165 = -544						; size = 16
_x$51164 = -512						; size = 16
_i$51160 = -484						; size = 4
$T51156 = -480						; size = 16
$T51155 = -464						; size = 16
$T51154 = -448						; size = 16
$T51150 = -432						; size = 16
$T51149 = -416						; size = 16
$T51148 = -400						; size = 16
$T51144 = -384						; size = 16
$T51143 = -368						; size = 16
$T51142 = -352						; size = 16
$T51140 = -336						; size = 16
$T51136 = -320						; size = 16
_Zaxis$51135 = -288					; size = 16
$T51133 = -256						; size = 16
$T51129 = -240						; size = 16
_Yaxis$51128 = -208					; size = 16
$T51126 = -176						; size = 16
$T51122 = -160						; size = 16
_Xaxis$51121 = -128					; size = 16
_trs$51119 = -96					; size = 48
_com$51118 = -32					; size = 16
__$ArrayPad$ = -4					; size = 4
_psb$ = 8						; size = 4
_idraw$ = 12						; size = 4
?DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z PROC ; btSoftBodyHelpers::DrawFrame, COMDAT
; Line 578
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 652				; 0000028cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-652]
	mov	ecx, 163				; 000000a3H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 579
	mov	eax, DWORD PTR _psb$[ebx]
	movzx	ecx, BYTE PTR [eax+497]
	test	ecx, ecx
	je	$LN1@DrawFrame
; Line 583
	mov	edx, DWORD PTR _psb$[ebx]
	add	edx, 544				; 00000220H
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _com$51118[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _com$51118[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _com$51118[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _com$51118[ebp+12], ecx
; Line 584
	mov	edx, DWORD PTR _psb$[ebx]
	add	edx, 608				; 00000260H
	push	edx
	mov	eax, DWORD PTR _psb$[ebx]
	add	eax, 560				; 00000230H
	push	eax
	lea	ecx, DWORD PTR _trs$51119[ebp]
	push	ecx
	call	??D@YA?AVbtMatrix3x3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
; Line 585
	fldz
	fstp	DWORD PTR $T58023[ebp]
	fldz
	fstp	DWORD PTR $T58024[ebp]
	fld1
	fstp	DWORD PTR $T58025[ebp]
	lea	edx, DWORD PTR _Xaxis$51121[ebp]
	push	edx
	lea	eax, DWORD PTR $T58023[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58024[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58025[ebp]
	push	edx
	lea	ecx, DWORD PTR $T51122[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	eax, DWORD PTR _trs$51119[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51126[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
; Line 586
	fldz
	fstp	DWORD PTR $T58026[ebp]
	fld1
	fstp	DWORD PTR $T58027[ebp]
	fldz
	fstp	DWORD PTR $T58028[ebp]
	lea	edx, DWORD PTR _Yaxis$51128[ebp]
	push	edx
	lea	eax, DWORD PTR $T58026[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58027[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58028[ebp]
	push	edx
	lea	ecx, DWORD PTR $T51129[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	eax, DWORD PTR _trs$51119[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51133[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
; Line 587
	fld1
	fstp	DWORD PTR $T58029[ebp]
	fldz
	fstp	DWORD PTR $T58030[ebp]
	fldz
	fstp	DWORD PTR $T58031[ebp]
	lea	edx, DWORD PTR _Zaxis$51135[ebp]
	push	edx
	lea	eax, DWORD PTR $T58029[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58030[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58031[ebp]
	push	edx
	lea	ecx, DWORD PTR $T51136[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	lea	eax, DWORD PTR _trs$51119[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51140[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	?normalized@btVector3@@QBE?AV1@XZ	; btVector3::normalized
; Line 588
	fldz
	fstp	DWORD PTR $T58032[ebp]
	fldz
	fstp	DWORD PTR $T58033[ebp]
	fld1
	fstp	DWORD PTR $T58034[ebp]
	lea	edx, DWORD PTR $T58032[ebp]
	push	edx
	lea	eax, DWORD PTR $T58033[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58034[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T51144[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	push	OFFSET ?ascl@?4??DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z@4MB
	lea	edx, DWORD PTR _Xaxis$51121[ebp]
	push	edx
	lea	eax, DWORD PTR $T51142[ebp]
	push	eax
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _com$51118[ebp]
	push	ecx
	lea	edx, DWORD PTR $T51143[ebp]
	push	edx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _com$51118[ebp]
	push	eax
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 589
	fldz
	fstp	DWORD PTR $T58035[ebp]
	fld1
	fstp	DWORD PTR $T58036[ebp]
	fldz
	fstp	DWORD PTR $T58037[ebp]
	lea	ecx, DWORD PTR $T58035[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58036[ebp]
	push	edx
	lea	eax, DWORD PTR $T58037[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51150[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	push	OFFSET ?ascl@?4??DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z@4MB
	lea	ecx, DWORD PTR _Yaxis$51128[ebp]
	push	ecx
	lea	edx, DWORD PTR $T51148[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _com$51118[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51149[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _com$51118[ebp]
	push	edx
	mov	eax, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 590
	fld1
	fstp	DWORD PTR $T58038[ebp]
	fldz
	fstp	DWORD PTR $T58039[ebp]
	fldz
	fstp	DWORD PTR $T58040[ebp]
	lea	ecx, DWORD PTR $T58038[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58039[ebp]
	push	edx
	lea	eax, DWORD PTR $T58040[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51156[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, esp
	push	eax
	push	OFFSET ?ascl@?4??DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z@4MB
	lea	ecx, DWORD PTR _Zaxis$51135[ebp]
	push	ecx
	lea	edx, DWORD PTR $T51154[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@ABM@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR _com$51118[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51155[ebp]
	push	ecx
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _com$51118[ebp]
	push	edx
	mov	eax, DWORD PTR _idraw$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _idraw$[ebx]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 591
	mov	DWORD PTR _i$51160[ebp], 0
	jmp	SHORT $LN3@DrawFrame
$LN2@DrawFrame:
	mov	ecx, DWORD PTR _i$51160[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$51160[ebp], ecx
$LN3@DrawFrame:
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 504				; 000001f8H
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	cmp	DWORD PTR _i$51160[ebp], eax
	jge	$LN1@DrawFrame
; Line 593
	mov	edx, DWORD PTR _i$51160[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebx]
	add	ecx, 504				; 000001f8H
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	lea	eax, DWORD PTR _trs$51119[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51165[ebp]
	push	ecx
	call	??D@YA?AVbtVector3@@ABVbtMatrix3x3@@ABV0@@Z ; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	edx, DWORD PTR _com$51118[ebp]
	push	edx
	lea	eax, DWORD PTR _x$51164[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
; Line 594
	fld1
	fstp	DWORD PTR $T58041[ebp]
	fldz
	fstp	DWORD PTR $T58042[ebp]
	fld1
	fstp	DWORD PTR $T58043[ebp]
	lea	ecx, DWORD PTR $T58041[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58042[ebp]
	push	edx
	lea	eax, DWORD PTR $T58043[ebp]
	push	eax
	lea	ecx, DWORD PTR $T51167[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	push	eax
	push	ecx
	fld	DWORD PTR ?nscl@?4??DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z@4MB
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _x$51164[ebp]
	push	ecx
	mov	edx, DWORD PTR _idraw$[ebx]
	push	edx
	call	?drawVertex@@YAXPAVbtIDebugDraw@@ABVbtVector3@@M1@Z ; drawVertex
	add	esp, 16					; 00000010H
; Line 595
	jmp	$LN2@DrawFrame
$LN1@DrawFrame:
; Line 597
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@DrawFrame
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN14@DrawFrame:
	DD	6
	DD	$LN13@DrawFrame
$LN13@DrawFrame:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN7@DrawFrame
	DD	-96					; ffffffa0H
	DD	48					; 00000030H
	DD	$LN8@DrawFrame
	DD	-128					; ffffff80H
	DD	16					; 00000010H
	DD	$LN9@DrawFrame
	DD	-208					; ffffff30H
	DD	16					; 00000010H
	DD	$LN10@DrawFrame
	DD	-288					; fffffee0H
	DD	16					; 00000010H
	DD	$LN11@DrawFrame
	DD	-512					; fffffe00H
	DD	16					; 00000010H
	DD	$LN12@DrawFrame
$LN12@DrawFrame:
	DB	120					; 00000078H
	DB	0
$LN11@DrawFrame:
	DB	90					; 0000005aH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN10@DrawFrame:
	DB	89					; 00000059H
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN9@DrawFrame:
	DB	88					; 00000058H
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN8@DrawFrame:
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN7@DrawFrame:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	0
?DrawFrame@btSoftBodyHelpers@@SAXPAVbtSoftBody@@PAVbtIDebugDraw@@@Z ENDP ; btSoftBodyHelpers::DrawFrame
_TEXT	ENDS
PUBLIC	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z	; btMatrix3x3::tdotx
PUBLIC	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z	; btMatrix3x3::tdoty
PUBLIC	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z	; btMatrix3x3::tdotz
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??D@YA?AVbtMatrix3x3@@ABV0@0@Z
_TEXT	SEGMENT
$T58062 = -36						; size = 4
$T58061 = -32						; size = 4
$T58060 = -28						; size = 4
$T58059 = -24						; size = 4
$T58058 = -20						; size = 4
$T58057 = -16						; size = 4
$T58056 = -12						; size = 4
$T58055 = -8						; size = 4
$T58054 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_m1$ = 12						; size = 4
_m2$ = 16						; size = 4
??D@YA?AVbtMatrix3x3@@ABV0@0@Z PROC			; operator*, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btmatrix3x3.h
; Line 1198
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 1277
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T58054[ebp]
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T58055[ebp]
	push	2
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T58056[ebp]
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T58057[ebp]
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T58058[ebp]
	push	1
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T58059[ebp]
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotz
	fstp	DWORD PTR $T58060[ebp]
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdoty
	fstp	DWORD PTR $T58061[ebp]
	push	0
	mov	ecx, DWORD PTR _m1$[ebp]
	call	??AbtMatrix3x3@@QBEABVbtVector3@@H@Z	; btMatrix3x3::operator[]
	push	eax
	mov	ecx, DWORD PTR _m2$[ebp]
	call	?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ; btMatrix3x3::tdotx
	fstp	DWORD PTR $T58062[ebp]
	lea	eax, DWORD PTR $T58054[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58055[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58056[ebp]
	push	edx
	lea	eax, DWORD PTR $T58057[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58058[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58059[ebp]
	push	edx
	lea	eax, DWORD PTR $T58060[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58061[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58062[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btMatrix3x3@@QAE@ABM00000000@Z	; btMatrix3x3::btMatrix3x3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1279
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtMatrix3x3@@ABV0@0@Z ENDP			; operator*
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z PROC		; btMatrix3x3::tdotx, COMDAT
; _this$ = ecx
; Line 617
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 618
	mov	ecx, DWORD PTR _this$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	fstp	DWORD PTR tv128[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR tv130[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv130[ebp]
; Line 619
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?tdotx@btMatrix3x3@@QBEMABVbtVector3@@@Z ENDP		; btMatrix3x3::tdotx
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z PROC		; btMatrix3x3::tdoty, COMDAT
; _this$ = ecx
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 622
	mov	ecx, DWORD PTR _this$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	fstp	DWORD PTR tv128[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR tv130[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv130[ebp]
; Line 623
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?tdoty@btMatrix3x3@@QBEMABVbtVector3@@@Z ENDP		; btMatrix3x3::tdoty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z
_TEXT	SEGMENT
tv130 = -12						; size = 4
tv128 = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z PROC		; btMatrix3x3::tdotz, COMDAT
; _this$ = ecx
; Line 625
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 626
	mov	ecx, DWORD PTR _this$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?x@btVector3@@QBEABMXZ			; btVector3::x
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	fstp	DWORD PTR tv128[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?y@btVector3@@QBEABMXZ			; btVector3::y
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv128[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	fstp	DWORD PTR tv130[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	mov	esi, eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?z@btVector3@@QBEABMXZ			; btVector3::z
	fld	DWORD PTR [esi]
	fmul	DWORD PTR [eax]
	fadd	DWORD PTR tv130[ebp]
; Line 627
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?tdotz@btMatrix3x3@@QBEMABVbtVector3@@@Z ENDP		; btMatrix3x3::tdotz
_TEXT	ENDS
PUBLIC	??_VbtVector3@@SAXPAX@Z				; btVector3::operator delete[]
PUBLIC	??2btCollisionObject@@SAPAXI@Z			; btCollisionObject::operator new
PUBLIC	?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z		; lerp
PUBLIC	??_UbtVector3@@SAPAXI@Z				; btVector3::operator new[]
PUBLIC	?CreateRope@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1HH@Z ; btSoftBodyHelpers::CreateRope
EXTRN	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z:PROC ; btSoftBody::appendLink
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	?setMass@btSoftBody@@QAEXHM@Z:PROC		; btSoftBody::setMass
EXTRN	??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z:PROC ; btSoftBody::btSoftBody
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateRope@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1HH@Z
_TEXT	SEGMENT
tv142 = -88						; size = 4
tv196 = -84						; size = 4
tv77 = -80						; size = 4
$T58080 = -76						; size = 4
$T58079 = -72						; size = 4
$T58076 = -68						; size = 4
$T58075 = -64						; size = 4
$T58072 = -60						; size = 4
$T58071 = -56						; size = 4
_psb$ = -52						; size = 4
$T51195 = -48						; size = 16
_t$51193 = -24						; size = 4
_i$ = -16						; size = 4
_m$ = -12						; size = 4
_x$ = -8						; size = 4
_r$ = -4						; size = 4
_worldInfo$ = 8						; size = 4
_from$ = 12						; size = 4
_to$ = 16						; size = 4
_res$ = 20						; size = 4
_fixeds$ = 24						; size = 4
?CreateRope@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1HH@Z PROC ; btSoftBodyHelpers::CreateRope, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
; Line 604
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 606
	mov	eax, DWORD PTR _res$[ebx]
	add	eax, 2
	mov	DWORD PTR _r$[ebp], eax
; Line 607
	mov	ecx, DWORD PTR _r$[ebp]
	mov	DWORD PTR $T58071[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T58071[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_UbtVector3@@SAPAXI@Z			; btVector3::operator new[]
	add	esp, 4
	mov	DWORD PTR $T58072[ebp], eax
	cmp	DWORD PTR $T58072[ebp], 0
	je	SHORT $LN11@CreateRope
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	mov	eax, DWORD PTR $T58071[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T58072[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T58072[ebp]
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN12@CreateRope
$LN11@CreateRope:
	mov	DWORD PTR tv77[ebp], 0
$LN12@CreateRope:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 608
	xor	ecx, ecx
	mov	eax, DWORD PTR _r$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T58075[ebp], eax
	mov	eax, DWORD PTR $T58075[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 611
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@CreateRope
$LN7@CreateRope:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@CreateRope:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _r$[ebp]
	jge	SHORT $LN6@CreateRope
; Line 613
	fild	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv196[ebp], eax
	fidiv	DWORD PTR tv196[ebp]
	fstp	DWORD PTR _t$51193[ebp]
; Line 614
	lea	ecx, DWORD PTR _t$51193[ebp]
	push	ecx
	mov	edx, DWORD PTR _to$[ebx]
	push	edx
	mov	eax, DWORD PTR _from$[ebx]
	push	eax
	lea	ecx, DWORD PTR $T51195[ebp]
	push	ecx
	call	?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z	; lerp
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _i$[ebp]
	shl	edx, 4
	add	edx, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], eax
; Line 615
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	fld1
	fstp	DWORD PTR [edx+ecx*4]
; Line 616
	jmp	SHORT $LN7@CreateRope
$LN6@CreateRope:
; Line 617
	push	1296					; 00000510H
	call	??2btCollisionObject@@SAPAXI@Z		; btCollisionObject::operator new
	add	esp, 4
	mov	DWORD PTR $T58076[ebp], eax
	cmp	DWORD PTR $T58076[ebp], 0
	je	SHORT $LN13@CreateRope
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _r$[ebp]
	push	edx
	mov	eax, DWORD PTR _worldInfo$[ebx]
	push	eax
	mov	ecx, DWORD PTR $T58076[ebp]
	call	??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z ; btSoftBody::btSoftBody
	mov	DWORD PTR tv142[ebp], eax
	jmp	SHORT $LN14@CreateRope
$LN13@CreateRope:
	mov	DWORD PTR tv142[ebp], 0
$LN14@CreateRope:
	mov	ecx, DWORD PTR tv142[ebp]
	mov	DWORD PTR _psb$[ebp], ecx
; Line 618
	mov	edx, DWORD PTR _fixeds$[ebx]
	and	edx, 1
	je	SHORT $LN5@CreateRope
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	0
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN5@CreateRope:
; Line 619
	mov	eax, DWORD PTR _fixeds$[ebx]
	and	eax, 2
	je	SHORT $LN4@CreateRope
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _r$[ebp]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN4@CreateRope:
; Line 620
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR $T58079[ebp], edx
	mov	eax, DWORD PTR $T58079[ebp]
	push	eax
	call	??_VbtVector3@@SAXPAX@Z			; btVector3::operator delete[]
	add	esp, 4
; Line 621
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR $T58080[ebp], ecx
	mov	edx, DWORD PTR $T58080[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 623
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN3@CreateRope
$LN2@CreateRope:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@CreateRope:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _r$[ebp]
	jge	SHORT $LN1@CreateRope
; Line 625
	push	0
	push	0
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 626
	jmp	SHORT $LN2@CreateRope
$LN1@CreateRope:
; Line 628
	mov	eax, DWORD PTR _psb$[ebp]
; Line 629
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@CreateRope
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN17@CreateRope:
	DD	1
	DD	$LN16@CreateRope
$LN16@CreateRope:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN15@CreateRope
$LN15@CreateRope:
	DB	116					; 00000074H
	DB	0
?CreateRope@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1HH@Z ENDP ; btSoftBodyHelpers::CreateRope
_TEXT	ENDS
EXTRN	?btAlignedAllocInternal@@YAPAXIH@Z:PROC		; btAlignedAllocInternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_UbtVector3@@SAPAXI@Z
_TEXT	SEGMENT
_sizeInBytes$ = 8					; size = 4
??_UbtVector3@@SAPAXI@Z PROC				; btVector3::operator new[], COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 87
	push	ebp
	mov	ebp, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _sizeInBytes$[ebp]
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??_UbtVector3@@SAPAXI@Z ENDP				; btVector3::operator new[]
_TEXT	ENDS
EXTRN	?btAlignedFreeInternal@@YAXPAX@Z:PROC		; btAlignedFreeInternal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_VbtVector3@@SAXPAX@Z
_TEXT	SEGMENT
_ptr$ = 8						; size = 4
??_VbtVector3@@SAXPAX@Z PROC				; btVector3::operator delete[], COMDAT
; Line 87
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??_VbtVector3@@SAXPAX@Z ENDP				; btVector3::operator delete[]
_TEXT	ENDS
PUBLIC	?lerp@btVector3@@QBE?AV1@ABV1@ABM@Z		; btVector3::lerp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
_t$ = 20						; size = 4
?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z PROC			; lerp, COMDAT
; Line 935
	push	ebp
	mov	ebp, esp
; Line 936
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v2$[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	mov	ecx, DWORD PTR _v1$[ebp]
	call	?lerp@btVector3@@QBE?AV1@ABV1@ABM@Z	; btVector3::lerp
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 937
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z ENDP			; lerp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?lerp@btVector3@@QBE?AV1@ABV1@ABM@Z
_TEXT	SEGMENT
$T58094 = -16						; size = 4
$T58093 = -12						; size = 4
$T58092 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
_t$ = 16						; size = 4
?lerp@btVector3@@QBE?AV1@ABV1@ABM@Z PROC		; btVector3::lerp, COMDAT
; _this$ = ecx
; Line 521
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 540
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	fsub	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _t$[ebp]
	fmul	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+8]
	fstp	DWORD PTR $T58092[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+4]
	fsub	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _t$[ebp]
	fmul	DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+4]
	fstp	DWORD PTR $T58093[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx]
	fsub	DWORD PTR [eax]
	mov	ecx, DWORD PTR _t$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR $T58094[ebp]
	lea	eax, DWORD PTR $T58092[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58093[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58094[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 542
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?lerp@btVector3@@QBE?AV1@ABV1@ABM@Z ENDP		; btVector3::lerp
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??2btCollisionObject@@SAPAXI@Z
_TEXT	SEGMENT
_sizeInBytes$ = 8					; size = 4
??2btCollisionObject@@SAPAXI@Z PROC			; btCollisionObject::operator new, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletcollision\collisiondispatch\btcollisionobject.h
; Line 123
	push	ebp
	mov	ebp, esp
	push	16					; 00000010H
	mov	eax, DWORD PTR _sizeInBytes$[ebp]
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??2btCollisionObject@@SAPAXI@Z ENDP			; btCollisionObject::operator new
_TEXT	ENDS
PUBLIC	?CreatePatch@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@111HHH_N@Z ; btSoftBodyHelpers::CreatePatch
EXTRN	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z:PROC ; btSoftBody::appendFace
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreatePatch@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@111HHH_N@Z
_TEXT	SEGMENT
tv162 = -200						; size = 4
tv481 = -196						; size = 4
tv469 = -192						; size = 4
tv79 = -188						; size = 4
$T58108 = -184						; size = 4
$T58107 = -180						; size = 4
$T58104 = -176						; size = 4
$T58103 = -172						; size = 4
$T58100 = -168						; size = 4
$T58099 = -164						; size = 4
_mdy$51269 = -158					; size = 1
_mdx$51268 = -157					; size = 1
_idx$51267 = -156					; size = 4
_ix$51263 = -152					; size = 4
_psb$ = -148						; size = 4
$T51249 = -144						; size = 16
_tx$51247 = -112					; size = 4
_ix$51243 = -104					; size = 4
_py1$51241 = -96					; size = 16
_py0$51239 = -64					; size = 16
_ty$51237 = -32						; size = 4
_iy$ = -24						; size = 4
_m$ = -20						; size = 4
_x$ = -16						; size = 4
_tot$ = -12						; size = 4
_ry$ = -8						; size = 4
_rx$ = -4						; size = 4
_worldInfo$ = 8						; size = 4
_corner00$ = 12						; size = 4
_corner10$ = 16						; size = 4
_corner01$ = 20						; size = 4
_corner11$ = 24						; size = 4
_resx$ = 28						; size = 4
_resy$ = 32						; size = 4
_fixeds$ = 36						; size = 4
_gendiags$ = 40						; size = 1
?CreatePatch@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@111HHH_N@Z PROC ; btSoftBodyHelpers::CreatePatch, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
; Line 640
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 643
	cmp	DWORD PTR _resx$[ebx], 2
	jl	SHORT $LN30@CreatePatc
	cmp	DWORD PTR _resy$[ebx], 2
	jge	SHORT $LN31@CreatePatc
$LN30@CreatePatc:
	xor	eax, eax
	jmp	$LN32@CreatePatc
$LN31@CreatePatc:
; Line 644
	mov	eax, DWORD PTR _resx$[ebx]
	mov	DWORD PTR _rx$[ebp], eax
; Line 645
	mov	ecx, DWORD PTR _resy$[ebx]
	mov	DWORD PTR _ry$[ebp], ecx
; Line 646
	mov	edx, DWORD PTR _rx$[ebp]
	imul	edx, DWORD PTR _ry$[ebp]
	mov	DWORD PTR _tot$[ebp], edx
; Line 647
	mov	eax, DWORD PTR _tot$[ebp]
	mov	DWORD PTR $T58099[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T58099[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_UbtVector3@@SAPAXI@Z			; btVector3::operator new[]
	add	esp, 4
	mov	DWORD PTR $T58100[ebp], eax
	cmp	DWORD PTR $T58100[ebp], 0
	je	SHORT $LN34@CreatePatc
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	mov	eax, DWORD PTR $T58099[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T58100[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T58100[ebp]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN35@CreatePatc
$LN34@CreatePatc:
	mov	DWORD PTR tv79[ebp], 0
$LN35@CreatePatc:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 648
	xor	ecx, ecx
	mov	eax, DWORD PTR _tot$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T58103[ebp], eax
	mov	eax, DWORD PTR $T58103[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 651
	mov	DWORD PTR _iy$[ebp], 0
	jmp	SHORT $LN29@CreatePatc
$LN28@CreatePatc:
	mov	ecx, DWORD PTR _iy$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iy$[ebp], ecx
$LN29@CreatePatc:
	mov	edx, DWORD PTR _iy$[ebp]
	cmp	edx, DWORD PTR _ry$[ebp]
	jge	$LN27@CreatePatc
; Line 653
	fild	DWORD PTR _iy$[ebp]
	mov	eax, DWORD PTR _ry$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv469[ebp], eax
	fidiv	DWORD PTR tv469[ebp]
	fstp	DWORD PTR _ty$51237[ebp]
; Line 654
	lea	ecx, DWORD PTR _ty$51237[ebp]
	push	ecx
	mov	edx, DWORD PTR _corner01$[ebx]
	push	edx
	mov	eax, DWORD PTR _corner00$[ebx]
	push	eax
	lea	ecx, DWORD PTR _py0$51239[ebp]
	push	ecx
	call	?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z	; lerp
	add	esp, 16					; 00000010H
; Line 655
	lea	edx, DWORD PTR _ty$51237[ebp]
	push	edx
	mov	eax, DWORD PTR _corner11$[ebx]
	push	eax
	mov	ecx, DWORD PTR _corner10$[ebx]
	push	ecx
	lea	edx, DWORD PTR _py1$51241[ebp]
	push	edx
	call	?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z	; lerp
	add	esp, 16					; 00000010H
; Line 656
	mov	DWORD PTR _ix$51243[ebp], 0
	jmp	SHORT $LN26@CreatePatc
$LN25@CreatePatc:
	mov	eax, DWORD PTR _ix$51243[ebp]
	add	eax, 1
	mov	DWORD PTR _ix$51243[ebp], eax
$LN26@CreatePatc:
	mov	ecx, DWORD PTR _ix$51243[ebp]
	cmp	ecx, DWORD PTR _rx$[ebp]
	jge	SHORT $LN24@CreatePatc
; Line 658
	fild	DWORD PTR _ix$51243[ebp]
	mov	edx, DWORD PTR _rx$[ebp]
	sub	edx, 1
	mov	DWORD PTR tv481[ebp], edx
	fidiv	DWORD PTR tv481[ebp]
	fstp	DWORD PTR _tx$51247[ebp]
; Line 659
	lea	eax, DWORD PTR _tx$51247[ebp]
	push	eax
	lea	ecx, DWORD PTR _py1$51241[ebp]
	push	ecx
	lea	edx, DWORD PTR _py0$51239[ebp]
	push	edx
	lea	eax, DWORD PTR $T51249[ebp]
	push	eax
	call	?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z	; lerp
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51243[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 660
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51243[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	fld1
	fstp	DWORD PTR [edx+ecx*4]
; Line 661
	jmp	SHORT $LN25@CreatePatc
$LN24@CreatePatc:
; Line 662
	jmp	$LN28@CreatePatc
$LN27@CreatePatc:
; Line 663
	push	1296					; 00000510H
	call	??2btCollisionObject@@SAPAXI@Z		; btCollisionObject::operator new
	add	esp, 4
	mov	DWORD PTR $T58104[ebp], eax
	cmp	DWORD PTR $T58104[ebp], 0
	je	SHORT $LN36@CreatePatc
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tot$[ebp]
	push	edx
	mov	eax, DWORD PTR _worldInfo$[ebx]
	push	eax
	mov	ecx, DWORD PTR $T58104[ebp]
	call	??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z ; btSoftBody::btSoftBody
	mov	DWORD PTR tv162[ebp], eax
	jmp	SHORT $LN37@CreatePatc
$LN36@CreatePatc:
	mov	DWORD PTR tv162[ebp], 0
$LN37@CreatePatc:
	mov	ecx, DWORD PTR tv162[ebp]
	mov	DWORD PTR _psb$[ebp], ecx
; Line 664
	mov	edx, DWORD PTR _fixeds$[ebx]
	and	edx, 1
	je	SHORT $LN23@CreatePatc
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _rx$[ebp]
	imul	eax, 0
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN23@CreatePatc:
; Line 665
	mov	ecx, DWORD PTR _fixeds$[ebx]
	and	ecx, 2
	je	SHORT $LN22@CreatePatc
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _rx$[ebp]
	imul	edx, 0
	mov	eax, DWORD PTR _rx$[ebp]
	lea	ecx, DWORD PTR [edx+eax-1]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN22@CreatePatc:
; Line 666
	mov	edx, DWORD PTR _fixeds$[ebx]
	and	edx, 4
	je	SHORT $LN21@CreatePatc
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _ry$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN21@CreatePatc:
; Line 667
	mov	ecx, DWORD PTR _fixeds$[ebx]
	and	ecx, 8
	je	SHORT $LN20@CreatePatc
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _ry$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _rx$[ebp]
	lea	ecx, DWORD PTR [edx+eax-1]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN20@CreatePatc:
; Line 668
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR $T58107[ebp], edx
	mov	eax, DWORD PTR $T58107[ebp]
	push	eax
	call	??_VbtVector3@@SAXPAX@Z			; btVector3::operator delete[]
	add	esp, 4
; Line 669
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR $T58108[ebp], ecx
	mov	edx, DWORD PTR $T58108[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 671
	mov	DWORD PTR _iy$[ebp], 0
	jmp	SHORT $LN19@CreatePatc
$LN18@CreatePatc:
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	mov	DWORD PTR _iy$[ebp], eax
$LN19@CreatePatc:
	mov	ecx, DWORD PTR _iy$[ebp]
	cmp	ecx, DWORD PTR _ry$[ebp]
	jge	$LN17@CreatePatc
; Line 673
	mov	DWORD PTR _ix$51263[ebp], 0
	jmp	SHORT $LN16@CreatePatc
$LN15@CreatePatc:
	mov	edx, DWORD PTR _ix$51263[ebp]
	add	edx, 1
	mov	DWORD PTR _ix$51263[ebp], edx
$LN16@CreatePatc:
	mov	eax, DWORD PTR _ix$51263[ebp]
	cmp	eax, DWORD PTR _rx$[ebp]
	jge	$LN14@CreatePatc
; Line 675
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51263[ebp]
	mov	DWORD PTR _idx$51267[ebp], ecx
; Line 676
	mov	edx, DWORD PTR _ix$51263[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _rx$[ebp]
	setl	al
	mov	BYTE PTR _mdx$51268[ebp], al
; Line 677
	mov	ecx, DWORD PTR _iy$[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _ry$[ebp]
	setl	dl
	mov	BYTE PTR _mdy$51269[ebp], dl
; Line 678
	movzx	eax, BYTE PTR _mdx$51268[ebp]
	test	eax, eax
	je	SHORT $LN13@CreatePatc
	push	0
	push	0
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	mov	edx, DWORD PTR _ix$51263[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	push	eax
	mov	ecx, DWORD PTR _idx$51267[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN13@CreatePatc:
; Line 679
	movzx	edx, BYTE PTR _mdy$51269[ebp]
	test	edx, edx
	je	SHORT $LN12@CreatePatc
	push	0
	push	0
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	add	eax, DWORD PTR _ix$51263[ebp]
	push	eax
	mov	ecx, DWORD PTR _idx$51267[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN12@CreatePatc:
; Line 680
	movzx	edx, BYTE PTR _mdx$51268[ebp]
	test	edx, edx
	je	$LN1@CreatePatc
	movzx	eax, BYTE PTR _mdy$51269[ebp]
	test	eax, eax
	je	$LN1@CreatePatc
; Line 683
	cmp	DWORD PTR _resx$[ebx], 2
	jne	$LN10@CreatePatc
; Line 685
	mov	ecx, DWORD PTR _ix$51263[ebp]
	add	ecx, DWORD PTR _iy$[ebp]
	and	ecx, 1
	je	$LN9@CreatePatc
; Line 687
	push	0
	mov	edx, DWORD PTR _iy$[ebp]
	add	edx, 1
	imul	edx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _ix$51263[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	ecx
	mov	edx, DWORD PTR _iy$[ebp]
	imul	edx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _ix$51263[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	ecx
	mov	edx, DWORD PTR _iy$[ebp]
	imul	edx, DWORD PTR _rx$[ebp]
	add	edx, DWORD PTR _ix$51263[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 688
	push	0
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	add	eax, DWORD PTR _ix$51263[ebp]
	push	eax
	mov	ecx, DWORD PTR _iy$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _rx$[ebp]
	mov	edx, DWORD PTR _ix$51263[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	push	eax
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51263[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 689
	movzx	edx, BYTE PTR _gendiags$[ebx]
	test	edx, edx
	je	SHORT $LN8@CreatePatc
; Line 691
	push	0
	push	0
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _ix$51263[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	mov	eax, DWORD PTR _iy$[ebp]
	imul	eax, DWORD PTR _rx$[ebp]
	add	eax, DWORD PTR _ix$51263[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN8@CreatePatc:
; Line 694
	jmp	$LN6@CreatePatc
$LN9@CreatePatc:
; Line 696
	push	0
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	mov	edx, DWORD PTR _ix$51263[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	push	eax
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51263[ebp]
	push	ecx
	mov	edx, DWORD PTR _iy$[ebp]
	add	edx, 1
	imul	edx, DWORD PTR _rx$[ebp]
	add	edx, DWORD PTR _ix$51263[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 697
	push	0
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _ix$51263[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	mov	eax, DWORD PTR _iy$[ebp]
	imul	eax, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _ix$51263[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	add	eax, DWORD PTR _ix$51263[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 698
	movzx	ecx, BYTE PTR _gendiags$[ebx]
	test	ecx, ecx
	je	SHORT $LN6@CreatePatc
; Line 700
	push	0
	push	0
	mov	edx, DWORD PTR _iy$[ebp]
	add	edx, 1
	imul	edx, DWORD PTR _rx$[ebp]
	add	edx, DWORD PTR _ix$51263[ebp]
	push	edx
	mov	eax, DWORD PTR _iy$[ebp]
	imul	eax, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _ix$51263[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN6@CreatePatc:
; Line 705
	jmp	$LN1@CreatePatc
$LN10@CreatePatc:
; Line 707
	mov	eax, DWORD PTR _ix$51263[ebp]
	add	eax, DWORD PTR _iy$[ebp]
	and	eax, 1
	jne	$LN4@CreatePatc
; Line 709
	push	0
	mov	ecx, DWORD PTR _iy$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _rx$[ebp]
	mov	edx, DWORD PTR _ix$51263[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	push	eax
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	mov	edx, DWORD PTR _ix$51263[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	push	eax
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51263[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 710
	push	0
	mov	edx, DWORD PTR _iy$[ebp]
	add	edx, 1
	imul	edx, DWORD PTR _rx$[ebp]
	add	edx, DWORD PTR _ix$51263[ebp]
	push	edx
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _ix$51263[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	mov	eax, DWORD PTR _iy$[ebp]
	imul	eax, DWORD PTR _rx$[ebp]
	add	eax, DWORD PTR _ix$51263[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 711
	movzx	ecx, BYTE PTR _gendiags$[ebx]
	test	ecx, ecx
	je	SHORT $LN3@CreatePatc
; Line 713
	push	0
	push	0
	mov	edx, DWORD PTR _iy$[ebp]
	add	edx, 1
	imul	edx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _ix$51263[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	ecx
	mov	edx, DWORD PTR _iy$[ebp]
	imul	edx, DWORD PTR _rx$[ebp]
	add	edx, DWORD PTR _ix$51263[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN3@CreatePatc:
; Line 716
	jmp	$LN1@CreatePatc
$LN4@CreatePatc:
; Line 718
	push	0
	mov	eax, DWORD PTR _iy$[ebp]
	imul	eax, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _ix$51263[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	push	edx
	mov	eax, DWORD PTR _iy$[ebp]
	imul	eax, DWORD PTR _rx$[ebp]
	add	eax, DWORD PTR _ix$51263[ebp]
	push	eax
	mov	ecx, DWORD PTR _iy$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51263[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 719
	push	0
	mov	edx, DWORD PTR _iy$[ebp]
	add	edx, 1
	imul	edx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _ix$51263[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	ecx
	mov	edx, DWORD PTR _iy$[ebp]
	imul	edx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _ix$51263[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	ecx
	mov	edx, DWORD PTR _iy$[ebp]
	add	edx, 1
	imul	edx, DWORD PTR _rx$[ebp]
	add	edx, DWORD PTR _ix$51263[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 720
	movzx	eax, BYTE PTR _gendiags$[ebx]
	test	eax, eax
	je	SHORT $LN1@CreatePatc
; Line 722
	push	0
	push	0
	mov	ecx, DWORD PTR _iy$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51263[ebp]
	push	ecx
	mov	edx, DWORD PTR _iy$[ebp]
	imul	edx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _ix$51263[ebp]
	lea	ecx, DWORD PTR [edx+eax+1]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN1@CreatePatc:
; Line 729
	jmp	$LN15@CreatePatc
$LN14@CreatePatc:
; Line 730
	jmp	$LN18@CreatePatc
$LN17@CreatePatc:
; Line 733
	mov	eax, DWORD PTR _psb$[ebp]
$LN32@CreatePatc:
; Line 734
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN43@CreatePatc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	3
$LN43@CreatePatc:
	DD	4
	DD	$LN42@CreatePatc
$LN42@CreatePatc:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN38@CreatePatc
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN39@CreatePatc
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN40@CreatePatc
	DD	-112					; ffffff90H
	DD	4
	DD	$LN41@CreatePatc
$LN41@CreatePatc:
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
$LN40@CreatePatc:
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
$LN39@CreatePatc:
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	0
$LN38@CreatePatc:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
?CreatePatch@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@111HHH_N@Z ENDP ; btSoftBodyHelpers::CreatePatch
_TEXT	ENDS
PUBLIC	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z	; btSoftBodyHelpers::CalculateUV
PUBLIC	?CreatePatchUV@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@111HHH_NPAM@Z ; btSoftBodyHelpers::CreatePatchUV
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreatePatchUV@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@111HHH_NPAM@Z
_TEXT	SEGMENT
tv162 = -216						; size = 4
tv489 = -212						; size = 4
tv477 = -208						; size = 4
tv79 = -204						; size = 4
$T58126 = -200						; size = 4
$T58125 = -196						; size = 4
$T58122 = -192						; size = 4
$T58121 = -188						; size = 4
$T58118 = -184						; size = 4
$T58117 = -180						; size = 4
_node11$51355 = -176					; size = 4
_node10$51354 = -172					; size = 4
_node01$51353 = -168					; size = 4
_node00$51352 = -164					; size = 4
_mdy$51351 = -158					; size = 1
_mdx$51350 = -157					; size = 1
_ix$51346 = -156					; size = 4
_z$ = -152						; size = 4
_psb$ = -148						; size = 4
$T51326 = -144						; size = 16
_tx$51324 = -112					; size = 4
_ix$51320 = -104					; size = 4
_py1$51318 = -96					; size = 16
_py0$51316 = -64					; size = 16
_ty$51314 = -32						; size = 4
_iy$ = -24						; size = 4
_m$ = -20						; size = 4
_x$ = -16						; size = 4
_tot$ = -12						; size = 4
_ry$ = -8						; size = 4
_rx$ = -4						; size = 4
_worldInfo$ = 8						; size = 4
_corner00$ = 12						; size = 4
_corner10$ = 16						; size = 4
_corner01$ = 20						; size = 4
_corner11$ = 24						; size = 4
_resx$ = 28						; size = 4
_resy$ = 32						; size = 4
_fixeds$ = 36						; size = 4
_gendiags$ = 40						; size = 1
_tex_coords$ = 44					; size = 4
?CreatePatchUV@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@111HHH_NPAM@Z PROC ; btSoftBodyHelpers::CreatePatchUV, COMDAT
; Line 747
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	edi
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 818
	cmp	DWORD PTR _resx$[ebx], 2
	jl	SHORT $LN28@CreatePatc@2
	cmp	DWORD PTR _resy$[ebx], 2
	jge	SHORT $LN29@CreatePatc@2
$LN28@CreatePatc@2:
	xor	eax, eax
	jmp	$LN30@CreatePatc@2
$LN29@CreatePatc@2:
; Line 819
	mov	eax, DWORD PTR _resx$[ebx]
	mov	DWORD PTR _rx$[ebp], eax
; Line 820
	mov	ecx, DWORD PTR _resy$[ebx]
	mov	DWORD PTR _ry$[ebp], ecx
; Line 821
	mov	edx, DWORD PTR _rx$[ebp]
	imul	edx, DWORD PTR _ry$[ebp]
	mov	DWORD PTR _tot$[ebp], edx
; Line 822
	mov	eax, DWORD PTR _tot$[ebp]
	mov	DWORD PTR $T58117[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T58117[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_UbtVector3@@SAPAXI@Z			; btVector3::operator new[]
	add	esp, 4
	mov	DWORD PTR $T58118[ebp], eax
	cmp	DWORD PTR $T58118[ebp], 0
	je	SHORT $LN32@CreatePatc@2
	push	OFFSET ??0btVector3@@QAE@XZ		; btVector3::btVector3
	mov	eax, DWORD PTR $T58117[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T58118[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T58118[ebp]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN33@CreatePatc@2
$LN32@CreatePatc@2:
	mov	DWORD PTR tv79[ebp], 0
$LN33@CreatePatc@2:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _x$[ebp], eax
; Line 823
	xor	ecx, ecx
	mov	eax, DWORD PTR _tot$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T58121[ebp], eax
	mov	eax, DWORD PTR $T58121[ebp]
	mov	DWORD PTR _m$[ebp], eax
; Line 827
	mov	DWORD PTR _iy$[ebp], 0
	jmp	SHORT $LN27@CreatePatc@2
$LN26@CreatePatc@2:
	mov	ecx, DWORD PTR _iy$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iy$[ebp], ecx
$LN27@CreatePatc@2:
	mov	edx, DWORD PTR _iy$[ebp]
	cmp	edx, DWORD PTR _ry$[ebp]
	jge	$LN25@CreatePatc@2
; Line 829
	fild	DWORD PTR _iy$[ebp]
	mov	eax, DWORD PTR _ry$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv477[ebp], eax
	fidiv	DWORD PTR tv477[ebp]
	fstp	DWORD PTR _ty$51314[ebp]
; Line 830
	lea	ecx, DWORD PTR _ty$51314[ebp]
	push	ecx
	mov	edx, DWORD PTR _corner01$[ebx]
	push	edx
	mov	eax, DWORD PTR _corner00$[ebx]
	push	eax
	lea	ecx, DWORD PTR _py0$51316[ebp]
	push	ecx
	call	?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z	; lerp
	add	esp, 16					; 00000010H
; Line 831
	lea	edx, DWORD PTR _ty$51314[ebp]
	push	edx
	mov	eax, DWORD PTR _corner11$[ebx]
	push	eax
	mov	ecx, DWORD PTR _corner10$[ebx]
	push	ecx
	lea	edx, DWORD PTR _py1$51318[ebp]
	push	edx
	call	?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z	; lerp
	add	esp, 16					; 00000010H
; Line 832
	mov	DWORD PTR _ix$51320[ebp], 0
	jmp	SHORT $LN24@CreatePatc@2
$LN23@CreatePatc@2:
	mov	eax, DWORD PTR _ix$51320[ebp]
	add	eax, 1
	mov	DWORD PTR _ix$51320[ebp], eax
$LN24@CreatePatc@2:
	mov	ecx, DWORD PTR _ix$51320[ebp]
	cmp	ecx, DWORD PTR _rx$[ebp]
	jge	SHORT $LN22@CreatePatc@2
; Line 834
	fild	DWORD PTR _ix$51320[ebp]
	mov	edx, DWORD PTR _rx$[ebp]
	sub	edx, 1
	mov	DWORD PTR tv489[ebp], edx
	fidiv	DWORD PTR tv489[ebp]
	fstp	DWORD PTR _tx$51324[ebp]
; Line 835
	lea	eax, DWORD PTR _tx$51324[ebp]
	push	eax
	lea	ecx, DWORD PTR _py1$51318[ebp]
	push	ecx
	lea	edx, DWORD PTR _py0$51316[ebp]
	push	edx
	lea	eax, DWORD PTR $T51326[ebp]
	push	eax
	call	?lerp@@YA?AVbtVector3@@ABV1@0ABM@Z	; lerp
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51320[ebp]
	shl	ecx, 4
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
; Line 836
	mov	ecx, DWORD PTR _iy$[ebp]
	imul	ecx, DWORD PTR _rx$[ebp]
	add	ecx, DWORD PTR _ix$51320[ebp]
	mov	edx, DWORD PTR _m$[ebp]
	fld1
	fstp	DWORD PTR [edx+ecx*4]
; Line 837
	jmp	SHORT $LN23@CreatePatc@2
$LN22@CreatePatc@2:
; Line 838
	jmp	$LN26@CreatePatc@2
$LN25@CreatePatc@2:
; Line 839
	push	1296					; 00000510H
	call	??2btCollisionObject@@SAPAXI@Z		; btCollisionObject::operator new
	add	esp, 4
	mov	DWORD PTR $T58122[ebp], eax
	cmp	DWORD PTR $T58122[ebp], 0
	je	SHORT $LN34@CreatePatc@2
	mov	eax, DWORD PTR _m$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tot$[ebp]
	push	edx
	mov	eax, DWORD PTR _worldInfo$[ebx]
	push	eax
	mov	ecx, DWORD PTR $T58122[ebp]
	call	??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z ; btSoftBody::btSoftBody
	mov	DWORD PTR tv162[ebp], eax
	jmp	SHORT $LN35@CreatePatc@2
$LN34@CreatePatc@2:
	mov	DWORD PTR tv162[ebp], 0
$LN35@CreatePatc@2:
	mov	ecx, DWORD PTR tv162[ebp]
	mov	DWORD PTR _psb$[ebp], ecx
; Line 840
	mov	edx, DWORD PTR _fixeds$[ebx]
	and	edx, 1
	je	SHORT $LN21@CreatePatc@2
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _rx$[ebp]
	imul	eax, 0
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN21@CreatePatc@2:
; Line 841
	mov	ecx, DWORD PTR _fixeds$[ebx]
	and	ecx, 2
	je	SHORT $LN20@CreatePatc@2
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _rx$[ebp]
	imul	edx, 0
	mov	eax, DWORD PTR _rx$[ebp]
	lea	ecx, DWORD PTR [edx+eax-1]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN20@CreatePatc@2:
; Line 842
	mov	edx, DWORD PTR _fixeds$[ebx]
	and	edx, 4
	je	SHORT $LN19@CreatePatc@2
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _ry$[ebp]
	sub	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN19@CreatePatc@2:
; Line 843
	mov	ecx, DWORD PTR _fixeds$[ebx]
	and	ecx, 8
	je	SHORT $LN18@CreatePatc@2
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _ry$[ebp]
	sub	edx, 1
	imul	edx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _rx$[ebp]
	lea	ecx, DWORD PTR [edx+eax-1]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN18@CreatePatc@2:
; Line 844
	mov	edx, DWORD PTR _fixeds$[ebx]
	and	edx, 16					; 00000010H
	je	SHORT $LN17@CreatePatc@2
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _rx$[ebp]
	imul	ecx, 0
	mov	eax, DWORD PTR _rx$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN17@CreatePatc@2:
; Line 845
	mov	edx, DWORD PTR _fixeds$[ebx]
	and	edx, 32					; 00000020H
	je	SHORT $LN16@CreatePatc@2
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _ry$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN16@CreatePatc@2:
; Line 846
	mov	eax, DWORD PTR _fixeds$[ebx]
	and	eax, 64					; 00000040H
	je	SHORT $LN15@CreatePatc@2
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _ry$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _rx$[ebp]
	lea	edx, DWORD PTR [eax+ecx-1]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN15@CreatePatc@2:
; Line 847
	mov	eax, DWORD PTR _fixeds$[ebx]
	and	eax, 128				; 00000080H
	je	SHORT $LN14@CreatePatc@2
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _ry$[ebp]
	sub	ecx, 1
	imul	ecx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _rx$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN14@CreatePatc@2:
; Line 848
	mov	edx, DWORD PTR _fixeds$[ebx]
	and	edx, 256				; 00000100H
	je	SHORT $LN13@CreatePatc@2
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _ry$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	mov	ecx, eax
	sar	ecx, 1
	imul	ecx, DWORD PTR _rx$[ebp]
	mov	eax, DWORD PTR _rx$[ebp]
	sub	eax, 1
	cdq
	sub	eax, edx
	sar	eax, 1
	add	ecx, eax
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?setMass@btSoftBody@@QAEXHM@Z		; btSoftBody::setMass
$LN13@CreatePatc@2:
; Line 849
	mov	edx, DWORD PTR _x$[ebp]
	mov	DWORD PTR $T58125[ebp], edx
	mov	eax, DWORD PTR $T58125[ebp]
	push	eax
	call	??_VbtVector3@@SAXPAX@Z			; btVector3::operator delete[]
	add	esp, 4
; Line 850
	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR $T58126[ebp], ecx
	mov	edx, DWORD PTR $T58126[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
; Line 853
	mov	DWORD PTR _z$[ebp], 0
; Line 855
	mov	DWORD PTR _iy$[ebp], 0
	jmp	SHORT $LN12@CreatePatc@2
$LN11@CreatePatc@2:
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	mov	DWORD PTR _iy$[ebp], eax
$LN12@CreatePatc@2:
	mov	ecx, DWORD PTR _iy$[ebp]
	cmp	ecx, DWORD PTR _ry$[ebp]
	jge	$LN10@CreatePatc@2
; Line 857
	mov	DWORD PTR _ix$51346[ebp], 0
	jmp	SHORT $LN9@CreatePatc@2
$LN8@CreatePatc@2:
	mov	edx, DWORD PTR _ix$51346[ebp]
	add	edx, 1
	mov	DWORD PTR _ix$51346[ebp], edx
$LN9@CreatePatc@2:
	mov	eax, DWORD PTR _ix$51346[ebp]
	cmp	eax, DWORD PTR _rx$[ebp]
	jge	$LN7@CreatePatc@2
; Line 859
	mov	ecx, DWORD PTR _ix$51346[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _rx$[ebp]
	setl	dl
	mov	BYTE PTR _mdx$51350[ebp], dl
; Line 860
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	cmp	eax, DWORD PTR _ry$[ebp]
	setl	cl
	mov	BYTE PTR _mdy$51351[ebp], cl
; Line 862
	mov	edx, DWORD PTR _iy$[ebp]
	imul	edx, DWORD PTR _rx$[ebp]
	add	edx, DWORD PTR _ix$51346[ebp]
	mov	DWORD PTR _node00$51352[ebp], edx
; Line 863
	mov	eax, DWORD PTR _iy$[ebp]
	imul	eax, DWORD PTR _rx$[ebp]
	mov	ecx, DWORD PTR _ix$51346[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _node01$51353[ebp], edx
; Line 864
	mov	eax, DWORD PTR _iy$[ebp]
	add	eax, 1
	imul	eax, DWORD PTR _rx$[ebp]
	add	eax, DWORD PTR _ix$51346[ebp]
	mov	DWORD PTR _node10$51354[ebp], eax
; Line 865
	mov	ecx, DWORD PTR _iy$[ebp]
	add	ecx, 1
	imul	ecx, DWORD PTR _rx$[ebp]
	mov	edx, DWORD PTR _ix$51346[ebp]
	lea	eax, DWORD PTR [ecx+edx+1]
	mov	DWORD PTR _node11$51355[ebp], eax
; Line 867
	movzx	ecx, BYTE PTR _mdx$51350[ebp]
	test	ecx, ecx
	je	SHORT $LN6@CreatePatc@2
	push	0
	push	0
	mov	edx, DWORD PTR _node01$51353[ebp]
	push	edx
	mov	eax, DWORD PTR _node00$51352[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN6@CreatePatc@2:
; Line 868
	movzx	ecx, BYTE PTR _mdy$51351[ebp]
	test	ecx, ecx
	je	SHORT $LN5@CreatePatc@2
	push	0
	push	0
	mov	edx, DWORD PTR _node10$51354[ebp]
	push	edx
	mov	eax, DWORD PTR _node00$51352[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN5@CreatePatc@2:
; Line 869
	movzx	ecx, BYTE PTR _mdx$51350[ebp]
	test	ecx, ecx
	je	$LN4@CreatePatc@2
	movzx	edx, BYTE PTR _mdy$51351[ebp]
	test	edx, edx
	je	$LN4@CreatePatc@2
; Line 871
	push	0
	mov	eax, DWORD PTR _node11$51355[ebp]
	push	eax
	mov	ecx, DWORD PTR _node10$51354[ebp]
	push	ecx
	mov	edx, DWORD PTR _node00$51352[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 872
	cmp	DWORD PTR _tex_coords$[ebx], 0
	je	$LN3@CreatePatc@2
; Line 874
	push	0
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4]
; Line 875
	push	1
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+4]
; Line 876
	push	0
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+8]
; Line 877
	push	2
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+12]
; Line 878
	push	3
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+16]
; Line 879
	push	2
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+20]
$LN3@CreatePatc@2:
; Line 881
	push	0
	mov	eax, DWORD PTR _node00$51352[ebp]
	push	eax
	mov	ecx, DWORD PTR _node01$51353[ebp]
	push	ecx
	mov	edx, DWORD PTR _node11$51355[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 882
	cmp	DWORD PTR _tex_coords$[ebx], 0
	je	$LN2@CreatePatc@2
; Line 884
	push	3
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+24]
; Line 885
	push	2
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+28]
; Line 886
	push	3
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+32]
; Line 887
	push	1
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+36]
; Line 888
	push	0
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+40]
; Line 889
	push	1
	mov	eax, DWORD PTR _iy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ix$51346[ebp]
	push	ecx
	mov	edx, DWORD PTR _resy$[ebx]
	push	edx
	mov	eax, DWORD PTR _resx$[ebx]
	push	eax
	call	?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ; btSoftBodyHelpers::CalculateUV
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _z$[ebp]
	mov	edx, DWORD PTR _tex_coords$[ebx]
	fstp	DWORD PTR [edx+ecx*4+44]
$LN2@CreatePatc@2:
; Line 891
	movzx	eax, BYTE PTR _gendiags$[ebx]
	test	eax, eax
	je	SHORT $LN1@CreatePatc@2
	push	0
	push	0
	mov	ecx, DWORD PTR _node11$51355[ebp]
	push	ecx
	mov	edx, DWORD PTR _node00$51352[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN1@CreatePatc@2:
; Line 892
	mov	eax, DWORD PTR _z$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _z$[ebp], eax
$LN4@CreatePatc@2:
; Line 894
	jmp	$LN8@CreatePatc@2
$LN7@CreatePatc@2:
; Line 895
	jmp	$LN11@CreatePatc@2
$LN10@CreatePatc@2:
; Line 898
	mov	eax, DWORD PTR _psb$[ebp]
$LN30@CreatePatc@2:
; Line 899
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN41@CreatePatc@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN41@CreatePatc@2:
	DD	4
	DD	$LN40@CreatePatc@2
$LN40@CreatePatc@2:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN36@CreatePatc@2
	DD	-64					; ffffffc0H
	DD	16					; 00000010H
	DD	$LN37@CreatePatc@2
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN38@CreatePatc@2
	DD	-112					; ffffff90H
	DD	4
	DD	$LN39@CreatePatc@2
$LN39@CreatePatc@2:
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
$LN38@CreatePatc@2:
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	49					; 00000031H
	DB	0
$LN37@CreatePatc@2:
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	48					; 00000030H
	DB	0
$LN36@CreatePatc@2:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
?CreatePatchUV@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@111HHH_NPAM@Z ENDP ; btSoftBodyHelpers::CreatePatchUV
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z
_TEXT	SEGMENT
tv151 = -32						; size = 4
tv148 = -28						; size = 4
tv145 = -24						; size = 4
tv142 = -20						; size = 4
tv139 = -16						; size = 4
tv136 = -12						; size = 4
tv132 = -8						; size = 4
_tc$ = -4						; size = 4
_resx$ = 8						; size = 4
_resy$ = 12						; size = 4
_ix$ = 16						; size = 4
_iy$ = 20						; size = 4
_id$ = 24						; size = 4
?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z PROC		; btSoftBodyHelpers::CalculateUV, COMDAT
; Line 902
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 929
	fldz
	fstp	DWORD PTR _tc$[ebp]
; Line 930
	cmp	DWORD PTR _id$[ebp], 0
	jne	SHORT $LN7@CalculateU
; Line 932
	mov	eax, DWORD PTR _resx$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv132[ebp], eax
	fild	DWORD PTR tv132[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	fimul	DWORD PTR _ix$[ebp]
	fstp	DWORD PTR _tc$[ebp]
	jmp	SHORT $LN1@CalculateU
$LN7@CalculateU:
; Line 934
	cmp	DWORD PTR _id$[ebp], 1
	jne	SHORT $LN5@CalculateU
; Line 936
	mov	ecx, DWORD PTR _resy$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv136[ebp], ecx
	fild	DWORD PTR tv136[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	mov	edx, DWORD PTR _resy$[ebp]
	sub	edx, 1
	sub	edx, DWORD PTR _iy$[ebp]
	mov	DWORD PTR tv139[ebp], edx
	fimul	DWORD PTR tv139[ebp]
	fstp	DWORD PTR _tc$[ebp]
	jmp	SHORT $LN1@CalculateU
$LN5@CalculateU:
; Line 938
	cmp	DWORD PTR _id$[ebp], 2
	jne	SHORT $LN3@CalculateU
; Line 940
	mov	eax, DWORD PTR _resy$[ebp]
	sub	eax, 1
	mov	DWORD PTR tv142[ebp], eax
	fild	DWORD PTR tv142[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	mov	ecx, DWORD PTR _resy$[ebp]
	sub	ecx, 1
	sub	ecx, DWORD PTR _iy$[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv145[ebp], ecx
	fimul	DWORD PTR tv145[ebp]
	fstp	DWORD PTR _tc$[ebp]
	jmp	SHORT $LN1@CalculateU
$LN3@CalculateU:
; Line 942
	cmp	DWORD PTR _id$[ebp], 3
	jne	SHORT $LN1@CalculateU
; Line 944
	mov	edx, DWORD PTR _resx$[ebp]
	sub	edx, 1
	mov	DWORD PTR tv148[ebp], edx
	fild	DWORD PTR tv148[ebp]
	fld1
	fdivrp	ST(1), ST(0)
	mov	eax, DWORD PTR _ix$[ebp]
	add	eax, 1
	mov	DWORD PTR tv151[ebp], eax
	fimul	DWORD PTR tv151[ebp]
	fstp	DWORD PTR _tc$[ebp]
$LN1@CalculateU:
; Line 946
	fld	DWORD PTR _tc$[ebp]
; Line 947
	mov	esp, ebp
	pop	ebp
	ret	0
?CalculateUV@btSoftBodyHelpers@@SAMHHHHH@Z ENDP		; btSoftBodyHelpers::CalculateUV
_TEXT	ENDS
PUBLIC	?CreateFromConvexHull@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBVbtVector3@@H_N@Z ; btSoftBodyHelpers::CreateFromConvexHull
PUBLIC	??D@YA?AVbtVector3@@ABV0@0@Z			; operator*
PUBLIC	?CreateEllipsoid@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1H@Z ; btSoftBodyHelpers::CreateEllipsoid
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateEllipsoid@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1H@Z
_TEXT	SEGMENT
$T58138 = -100						; size = 4
$T58137 = -96						; size = 16
$T51401 = -80						; size = 16
$T51400 = -64						; size = 16
_i$51396 = -48						; size = 4
_vtx$ = -40						; size = 20
_worldInfo$ = 8						; size = 4
_center$ = 12						; size = 4
_radius$ = 16						; size = 4
_res$ = 20						; size = 4
?CreateEllipsoid@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1H@Z PROC ; btSoftBodyHelpers::CreateEllipsoid, COMDAT
; Line 952
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 968
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
; Line 969
	lea	ecx, DWORD PTR $T58137[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	push	eax
	mov	eax, DWORD PTR _res$[ebx]
	add	eax, 3
	push	eax
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
; Line 970
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	push	eax
	push	0
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	call	?Generate@Hammersley@?1??CreateEllipsoid@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1H@Z@SAXPAV6@H@Z ; `btSoftBodyHelpers::CreateEllipsoid'::`2'::Hammersley::Generate
	add	esp, 8
; Line 971
	mov	DWORD PTR _i$51396[ebp], 0
	jmp	SHORT $LN3@CreateElli
$LN2@CreateElli:
	mov	ecx, DWORD PTR _i$51396[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$51396[ebp], ecx
$LN3@CreateElli:
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	cmp	DWORD PTR _i$51396[ebp], eax
	jge	SHORT $LN1@CreateElli
; Line 973
	mov	edx, DWORD PTR _center$[ebx]
	push	edx
	mov	eax, DWORD PTR _radius$[ebx]
	push	eax
	mov	ecx, DWORD PTR _i$51396[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	lea	edx, DWORD PTR $T51400[ebp]
	push	edx
	call	??D@YA?AVbtVector3@@ABV0@0@Z		; operator*
	add	esp, 12					; 0000000cH
	push	eax
	lea	eax, DWORD PTR $T51401[ebp]
	push	eax
	call	??H@YA?AVbtVector3@@ABV0@0@Z		; operator+
	add	esp, 12					; 0000000cH
	mov	esi, eax
	mov	ecx, DWORD PTR _i$51396[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
; Line 974
	jmp	SHORT $LN2@CreateElli
$LN1@CreateElli:
; Line 975
	push	1
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	push	eax
	push	0
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	mov	edx, DWORD PTR _worldInfo$[ebx]
	push	edx
	call	?CreateFromConvexHull@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBVbtVector3@@H_N@Z ; btSoftBodyHelpers::CreateFromConvexHull
	add	esp, 16					; 00000010H
	mov	DWORD PTR $T58138[ebp], eax
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
	mov	eax, DWORD PTR $T58138[ebp]
; Line 976
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@CreateElli
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN8@CreateElli:
	DD	1
	DD	$LN7@CreateElli
$LN7@CreateElli:
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$LN6@CreateElli
$LN6@CreateElli:
	DB	118					; 00000076H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
?CreateEllipsoid@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1H@Z ENDP ; btSoftBodyHelpers::CreateEllipsoid
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??D@YA?AVbtVector3@@ABV0@0@Z
_TEXT	SEGMENT
$T58146 = -12						; size = 4
$T58145 = -8						; size = 4
$T58144 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v1$ = 12						; size = 4
_v2$ = 16						; size = 4
??D@YA?AVbtVector3@@ABV0@0@Z PROC			; operator*, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 769
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 778
	mov	eax, DWORD PTR _v1$[ebp]
	mov	ecx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [eax+8]
	fmul	DWORD PTR [ecx+8]
	fstp	DWORD PTR $T58144[ebp]
	mov	edx, DWORD PTR _v1$[ebp]
	mov	eax, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [edx+4]
	fmul	DWORD PTR [eax+4]
	fstp	DWORD PTR $T58145[ebp]
	mov	ecx, DWORD PTR _v1$[ebp]
	mov	edx, DWORD PTR _v2$[ebp]
	fld	DWORD PTR [ecx]
	fmul	DWORD PTR [edx]
	fstp	DWORD PTR $T58146[ebp]
	lea	eax, DWORD PTR $T58144[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58145[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58146[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 780
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D@YA?AVbtVector3@@ABV0@0@Z ENDP			; operator*
_TEXT	ENDS
PUBLIC	?btCos@@YAMM@Z					; btCos
PUBLIC	?btSin@@YAMM@Z					; btSin
PUBLIC	__real@40490fdb
PUBLIC	__real@3fe0000000000000
;	COMDAT __real@40490fdb
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?Generate@Hammersley@?1??CreateEllipsoid@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1H@Z@SAXPAV6@H@Z
_TEXT	SEGMENT
tv143 = -76						; size = 4
$T58150 = -72						; size = 4
$T58149 = -68						; size = 4
$T51418 = -64						; size = 16
_s$51417 = -36						; size = 4
_a$51416 = -32						; size = 4
_w$51415 = -24						; size = 4
_j$51410 = -16						; size = 4
_t$51409 = -12						; size = 4
_p$51408 = -8						; size = 4
_i$51404 = -4						; size = 4
_x$ = 8							; size = 4
_n$ = 12						; size = 4
?Generate@Hammersley@?1??CreateEllipsoid@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1H@Z@SAXPAV6@H@Z PROC ; `btSoftBodyHelpers::CreateEllipsoid'::`2'::Hammersley::Generate, COMDAT
; Line 956
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 957
	mov	DWORD PTR _i$51404[ebp], 0
	jmp	SHORT $LN7@Generate
$LN6@Generate:
	mov	eax, DWORD PTR _i$51404[ebp]
	add	eax, 1
	mov	DWORD PTR _i$51404[ebp], eax
$LN7@Generate:
	mov	ecx, DWORD PTR _i$51404[ebp]
	cmp	ecx, DWORD PTR _n$[ebx]
	jge	$LN5@Generate
; Line 959
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR _p$51408[ebp]
	fldz
	fstp	DWORD PTR _t$51409[ebp]
; Line 960
	mov	edx, DWORD PTR _i$51404[ebp]
	mov	DWORD PTR _j$51410[ebp], edx
	jmp	SHORT $LN4@Generate
$LN3@Generate:
	fld	DWORD PTR _p$51408[ebp]
	fmul	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR _p$51408[ebp]
	mov	eax, DWORD PTR _j$51410[ebp]
	sar	eax, 1
	mov	DWORD PTR _j$51410[ebp], eax
$LN4@Generate:
	cmp	DWORD PTR _j$51410[ebp], 0
	je	SHORT $LN2@Generate
	mov	ecx, DWORD PTR _j$51410[ebp]
	and	ecx, 1
	je	SHORT $LN1@Generate
	fld	DWORD PTR _t$51409[ebp]
	fadd	DWORD PTR _p$51408[ebp]
	fstp	DWORD PTR _t$51409[ebp]
$LN1@Generate:
; Line 961
	jmp	SHORT $LN3@Generate
$LN2@Generate:
	fld	DWORD PTR __real@40000000
	fmul	DWORD PTR _t$51409[ebp]
	fsub	DWORD PTR __real@3f800000
	fstp	DWORD PTR _w$51415[ebp]
; Line 962
	mov	edx, DWORD PTR _i$51404[ebp]
	shl	edx, 1
	mov	DWORD PTR tv143[ebp], edx
	fild	DWORD PTR tv143[ebp]
	fmul	DWORD PTR __real@40490fdb
	fadd	DWORD PTR __real@40490fdb
	fidiv	DWORD PTR _n$[ebx]
	fstp	DWORD PTR _a$51416[ebp]
; Line 963
	fld	DWORD PTR _w$51415[ebp]
	fmul	DWORD PTR _w$51415[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	push	ecx
	fstp	DWORD PTR [esp]
	call	?btSqrt@@YAMM@Z				; btSqrt
	add	esp, 4
	fstp	DWORD PTR _s$51417[ebp]
; Line 964
	push	ecx
	fld	DWORD PTR _a$51416[ebp]
	fstp	DWORD PTR [esp]
	call	?btSin@@YAMM@Z				; btSin
	add	esp, 4
	fmul	DWORD PTR _s$51417[ebp]
	fstp	DWORD PTR $T58149[ebp]
	push	ecx
	fld	DWORD PTR _a$51416[ebp]
	fstp	DWORD PTR [esp]
	call	?btCos@@YAMM@Z				; btCos
	add	esp, 4
	fmul	DWORD PTR _s$51417[ebp]
	fstp	DWORD PTR $T58150[ebp]
	lea	eax, DWORD PTR _w$51415[ebp]
	push	eax
	lea	ecx, DWORD PTR $T58149[ebp]
	push	ecx
	lea	edx, DWORD PTR $T58150[ebp]
	push	edx
	lea	ecx, DWORD PTR $T51418[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	ecx, DWORD PTR _x$[ebx]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _x$[ebx]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _x$[ebx], ecx
; Line 965
	jmp	$LN6@Generate
$LN5@Generate:
; Line 966
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Generate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN12@Generate:
	DD	1
	DD	$LN11@Generate
$LN11@Generate:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN10@Generate
$LN10@Generate:
	DB	119					; 00000077H
	DB	0
?Generate@Hammersley@?1??CreateEllipsoid@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@ABVbtVector3@@1H@Z@SAXPAV6@H@Z ENDP ; `btSoftBodyHelpers::CreateEllipsoid'::`2'::Hammersley::Generate
_TEXT	ENDS
PUBLIC	_cosf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btCos@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?btCos@@YAMM@Z PROC					; btCos, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 408
	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	_cosf
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btCos@@YAMM@Z ENDP					; btCos
_TEXT	ENDS
EXTRN	_cos:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _cosf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 410
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_cos
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?btSin@@YAMM@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
?btSin@@YAMM@Z PROC					; btSin, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btscalar.h
; Line 409
	push	ebp
	mov	ebp, esp
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	call	_sinf
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?btSin@@YAMM@Z ENDP					; btSin
_TEXT	ENDS
EXTRN	_sin:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _sinf
_TEXT	SEGMENT
tv73 = -4						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\math.h
; Line 430
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@_N@@QAE@XZ		; btAlignedObjectArray<bool>::~btAlignedObjectArray<bool>
PUBLIC	??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z	; btAlignedObjectArray<bool>::operator[]
PUBLIC	?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z	; btAlignedObjectArray<bool>::resize
PUBLIC	??0?$btAlignedObjectArray@_N@@QAE@XZ		; btAlignedObjectArray<bool>::btAlignedObjectArray<bool>
PUBLIC	??$btMax@H@@YAABHABH0@Z				; btMax<int>
PUBLIC	__$ArrayPad$
PUBLIC	?CreateFromTriMesh@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBMPBHH_N@Z ; btSoftBodyHelpers::CreateFromTriMesh
EXTRN	?randomizeConstraints@btSoftBody@@QAEXXZ:PROC	; btSoftBody::randomizeConstraints
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateFromTriMesh@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBMPBHH_N@Z
_TEXT	SEGMENT
tv155 = -204						; size = 4
$T58174 = -200						; size = 4
$T58171 = -196						; size = 4
$T58170 = -192						; size = 16
$T58169 = -161						; size = 1
_k$51459 = -160						; size = 4
_j$51458 = -156						; size = 4
_idx$51457 = -148					; size = 12
_psb$ = -132						; size = 4
$T51449 = -128						; size = 16
_vtx$ = -108						; size = 20
_chks$ = -80						; size = 20
_ni$ = -56						; size = 4
_j$ = -52						; size = 4
_i$ = -48						; size = 4
_maxidx$ = -40						; size = 4
__$ArrayPad$ = -4					; size = 4
_worldInfo$ = 8						; size = 4
_vertices$ = 12						; size = 4
_triangles$ = 16					; size = 4
_ntriangles$ = 20					; size = 4
_randomizeConstraints$ = 24				; size = 1
?CreateFromTriMesh@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBMPBHH_N@Z PROC ; btSoftBodyHelpers::CreateFromTriMesh, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
; Line 984
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 985
	mov	DWORD PTR _maxidx$[ebp], 0
; Line 988
	mov	DWORD PTR _i$[ebp], 0
	mov	eax, DWORD PTR _ntriangles$[ebx]
	imul	eax, 3
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN14@CreateFrom
$LN13@CreateFrom:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN14@CreateFrom:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _ni$[ebp]
	jge	SHORT $LN12@CreateFrom
; Line 990
	lea	eax, DWORD PTR _maxidx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _triangles$[ebx]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	??$btMax@H@@YAABHABH0@Z			; btMax<int>
	add	esp, 8
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _maxidx$[ebp], ecx
; Line 991
	jmp	SHORT $LN13@CreateFrom
$LN12@CreateFrom:
; Line 992
	mov	edx, DWORD PTR _maxidx$[ebp]
	add	edx, 1
	mov	DWORD PTR _maxidx$[ebp], edx
; Line 993
	lea	ecx, DWORD PTR _chks$[ebp]
	call	??0?$btAlignedObjectArray@_N@@QAE@XZ	; btAlignedObjectArray<bool>::btAlignedObjectArray<bool>
; Line 994
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
; Line 995
	mov	BYTE PTR $T58169[ebp], 0
	lea	eax, DWORD PTR $T58169[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxidx$[ebp]
	imul	ecx, DWORD PTR _maxidx$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _chks$[ebp]
	call	?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z ; btAlignedObjectArray<bool>::resize
; Line 996
	lea	ecx, DWORD PTR $T58170[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	push	eax
	mov	edx, DWORD PTR _maxidx$[ebp]
	push	edx
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
; Line 997
	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
	mov	eax, DWORD PTR _maxidx$[ebp]
	imul	eax, 3
	mov	DWORD PTR _ni$[ebp], eax
	jmp	SHORT $LN11@CreateFrom
$LN10@CreateFrom:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 3
	mov	DWORD PTR _i$[ebp], edx
$LN11@CreateFrom:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	SHORT $LN9@CreateFrom
; Line 999
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vertices$[ebx]
	lea	eax, DWORD PTR [edx+ecx*4+8]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vertices$[ebx]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _vertices$[ebx]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	lea	ecx, DWORD PTR $T51449[ebp]
	call	??0btVector3@@QAE@ABM00@Z		; btVector3::btVector3
	mov	esi, eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], ecx
; Line 1000
	jmp	SHORT $LN10@CreateFrom
$LN9@CreateFrom:
; Line 1001
	push	1296					; 00000510H
	call	??2btCollisionObject@@SAPAXI@Z		; btCollisionObject::operator new
	add	esp, 4
	mov	DWORD PTR $T58171[ebp], eax
	cmp	DWORD PTR $T58171[ebp], 0
	je	SHORT $LN17@CreateFrom
	push	0
	push	0
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	push	eax
	mov	edx, DWORD PTR _worldInfo$[ebx]
	push	edx
	mov	ecx, DWORD PTR $T58171[ebp]
	call	??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z ; btSoftBody::btSoftBody
	mov	DWORD PTR tv155[ebp], eax
	jmp	SHORT $LN18@CreateFrom
$LN17@CreateFrom:
	mov	DWORD PTR tv155[ebp], 0
$LN18@CreateFrom:
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR _psb$[ebp], eax
; Line 1002
	mov	DWORD PTR _i$[ebp], 0
	mov	ecx, DWORD PTR _ntriangles$[ebx]
	imul	ecx, 3
	mov	DWORD PTR _ni$[ebp], ecx
	jmp	SHORT $LN8@CreateFrom
$LN7@CreateFrom:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 3
	mov	DWORD PTR _i$[ebp], edx
$LN8@CreateFrom:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _ni$[ebp]
	jge	$LN6@CreateFrom
; Line 1004
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _triangles$[ebx]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _idx$51457[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _triangles$[ebx]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _idx$51457[ebp+4], eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _triangles$[ebx]
	mov	eax, DWORD PTR [edx+ecx*4+8]
	mov	DWORD PTR _idx$51457[ebp+8], eax
; Line 1006
	mov	DWORD PTR _j$51458[ebp], 2
	mov	DWORD PTR _k$51459[ebp], 0
	jmp	SHORT $LN5@CreateFrom
$LN4@CreateFrom:
	mov	ecx, DWORD PTR _k$51459[ebp]
	mov	DWORD PTR _j$51458[ebp], ecx
	mov	edx, DWORD PTR _k$51459[ebp]
	add	edx, 1
	mov	DWORD PTR _k$51459[ebp], edx
$LN5@CreateFrom:
	cmp	DWORD PTR _k$51459[ebp], 3
	jge	$LN3@CreateFrom
; Line 1008
	mov	eax, DWORD PTR _k$51459[ebp]
	mov	ecx, DWORD PTR _idx$51457[ebp+eax*4]
	imul	ecx, DWORD PTR _maxidx$[ebp]
	mov	edx, DWORD PTR _j$51458[ebp]
	add	ecx, DWORD PTR _idx$51457[ebp+edx*4]
	push	ecx
	lea	ecx, DWORD PTR _chks$[ebp]
	call	??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z ; btAlignedObjectArray<bool>::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN2@CreateFrom
; Line 1010
	mov	ecx, DWORD PTR _k$51459[ebp]
	mov	edx, DWORD PTR _idx$51457[ebp+ecx*4]
	imul	edx, DWORD PTR _maxidx$[ebp]
	mov	eax, DWORD PTR _j$51458[ebp]
	add	edx, DWORD PTR _idx$51457[ebp+eax*4]
	push	edx
	lea	ecx, DWORD PTR _chks$[ebp]
	call	??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z ; btAlignedObjectArray<bool>::operator[]
	mov	BYTE PTR [eax], 1
; Line 1011
	mov	ecx, DWORD PTR _j$51458[ebp]
	mov	edx, DWORD PTR _idx$51457[ebp+ecx*4]
	imul	edx, DWORD PTR _maxidx$[ebp]
	mov	eax, DWORD PTR _k$51459[ebp]
	add	edx, DWORD PTR _idx$51457[ebp+eax*4]
	push	edx
	lea	ecx, DWORD PTR _chks$[ebp]
	call	??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z ; btAlignedObjectArray<bool>::operator[]
	mov	BYTE PTR [eax], 1
; Line 1012
	push	0
	push	0
	mov	ecx, DWORD PTR _k$51459[ebp]
	mov	edx, DWORD PTR _idx$51457[ebp+ecx*4]
	push	edx
	mov	eax, DWORD PTR _j$51458[ebp]
	mov	ecx, DWORD PTR _idx$51457[ebp+eax*4]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN2@CreateFrom:
; Line 1014
	jmp	$LN4@CreateFrom
$LN3@CreateFrom:
; Line 1016
	push	0
	mov	edx, DWORD PTR _idx$51457[ebp+8]
	push	edx
	mov	eax, DWORD PTR _idx$51457[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _idx$51457[ebp]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 1017
	jmp	$LN7@CreateFrom
$LN6@CreateFrom:
; Line 1019
	movzx	edx, BYTE PTR _randomizeConstraints$[ebx]
	test	edx, edx
	je	SHORT $LN1@CreateFrom
; Line 1021
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?randomizeConstraints@btSoftBody@@QAEXXZ ; btSoftBody::randomizeConstraints
$LN1@CreateFrom:
; Line 1024
	mov	eax, DWORD PTR _psb$[ebp]
	mov	DWORD PTR $T58174[ebp], eax
	lea	ecx, DWORD PTR _vtx$[ebp]
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
	lea	ecx, DWORD PTR _chks$[ebp]
	call	??1?$btAlignedObjectArray@_N@@QAE@XZ	; btAlignedObjectArray<bool>::~btAlignedObjectArray<bool>
	mov	eax, DWORD PTR $T58174[ebp]
; Line 1025
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@CreateFrom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN24@CreateFrom:
	DD	4
	DD	$LN23@CreateFrom
$LN23@CreateFrom:
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN19@CreateFrom
	DD	-80					; ffffffb0H
	DD	20					; 00000014H
	DD	$LN20@CreateFrom
	DD	-108					; ffffff94H
	DD	20					; 00000014H
	DD	$LN21@CreateFrom
	DD	-148					; ffffff6cH
	DD	12					; 0000000cH
	DD	$LN22@CreateFrom
$LN22@CreateFrom:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN21@CreateFrom:
	DB	118					; 00000076H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	0
$LN20@CreateFrom:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	107					; 0000006bH
	DB	115					; 00000073H
	DB	0
$LN19@CreateFrom:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
?CreateFromTriMesh@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBMPBHH_N@Z ENDP ; btSoftBodyHelpers::CreateFromTriMesh
_TEXT	ENDS
PUBLIC	??1HullResult@@QAE@XZ				; HullResult::~HullResult
PUBLIC	??1HullLibrary@@QAE@XZ				; HullLibrary::~HullLibrary
PUBLIC	??A?$btAlignedObjectArray@I@@QAEAAIH@Z		; btAlignedObjectArray<unsigned int>::operator[]
PUBLIC	??0HullLibrary@@QAE@XZ				; HullLibrary::HullLibrary
PUBLIC	??0HullResult@@QAE@XZ				; HullResult::HullResult
PUBLIC	??0HullDesc@@QAE@W4HullFlag@@IPBVbtVector3@@I@Z	; HullDesc::HullDesc
PUBLIC	__$ArrayPad$
EXTRN	?ReleaseResult@HullLibrary@@QAE?AW4HullError@@AAVHullResult@@@Z:PROC ; HullLibrary::ReleaseResult
EXTRN	?CreateConvexHull@HullLibrary@@QAE?AW4HullError@@ABVHullDesc@@AAVHullResult@@@Z:PROC ; HullLibrary::CreateConvexHull
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateFromConvexHull@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBVbtVector3@@H_N@Z
_TEXT	SEGMENT
tv90 = -192						; size = 4
$T58187 = -188						; size = 4
$T58184 = -184						; size = 4
_idx$51485 = -176					; size = 12
_i$51480 = -160						; size = 4
_psb$ = -156						; size = 4
_hlib$ = -148						; size = 40
_hres$ = -100						; size = 56
_hdsc$ = -36						; size = 28
__$ArrayPad$ = -4					; size = 4
_worldInfo$ = 8						; size = 4
_vertices$ = 12						; size = 4
_nvertices$ = 16					; size = 4
_randomizeConstraints$ = 20				; size = 1
?CreateFromConvexHull@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBVbtVector3@@H_N@Z PROC ; btSoftBodyHelpers::CreateFromConvexHull, COMDAT
; Line 1030
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1031
	push	16					; 00000010H
	mov	eax, DWORD PTR _vertices$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nvertices$[ebp]
	push	ecx
	push	1
	lea	ecx, DWORD PTR _hdsc$[ebp]
	call	??0HullDesc@@QAE@W4HullFlag@@IPBVbtVector3@@I@Z ; HullDesc::HullDesc
; Line 1032
	lea	ecx, DWORD PTR _hres$[ebp]
	call	??0HullResult@@QAE@XZ			; HullResult::HullResult
; Line 1033
	lea	ecx, DWORD PTR _hlib$[ebp]
	call	??0HullLibrary@@QAE@XZ
; Line 1034
	mov	edx, DWORD PTR _nvertices$[ebp]
	mov	DWORD PTR _hdsc$[ebp+20], edx
; Line 1035
	lea	eax, DWORD PTR _hres$[ebp]
	push	eax
	lea	ecx, DWORD PTR _hdsc$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _hlib$[ebp]
	call	?CreateConvexHull@HullLibrary@@QAE?AW4HullError@@ABVHullDesc@@AAVHullResult@@@Z ; HullLibrary::CreateConvexHull
; Line 1037
	push	1296					; 00000510H
	call	??2btCollisionObject@@SAPAXI@Z		; btCollisionObject::operator new
	add	esp, 4
	mov	DWORD PTR $T58184[ebp], eax
	cmp	DWORD PTR $T58184[ebp], 0
	je	SHORT $LN10@CreateFrom@2
	push	0
	push	0
	lea	ecx, DWORD PTR _hres$[ebp+8]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	mov	edx, DWORD PTR _hres$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _worldInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T58184[ebp]
	call	??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z ; btSoftBody::btSoftBody
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN11@CreateFrom@2
$LN10@CreateFrom@2:
	mov	DWORD PTR tv90[ebp], 0
$LN11@CreateFrom@2:
	mov	ecx, DWORD PTR tv90[ebp]
	mov	DWORD PTR _psb$[ebp], ecx
; Line 1038
	mov	DWORD PTR _i$51480[ebp], 0
	jmp	SHORT $LN7@CreateFrom@2
$LN6@CreateFrom@2:
	mov	edx, DWORD PTR _i$51480[ebp]
	add	edx, 1
	mov	DWORD PTR _i$51480[ebp], edx
$LN7@CreateFrom@2:
	mov	eax, DWORD PTR _i$51480[ebp]
	cmp	eax, DWORD PTR _hres$[ebp+28]
	jge	$LN5@CreateFrom@2
; Line 1040
	mov	ecx, DWORD PTR _i$51480[ebp]
	imul	ecx, 3
	push	ecx
	lea	ecx, DWORD PTR _hres$[ebp+36]
	call	??A?$btAlignedObjectArray@I@@QAEAAIH@Z	; btAlignedObjectArray<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _idx$51485[ebp], edx
; Line 1041
	mov	eax, DWORD PTR _i$51480[ebp]
	imul	eax, 3
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _hres$[ebp+36]
	call	??A?$btAlignedObjectArray@I@@QAEAAIH@Z	; btAlignedObjectArray<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _idx$51485[ebp+4], ecx
; Line 1043
	mov	edx, DWORD PTR _i$51480[ebp]
	imul	edx, 3
	add	edx, 2
	push	edx
	lea	ecx, DWORD PTR _hres$[ebp+36]
	call	??A?$btAlignedObjectArray@I@@QAEAAIH@Z	; btAlignedObjectArray<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _idx$51485[ebp+8], eax
; Line 1044
	mov	ecx, DWORD PTR _idx$51485[ebp]
	cmp	ecx, DWORD PTR _idx$51485[ebp+4]
	jge	SHORT $LN4@CreateFrom@2
	push	0
	push	0
	mov	edx, DWORD PTR _idx$51485[ebp+4]
	push	edx
	mov	eax, DWORD PTR _idx$51485[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN4@CreateFrom@2:
; Line 1045
	mov	ecx, DWORD PTR _idx$51485[ebp+4]
	cmp	ecx, DWORD PTR _idx$51485[ebp+8]
	jge	SHORT $LN3@CreateFrom@2
	push	0
	push	0
	mov	edx, DWORD PTR _idx$51485[ebp+8]
	push	edx
	mov	eax, DWORD PTR _idx$51485[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN3@CreateFrom@2:
; Line 1046
	mov	ecx, DWORD PTR _idx$51485[ebp+8]
	cmp	ecx, DWORD PTR _idx$51485[ebp]
	jge	SHORT $LN2@CreateFrom@2
	push	0
	push	0
	mov	edx, DWORD PTR _idx$51485[ebp]
	push	edx
	mov	eax, DWORD PTR _idx$51485[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN2@CreateFrom@2:
; Line 1047
	push	0
	mov	ecx, DWORD PTR _idx$51485[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _idx$51485[ebp+4]
	push	edx
	mov	eax, DWORD PTR _idx$51485[ebp]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendFace@btSoftBody@@QAEXHHHPAUMaterial@1@@Z ; btSoftBody::appendFace
; Line 1048
	jmp	$LN6@CreateFrom@2
$LN5@CreateFrom@2:
; Line 1049
	lea	ecx, DWORD PTR _hres$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _hlib$[ebp]
	call	?ReleaseResult@HullLibrary@@QAE?AW4HullError@@AAVHullResult@@@Z ; HullLibrary::ReleaseResult
; Line 1050
	movzx	edx, BYTE PTR _randomizeConstraints$[ebp]
	test	edx, edx
	je	SHORT $LN1@CreateFrom@2
; Line 1052
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?randomizeConstraints@btSoftBody@@QAEXXZ ; btSoftBody::randomizeConstraints
$LN1@CreateFrom@2:
; Line 1054
	mov	eax, DWORD PTR _psb$[ebp]
	mov	DWORD PTR $T58187[ebp], eax
	lea	ecx, DWORD PTR _hlib$[ebp]
	call	??1HullLibrary@@QAE@XZ
	lea	ecx, DWORD PTR _hres$[ebp]
	call	??1HullResult@@QAE@XZ
	mov	eax, DWORD PTR $T58187[ebp]
; Line 1055
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@CreateFrom@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN17@CreateFrom@2:
	DD	4
	DD	$LN16@CreateFrom@2
$LN16@CreateFrom@2:
	DD	-36					; ffffffdcH
	DD	28					; 0000001cH
	DD	$LN12@CreateFrom@2
	DD	-100					; ffffff9cH
	DD	56					; 00000038H
	DD	$LN13@CreateFrom@2
	DD	-148					; ffffff6cH
	DD	40					; 00000028H
	DD	$LN14@CreateFrom@2
	DD	-176					; ffffff50H
	DD	12					; 0000000cH
	DD	$LN15@CreateFrom@2
$LN15@CreateFrom@2:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	120					; 00000078H
	DB	0
$LN14@CreateFrom@2:
	DB	104					; 00000068H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	0
$LN13@CreateFrom@2:
	DB	104					; 00000068H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN12@CreateFrom@2:
	DB	104					; 00000068H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
?CreateFromConvexHull@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBVbtVector3@@H_N@Z ENDP ; btSoftBodyHelpers::CreateFromConvexHull
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@I@@QAE@XZ		; btAlignedObjectArray<unsigned int>::btAlignedObjectArray<unsigned int>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0HullResult@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0HullResult@@QAE@XZ PROC				; HullResult::HullResult, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btconvexhull.h
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$btAlignedObjectArray@I@@QAE@XZ	; btAlignedObjectArray<unsigned int>::btAlignedObjectArray<unsigned int>
; Line 32
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 1
; Line 33
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 34
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
; Line 35
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 36
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0HullResult@@QAE@XZ ENDP				; HullResult::HullResult
_TEXT	ENDS
PUBLIC	__real@3a83126f
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0HullDesc@@QAE@W4HullFlag@@IPBVbtVector3@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flag$ = 8						; size = 4
_vcount$ = 12						; size = 4
_vertices$ = 16						; size = 4
_stride$ = 20						; size = 4
??0HullDesc@@QAE@W4HullFlag@@IPBVbtVector3@@I@Z PROC	; HullDesc::HullDesc, COMDAT
; _this$ = ecx
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _flag$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 76
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _vcount$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 77
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 78
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stride$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3a83126f
	fstp	DWORD PTR [edx+16]
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 4096		; 00001000H
; Line 81
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0HullDesc@@QAE@W4HullFlag@@IPBVbtVector3@@I@Z ENDP	; HullDesc::HullDesc
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@I@@QAE@XZ		; btAlignedObjectArray<unsigned int>::~btAlignedObjectArray<unsigned int>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1HullResult@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1HullResult@@QAE@XZ PROC				; HullResult::~HullResult, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$btAlignedObjectArray@I@@QAE@XZ	; btAlignedObjectArray<unsigned int>::~btAlignedObjectArray<unsigned int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1HullResult@@QAE@XZ ENDP				; HullResult::~HullResult
_TEXT	ENDS
PUBLIC	??0?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ ; btAlignedObjectArray<btHullTriangle *>::btAlignedObjectArray<btHullTriangle *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0HullLibrary@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0HullLibrary@@QAE@XZ PROC				; HullLibrary::HullLibrary, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ ; btAlignedObjectArray<btHullTriangle *>::btAlignedObjectArray<btHullTriangle *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::btAlignedObjectArray<int>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0HullLibrary@@QAE@XZ ENDP				; HullLibrary::HullLibrary
_TEXT	ENDS
PUBLIC	??1?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ ; btAlignedObjectArray<btHullTriangle *>::~btAlignedObjectArray<btHullTriangle *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1HullLibrary@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1HullLibrary@@QAE@XZ PROC				; HullLibrary::~HullLibrary, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$btAlignedObjectArray@H@@QAE@XZ	; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ ; btAlignedObjectArray<btHullTriangle *>::~btAlignedObjectArray<btHullTriangle *>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1HullLibrary@@QAE@XZ ENDP				; HullLibrary::~HullLibrary
_TEXT	ENDS
PUBLIC	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
PUBLIC	?setZ@btVector3@@QAEXM@Z			; btVector3::setZ
PUBLIC	?setY@btVector3@@QAEXM@Z			; btVector3::setY
PUBLIC	?setX@btVector3@@QAEXM@Z			; btVector3::setX
PUBLIC	__$ArrayPad$
PUBLIC	?CreateFromTetGenData@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBD11_N22@Z ; btSoftBodyHelpers::CreateFromTetGenData
EXTRN	_printf:PROC
EXTRN	?appendTetra@btSoftBody@@QAEXHHHHPAUMaterial@1@@Z:PROC ; btSoftBody::appendTetra
EXTRN	_sscanf:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CreateFromTetGenData@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBD11_N22@Z
_TEXT	SEGMENT
tv161 = -284						; size = 4
$T58213 = -280						; size = 4
$T58210 = -276						; size = 4
$T58209 = -272						; size = 16
_ni$51550 = -240					; size = 16
_index$51549 = -216					; size = 4
_i$51545 = -208						; size = 4
_neattrb$51543 = -200					; size = 4
_ncorner$51542 = -188					; size = 4
_ntetra$51541 = -176					; size = 4
_psb$ = -168						; size = 4
_z$51534 = -160						; size = 4
_y$51533 = -148						; size = 4
_x$51532 = -136						; size = 4
_index$51531 = -124					; size = 4
_i$51527 = -116						; size = 4
_result$ = -112						; size = 4
_hasbounds$ = -104					; size = 4
_nattrb$ = -92						; size = 4
_ndims$ = -80						; size = 4
_nnode$ = -68						; size = 4
_pos$ = -56						; size = 20
__$ArrayPad$ = -4					; size = 4
_worldInfo$ = 8						; size = 4
_ele$ = 12						; size = 4
_face$ = 16						; size = 4
_node$ = 20						; size = 4
_bfacelinks$ = 24					; size = 1
_btetralinks$ = 28					; size = 1
_bfacesfromtetras$ = 32					; size = 1
?CreateFromTetGenData@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBD11_N22@Z PROC ; btSoftBodyHelpers::CreateFromTetGenData, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
; Line 1087
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	edi
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 1088
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
; Line 1089
	mov	DWORD PTR _nnode$[ebp], 0
; Line 1090
	mov	DWORD PTR _ndims$[ebp], 0
; Line 1091
	mov	DWORD PTR _nattrb$[ebp], 0
; Line 1092
	mov	DWORD PTR _hasbounds$[ebp], 0
; Line 1093
	lea	eax, DWORD PTR _hasbounds$[ebp]
	push	eax
	lea	ecx, DWORD PTR _nattrb$[ebp]
	push	ecx
	lea	edx, DWORD PTR _ndims$[ebp]
	push	edx
	lea	eax, DWORD PTR _nnode$[ebp]
	push	eax
	push	OFFSET $SG51524
	mov	ecx, DWORD PTR _node$[ebx]
	push	ecx
	call	_sscanf
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result$[ebp], eax
; Line 1094
	lea	edx, DWORD PTR _hasbounds$[ebp]
	push	edx
	lea	eax, DWORD PTR _nattrb$[ebp]
	push	eax
	lea	ecx, DWORD PTR _ndims$[ebp]
	push	ecx
	lea	edx, DWORD PTR _nnode$[ebp]
	push	edx
	push	OFFSET $SG51525
	mov	eax, DWORD PTR _node$[ebx]
	push	eax
	call	_sscanf
	add	esp, 24					; 00000018H
	mov	DWORD PTR _result$[ebp], eax
; Line 1095
	mov	ecx, DWORD PTR _node$[ebx]
	push	ecx
	call	?nextLine@@YAHPBD@Z			; nextLine
	add	esp, 4
	add	eax, DWORD PTR _node$[ebx]
	mov	DWORD PTR _node$[ebx], eax
; Line 1097
	lea	ecx, DWORD PTR $T58209[ebp]
	call	??0btVector3@@QAE@XZ			; btVector3::btVector3
	push	eax
	mov	edx, DWORD PTR _nnode$[ebp]
	push	edx
	lea	ecx, DWORD PTR _pos$[ebp]
	call	?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::resize
; Line 1098
	mov	DWORD PTR _i$51527[ebp], 0
	jmp	SHORT $LN8@CreateFrom@3
$LN7@CreateFrom@3:
	mov	eax, DWORD PTR _i$51527[ebp]
	add	eax, 1
	mov	DWORD PTR _i$51527[ebp], eax
$LN8@CreateFrom@3:
	lea	ecx, DWORD PTR _pos$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	cmp	DWORD PTR _i$51527[ebp], eax
	jge	$LN6@CreateFrom@3
; Line 1100
	mov	DWORD PTR _index$51531[ebp], 0
; Line 1103
	lea	ecx, DWORD PTR _z$51534[ebp]
	push	ecx
	lea	edx, DWORD PTR _y$51533[ebp]
	push	edx
	lea	eax, DWORD PTR _x$51532[ebp]
	push	eax
	lea	ecx, DWORD PTR _index$51531[ebp]
	push	ecx
	push	OFFSET $SG51535
	mov	edx, DWORD PTR _node$[ebx]
	push	edx
	call	_sscanf
	add	esp, 24					; 00000018H
; Line 1107
	mov	eax, DWORD PTR _node$[ebx]
	push	eax
	call	?nextLine@@YAHPBD@Z			; nextLine
	add	esp, 4
	add	eax, DWORD PTR _node$[ebx]
	mov	DWORD PTR _node$[ebx], eax
; Line 1115
	push	ecx
	fld	DWORD PTR _x$51532[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _index$51531[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	ecx, eax
	call	?setX@btVector3@@QAEXM@Z		; btVector3::setX
; Line 1116
	push	ecx
	fld	DWORD PTR _y$51533[ebp]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _index$51531[ebp]
	push	edx
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	ecx, eax
	call	?setY@btVector3@@QAEXM@Z		; btVector3::setY
; Line 1117
	push	ecx
	fld	DWORD PTR _z$51534[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _index$51531[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	mov	ecx, eax
	call	?setZ@btVector3@@QAEXM@Z		; btVector3::setZ
; Line 1118
	jmp	$LN7@CreateFrom@3
$LN6@CreateFrom@3:
; Line 1119
	push	1296					; 00000510H
	call	??2btCollisionObject@@SAPAXI@Z		; btCollisionObject::operator new
	add	esp, 4
	mov	DWORD PTR $T58210[ebp], eax
	cmp	DWORD PTR $T58210[ebp], 0
	je	SHORT $LN11@CreateFrom@3
	push	0
	push	0
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ; btAlignedObjectArray<btVector3>::operator[]
	push	eax
	mov	ecx, DWORD PTR _nnode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _worldInfo$[ebx]
	push	edx
	mov	ecx, DWORD PTR $T58210[ebp]
	call	??0btSoftBody@@QAE@PAUbtSoftBodyWorldInfo@@HPBVbtVector3@@PBM@Z ; btSoftBody::btSoftBody
	mov	DWORD PTR tv161[ebp], eax
	jmp	SHORT $LN12@CreateFrom@3
$LN11@CreateFrom@3:
	mov	DWORD PTR tv161[ebp], 0
$LN12@CreateFrom@3:
	mov	eax, DWORD PTR tv161[ebp]
	mov	DWORD PTR _psb$[ebp], eax
; Line 1144
	cmp	DWORD PTR _ele$[ebx], 0
	je	$LN2@CreateFrom@3
	mov	ecx, DWORD PTR _ele$[ebx]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN2@CreateFrom@3
; Line 1146
	mov	DWORD PTR _ntetra$51541[ebp], 0
; Line 1147
	mov	DWORD PTR _ncorner$51542[ebp], 0
; Line 1148
	mov	DWORD PTR _neattrb$51543[ebp], 0
; Line 1149
	lea	eax, DWORD PTR _neattrb$51543[ebp]
	push	eax
	lea	ecx, DWORD PTR _ncorner$51542[ebp]
	push	ecx
	lea	edx, DWORD PTR _ntetra$51541[ebp]
	push	edx
	push	OFFSET $SG51544
	mov	eax, DWORD PTR _ele$[ebx]
	push	eax
	call	_sscanf
	add	esp, 20					; 00000014H
; Line 1150
	mov	ecx, DWORD PTR _ele$[ebx]
	push	ecx
	call	?nextLine@@YAHPBD@Z			; nextLine
	add	esp, 4
	add	eax, DWORD PTR _ele$[ebx]
	mov	DWORD PTR _ele$[ebx], eax
; Line 1153
	mov	DWORD PTR _i$51545[ebp], 0
	jmp	SHORT $LN4@CreateFrom@3
$LN3@CreateFrom@3:
	mov	edx, DWORD PTR _i$51545[ebp]
	add	edx, 1
	mov	DWORD PTR _i$51545[ebp], edx
$LN4@CreateFrom@3:
	mov	eax, DWORD PTR _i$51545[ebp]
	cmp	eax, DWORD PTR _ntetra$51541[ebp]
	jge	$LN2@CreateFrom@3
; Line 1155
	mov	DWORD PTR _index$51549[ebp], 0
; Line 1160
	lea	ecx, DWORD PTR _ni$51550[ebp+12]
	push	ecx
	lea	edx, DWORD PTR _ni$51550[ebp+8]
	push	edx
	lea	eax, DWORD PTR _ni$51550[ebp+4]
	push	eax
	lea	ecx, DWORD PTR _ni$51550[ebp]
	push	ecx
	lea	edx, DWORD PTR _index$51549[ebp]
	push	edx
	push	OFFSET $SG51551
	mov	eax, DWORD PTR _ele$[ebx]
	push	eax
	call	_sscanf
	add	esp, 28					; 0000001cH
; Line 1161
	mov	ecx, DWORD PTR _ele$[ebx]
	push	ecx
	call	?nextLine@@YAHPBD@Z			; nextLine
	add	esp, 4
	add	eax, DWORD PTR _ele$[ebx]
	mov	DWORD PTR _ele$[ebx], eax
; Line 1164
	push	0
	mov	edx, DWORD PTR _ni$51550[ebp+12]
	push	edx
	mov	eax, DWORD PTR _ni$51550[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _ni$51550[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ni$51550[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendTetra@btSoftBody@@QAEXHHHHPAUMaterial@1@@Z ; btSoftBody::appendTetra
; Line 1165
	movzx	eax, BYTE PTR _btetralinks$[ebx]
	test	eax, eax
	je	$LN1@CreateFrom@3
; Line 1167
	push	1
	push	0
	mov	ecx, DWORD PTR _ni$51550[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _ni$51550[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 1168
	push	1
	push	0
	mov	eax, DWORD PTR _ni$51550[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _ni$51550[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 1169
	push	1
	push	0
	mov	edx, DWORD PTR _ni$51550[ebp]
	push	edx
	mov	eax, DWORD PTR _ni$51550[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 1170
	push	1
	push	0
	mov	ecx, DWORD PTR _ni$51550[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _ni$51550[ebp]
	push	edx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 1171
	push	1
	push	0
	mov	eax, DWORD PTR _ni$51550[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _ni$51550[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
; Line 1172
	push	1
	push	0
	mov	edx, DWORD PTR _ni$51550[ebp+12]
	push	edx
	mov	eax, DWORD PTR _ni$51550[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _psb$[ebp]
	call	?appendLink@btSoftBody@@QAEXHHPAUMaterial@1@_N@Z ; btSoftBody::appendLink
$LN1@CreateFrom@3:
; Line 1174
	jmp	$LN3@CreateFrom@3
$LN2@CreateFrom@3:
; Line 1176
	mov	ecx, DWORD PTR _psb$[ebp]
	add	ecx, 732				; 000002dcH
	call	?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Node>::size
	push	eax
	push	OFFSET $SG51553
	call	_printf
	add	esp, 8
; Line 1177
	mov	ecx, DWORD PTR _psb$[ebp]
	add	ecx, 752				; 000002f0H
	call	?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Link>::size
	push	eax
	push	OFFSET $SG51554
	call	_printf
	add	esp, 8
; Line 1178
	mov	ecx, DWORD PTR _psb$[ebp]
	add	ecx, 772				; 00000304H
	call	?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Face>::size
	push	eax
	push	OFFSET $SG51555
	call	_printf
	add	esp, 8
; Line 1179
	mov	ecx, DWORD PTR _psb$[ebp]
	add	ecx, 792				; 00000318H
	call	?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ; btAlignedObjectArray<btSoftBody::Tetra>::size
	push	eax
	push	OFFSET $SG51556
	call	_printf
	add	esp, 8
; Line 1180
	mov	ecx, DWORD PTR _psb$[ebp]
	mov	DWORD PTR $T58213[ebp], ecx
	lea	ecx, DWORD PTR _pos$[ebp]
	call	??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
	mov	eax, DWORD PTR $T58213[ebp]
; Line 1181
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@CreateFrom@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	1
$LN28@CreateFrom@3:
	DD	14					; 0000000eH
	DD	$LN27@CreateFrom@3
$LN27@CreateFrom@3:
	DD	-56					; ffffffc8H
	DD	20					; 00000014H
	DD	$LN13@CreateFrom@3
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN14@CreateFrom@3
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN15@CreateFrom@3
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN16@CreateFrom@3
	DD	-104					; ffffff98H
	DD	4
	DD	$LN17@CreateFrom@3
	DD	-124					; ffffff84H
	DD	4
	DD	$LN18@CreateFrom@3
	DD	-136					; ffffff78H
	DD	4
	DD	$LN19@CreateFrom@3
	DD	-148					; ffffff6cH
	DD	4
	DD	$LN20@CreateFrom@3
	DD	-160					; ffffff60H
	DD	4
	DD	$LN21@CreateFrom@3
	DD	-176					; ffffff50H
	DD	4
	DD	$LN22@CreateFrom@3
	DD	-188					; ffffff44H
	DD	4
	DD	$LN23@CreateFrom@3
	DD	-200					; ffffff38H
	DD	4
	DD	$LN24@CreateFrom@3
	DD	-216					; ffffff28H
	DD	4
	DD	$LN25@CreateFrom@3
	DD	-240					; ffffff10H
	DD	16					; 00000010H
	DD	$LN26@CreateFrom@3
$LN26@CreateFrom@3:
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	0
$LN25@CreateFrom@3:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN24@CreateFrom@3:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	98					; 00000062H
	DB	0
$LN23@CreateFrom@3:
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN22@CreateFrom@3:
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	0
$LN21@CreateFrom@3:
	DB	122					; 0000007aH
	DB	0
$LN20@CreateFrom@3:
	DB	121					; 00000079H
	DB	0
$LN19@CreateFrom@3:
	DB	120					; 00000078H
	DB	0
$LN18@CreateFrom@3:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	0
$LN17@CreateFrom@3:
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	0
$LN16@CreateFrom@3:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	98					; 00000062H
	DB	0
$LN15@CreateFrom@3:
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN14@CreateFrom@3:
	DB	110					; 0000006eH
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN13@CreateFrom@3:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?CreateFromTetGenData@btSoftBodyHelpers@@SAPAVbtSoftBody@@AAUbtSoftBodyWorldInfo@@PBD11_N22@Z ENDP ; btSoftBodyHelpers::CreateFromTetGenData
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setX@btVector3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__x$ = 8						; size = 4
?setX@btVector3@@QAEXM@Z PROC				; btVector3::setX, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 567
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __x$[ebp]
	fstp	DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	4
?setX@btVector3@@QAEXM@Z ENDP				; btVector3::setX
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setY@btVector3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__y$ = 8						; size = 4
?setY@btVector3@@QAEXM@Z PROC				; btVector3::setY, COMDAT
; _this$ = ecx
; Line 569
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __y$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	4
?setY@btVector3@@QAEXM@Z ENDP				; btVector3::setY
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?setZ@btVector3@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__z$ = 8						; size = 4
?setZ@btVector3@@QAEXM@Z PROC				; btVector3::setZ, COMDAT
; _this$ = ecx
; Line 571
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __z$[ebp]
	fstp	DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	4
?setZ@btVector3@@QAEXM@Z ENDP				; btVector3::setZ
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?nextLine@@YAHPBD@Z
_TEXT	SEGMENT
_numBytesRead$ = -4					; size = 4
_buffer$ = 8						; size = 4
?nextLine@@YAHPBD@Z PROC				; nextLine, COMDAT
; File d:\專題\自建專案\自建專案\src\bulletsoftbody\btsoftbodyhelpers.cpp
; Line 1061
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1062
	mov	DWORD PTR _numBytesRead$[ebp], 0
$LN3@nextLine:
; Line 1064
	mov	eax, DWORD PTR _buffer$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN2@nextLine
; Line 1066
	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, 1
	mov	DWORD PTR _buffer$[ebp], edx
; Line 1067
	mov	eax, DWORD PTR _numBytesRead$[ebp]
	add	eax, 1
	mov	DWORD PTR _numBytesRead$[ebp], eax
; Line 1068
	jmp	SHORT $LN3@nextLine
$LN2@nextLine:
; Line 1071
	mov	ecx, DWORD PTR _buffer$[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN1@nextLine
; Line 1073
	mov	eax, DWORD PTR _buffer$[ebp]
	add	eax, 1
	mov	DWORD PTR _buffer$[ebp], eax
; Line 1074
	mov	ecx, DWORD PTR _numBytesRead$[ebp]
	add	ecx, 1
	mov	DWORD PTR _numBytesRead$[ebp], ecx
$LN1@nextLine:
; Line 1076
	mov	eax, DWORD PTR _numBytesRead$[ebp]
; Line 1077
	mov	esp, ebp
	pop	ebp
	ret	0
?nextLine@@YAHPBD@Z ENDP				; nextLine
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@H@@IAEXXZ		; btAlignedObjectArray<int>::init
PUBLIC	??0?$btAlignedAllocator@H$0BA@@@QAE@XZ		; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@H@@QAE@XZ PROC		; btAlignedObjectArray<int>::btAlignedObjectArray<int>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@H$0BA@@@QAE@XZ	; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@H@@QAE@XZ ENDP		; btAlignedObjectArray<int>::btAlignedObjectArray<int>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@H@@QAEXXZ		; btAlignedObjectArray<int>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@H@@QAE@XZ PROC		; btAlignedObjectArray<int>::~btAlignedObjectArray<int>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@H@@QAEXXZ	; btAlignedObjectArray<int>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@H@@QAE@XZ ENDP		; btAlignedObjectArray<int>::~btAlignedObjectArray<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@H@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@H@@QBEHXZ PROC		; btAlignedObjectArray<int>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@H@@QBEHXZ ENDP		; btAlignedObjectArray<int>::size
_TEXT	ENDS
PUBLIC	??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ ; `string'
;	COMDAT ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
CONST	SEGMENT
??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@ DB 'A'
	DB	'ssert D:\', 0b1H, 'M', 0c3H, 'D\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H
	DB	'M', 0aeH, 0d7H, '\', 0a6H, 0dbH, 0abH, 0d8H, 0b1H, 'M', 0aeH, 0d7H
	DB	'\src\LinearMath/btAlignedObjectArray.h:%u (n>=0)', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??A?$btAlignedObjectArray@H@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@H@@QAEAAHH@Z PROC		; btAlignedObjectArray<int>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@H@@QAEAAHH@Z ENDP		; btAlignedObjectArray<int>::operator[]
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::init
PUBLIC	??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ ; btAlignedAllocator<btVector3,16>::btAlignedAllocator<btVector3,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ PROC	; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ ; btAlignedAllocator<btVector3,16>::btAlignedAllocator<btVector3,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ENDP	; btAlignedObjectArray<btVector3>::btAlignedObjectArray<btVector3>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ ; btAlignedObjectArray<btVector3>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ PROC	; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ ; btAlignedObjectArray<btVector3>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@VbtVector3@@@@QAE@XZ ENDP	; btAlignedObjectArray<btVector3>::~btAlignedObjectArray<btVector3>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ PROC	; btAlignedObjectArray<btVector3>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ENDP	; btAlignedObjectArray<btVector3>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z PROC ; btAlignedObjectArray<btVector3>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@2
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@2:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@VbtVector3@@@@QAEAAVbtVector3@@H@Z ENDP ; btAlignedObjectArray<btVector3>::operator[]
_TEXT	ENDS
PUBLIC	??2btVector3@@SAPAXIPAX@Z			; btVector3::operator new
PUBLIC	?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z ; btAlignedObjectArray<btVector3>::reserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z
_TEXT	SEGMENT
tv84 = -24						; size = 4
$T58256 = -20						; size = 4
_i$51623 = -16						; size = 4
_i$51617 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z PROC ; btAlignedObjectArray<btVector3>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$51617[ebp], ecx
	jmp	SHORT $LN8@resize
$LN7@resize:
	mov	edx, DWORD PTR _i$51617[ebp]
	add	edx, 1
	mov	DWORD PTR _i$51617[ebp], edx
$LN8@resize:
	mov	eax, DWORD PTR _i$51617[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize
; Line 229
	jmp	SHORT $LN7@resize
$LN6@resize:
; Line 230
	jmp	SHORT $LN5@resize
$LN9@resize:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z ; btAlignedObjectArray<btVector3>::reserve
$LN4@resize:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$51623[ebp], edx
	jmp	SHORT $LN3@resize
$LN2@resize:
	mov	eax, DWORD PTR _i$51623[ebp]
	add	eax, 1
	mov	DWORD PTR _i$51623[ebp], eax
$LN3@resize:
	mov	ecx, DWORD PTR _i$51623[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize
; Line 239
	mov	edx, DWORD PTR _i$51623[ebp]
	shl	edx, 4
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+12]
	push	edx
	push	16					; 00000010H
	call	??2btVector3@@SAPAXIPAX@Z		; btVector3::operator new
	add	esp, 8
	mov	DWORD PTR $T58256[ebp], eax
	cmp	DWORD PTR $T58256[ebp], 0
	je	SHORT $LN12@resize
	mov	ecx, DWORD PTR _fillData$[ebp]
	mov	edx, DWORD PTR $T58256[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], ecx
	mov	edx, DWORD PTR $T58256[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN13@resize
$LN12@resize:
	mov	DWORD PTR tv84[ebp], 0
$LN13@resize:
; Line 240
	jmp	SHORT $LN2@resize
$LN5@resize:
; Line 245
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@VbtVector3@@@@QAEXHABVbtVector3@@@Z ENDP ; btAlignedObjectArray<btVector3>::resize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??2btVector3@@SAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_ptr$ = 12						; size = 4
??2btVector3@@SAPAXIPAX@Z PROC				; btVector3::operator new, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btvector3.h
; Line 87
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _ptr$[ebp]
	pop	ebp
	ret	0
??2btVector3@@SAPAXIPAX@Z ENDP				; btVector3::operator new
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Node *>::size, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Node *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Node *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@3
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@3:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUNode@btSoftBody@@@@QAEAAPAUNode@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Node *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Note>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UNote@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Note>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Note>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@4
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@4:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 80					; 00000050H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UNote@btSoftBody@@@@QAEAAUNote@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Note>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Node>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UNode@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Node>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Node>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@5
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@5:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UNode@btSoftBody@@@@QAEAAUNode@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Node>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Link>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@ULink@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Link>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Face>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UFace@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Face>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Face>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@6
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@6:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UFace@btSoftBody@@@@QAEAAUFace@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Face>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Tetra>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UTetra@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Tetra>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@7
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@7:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 112				; 00000070H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UTetra@btSoftBody@@@@QAEAAUTetra@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Tetra>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Anchor>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Anchor>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@8
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@8:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@UAnchor@btSoftBody@@@@QAEAAUAnchor@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Anchor>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::RContact>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@URContact@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::RContact>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::RContact>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@9
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@9:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 144				; 00000090H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@URContact@btSoftBody@@@@QAEAAURContact@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::RContact>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Joint *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Joint *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@10
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@10:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUJoint@btSoftBody@@@@QAEAAPAUJoint@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Joint *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QBEHXZ ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z PROC ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@11
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@11:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@PAUCluster@btSoftBody@@@@QAEAAPAUCluster@btSoftBody@@H@Z ENDP ; btAlignedObjectArray<btSoftBody::Cluster *>::operator[]
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@_N@@IAEXXZ		; btAlignedObjectArray<bool>::init
PUBLIC	??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ		; btAlignedAllocator<bool,16>::btAlignedAllocator<bool,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@_N@@QAE@XZ PROC		; btAlignedObjectArray<bool>::btAlignedObjectArray<bool>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ	; btAlignedAllocator<bool,16>::btAlignedAllocator<bool,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@_N@@IAEXXZ	; btAlignedObjectArray<bool>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@_N@@QAE@XZ ENDP		; btAlignedObjectArray<bool>::btAlignedObjectArray<bool>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@_N@@QAEXXZ	; btAlignedObjectArray<bool>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@_N@@QAE@XZ PROC		; btAlignedObjectArray<bool>::~btAlignedObjectArray<bool>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@_N@@QAEXXZ ; btAlignedObjectArray<bool>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@_N@@QAE@XZ ENDP		; btAlignedObjectArray<bool>::~btAlignedObjectArray<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z PROC		; btAlignedObjectArray<bool>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@12
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@12:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+12]
	add	eax, DWORD PTR _n$[ebp]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@_N@@QAEAA_NH@Z ENDP		; btAlignedObjectArray<bool>::operator[]
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z	; btAlignedObjectArray<bool>::reserve
PUBLIC	?size@?$btAlignedObjectArray@_N@@QBEHXZ		; btAlignedObjectArray<bool>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z
_TEXT	SEGMENT
tv82 = -24						; size = 4
$T58307 = -20						; size = 4
_i$51734 = -16						; size = 4
_i$51728 = -12						; size = 4
_curSize$ = -8						; size = 4
_this$ = -4						; size = 4
_newsize$ = 8						; size = 4
_fillData$ = 12						; size = 4
?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z PROC	; btAlignedObjectArray<bool>::resize, COMDAT
; _this$ = ecx
; Line 221
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	mov	DWORD PTR _curSize$[ebp], eax
; Line 224
	mov	eax, DWORD PTR _newsize$[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN9@resize@2
; Line 226
	mov	ecx, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR _i$51728[ebp], ecx
	jmp	SHORT $LN8@resize@2
$LN7@resize@2:
	mov	edx, DWORD PTR _i$51728[ebp]
	add	edx, 1
	mov	DWORD PTR _i$51728[ebp], edx
$LN8@resize@2:
	mov	eax, DWORD PTR _i$51728[ebp]
	cmp	eax, DWORD PTR _curSize$[ebp]
	jge	SHORT $LN6@resize@2
; Line 229
	jmp	SHORT $LN7@resize@2
$LN6@resize@2:
; Line 230
	jmp	SHORT $LN5@resize@2
$LN9@resize@2:
; Line 232
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	cmp	DWORD PTR _newsize$[ebp], eax
	jle	SHORT $LN4@resize@2
; Line 234
	mov	ecx, DWORD PTR _newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z ; btAlignedObjectArray<bool>::reserve
$LN4@resize@2:
; Line 237
	mov	edx, DWORD PTR _curSize$[ebp]
	mov	DWORD PTR _i$51734[ebp], edx
	jmp	SHORT $LN3@resize@2
$LN2@resize@2:
	mov	eax, DWORD PTR _i$51734[ebp]
	add	eax, 1
	mov	DWORD PTR _i$51734[ebp], eax
$LN3@resize@2:
	mov	ecx, DWORD PTR _i$51734[ebp]
	cmp	ecx, DWORD PTR _newsize$[ebp]
	jge	SHORT $LN5@resize@2
; Line 239
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _i$51734[ebp]
	push	eax
	push	1
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T58307[ebp], eax
	cmp	DWORD PTR $T58307[ebp], 0
	je	SHORT $LN12@resize@2
	mov	ecx, DWORD PTR $T58307[ebp]
	mov	edx, DWORD PTR _fillData$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR $T58307[ebp]
	mov	DWORD PTR tv82[ebp], ecx
	jmp	SHORT $LN13@resize@2
$LN12@resize@2:
	mov	DWORD PTR tv82[ebp], 0
$LN13@resize@2:
; Line 240
	jmp	SHORT $LN2@resize@2
$LN5@resize@2:
; Line 245
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newsize$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 246
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?resize@?$btAlignedObjectArray@_N@@QAEXHAB_N@Z ENDP	; btAlignedObjectArray<bool>::resize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\new
; Line 56
	push	ebp
	mov	ebp, esp
; Line 57
	mov	eax, DWORD PTR __Where$[ebp]
; Line 58
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@_N@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@_N@@QBEHXZ PROC		; btAlignedObjectArray<bool>::size, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@_N@@QBEHXZ ENDP		; btAlignedObjectArray<bool>::size
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@I@@IAEXXZ		; btAlignedObjectArray<unsigned int>::init
PUBLIC	??0?$btAlignedAllocator@I$0BA@@@QAE@XZ		; btAlignedAllocator<unsigned int,16>::btAlignedAllocator<unsigned int,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@I@@QAE@XZ PROC		; btAlignedObjectArray<unsigned int>::btAlignedObjectArray<unsigned int>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@I$0BA@@@QAE@XZ	; btAlignedAllocator<unsigned int,16>::btAlignedAllocator<unsigned int,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@I@@IAEXXZ	; btAlignedObjectArray<unsigned int>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@I@@QAE@XZ ENDP		; btAlignedObjectArray<unsigned int>::btAlignedObjectArray<unsigned int>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@I@@QAEXXZ		; btAlignedObjectArray<unsigned int>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@I@@QAE@XZ PROC		; btAlignedObjectArray<unsigned int>::~btAlignedObjectArray<unsigned int>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@I@@QAEXXZ	; btAlignedObjectArray<unsigned int>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@I@@QAE@XZ ENDP		; btAlignedObjectArray<unsigned int>::~btAlignedObjectArray<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@I@@QAEAAIH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@I@@QAEAAIH@Z PROC		; btAlignedObjectArray<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@13
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@13:
; Line 179
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _n$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@I@@QAEAAIH@Z ENDP		; btAlignedObjectArray<unsigned int>::operator[]
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ ; btAlignedObjectArray<btHullTriangle *>::init
PUBLIC	??0?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAE@XZ ; btAlignedAllocator<btHullTriangle *,16>::btAlignedAllocator<btHullTriangle *,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ PROC ; btAlignedObjectArray<btHullTriangle *>::btAlignedObjectArray<btHullTriangle *>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAE@XZ ; btAlignedAllocator<btHullTriangle *,16>::btAlignedAllocator<btHullTriangle *,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ ; btAlignedObjectArray<btHullTriangle *>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ ENDP ; btAlignedObjectArray<btHullTriangle *>::btAlignedObjectArray<btHullTriangle *>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAEXXZ ; btAlignedObjectArray<btHullTriangle *>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ PROC ; btAlignedObjectArray<btHullTriangle *>::~btAlignedObjectArray<btHullTriangle *>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAEXXZ ; btAlignedObjectArray<btHullTriangle *>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAE@XZ ENDP ; btAlignedObjectArray<btHullTriangle *>::~btAlignedObjectArray<btHullTriangle *>
_TEXT	ENDS
PUBLIC	?init@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::init
PUBLIC	??0?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAE@XZ ; btAlignedAllocator<btConvexHullComputer::Edge,16>::btAlignedAllocator<btConvexHullComputer::Edge,16>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ PROC ; btAlignedObjectArray<btConvexHullComputer::Edge>::btAlignedObjectArray<btConvexHullComputer::Edge>, COMDAT
; _this$ = ecx
; Line 126
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAE@XZ ; btAlignedAllocator<btConvexHullComputer::Edge,16>::btAlignedAllocator<btConvexHullComputer::Edge,16>
; Line 128
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::init
; Line 129
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ ENDP ; btAlignedObjectArray<btConvexHullComputer::Edge>::btAlignedObjectArray<btConvexHullComputer::Edge>
_TEXT	ENDS
PUBLIC	?clear@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEXXZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ PROC ; btAlignedObjectArray<btConvexHullComputer::Edge>::~btAlignedObjectArray<btConvexHullComputer::Edge>, COMDAT
; _this$ = ecx
; Line 132
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 133
	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEXXZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::clear
; Line 134
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAE@XZ ENDP ; btAlignedObjectArray<btConvexHullComputer::Edge>::~btAlignedObjectArray<btConvexHullComputer::Edge>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEAAVEdge@btConvexHullComputer@@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
??A?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEAAVEdge@btConvexHullComputer@@H@Z PROC ; btAlignedObjectArray<btConvexHullComputer::Edge>::operator[], COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 177
	cmp	DWORD PTR _n$[ebp], 0
	jge	SHORT $LN1@operator@14
	push	177					; 000000b1H
	push	OFFSET ??_C@_0FC@JDHLDEBH@Assert?5D?3?2?$LBM?CD?2?$KG?$NL?$KL?X?$LBM?$KO?W?2?$KG?$NL?$KL?X?$LBM?$KO?W@
	call	_printf
	add	esp, 8
	int	3
$LN1@operator@14:
; Line 179
	mov	eax, DWORD PTR _n$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+12]
; Line 180
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEAAVEdge@btConvexHullComputer@@H@Z ENDP ; btAlignedObjectArray<btConvexHullComputer::Edge>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@H@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@H@@IAEXXZ PROC		; btAlignedObjectArray<int>::init, COMDAT
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@H@@IAEXXZ ENDP		; btAlignedObjectArray<int>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z	; btAlignedObjectArray<int>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@H@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@H@@QAEXXZ PROC		; btAlignedObjectArray<int>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@H@@QBEHXZ	; btAlignedObjectArray<int>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z ; btAlignedObjectArray<int>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@H@@IAEXXZ ; btAlignedObjectArray<int>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@H@@IAEXXZ	; btAlignedObjectArray<int>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@H@@QAEXXZ ENDP		; btAlignedObjectArray<int>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@H$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@H$0BA@@@QAE@XZ PROC		; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@H$0BA@@@QAE@XZ ENDP		; btAlignedAllocator<int,16>::btAlignedAllocator<int,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ PROC	; btAlignedObjectArray<btVector3>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ENDP	; btAlignedObjectArray<btVector3>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z ; btAlignedObjectArray<btVector3>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ PROC	; btAlignedObjectArray<btVector3>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z ; btAlignedObjectArray<btVector3>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@VbtVector3@@@@QAEXXZ ENDP	; btAlignedObjectArray<btVector3>::clear
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z ; btAlignedObjectArray<btVector3>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z
_TEXT	SEGMENT
_s$52867 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z PROC ; btAlignedObjectArray<btVector3>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z ; btAlignedObjectArray<btVector3>::allocate
	mov	DWORD PTR _s$52867[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$52867[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z ; btAlignedObjectArray<btVector3>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ; btAlignedObjectArray<btVector3>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z ; btAlignedObjectArray<btVector3>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ; btAlignedObjectArray<btVector3>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$52867[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@VbtVector3@@@@QAEXH@Z ENDP ; btAlignedObjectArray<btVector3>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ PROC	; btAlignedAllocator<btVector3,16>::btAlignedAllocator<btVector3,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@VbtVector3@@$0BA@@@QAE@XZ ENDP	; btAlignedAllocator<btVector3,16>::btAlignedAllocator<btVector3,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@_N@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@_N@@IAEXXZ PROC		; btAlignedObjectArray<bool>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@_N@@IAEXXZ ENDP		; btAlignedObjectArray<bool>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ	; btAlignedObjectArray<bool>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z	; btAlignedObjectArray<bool>::destroy
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@_N@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@_N@@QAEXXZ PROC		; btAlignedObjectArray<bool>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z ; btAlignedObjectArray<bool>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ ; btAlignedObjectArray<bool>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@_N@@IAEXXZ	; btAlignedObjectArray<bool>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@_N@@QAEXXZ ENDP		; btAlignedObjectArray<bool>::clear
_TEXT	ENDS
PUBLIC	?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z	; btAlignedObjectArray<bool>::copy
PUBLIC	?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z	; btAlignedObjectArray<bool>::allocate
PUBLIC	?capacity@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::capacity
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z
_TEXT	SEGMENT
_s$52919 = -8						; size = 4
_this$ = -4						; size = 4
__Count$ = 8						; size = 4
?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z PROC	; btAlignedObjectArray<bool>::reserve, COMDAT
; _this$ = ecx
; Line 301
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$btAlignedObjectArray@_N@@QBEHXZ ; btAlignedObjectArray<bool>::capacity
	cmp	eax, DWORD PTR __Count$[ebp]
	jge	SHORT $LN2@reserve@2
; Line 304
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z ; btAlignedObjectArray<bool>::allocate
	mov	DWORD PTR _s$52919[ebp], eax
; Line 306
	mov	ecx, DWORD PTR _s$52919[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z ; btAlignedObjectArray<bool>::copy
; Line 308
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@_N@@QBEHXZ	; btAlignedObjectArray<bool>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z ; btAlignedObjectArray<bool>::destroy
; Line 310
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ ; btAlignedObjectArray<bool>::deallocate
; Line 313
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+16], 1
; Line 315
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _s$52919[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 317
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@reserve@2:
; Line 320
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?reserve@?$btAlignedObjectArray@_N@@QAEXH@Z ENDP	; btAlignedObjectArray<bool>::reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ PROC		; btAlignedAllocator<bool,16>::btAlignedAllocator<bool,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@_N$0BA@@@QAE@XZ ENDP		; btAlignedAllocator<bool,16>::btAlignedAllocator<bool,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@I@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@I@@IAEXXZ PROC		; btAlignedObjectArray<unsigned int>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@I@@IAEXXZ ENDP		; btAlignedObjectArray<unsigned int>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@I@@IAEXXZ	; btAlignedObjectArray<unsigned int>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@I@@IAEXHH@Z	; btAlignedObjectArray<unsigned int>::destroy
PUBLIC	?size@?$btAlignedObjectArray@I@@QBEHXZ		; btAlignedObjectArray<unsigned int>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@I@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@I@@QAEXXZ PROC		; btAlignedObjectArray<unsigned int>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@I@@QBEHXZ	; btAlignedObjectArray<unsigned int>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@I@@IAEXHH@Z ; btAlignedObjectArray<unsigned int>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@I@@IAEXXZ ; btAlignedObjectArray<unsigned int>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@I@@IAEXXZ	; btAlignedObjectArray<unsigned int>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@I@@QAEXXZ ENDP		; btAlignedObjectArray<unsigned int>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@I$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@I$0BA@@@QAE@XZ PROC		; btAlignedAllocator<unsigned int,16>::btAlignedAllocator<unsigned int,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@I$0BA@@@QAE@XZ ENDP		; btAlignedAllocator<unsigned int,16>::btAlignedAllocator<unsigned int,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ PROC ; btAlignedObjectArray<btHullTriangle *>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ ENDP ; btAlignedObjectArray<btHullTriangle *>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ ; btAlignedObjectArray<btHullTriangle *>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXHH@Z ; btAlignedObjectArray<btHullTriangle *>::destroy
PUBLIC	?size@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QBEHXZ ; btAlignedObjectArray<btHullTriangle *>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAEXXZ PROC ; btAlignedObjectArray<btHullTriangle *>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QBEHXZ ; btAlignedObjectArray<btHullTriangle *>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXHH@Z ; btAlignedObjectArray<btHullTriangle *>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ ; btAlignedObjectArray<btHullTriangle *>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ ; btAlignedObjectArray<btHullTriangle *>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QAEXXZ ENDP ; btAlignedObjectArray<btHullTriangle *>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btHullTriangle *,16>::btAlignedAllocator<btHullTriangle *,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btHullTriangle *,16>::btAlignedAllocator<btHullTriangle *,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?init@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?init@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ PROC ; btAlignedObjectArray<btConvexHullComputer::Edge>::init, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
; Line 90
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 91
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 92
	mov	esp, ebp
	pop	ebp
	ret	0
?init@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ ENDP ; btAlignedObjectArray<btConvexHullComputer::Edge>::init
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::deallocate
PUBLIC	?destroy@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXHH@Z ; btAlignedObjectArray<btConvexHullComputer::Edge>::destroy
PUBLIC	?size@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QBEHXZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?clear@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEXXZ PROC ; btAlignedObjectArray<btConvexHullComputer::Edge>::clear, COMDAT
; _this$ = ecx
; Line 185
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	call	?size@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QBEHXZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::size
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?destroy@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXHH@Z ; btAlignedObjectArray<btConvexHullComputer::Edge>::destroy
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::deallocate
; Line 190
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ ; btAlignedObjectArray<btConvexHullComputer::Edge>::init
; Line 191
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QAEXXZ ENDP ; btAlignedObjectArray<btConvexHullComputer::Edge>::clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAE@XZ PROC ; btAlignedAllocator<btConvexHullComputer::Edge,16>::btAlignedAllocator<btConvexHullComputer::Edge,16>, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAE@XZ ENDP ; btAlignedAllocator<btConvexHullComputer::Edge,16>::btAlignedAllocator<btConvexHullComputer::Edge,16>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z PROC	; btAlignedObjectArray<int>::destroy, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedobjectarray.h
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy
$LN2@destroy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy
; Line 99
	jmp	SHORT $LN2@destroy
$LN4@destroy:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@H@@IAEXHH@Z ENDP	; btAlignedObjectArray<int>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z ; btAlignedAllocator<int,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@H@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@H@@IAEXXZ PROC	; btAlignedObjectArray<int>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z ; btAlignedAllocator<int,16>::deallocate
$LN1@deallocate:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@H@@IAEXXZ ENDP	; btAlignedObjectArray<int>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T58376 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z PROC ; btAlignedObjectArray<btVector3>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy
$LN2@copy:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy
; Line 79
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _dest$[ebp]
	push	eax
	push	16					; 00000010H
	call	??2btVector3@@SAPAXIPAX@Z		; btVector3::operator new
	add	esp, 8
	mov	DWORD PTR $T58376[ebp], eax
	cmp	DWORD PTR $T58376[ebp], 0
	je	SHORT $LN6@copy
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, ecx
	mov	ecx, DWORD PTR $T58376[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR $T58376[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN7@copy
$LN6@copy:
	mov	DWORD PTR tv76[ebp], 0
$LN7@copy:
	jmp	SHORT $LN2@copy
$LN4@copy:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@VbtVector3@@@@IBEXHHPAVbtVector3@@@Z ENDP ; btAlignedObjectArray<btVector3>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btVector3>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@2
$LN2@destroy@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@2
; Line 99
	jmp	SHORT $LN2@destroy@2
$LN4@destroy@2:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@VbtVector3@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btVector3>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z ; btAlignedAllocator<btVector3,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z PROC ; btAlignedObjectArray<btVector3>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z ; btAlignedAllocator<btVector3,16>::allocate
	jmp	SHORT $LN2@allocate
$LN1@allocate:
; Line 106
	xor	eax, eax
$LN2@allocate:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@VbtVector3@@@@IAEPAXH@Z ENDP ; btAlignedObjectArray<btVector3>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z ; btAlignedAllocator<btVector3,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ PROC ; btAlignedObjectArray<btVector3>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@2
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@2
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z ; btAlignedAllocator<btVector3,16>::deallocate
$LN1@deallocate@2:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@2:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@VbtVector3@@@@IAEXXZ ENDP ; btAlignedObjectArray<btVector3>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ PROC ; btAlignedObjectArray<btVector3>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@VbtVector3@@@@QBEHXZ ENDP ; btAlignedObjectArray<btVector3>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z
_TEXT	SEGMENT
tv73 = -16						; size = 4
$T58389 = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_start$ = 8						; size = 4
_end$ = 12						; size = 4
_dest$ = 16						; size = 4
?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z PROC	; btAlignedObjectArray<bool>::copy, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@copy@2
$LN2@copy@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@copy@2:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _end$[ebp]
	jge	SHORT $LN4@copy@2
; Line 79
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	push	eax
	push	1
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T58389[ebp], eax
	cmp	DWORD PTR $T58389[ebp], 0
	je	SHORT $LN6@copy@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR $T58389[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	dl, BYTE PTR [edx+ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR $T58389[ebp]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN7@copy@2
$LN6@copy@2:
	mov	DWORD PTR tv73[ebp], 0
$LN7@copy@2:
	jmp	SHORT $LN2@copy@2
$LN4@copy@2:
; Line 83
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?copy@?$btAlignedObjectArray@_N@@IBEXHHPA_N@Z ENDP	; btAlignedObjectArray<bool>::copy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z PROC	; btAlignedObjectArray<bool>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@3
$LN2@destroy@3:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@3:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@3
; Line 99
	jmp	SHORT $LN2@destroy@3
$LN4@destroy@3:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@_N@@IAEXHH@Z ENDP	; btAlignedObjectArray<bool>::destroy
_TEXT	ENDS
PUBLIC	?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z ; btAlignedAllocator<bool,16>::allocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z PROC	; btAlignedObjectArray<bool>::allocate, COMDAT
; _this$ = ecx
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 104
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@allocate@2
; Line 105
	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z ; btAlignedAllocator<bool,16>::allocate
	jmp	SHORT $LN2@allocate@2
$LN1@allocate@2:
; Line 106
	xor	eax, eax
$LN2@allocate@2:
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$btAlignedObjectArray@_N@@IAEPAXH@Z ENDP	; btAlignedObjectArray<bool>::allocate
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z ; btAlignedAllocator<bool,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ PROC	; btAlignedObjectArray<bool>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@3
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@3
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z ; btAlignedAllocator<bool,16>::deallocate
$LN1@deallocate@3:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@3:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@_N@@IAEXXZ ENDP	; btAlignedObjectArray<bool>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?capacity@?$btAlignedObjectArray@_N@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$btAlignedObjectArray@_N@@QBEHXZ PROC	; btAlignedObjectArray<bool>::capacity, COMDAT
; _this$ = ecx
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 297
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 298
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$btAlignedObjectArray@_N@@QBEHXZ ENDP	; btAlignedObjectArray<bool>::capacity
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@I@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@I@@IAEXHH@Z PROC	; btAlignedObjectArray<unsigned int>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@4
$LN2@destroy@4:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@4:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@4
; Line 99
	jmp	SHORT $LN2@destroy@4
$LN4@destroy@4:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@I@@IAEXHH@Z ENDP	; btAlignedObjectArray<unsigned int>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@I$0BA@@@QAEXPAI@Z ; btAlignedAllocator<unsigned int,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@I@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@I@@IAEXXZ PROC	; btAlignedObjectArray<unsigned int>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@4
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@4
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@I$0BA@@@QAEXPAI@Z ; btAlignedAllocator<unsigned int,16>::deallocate
$LN1@deallocate@4:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@4:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@I@@IAEXXZ ENDP	; btAlignedObjectArray<unsigned int>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@I@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@I@@QBEHXZ PROC		; btAlignedObjectArray<unsigned int>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@I@@QBEHXZ ENDP		; btAlignedObjectArray<unsigned int>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btHullTriangle *>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@5
$LN2@destroy@5:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@5:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@5
; Line 99
	jmp	SHORT $LN2@destroy@5
$LN4@destroy@5:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btHullTriangle *>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAEXPAPAVbtHullTriangle@@@Z ; btAlignedAllocator<btHullTriangle *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ PROC ; btAlignedObjectArray<btHullTriangle *>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@5
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@5
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAEXPAPAVbtHullTriangle@@@Z ; btAlignedAllocator<btHullTriangle *,16>::deallocate
$LN1@deallocate@5:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@5:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@PAVbtHullTriangle@@@@IAEXXZ ENDP ; btAlignedObjectArray<btHullTriangle *>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QBEHXZ PROC ; btAlignedObjectArray<btHullTriangle *>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@PAVbtHullTriangle@@@@QBEHXZ ENDP ; btAlignedObjectArray<btHullTriangle *>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?destroy@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXHH@Z
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_first$ = 8						; size = 4
_last$ = 12						; size = 4
?destroy@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXHH@Z PROC ; btAlignedObjectArray<btConvexHullComputer::Edge>::destroy, COMDAT
; _this$ = ecx
; Line 94
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 96
	mov	eax, DWORD PTR _first$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN3@destroy@6
$LN2@destroy@6:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@destroy@6:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _last$[ebp]
	jge	SHORT $LN4@destroy@6
; Line 99
	jmp	SHORT $LN2@destroy@6
$LN4@destroy@6:
; Line 100
	mov	esp, ebp
	pop	ebp
	ret	8
?destroy@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXHH@Z ENDP ; btAlignedObjectArray<btConvexHullComputer::Edge>::destroy
_TEXT	ENDS
PUBLIC	?deallocate@?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAEXPAVEdge@btConvexHullComputer@@@Z ; btAlignedAllocator<btConvexHullComputer::Edge,16>::deallocate
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?deallocate@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?deallocate@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ PROC ; btAlignedObjectArray<btConvexHullComputer::Edge>::deallocate, COMDAT
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@deallocate@6
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	test	edx, edx
	je	SHORT $LN1@deallocate@6
; Line 115
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?deallocate@?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAEXPAVEdge@btConvexHullComputer@@@Z ; btAlignedAllocator<btConvexHullComputer::Edge,16>::deallocate
$LN1@deallocate@6:
; Line 117
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@deallocate@6:
; Line 119
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@IAEXXZ ENDP ; btAlignedObjectArray<btConvexHullComputer::Edge>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?size@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QBEHXZ PROC ; btAlignedObjectArray<btConvexHullComputer::Edge>::size, COMDAT
; _this$ = ecx
; Line 150
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 151
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
; Line 152
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$btAlignedObjectArray@VEdge@btConvexHullComputer@@@@QBEHXZ ENDP ; btAlignedObjectArray<btConvexHullComputer::Edge>::size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z PROC	; btAlignedAllocator<int,16>::deallocate, COMDAT
; _this$ = ecx
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@H$0BA@@@QAEXPAH@Z ENDP	; btAlignedAllocator<int,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z PROC ; btAlignedAllocator<btVector3,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	shl	eax, 4
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEPAVbtVector3@@HPAPBV2@@Z ENDP ; btAlignedAllocator<btVector3,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z PROC ; btAlignedAllocator<btVector3,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@VbtVector3@@$0BA@@@QAEXPAVbtVector3@@@Z ENDP ; btAlignedAllocator<btVector3,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
_hint$ = 12						; size = 4
?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z PROC ; btAlignedAllocator<bool,16>::allocate, COMDAT
; _this$ = ecx
; Line 84
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 86
	push	16					; 00000010H
	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	call	?btAlignedAllocInternal@@YAPAXIH@Z	; btAlignedAllocInternal
	add	esp, 8
; Line 87
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?allocate@?$btAlignedAllocator@_N$0BA@@@QAEPA_NHPAPB_N@Z ENDP ; btAlignedAllocator<bool,16>::allocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z PROC ; btAlignedAllocator<bool,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@_N$0BA@@@QAEXPA_N@Z ENDP ; btAlignedAllocator<bool,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@I$0BA@@@QAEXPAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@I$0BA@@@QAEXPAI@Z PROC	; btAlignedAllocator<unsigned int,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@I$0BA@@@QAEXPAI@Z ENDP	; btAlignedAllocator<unsigned int,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAEXPAPAVbtHullTriangle@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAEXPAPAVbtHullTriangle@@@Z PROC ; btAlignedAllocator<btHullTriangle *,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@PAVbtHullTriangle@@$0BA@@@QAEXPAPAVbtHullTriangle@@@Z ENDP ; btAlignedAllocator<btHullTriangle *,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?deallocate@?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAEXPAVEdge@btConvexHullComputer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ptr$ = 8						; size = 4
?deallocate@?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAEXPAVEdge@btConvexHullComputer@@@Z PROC ; btAlignedAllocator<btConvexHullComputer::Edge,16>::deallocate, COMDAT
; _this$ = ecx
; Line 89
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 90
	mov	eax, DWORD PTR _ptr$[ebp]
	push	eax
	call	?btAlignedFreeInternal@@YAXPAX@Z	; btAlignedFreeInternal
	add	esp, 4
; Line 91
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?deallocate@?$btAlignedAllocator@VEdge@btConvexHullComputer@@$0BA@@@QAEXPAVEdge@btConvexHullComputer@@@Z ENDP ; btAlignedAllocator<btConvexHullComputer::Edge,16>::deallocate
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$btMax@H@@YAABHABH0@Z
_TEXT	SEGMENT
tv65 = -8						; size = 4
$T58436 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$btMax@H@@YAABHABH0@Z PROC				; btMax<int>, COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btminmax.h
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 31
	mov	eax, DWORD PTR _a$[ebp]
	mov	ecx, DWORD PTR _b$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jle	SHORT $LN3@btMax
	mov	eax, DWORD PTR _a$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@btMax
$LN3@btMax:
	mov	ecx, DWORD PTR _b$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@btMax:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T58436[ebp], edx
	mov	eax, DWORD PTR $T58436[ebp]
; Line 32
	mov	esp, ebp
	pop	ebp
	ret	0
??$btMax@H@@YAABHABH0@Z ENDP				; btMax<int>
_TEXT	ENDS
PUBLIC	??0id@locale@std@@QAE@I@Z			; std::locale::id::id
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id'', COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id''
; Function compile flags: /Odtp /RTCsu
text$yc	ENDS
;	COMDAT ??0id@locale@std@@QAE@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val$ = 8						; size = 4
??0id@locale@std@@QAE@I@Z PROC				; std::locale::id::id, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\xlocale
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0id@locale@std@@QAE@I@Z ENDP				; std::locale::id::id
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$yc	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT
; File d:\專題\自建專案\自建專案\src\linearmath\btalignedallocator.h
; Line 84
	push	ebp
	mov	ebp, esp
	push	0
	mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
	call	??0id@locale@std@@QAE@I@Z		; std::locale::id::id
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$yc	ENDS
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZA DD FLAT:??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id$initializer$
CRT$XCU	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?id$initializer$@?$numpunct@D@std@@2P6AXXZA DD FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; std::numpunct<char>::id$initializer$
CRT$XCU	ENDS
END
